project Rest {


	import IIPEcosphere;
	import RestPhoenixEEMMixed;
	
	annotate BindingTime bindingTime = BindingTime::compile to .;

	// ------------------ component setup --------------------
	
	serializer = Serializer::Json;
    // serviceManager, containerManager are already defined    

    aasServer = {
        schema = AasSchema::HTTP,
        port = 9001,
        host = "127.0.0.1"
    };
    aasRegistryServer = {
        schema = AasSchema::HTTP,
        port = 9002,
        host = "127.0.0.1",
        path = "registry"
    };
    aasImplServer = {
        port = 9003
    };
    aasProtocol = AasProtocolVabTcp{};
	
	
	// ------------------ transport --------------------------
	
	transportProtocol = TransportProtocolMQTTv5 {
        port = 8883
    };

    serviceProtocol = ServiceProtocolMQTTv5 {};
	
	
	// ------------------ resources/devicemgt ----------------
	
	deviceRegistry = BasicDeviceRegistry {
    };

    deviceMgtStorage = S3MockDeviceMgtStorage {
        host = "localhost",
        port = 8884,
        region = "local"
    };

    // just for testing, this instantiates app rather than platform
    deviceMgtStorageServer = S3MockDeviceMgtStorageServer{};
	
	
	
	// ------------------ data types -------------------------
	
	// see externalized Files: .......
	
	
	// ------------ individual, reusable services ------------
	RestConnector myRestConnEEMMixed = {
		id = "myRestConnEEMMixed",
		name = "myRestConnEEMMixed example",
		description = "RESTConnector example for Phoenix Contract EmPro",
		ver = "0.1.0",
			
		input = {{type=refBy(restPhoenixRwEEMMixed)}},
		output = {{type=refBy(restPhoenixEEMMixed)}},
		inInterface = {{type=refBy(restPhoenixRwEEMMixed)}},
		outInterface = {{type=refBy(restPhoenixEEMMixed)}}
	};
	
	
	// not really needed except for populating the interfaces package
    Service myReceiverService = JavaService {
        id = "RestReceiver",
        name = "REST Receiver",
        description = "Reciver for RESTConnector example",
        ver = "0.1.0",
        deployable = true,
        class = "ReceiverImpl",
        artifact = "",
        kind = ServiceKind::SINK_SERVICE,
        input = {{type=refBy(restPhoenixEEMMixed)}}
    };
	
	// --------------------- monitoring ----------------------
	
	// current default: no monitoring configured
	
	
	// ------------------------- UI --------------------------
	
	// current default: no UI configured
	
	
	// ------------ application and service nets -------------
	
	 Application myRestApp = {
        id = "myRestApp",
        name = "Simple REST Demo App",
        ver = "0.1.0",
        description = "",
        services = {refBy(myMesh)}        
    };
	
	 ServiceMesh myMesh = {
        description = "REST Service Net",
        sources = {refBy(mySourceMixed)} 
    };
    
    
    MeshSource mySourceMixed = {
       impl = refBy(myRestConnEEMMixed),
       next = {refBy(myConnMySourceMyReceiver)}
    };
    
	
	MeshConnector myConnMySourceMyReceiver = {
        name = "Source->Receiver",
        next = refBy(myReceiver)
    };
	
	MeshSink myReceiver = {
        impl = refBy(myReceiverService)
    };
	
	
	// ------------------ generation setup -------------------
	
	sharedInterfaces = true;
    sharedArtifact = "de.iip-ecosphere.platform:apps.RESTAppInterfaces:" + iipVer;
	
	
	// ---------------------- freezing -----------------------
	
	freeze {
        aas;
        aasServer;
        aasRegistryServer;
        aasImplServer;
        aasPersistency;
        aasProtocol;
        serializer;
        transportProtocol;
        serviceManager;
        serviceProtocol;
        containerManager;
        deviceMgtStorageServer;
        deviceMgtStorage;
        deviceRegistry;
        javaModuleOpts;
        javaOpts;
        pidDir;
        sharedInterfaces;
        sharedArtifact;
        platformMonitoring;
        managementUi;
        artifactsFolder;
        artifactsUriPrefix;
        .; // every variable declared in this project
    } but (f|f.bindingTime >= BindingTime.runtimeMon);
}