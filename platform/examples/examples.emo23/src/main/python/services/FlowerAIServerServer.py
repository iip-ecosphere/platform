from interfaces.FlowerAIServerServerInterface import FlowerAIServerServerInterface
from threading import Thread
import configparser
from Service import ServiceState
import flwr as fl
from services.flowers.Client import Client
from services.flowers.Strategy import Strategy
from services.flowers.utils import bcolors, truncate

"""Do not utilise global code here. Place the needed function in the start / end methods.
   Add methods needed to be run on the start of a service in the start or end methods NOT in init()"""

class FlowerAIServerServer(FlowerAIServerServerInterface):
    """Partially implemented server for "FlowerAIServer"
       Generated by: EASy-Producer."""
    
    def __init__(self):
        """Initializes the server service."""
        self.IP = "127.0.0.1:8063"
        self.config = None
        super().__init__()
    
    def start(self):
        """Called when the server shall start.
        """
        print("Starting flower server")
        # flower code for set state to STARTING
        #self.IP = self.getNetMgtKeyAddress()
        self.IP = self.getNetMgtKeyAddress()
        self.thread = Thread(target=self.runServerMethod)
        self.thread.start()

    def stop(self):
        """Called when the server shall stop.
        """
        print("Stopping flower server")
        # flower code for set state to STOPPING
        self.thread.stop()

        

    def runServerMethod(self):  
        self.config = configparser.ConfigParser()
        self.config.read('services/flowers/config.ini')
        """started via thread runner in python"""
        if self.IP is None:
            self.IP = "127.0.0.1:8063" # local fallback for now
            
        
        def get_on_fit_config_fn():
            """Return a function which returns training configurations."""
            def fit_config(rnd: int):
                config = {
                    "round": rnd,
                    "hello": "world"
                }
                return config
            return fit_config
        
        def evaluate_config(rnd: int):
            val_steps = 5 if rnd < 4 else 10
            return {"val_steps": val_steps}

        stra = Strategy(   
            min_evaluate_clients=int(self.config["fl"]["clients"]),
            min_available_clients=int(self.config["fl"]["clients"]),
            min_fit_clients=int(self.config["fl"]["clients"]),
            on_evaluate_config_fn=evaluate_config,
            on_fit_config_fn=get_on_fit_config_fn()
        )
        
        print("STARTING FLOWERSERVER ON SERVER IP: ", self.IP)
        fl.server.start_server(server_address=self.IP, config=fl.server.ServerConfig(num_rounds=int(self.config["fl"]["rounds"]), ), strategy=stra)
        

#registers itself
FlowerAIServerServer()
