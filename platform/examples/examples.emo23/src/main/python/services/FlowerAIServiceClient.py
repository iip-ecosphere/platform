import iip.Registry
from Version import Version
from Service import ServiceState
from Service import ServiceKind
from Service import Service
import flwr as fl
from threading import Thread
from threading import Event
from datatypes.ImageInput import ImageInput
from datatypes.ImageInputImpl import ImageInputImpl
from datatypes.Command import Command
from datatypes.CommandImpl import CommandImpl
from datatypes.AiResult import AiResult
from datatypes.AiResultImpl import AiResultImpl
from interfaces.FlowerAIServiceClientInterface import FlowerAIServiceClientInterface
from services.flowers.Client import Client
from services.flowers.utils import encode_img
import tensorflow as tf
gpus = tf.config.experimental.list_physical_devices('GPU')
for gpu in gpus:
    tf.config.set_logical_device_configuration(gpu,[tf.config.LogicalDeviceConfiguration(memory_limit=1024)])
    
from urllib.request import url2pathname
from urllib.parse import urlparse
import sys
import os
os.environ['TF_GPU_ALLOCATOR'] = 'cuda_malloc_async'
import configparser
import pickle
import json

import random

"""Do not utilise global code here. Place the needed function in the start / end methods.
   Add methods needed to be run on the start of a service in the start or end methods NOT in init()"""

class FlowerAIServiceClient(FlowerAIServiceClientInterface):
    """Template service implementation for FlowerAIServiceClient
       Generated by: EASy-Producer."""
    
    def __init__(self):
        """Initializes the service.""" 
        super().__init__()
        self.IP = self.getNetMgtKeyAddress()
        self.clientRunning = False
        self.event = Event()
        self.imagecountPerm = 0  # to continuasly count the images for naming
        if self.IP is None:
            # fallback, then server is not relocatable anymore
            self.IP = "127.0.0.1:8063"
        self.tempImages = {}
    
    def processImageInput(self, data: ImageInput):
        """Asynchronous data processing method. Use self.ingest(data) to pass the result back to the data stream
           Possible output types: AiResultImpl
    
        Parameters:
          - data -- the data to process
        """
        print("CLIENT HAS RECEIVING THE INPUT IMAGE ")
        
        
        config = configparser.ConfigParser()
        config.read('services/flowers/config.ini')
        #temporarily stores the images of an iteration, will be overwritten by the next one!

        
        urlarray = data.getImageUri().split(';')
        print("URLS: " , urlarray[0], urlarray[1], "SIDE", data.getSide())
        self.tempImages[data.getSide()] = encode_img(url2pathname(urlparse(urlarray[1]).path))
        #get some variables 
        ID = 1
        #get client data 
        data_path = "services/flowers/data/messe_geo_fl_2.pickle"
        #MOVE CLIENT TO THREAD!
        if not self.event.is_set():
            print("IS A CLIENT ALREADY RUNNING?! ", self.event.is_set())
            self.thread = Thread(target=self.startClient, args=(self.IP, self.event))
            self.thread.start()
        
        """INFERENCE OF IMAGE?!""" 
        
        #client = Client(args, config, data_path)
        #fl.client.start_numpy_client(server_address=self.IP, client=client)
        # TODO feed information into the client 
        print("AFTER STARTING CLINETS IN CLIENT SERVICE")
        result = AiResultImpl()
        result.aiId = self.getAiId()
        #TODO get information out of the client
        result.error = ['Shatter', 'Scratch', 'Geometry', 'Car missing', 'Normal']
        result.errorConfidence = [random.random(), random.random(), random.random(), random.random(), random.random()]
        result.imageUri = urlarray[0]
        result.robotId = data.robotId
        result.modelId = "" # unclear, may be some string identifier
        self.ingest(result)
    
    def processCommand(self, data: Command):
        """Asynchronous data processing method. Use self.ingest(data) to pass the result back to the data stream
           Possible output types: AiResultImpl
        """
        print("PROCESSING COMMAND IN CLIENT" , data)
        if (data.getCommand() == "SEND_MODEL_CHANGE_TO_AI"):
            config = configparser.ConfigParser()
            config.read('services/flowers/config.ini')
            config["fl"]["acceleration"] = "1" if config["fl"]["acceleration"]== 0 else "0" #shall switch the behavior on or of on signal entry 
            config["fl"]["acceleration_round"] = "3"
            with open('config.ini', 'w') as configfile:
                config.write(configfile)

        elif (data.getCommand() == "SEND_FEEDBACK_TO_AI"):
            print("PROCESSING COMMANDS")
            splited = data.getStringParam().split(',') #?? Has to be split into data for three imgaes i.e. left: label, right: label, top: label#
            for y in splited:
                temp = y.split(':')
                if temp[0] in self.tempImages:
                    self.toJson({'base64': self.tempImages[temp[0]], 'label': temp[1], 'side': temp[0]}) 
    
                 
    def toJson(self, toJsonDict):
        
        with open(f'services/flowers/data/image{self.imagecountPerm}.json', 'w') as fp:
                json.dump(toJsonDict, fp)
                self.imagecount = self.imagecountPerm + 1

       
    def startClient(self, IP, event):
        print("IN STARTING")
        config = configparser.ConfigParser()
        config.read('services/flowers/config.ini')
        event.set()
        try:
            print("STARTING FLOWERCLIENT FOR SERVER ON IP: ", IP)
            client = Client(config)
            try:
                fl.client.start_numpy_client(server_address=self.IP, client=client)
            except Exception as grpcEr:
                print("Error in client starup")
                print(grpcEr)
            print("CLIENT RAN THROUGH AND IS DONE ", IP)
        except StopIteration  as ex:
            print("StopException triggered")
            
        event.clear()
    
#registers itself
FlowerAIServiceClient()
