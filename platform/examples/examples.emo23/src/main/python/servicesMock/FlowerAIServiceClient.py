import iip.Registry
from Version import Version
from Service import ServiceState
from Service import ServiceKind
from Service import Service
from datatypes.ImageInput import ImageInput
from datatypes.ImageInputImpl import ImageInputImpl
from datatypes.Command import Command
from datatypes.CommandImpl import CommandImpl
from datatypes.AiResult import AiResult
from datatypes.AiResultImpl import AiResultImpl
from interfaces.FlowerAIServiceClientInterface import FlowerAIServiceClientInterface

import random

class FlowerAIServiceClient(FlowerAIServiceClientInterface):
    """Template service implementation for FlowerAIServiceClient
       Generated by: EASy-Producer."""
    
    def __init__(self):
        """Initializes the service.""" 
        super().__init__()
        self.IP = self.getNetMgtKeyAddress()
        if self.IP is None:
            # fallback, then server is not relocatable anymore
            self.IP = "localhost:8063"
    
    
    def processImageInput(self, data: ImageInput):
        """Asynchronous data processing method. Use self.ingest(data) to pass the result back to the data stream
           Possible output types: AiResultImpl
    
        Parameters:
          - data -- the data to process
        """
        result = AiResultImpl()
        result.aiId = self.getAiId()
        result.error = ['Shatter', 'Scratch', 'Geometry', 'Car missing', 'Normal']
        result.errorConfidence = [random.random(), random.random(), random.random(), random.random(), random.random()]
        result.imageUri = data.imageUri
        result.robotId = data.robotId
        self.ingest(result)
        print("FL-Mock: " + str(result))
    
    def processCommand(self, data: Command):
        """Asynchronous data processing method. Use self.ingest(data) to pass the result back to the data stream
           Possible output types: AiResultImpl
    
        Parameters:
          - data -- the data to process
        """
        print("FL-Mock: " + str(data))

#registers itself
FlowerAIServiceClient()
