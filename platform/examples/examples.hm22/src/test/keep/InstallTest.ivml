project InstallTest {

    import IIPEcosphere;
    import DataTypes;

    annotate BindingTime bindingTime = BindingTime::compile to .;

    String serverHost = "192.168.2.1";
    artifactsFolder = "/iip/actual/artifacts";
    artifactsUriPrefix = "http://192.168.2.1:4200/download"; // TODO compose
    instDir = "/iip/actual";
    javaExe = "/iip/jdk/bin/java";

    // ------------ component setup ------------------

    serializer = Serializer::Json;
    // serviceManager, containerManager are already defined    
        
    aasServer = {
        schema = AasSchema::HTTP,
        port = 9001,
        host = "192.168.2.1"
    };
    aasRegistryServer = {
        schema = AasSchema::HTTP,
        port = 9002,
        host = "192.168.2.1",
        path = "registry"
    };
    aasImplServer = {
        port = 9003, // of central server, ephemeral on devices
        host = "192.168.2.1"
        // default host is 127.0.0.1 to be replaced by host IP if available
        // default netmask is empty, not selecting any network in case of multiple IP addresses
    };
    aasProtocol = AasProtocolVabTcp{};
    
    // ------------------ transport --------------------------
    
    transportProtocol = TransportProtocolAMQP {
        globalHost = "192.168.2.1",
        port = 8883,
        security = { // -> identityStore.yml in src/test/ or src/main depeding on use
            authenticationKey = "amqp"
        },
        brokerVer = "9.0.0"
    };

    serviceManager = SpringCloudStream {
        waitingTime = 180000
    };
    
    serviceProtocol = ServiceProtocolAMQP {};
    
    // ------------------ resources/devicemgt ----------------
    
    deviceRegistry = BasicDeviceRegistry {
    };
    
    deviceMgtStorage = S3MockDeviceMgtStorage {
        host = "localhost",
        port = 9005,
        region = "local"
    };
    
    // go for installed S3 server or cloud, also NoDeviceMgtStorageServer for installed on
    deviceMgtStorageServer = S3MockDeviceMgtStorageServer {
        port = 9005
    };

    // ------------ data types ------------------
    
    RecordType rec1 = {
        name = "Rec1",
        fields = {
            Field {
                name = "intField",
                type = refBy(IntegerType)
            }, Field {
                name = "stringField",
                type = refBy(StringType)
            }
        }
    };
    
    // ------------ individual, reusable services ------------------
        
    Service mySourceService = JavaService {
        id = "SimpleSource",
        name = "Simple Data Source",
        description = "",
        ver = "0.1.0",
        deployable = true,
        asynchronous = true,
        class = "de.iip_ecosphere.platform.test.apps.serviceImpl.SimpleSourceImpl",
        artifact = "de.iip-ecosphere.platform:apps.ServiceImpl:" + iipVer,
        kind = ServiceKind::SOURCE_SERVICE,
        output = {{type=refBy(rec1)}}
    };
    
    Service myReceiverService = JavaService {
        id = "SimpleReceiver",
        name = "Simple Data Receiver",
        description = "",
        ver = "0.1.0",
        deployable = true,
        class = "de.iip_ecosphere.platform.test.apps.serviceImpl.SimpleReceiverImpl",
        artifact = "de.iip-ecosphere.platform:apps.ServiceImpl:" + iipVer,
        kind = ServiceKind::SINK_SERVICE,
        input = {{type=refBy(rec1)}}
    };

    // --------------------- monitoring ---------------------------
    
    platformMonitoring = PrometheusPlatformMonitoring {
        schema = PrometheusSchema::HTTP,
        host = "127.0.0.1",
        port = 9090,
        running = false,
        exporterPort = -1, // ephemeral
        exporterHost = "127.0.0.1",
        exporterRunning = false,
        alertMgrPort = 9091,
        alertMgrHost = "127.0.0.1",
        alertMgrRunning = false,
        scrapeInterval = 1000,
        scrapeTimeout = 1000
    };
    
    // ------------------------- UI -------------------------------
    
    managementUi = AngularManagementUI {
        port = 4200
    };

    // ------------ application and service nets ------------------
    
    Application myApp = {
        id = "SimpleMeshApp",
        name = "Simple Mesh Testing App",
        ver = "0.1.0",
        description = "",
        services = {refBy(myMesh)}        
    };
    
    ServiceMesh myMesh = {
        description = "initial service net",
        sources = {refBy(mySource)}
    };
    
    MeshSource mySource = {
        pollInterval = 800, // only if source is synchronous
        impl = refBy(mySourceService),
        next = {refBy(myConnMySourceMyReceiver)}
    };
    
    MeshConnector myConnMySourceMyReceiver = {
        name = "Source->Receiver",
        next = refBy(myReceiver)
    };

    MeshSink myReceiver = {
        impl = refBy(myReceiverService)
    };
    
    // ---------- generation setup ------------
    
    sharedInterfaces = true;
    sharedArtifact = "de.iip-ecosphere.platform:apps.AppInterfacesSimpleMesh:" + iipVer; // for testing all-in-one

    // ------------ freezing ------------------
    
    freeze {
        aas;
        aasServer;
        aasRegistryServer;
        aasImplServer;
        aasPersistency;
        aasProtocol;
        serializer;
        instDir;
        javaExe;
        transportProtocol;
        serviceManager;
        serviceProtocol;
        containerManager;
        deviceMgtStorageServer;
        deviceMgtStorage;
        deviceRegistry;
        javaModuleOpts;
        javaOpts;
        pidDir;
        sharedInterfaces;
        sharedArtifact;
        platformMonitoring;
        managementUi;
        artifactsFolder;
        artifactsUriPrefix;
        .; // every variable declared in this project
    } but (f|f.bindingTime >= BindingTime.runtimeMon);

}
