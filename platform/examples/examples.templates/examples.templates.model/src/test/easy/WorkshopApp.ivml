project WorkshopApp {

    import IIPEcosphere;
    import DataTypes;

    annotate BindingTime bindingTime = BindingTime::compile to .;

    // ------------ component setup ------------------

    serializer = Serializer::Json;
    // serviceManager, containerManager are already defined    
        
    aasServer = {
        schema = AasSchema::HTTP,
        port = 9001,
        host = "127.0.0.1"
    };
    aasRegistryServer = {
        schema = AasSchema::HTTP,
        port = 9002,
        host = "127.0.0.1",
        path = "registry"
    };
    aasImplServer = {
        port = 9003
    };
    aasProtocol = AasProtocolVabTcp{};
    
    // ------------------ transport --------------------------
    
    transportProtocol = TransportProtocolAMQP {
        port = 8883,
        security = { // replaces user/password, requires identityStore.yml in src/test/ or src/main depeding on use
            authenticationKey = "amqp"
        }
    };
    
    serviceProtocol = ServiceProtocolAMQP {};
    
    // ------------------ resources/devicemgt ----------------
    
    deviceRegistry = BasicDeviceRegistry {
    };
    
    deviceMgtStorage = S3MockDeviceMgtStorage {
        host = "localhost",
        port = 8884,
        region = "local"
    };
    
    // just for testing, this instantiates app rather than platform
    deviceMgtStorageServer = S3MockDeviceMgtStorageServer{};

    // ------------ data types ------------------
    
    // fixed for now, becomes generic with advanced integration    
    RecordType NewInput = {
        name = "NewInput",
        fields = {
            Field {
                name = "type",
                type = refBy(IntegerType)
            }, Field {
                name = "airTemp",
                type = refBy(FloatType)
            }, Field {
                name = "procTemp",
                type = refBy(FloatType)
            }, Field {
                name = "rotSpe",
                type = refBy(IntegerType)
            }, Field {
                name = "torq",
                type = refBy(FloatType)
            }, Field {
                name = "toolWear",
                type = refBy(IntegerType)
            }
        }
    };

    RecordType NewOutput = {
        name = "NewOutput",
        fields = {
        	Field {
                name = "result",
                type = refBy(DoubleType)
            }
        }
    };    
    
    PythonDependency skLearn0232 = {
       name = "scikit-learn",
       version = "0.23.2"
    };

    PythonDependency numpy1201 = {
       name = "numpy",
       version = "1.20.1"
    };

    PythonDependency pickle40 = {
       name = "pickle",
       version = "4.0"
    };

    PythonDependency pyflakes250 = {
       name = "pyflakes",
       version = "2.5.0"
    };

    // ------------ individual, reusable services ------------------
    
    Service source = JavaService {
        id = "Source",		
        name = "Source",
        description = "",
        ver = "0.1.0",
        deployable = true,
        asynchronous = false,
		traceRcv = TraceKind::LOG,
        traceSent = TraceKind::LOG,
        class = "de.iip_ecosphere.platform.impl.shop.TestSource",   //Package of class in project
        artifact = "de.iip-ecosphere.platform.apps:TestTestAppServices:" + appVersion(myApp),
        kind = ServiceKind::SOURCE_SERVICE,
        output = {{type=refBy(NewInput)}}
    };
    
    Service pyth = PythonService {
        id = "PyService",
        name = "PyService",
        description = "",
        ver = "0.1.0",
        deployable = true,
		traceRcv = TraceKind::SYSOUT,
        traceSent = TraceKind::SYSOUT,
        input = {{type=refBy(NewInput)}},
        output = {{type=refBy(NewOutput)}},
        artifact = "de.iip-ecosphere.platform.apps:TestTestAppServices:" + appVersion(myApp),
        dependencies = {refBy(PYTHON39)}
    };

    Service sink = JavaService {
        id = "Sink",     //Unknown
        name = "Sink", //Unknown
        description = "",
        ver = "0.1.0",
        deployable = true,
		traceRcv = TraceKind::SYSOUT,
        traceSent = TraceKind::SYSOUT,
        class = "de.iip_ecosphere.platform.impl.shop.TestSink",
        artifact = "de.iip-ecosphere.platform.apps:TestTestAppServices:" + appVersion(myApp),
        kind = ServiceKind::SINK_SERVICE,
        input = {{type=refBy(NewOutput)}}
    };
    
    // --------------------- monitoring ---------------------------
    
    // current default: no monitoring configured
    
    // ------------------------- UI -------------------------------
    
    // current default: no UI configured
    
    // ------------ application and service nets ------------------
    
    Application myApp = {
        id = "TestIntegrationApp",
        name = "TestTestApp",
        ver = "0.1.0",
        description = "",
        services = {refBy(myMesh)}        
    };
    
    ServiceMesh myMesh = {
        description = "WorkshopApp",
        sources = {refBy(mySource)} //defines all source services
    };

    MeshSource mySource = {
	   pollInterval = 800, //if source service is asynchronous = false!
       impl = refBy(source), //name of a concrete service defined above!
       next = {refBy(myConnMySourceMyTransformer)}
    };

    MeshConnector myConnMySourceMyTransformer = {
        name = "Source->Transformer", //Convetion only or usage driven?
        next = refBy(myTransformer) 
    };

    MeshProcessor myTransformer = {
        impl = refBy(pyth),  //defines the class containing his impl.
        next = {refBy(myConnMyTransformerMyReceiver)}
    };

    MeshConnector myConnMyTransformerMyReceiver = {
        name = "Transformer->Receiver",
        next = refBy(myReceiver)
    };
    
    MeshSink myReceiver = {
       impl = refBy(sink)
    };
    
    // ---------- generation setup ------------
    
    sharedInterfaces = true;
    //sharedArtifact = "de.iip-ecosphere.platform:apps.WorkshopTemplateExample:" + appVersion(myApp); // for testing all-in-one

    // ------------ freezing ------------------
    
    freeze {
        aas;
        aasServer;
        aasRegistryServer;
        aasImplServer;
        aasPersistency;
        aasProtocol;
        serializer;
        transportProtocol;
        serviceManager;
        serviceProtocol;
        containerManager;
        deviceMgtStorageServer;
        deviceMgtStorage;
        deviceRegistry;
        javaModuleOpts;
        javaOpts;
        pidDir;
        sharedInterfaces;
        sharedArtifact;
        platformMonitoring;
        managementUi;
        artifactsFolder;
        artifactsUriPrefix;
        .; // every variable declared in this project
    } but (f|f.bindingTime >= BindingTime.runtimeMon);

}