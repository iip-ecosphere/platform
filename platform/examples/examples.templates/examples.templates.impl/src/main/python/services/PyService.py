import iip.Registry
from iip.Version import Version
from iip.Service import ServiceState
from iip.Service import ServiceKind
from datatypes.NewInput import NewInput
from datatypes.NewInputImpl import NewInputImpl
from datatypes.NewOutput import NewOutput
from datatypes.NewOutputImpl import NewOutputImpl
from interfaces.PyServiceInterface import PyServiceInterface
import numpy as np
import pickle

class PyService(PyServiceInterface):
    """Template service implementation for PyService
       Generated by: EASy-Producer."""
    
    def __init__(self):
        """Initializes the service.""" 
        super().__init__()
        self.clf = None
    
    def processNewInput(self, data: NewInput):
        """Asynchronous data processing method. Use self.ingest(data) to pass the result back to the data stream.
        """
        if (self.clf == None):
            with open ("services/trained_forest.pkl", "rb") as p:
                self.clf = pickle.load(p)
        
        print('Used Data ', data.__dict__)
        datare = np.array([[data.getType(), data.getAirTemp(), data.getProcTemp(), data.getRotSpe()
                          , data.getTorq(), data.getToolWear()]])
        result = None
        if (self.clf != None):
            result = self.clf.predict(datare) 
            
        print(result)
        out = NewOutputImpl()
        out.setResult(result[0])
        self.ingest(out)

#registers itself
PyService()
