package de.iip_ecosphere.platform.impl.shop;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import de.iip_ecosphere.platform.services.environment.*;
import de.iip_ecosphere.platform.support.resources.ResourceLoader;
import iip.datatypes.*;
import iip.impl.*;

import de.iip_ecosphere.platform.support.resources.ResourceLoader;

/**
 * Service implementation for net node 'Source'.
 * Generated by: EASy-Producer.
 */
public class TestSource extends SourceImpl {
    
    private boolean testDataLoaded = false;
    
    private List<NewInput> prepInputs = new ArrayList<NewInput>();
    
    Random ran = new Random();
    
    /**
    * Fallback constructor, also used for testing main program.
    */
    public TestSource() {
        super(ServiceKind.SOURCE_SERVICE);
    }

    /**
    * Creates a service instance from a service id and a YAML artifact.
    * 
    * @param serviceId the service id
    * @param ymlFile the YML file containing the YAML artifact with the service descriptor
    */
    public TestSource(String serviceId, InputStream ymlFile) {
        super(serviceId, ymlFile);
    }

    
    
    @Override
    public NewInput produceNewInput() {
        readTestDataCsv("transformed_test_data.csv");
        NewInput result = null;
        if (!prepInputs.isEmpty()) {
            result = prepInputs.get(ran.nextInt(1999));
            System.out.println(">>>>" + result);
        }
        return result;
    }
    
    /**
     * Takes the .csv containing the test data set from the training and reads it in.
     * The read values will be aggregated in a list of TestInputs for the transport.
     * @param fileName Name of the datafile.
     */
    private void readTestDataCsv(String fileName) {
        if (!testDataLoaded) {
            InputStream resource = ResourceLoader.getResourceAsStream(fileName);
            if (null != resource) {
                //File file = new File(resource);
                try (BufferedReader br = new BufferedReader(new InputStreamReader(resource))) {
                    String line = "";
                    boolean skipped = false;

                    while ((line = br.readLine()) != null) {

                        if (skipped) {
                            String[] values = line.split(",");
                            NewInput temp = new NewInputImpl();
                            temp.setType(Integer.valueOf(values[1]));
                            temp.setAirTemp(Float.valueOf(values[2]));
                            temp.setProcTemp(Float.valueOf(values[3]));
                            temp.setRotSpe(Integer.valueOf(values[4]));
                            temp.setTorq(Float.valueOf(values[5]));
                            temp.setToolWear(Integer.valueOf(values[6]));
                            
                            prepInputs.add(temp);   
                        } else {
                            skipped = true;
                        }
                    }
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                testDataLoaded = true;
                
            }      
        }
    }
}
