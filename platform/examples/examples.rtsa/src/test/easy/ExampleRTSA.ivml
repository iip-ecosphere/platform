project ExampleRTSA {

    import IIPEcosphere;
    import DataTypes;

    annotate BindingTime bindingTime = BindingTime::compile to .;

    // ------------ component setup ------------------

    serializer = Serializer::Json;
    // serviceManager, containerManager are already defined    
        
    aasServer = {
        schema = AasSchema::HTTP,
        port = 9001,
        host = "127.0.0.1"
    };
    aasRegistryServer = {
        schema = AasSchema::HTTP,
        port = 9002,
        host = "127.0.0.1",
        path = "registry"
    };
    aasImplServer = {
        port = 9003
    };
    aasProtocol = AasProtocolVabTcp{};
    
    // ------------------ transport --------------------------
    
    transportProtocol = TransportProtocolAMQP {
        port = 8883,
        user = "user",
        password = "pwd"
    };
    
    serviceProtocol = ServiceProtocolAMQP {};
    
    // ------------------ resources/devicemgt ----------------
    
    deviceRegistry = BasicDeviceRegistry {
    };
    
    deviceMgtStorage = S3MockDeviceMgtStorage {
        host = "localhost",
        port = 8884,
        region = "local"
    };
    
    // just for testing, this instantiates app rather than platform
    deviceMgtStorageServer = S3MockDeviceMgtStorageServer{};

    // ------------ data types ------------------
    
    // fixed for now, becomes generic with advanced integration    
    RecordType RtsaTestInput = {
        name = "RtsaTestInput",
        fields = {
            Field {
                name = "id",
                type = refBy(IntegerType)
            }, Field {
                name = "value1",
                type = refBy(DoubleType)
            }, Field {
                name = "value2",
                type = refBy(DoubleType)
            }
        }
    };

    // fixed for now, becomes generic with advanced integration    
    RecordType RtsaTestOutput = {
        name = "RtsaTestOutput",
        fields = {
            Field {
                name = "id",
                type = refBy(IntegerType)
            }, Field {
                name = "value1",
                type = refBy(DoubleType)
            }, Field {
                name = "value2",
                type = refBy(DoubleType)
            }, Field {
                name = "confidence",
                type = refBy(DoubleType)
            }, Field {
                name = "prediction",
                type = refBy(BooleanType)
            }
        }
    };    

    // ------------ individual, reusable services ------------------
    
    Service mySourceService = JavaService {
        id = "SimpleSource",
        name = "Simple Data Source",
        description = "",
        ver = "0.1.0",
        deployable = true,
        asynchronous = true,
        class = "de.iip_ecosphere.platform.examples.rtsa.SimpleSourceImpl",
        artifact = "de.iip-ecosphere.platform:examples.rtsa:" + iipVer,
        kind = ServiceKind::SOURCE_SERVICE,
        output = {{type=refBy(RtsaTestInput)}}
    };
    
    Service myRtsaService = RtsaService {
        // file name of RTSA is derived from rtsaVer, file name for instance in RTSA is derived from ver and service name
        id = "myRtsa",
        name = "myRtsa example",
        description = "Test RapidMiner RTSA integration",
        ver = "0.1.0",
        deployable = true,
        input = {{type=refBy(RtsaTestInput)}},
        output = {{type=refBy(RtsaTestOutput)}},
        path = "iip_basic/score_v1"
    };

    Service myReceiverService = JavaService {
        id = "SimpleReceiver",
        name = "Simple Data Receiver",
        description = "",
        ver = "0.1.0",
        deployable = true,
        class = "de.iip_ecosphere.platform.examples.rtsa.SimpleReceiverImpl",
        artifact = "de.iip-ecosphere.platform:examples.rtsa:" + iipVer,
        kind = ServiceKind::SINK_SERVICE,
        input = {{type=refBy(RtsaTestOutput)}}
    };
    
    // --------------------- monitoring ---------------------------
    
    // current default: no monitoring configured
    
    // ------------------------- UI -------------------------------
    
    // current default: no UI configured
    
    // ------------ application and service nets ------------------
    
    Application myApp = {
        id = "RtsaApp",
        name = "Simple RTSA demo flow app",
        ver = "0.1.0",
        description = "",
        services = {refBy(myMesh)}        
    };
    
    ServiceMesh myMesh = {
        description = "VDW Service Net",
        sources = {refBy(mySource)}
    };

    MeshSource mySource = {
       impl = refBy(mySourceService),
       next = {refBy(myConnMySourceMyTransformer)}
    };

    MeshConnector myConnMySourceMyTransformer = {
        name = "Source->Transformer",
        next = refBy(myTransformer)
    };

    MeshProcessor myTransformer = {
        impl = refBy(myRtsaService),
        next = {refBy(myConnMyTransformerMyReceiver)}
    };

    MeshConnector myConnMyTransformerMyReceiver = {
        name = "Transformer->Receiver",
        next = refBy(myReceiver)
    };
    
    MeshSink myReceiver = {
       impl = refBy(myReceiverService)
    };
    
    // ---------- generation setup ------------
    
    sharedInterfaces = true;
    sharedArtifact = "de.iip-ecosphere.platform:apps.ExampleRTSAAppInterfaces:" + iipVer; // for testing all-in-one

    // ------------ freezing ------------------
    
    freeze {
        aas;
        aasServer;
        aasRegistryServer;
        aasImplServer;
        aasPersistency;
        aasProtocol;
        serializer;
        transportProtocol;
        serviceManager;
        serviceProtocol;
        containerManager;
        deviceMgtStorageServer;
        deviceMgtStorage;
        deviceRegistry;
        javaModuleOpts;
        javaOpts;
        pidDir;
        sharedInterfaces;
        sharedArtifact;
        platformMonitoring;
        managementUi;
        artifactsFolder;
        artifactsUriPrefix;
        .; // every variable declared in this project
    } but (f|f.bindingTime >= BindingTime.runtimeMon);

}