project AllTypes {

    import AllConstants; 
    import OpcUaDataTypes;
    import AASDataTypes;
    
    annotate BindingTime bindingTime = BindingTime::compile to .;
    
    RecordType Empty = {
        name = "Empty",
        fields = {}
    };
    
    AasSubmodelType EanScannerOutput = {
        name = "EanScannerOutput",
        fields = {
            AasField {
                name = "data",
                type = refBy(StringType)
            },
            AasField {
                name="TestDataB",
                minimumInstances = 1,
                maximumInstances = -1,
                type=refBy(StringListType),
                cachingTime=CACHE_NONE
            }
        }
    };

    RecordType MdzhConfigInput = {
        name = "MdzhConfigInput",
        fields = {}
    };

    // into Laser
    AasSubmodelType MdzhConfigOutput = {
        name = "MdzhConfigOutput",
        fields = {
            AasField { // UAFieldVariableType
                name="DMCData",
                type=refBy(StringType),
                cachingTime=CACHE_NONE
            },
            AasField {
                name="DoubleMarking",
                type=refBy(BooleanType),
                cachingTime=CACHE_NONE
            },
            AasField {
                name="OrderId",
                type=refBy(Integer32Type), 
                cachingTime=CACHE_NONE
            },
            AasField {
                name="PenType",
                type=refBy(Integer32Type),
                cachingTime=CACHE_NONE
            },
            AasField {
                name="TextData",
                type=refBy(StringType),
                cachingTime=CACHE_NONE
            },
            AasField {
                name="TextData2",
                type=refBy(StringType),
                cachingTime=CACHE_NONE
            },
            AasField {
                name="TestData",
                minimumInstances = 1,
                maximumInstances = -1,
                type=refBy(StringListType),
                cachingTime=CACHE_NONE
            }
        }
    };

    // from Laser
    RecordType LaserOutput = {
        name = "LaserOutput",
        fields = {
            Field { 
                name="EndTime",
                type=refBy(StringType),
                cachingTime=CACHE_NONE
            },
            Field {
                name="OrderId",
                type=refBy(Integer32Type),
                cachingTime=CACHE_NONE
            },
            Field {
                name="OrderState",
                type=refBy(StringType),
                cachingTime=CACHE_NONE
            },
            Field {
                name="StartTime",
                type=refBy(StringType),
                cachingTime=CACHE_NONE
            },
            Field {
                name="SystemState",
                type=refBy(StringType),
                cachingTime=CACHE_NONE
            }
        }
    };

    RecordType PcfOutput = {
        name = "PcfOutput",
        fields = {}
    };
    
    RecordType PcfAasOutput = {
        name = "PcfAasOutput",
        fields = {}
    };
    
    RecordType sentronOutput = {
        name = "SentronOutput",
        fields = {
            ModbusField {
                offset = 25,
                name = "PowerConsumption",
                description = "PowerConsumption",
                type = refBy(Modbus_float32),
                cachingTime = CACHE_NONE
            }        
        }
    };

    RecordType influxEnergyData = {
        name = "InfluxEnergyData",
        fields = {
            InfluxField {
                name = "PowerConsumption",
                mappedName = "Messages_0_Payload_TotalActivePower_Value",
                description = "PowerConsumption",
                type = refBy(Modbus_float32), // keep for now
                cachingTime = CACHE_NONE
            }        
        }
    };
    
    // ----------------- outdated - remove/replace -------------------------
    
    RecordType PythonTestInput = {
        name = "PythonTestInput",
        fields = {
            Field {
                name = "id",
                type = refBy(IntegerType)
            }, Field {
                name = "value1",
                type = refBy(DoubleType)
            }, Field {
                name = "value2",
                type = refBy(DoubleType)
            }
        }
    };

    RecordType PythonTestOutput = {
        name = "PythonTestOutput",
        fields = {
            Field {
                name = "id",
                type = refBy(IntegerType)
            }, Field {
                name = "value1",
                type = refBy(DoubleType)
            }, Field {
                name = "value2",
                type = refBy(DoubleType)
            }, Field {
                name = "confidence",
                type = refBy(DoubleType)
            }, Field {
                name = "prediction",
                type = refBy(BooleanType)
            }
        }
    };    
    
    freeze {
        .;
    }
}