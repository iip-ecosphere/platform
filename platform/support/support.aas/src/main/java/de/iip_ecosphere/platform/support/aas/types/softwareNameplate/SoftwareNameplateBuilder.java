package de.iip_ecosphere.platform.support.aas.types.softwareNameplate;

import static de.iip_ecosphere.platform.support.aas.IdentifierType.*;
import static de.iip_ecosphere.platform.support.aas.types.common.Utils.*;

import de.iip_ecosphere.platform.support.Builder;
import de.iip_ecosphere.platform.support.aas.Aas.AasBuilder;
import de.iip_ecosphere.platform.support.aas.*;
import de.iip_ecosphere.platform.support.aas.types.common.*;

/**
* Builder support for submodel containing the nameplate information for software Asset and associated product
* classificatons.
* Generated by: EASy-Producer.
*/
public class SoftwareNameplateBuilder extends DelegatingSubmodelBuilder {

    private boolean createMultiLanguageProperties = true;

    // checkstyle: stop names check
    
    private int softwareNameplate_TypeCounter = 0;
    private int softwareNameplate_InstanceCounter = 0;
    
    // checkstyle: resume names check

    /**
    * Interface support for function of a contact person in a process.
    * Generated by: EASy-Producer.
    */
    public interface IRoleOfContactPerson {
    
        /**
         * Returns the value id/given ordinal.
         * 
         * @return the value id/given ordinal
         */
        public int getValueId();
        
        /**
         * Returns the semantic id.
         * 
         * @return the semantic id
         */
        public String getSemanticId();
        
        /**
         * Returns the value to be used in the AAS.
         * 
         * @return the value to be used in the AAS
         */
        public String getValue();
    
    }
    
    /**
    * Enumeration support for function of a contact person in a process.
    * Generated by: EASy-Producer.
    */
    public enum RoleOfContactPerson implements IRoleOfContactPerson {
    
        ADMINISTRATIV_CONTACT(0, irdi("0173-1#07-AAS927#001"), "administrativ contact"),
        COMMERCIAL_CONTACT(0, irdi("0173-1#07-AAS928#001"), "commercial contact"),
        OTHER_CONTACT(0, irdi("0173-1#07-AAS929#001"), "other contact"),
        HAZARDOUS_GOODS_CONTACT(0, irdi("0173-1#07-AAS930#001"), "hazardous goods contact"),
        TECHNICAL_CONTACT(0, irdi("0173-1#07-AAS931#001"), "technical contact");
    
        private int valueId;
        private String semanticId;
        private String value;
    
        /**
         * Creates a constant.
         * 
         * @param valueId the value id/given ordinal
         * @param semanticId the semantic id
         * @param value the value
         */
        private RoleOfContactPerson(int valueId, String semanticId, String value) {
            this.valueId = valueId;
            this.semanticId = semanticId;
            this.value = value;
        }
        
        @Override
        public int getValueId() {
            return valueId;
        }
        
        @Override
        public String getSemanticId() {
            return semanticId;
        }
        
        @Override
        public String getValue() {
            return value;
        }
        
    }
    
    /**
    * Enumeration support for characterization of a telephone according to its location or usage.
    * Generated by: EASy-Producer.
    */
    public enum TypeOfTelephone {
    
        OFFICE(0, irdi("0173-1#07-AAS754#001"), "office"),
        OFFICE_MOBILE(0, irdi("0173-1#07-AAS755#001"), "office mobile"),
        SECRETARY(0, irdi("0173-1#07-AAS756#001"), "secretary"),
        SUBSTITUTE(0, irdi("0173-1#07-AAS757#001"), "substitute"),
        HOME(0, irdi("0173-1#07-AAS758#001"), "home"),
        PRIVATE_MOBILE(0, irdi("0173-1#07-AAS759#001"), "private mobile");
    
        private int valueId;
        private String semanticId;
        private String value;
    
        /**
         * Creates a constant.
         * 
         * @param valueId the value id/given ordinal
         * @param semanticId the semantic id
         * @param value the value
         */
        private TypeOfTelephone(int valueId, String semanticId, String value) {
            this.valueId = valueId;
            this.semanticId = semanticId;
            this.value = value;
        }
        
        /**
        * Returns the (optional) value id/given ordinal.
        *
        * @return the (optional) value id/given ordinal
        */
        public int getValueId() {
            return valueId;
        }
        
        /**
        * Returns the (optional) semantic id.
        *
        * @return the (optional) semantic id
        */
        public String getSemanticId() {
            return semanticId;
        }
        
        /**
        * Returns the value to be used in the AAS.
        *
        * @return the value to be used in the AAS
        */
        public String getValue() {
            return value;
        }
        
    }
    
    /**
    * Enumeration support for characterization of the fax according its location or usage.
    * Generated by: EASy-Producer.
    */
    public enum TypeOfFaxNumber {
    
        OFFICE(0, irdi("0173-1#07-AAS754#001"), "office"),
        SECRETARY(0, irdi("0173-1#07-AAS756#001"), "secretary"),
        HOME(0, irdi("0173-1#07-AAS758#001"), "home");
    
        private int valueId;
        private String semanticId;
        private String value;
    
        /**
         * Creates a constant.
         * 
         * @param valueId the value id/given ordinal
         * @param semanticId the semantic id
         * @param value the value
         */
        private TypeOfFaxNumber(int valueId, String semanticId, String value) {
            this.valueId = valueId;
            this.semanticId = semanticId;
            this.value = value;
        }
        
        /**
        * Returns the (optional) value id/given ordinal.
        *
        * @return the (optional) value id/given ordinal
        */
        public int getValueId() {
            return valueId;
        }
        
        /**
        * Returns the (optional) semantic id.
        *
        * @return the (optional) semantic id
        */
        public String getSemanticId() {
            return semanticId;
        }
        
        /**
        * Returns the value to be used in the AAS.
        *
        * @return the value to be used in the AAS
        */
        public String getValue() {
            return value;
        }
        
    }
    
    /**
    * Enumeration support for characterization of an e-mail address according to its location or usage.
    * Generated by: EASy-Producer.
    */
    public enum TypeOfEmailAddress {
    
        OFFICE(0, irdi("0173-1#07-AAS754#001"), "office"),
        SECRETARY(0, irdi("0173-1#07-AAS756#001"), "secretary"),
        SUBSTITUTE(0, irdi("0173-1#07-AAS757#001"), "substitute"),
        HOME(0, irdi("0173-1#07-AAS758#001"), "home");
    
        private int valueId;
        private String semanticId;
        private String value;
    
        /**
         * Creates a constant.
         * 
         * @param valueId the value id/given ordinal
         * @param semanticId the semantic id
         * @param value the value
         */
        private TypeOfEmailAddress(int valueId, String semanticId, String value) {
            this.valueId = valueId;
            this.semanticId = semanticId;
            this.value = value;
        }
        
        /**
        * Returns the (optional) value id/given ordinal.
        *
        * @return the (optional) value id/given ordinal
        */
        public int getValueId() {
            return valueId;
        }
        
        /**
        * Returns the (optional) semantic id.
        *
        * @return the (optional) semantic id
        */
        public String getSemanticId() {
            return semanticId;
        }
        
        /**
        * Returns the value to be used in the AAS.
        *
        * @return the value to be used in the AAS
        */
        public String getValue() {
            return value;
        }
        
    }
    
    /**
    * Creates a SoftwareNameplate submodel builder.
    * 
    * @param aasBuilder the parent AAS builder
    * @param identifier the submodel identifier
    */            
    public SoftwareNameplateBuilder(AasBuilder aasBuilder, String identifier) {
        this(aasBuilder, identifier, "SoftwareNameplate");
    }

    /**
    * Creates a SoftwareNameplate submodel builder.
    * 
    * @param aasBuilder the parent AAS builder
    * @param identifier the submodel identifier
    * @param idShort the idShort of the submodel to create
    */            
    private SoftwareNameplateBuilder(AasBuilder aasBuilder, String identifier, String idShort) {
        super(aasBuilder.createSubmodelBuilder(idShort, identifier));
        setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0"));
    }
    
    /**
     * Defines whether multi-language properties shall be created. AASPackageExplorer compliance.
     *
     * @param createMultiLanguageProperties whether multi-language properties shall be created, taints compliance 
     *     if {@code false}
     */
    public void setCreateMultiLanguageProperties(boolean createMultiLanguageProperties) {
        this.createMultiLanguageProperties = createMultiLanguageProperties;
    } 

    /**
    * Creates a builder for SoftwareNameplate_Type.
    *
    * @return the builder instance, {@link Builder#build()} must be called
    */
    public SoftwareNameplate_TypeBuilder createSoftwareNameplate_TypeBuilder() {
        softwareNameplate_TypeCounter++;
        return new SoftwareNameplate_TypeBuilder(this);
    }
    
    /**
    * Creates a builder for SoftwareNameplate_Instance.
    *
    * @return the builder instance, {@link Builder#build()} must be called
    */
    public SoftwareNameplate_InstanceBuilder createSoftwareNameplate_InstanceBuilder() {
        softwareNameplate_InstanceCounter++;
        return new SoftwareNameplate_InstanceBuilder(this);
    }
    
    @Override
    public Submodel build() {
        assertThat(0 <= softwareNameplate_TypeCounter && softwareNameplate_TypeCounter <= 1, "Cardinality {} of Softwar"
            + "eNameplate_Type must be greater or equal 0 and less or equal 1.", softwareNameplate_TypeCounter);
        assertThat(0 <= softwareNameplate_InstanceCounter && softwareNameplate_InstanceCounter <= 1, "Cardinality {} of"
            + " SoftwareNameplate_Instance must be greater or equal 0 and less or equal 1.", 
            softwareNameplate_InstanceCounter);
        
        return super.build();
    }
    
    // checkstyle: stop names check

    /**
    * Builder support for sMC containing the nameplate information for a type of a software Asset.
    * Generated by: EASy-Producer.
    */
    public class SoftwareNameplate_TypeBuilder extends DelegatingSubmodelElementCollectionBuilder {
       
        // checkstyle: resume names check
        
        private int uRIOfTheProductCounter = 0;
        private int manufacturerNameCounter = 0;
        private int manufacturerProductDesignationCounter = 0;
        private int manufacturerProductDescriptionCounter = 0;
        private int manufacturerProductFamilyCounter = 0;
        private int manufacturerProductTypeCounter = 0;
        private int softwareTypeCounter = 0;
        private int versionCounter = 0;
        private int versionNameCounter = 0;
        private int versionInfoCounter = 0;
        private int releaseDateCounter = 0;
        private int releaseNotesCounter = 0;
        private int buildDateCounter = 0;
        private int installationURICounter = 0;
        private int installationFileCounter = 0;
        private int installerTypeCounter = 0;
        private int installationChecksumCounter = 0;
    
        /**
        * Creates a builder instance for SoftwareNameplate_Type.
        *
        * @param smBuilder the parent submodel builder
        */
        protected SoftwareNameplate_TypeBuilder(DelegatingSubmodelBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("SoftwareNameplate_Type"), smBuilder);
            setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplateType"));
        }
        
        /**
        * Creates a builder instance for SoftwareNameplate_Type.
        *
        * @param smBuilder the parent submodel builder
        * @param nr the structure number
        */
        protected SoftwareNameplate_TypeBuilder(DelegatingSubmodelBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("SoftwareNameplate_Type", nr)), 
                smBuilder);
            setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplateType"));
        }
        
        /**
        * Changes unique global identification of the product using a universal resource identifier (URI)..
        *
        * @param uRIOfTheProduct the value for URIOfTheProduct
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_TypeBuilder setURIOfTheProduct(String uRIOfTheProduct) {
            uRIOfTheProductCounter++;
            createPropertyBuilder("URIOfTheProduct")
                .setSemanticId(irdi("0173-1#02-AAY811#001"))
                .setValue(Type.STRING, uRIOfTheProduct).build();
            return this;
        }
        
        /**
        * Changes legally valid designation of the natural or judicial person which is directly responsible for the
        * design, production, packaging and labeling of a product in respect to its being brought into circulation..
        *
        * @param manufacturerName the value for ManufacturerName
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_TypeBuilder setManufacturerName(LangString... manufacturerName) {
            if (manufacturerName.length > 0) {
                manufacturerNameCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "ManufacturerName", 
                irdi("0173-1#02-AAO677#002"), manufacturerName);
            return this;
        }
        
        /**
        * Changes the name of the product, provided by the manufacturer..
        *
        * @param manufacturerProductDesignation the value for ManufacturerProductDesignation
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_TypeBuilder setManufacturerProductDesignation(LangString...
            manufacturerProductDesignation) {
            if (manufacturerProductDesignation.length > 0) {
                manufacturerProductDesignationCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "ManufacturerProductDesignation"
                , 
                irdi("0173-1#02-AAW338#001"), manufacturerProductDesignation);
            return this;
        }
        
        /**
        * Changes description of the product, it's technical features and implementation if needed (long text)..
        *
        * @param manufacturerProductDescription the value for ManufacturerProductDescription
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_TypeBuilder setManufacturerProductDescription(LangString...
            manufacturerProductDescription) {
            if (manufacturerProductDescription.length > 0) {
                manufacturerProductDescriptionCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "ManufacturerProductDescription"
                , 
                iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/SoftwareNameplateType/"
                    + "ManufacturerProductDescription"), manufacturerProductDescription);
            return this;
        }
        
        /**
        * Changes 2nd level of a 3 level manufacturer specific product hierarchy..
        *
        * @param manufacturerProductFamily the value for ManufacturerProductFamily
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_TypeBuilder setManufacturerProductFamily(LangString... manufacturerProductFamily) {
            if (manufacturerProductFamily.length > 0) {
                manufacturerProductFamilyCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "ManufacturerProductFamily", 
                irdi("0173-1#02-AAU731#001"), manufacturerProductFamily);
            return this;
        }
        
        /**
        * Changes characteristic to differentiate between different products of a product family or special variants..
        *
        * @param manufacturerProductType the value for ManufacturerProductType
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_TypeBuilder setManufacturerProductType(LangString... manufacturerProductType) {
            if (manufacturerProductType.length > 0) {
                manufacturerProductTypeCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "ManufacturerProductType", 
                irdi("0173-1#02-AAO057#002"), manufacturerProductType);
            return this;
        }
        
        /**
        * Changes the type of the software (category, e.g. Runtime, Application, Firmeware, Driver, etc.)..
        *
        * @param softwareType the value for SoftwareType
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_TypeBuilder setSoftwareType(String softwareType) {
            softwareTypeCounter++;
            createPropertyBuilder("SoftwareType")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateType/SoftwareType"))
                .setValue(Type.STRING, softwareType).build();
            return this;
        }
        
        /**
        * Changes the complete version information consisting of Major Version, Minor Version, Revision and Build
        * Number..
        *
        * @param version the value for Version
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_TypeBuilder setVersion(String version) {
            versionCounter++;
            createPropertyBuilder("Version")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateType/Version"))
                .setValue(Type.STRING, version).build();
            return this;
        }
        
        /**
        * Changes the name this particular version is given..
        *
        * @param versionName the value for VersionName
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_TypeBuilder setVersionName(LangString... versionName) {
            if (versionName.length > 0) {
                versionNameCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "VersionName", 
                iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/SoftwareNameplateType/"
                    + "VersionName"), versionName);
            return this;
        }
        
        /**
        * Changes provides a textual description of most relevant characteristics of the version of the software..
        *
        * @param versionInfo the value for VersionInfo
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_TypeBuilder setVersionInfo(LangString... versionInfo) {
            if (versionInfo.length > 0) {
                versionInfoCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "VersionInfo", 
                iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateType/VersionInfo"), versionInfo);
            return this;
        }
        
        /**
        * Changes the moment in time, when this version of the software was made publicly available..
        *
        * @param releaseDate the value for ReleaseDate
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_TypeBuilder setReleaseDate(java.util.Date releaseDate) {
            releaseDateCounter++;
            createPropertyBuilder("ReleaseDate")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateType/ReleaseDate"))
                .setValue(Type.DATE_TIME, releaseDate).build();
            return this;
        }
        
        /**
        * Changes contains information about this release..
        *
        * @param releaseNotes the value for ReleaseNotes
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_TypeBuilder setReleaseNotes(LangString... releaseNotes) {
            if (releaseNotes.length > 0) {
                releaseNotesCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "ReleaseNotes", 
                iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateType/ReleaseNotes"), releaseNotes);
            return this;
        }
        
        /**
        * Changes the moment in time, when this particular build of software was created..
        *
        * @param buildDate the value for BuildDate
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_TypeBuilder setBuildDate(java.util.Date buildDate) {
            buildDateCounter++;
            createPropertyBuilder("BuildDate")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateType/BuildDate"))
                .setValue(Type.DATE_TIME, buildDate).build();
            return this;
        }
        
        /**
        * Changes indicates the resource, where the software is being provided by the manufacturer..
        *
        * @param installationURI the value for InstallationURI
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_TypeBuilder setInstallationURI(String installationURI) {
            installationURICounter++;
            createPropertyBuilder("InstallationURI")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateType/InstallationURI"))
                .setValue(Type.ANY_URI, installationURI).build();
            return this;
        }
        
        /**
        * Changes contains the installation code as BLOB..
        *
        * @param file the relative or absolute file name with extension
        * @param mimeType the mime type of the file
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_TypeBuilder setInstallationFile(String file, String mimeType) {
            installationFileCounter++;
            createBlobDataElementBuilder("InstallationFile", file, mimeType)
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateType/InstallationFile"))
                .build();
            return this;
        }
        
        /**
        * Changes indicates the type of installation package..
        *
        * @param installerType the value for InstallerType
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_TypeBuilder setInstallerType(String installerType) {
            installerTypeCounter++;
            createPropertyBuilder("InstallerType")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateType/InstallerType"))
                .setValue(Type.STRING, installerType).build();
            return this;
        }
        
        /**
        * Changes provides the checksum for the software available at InstallationURI..
        *
        * @param installationChecksum the value for InstallationChecksum
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_TypeBuilder setInstallationChecksum(String installationChecksum) {
            installationChecksumCounter++;
            createPropertyBuilder("InstallationChecksum")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateType/InstallationChecksum"))
                .setValue(Type.STRING, installationChecksum).build();
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(uRIOfTheProductCounter == 1, "Cardinality {} of URIOfTheProduct must be equal 1.",
                uRIOfTheProductCounter);
            assertThat(manufacturerNameCounter == 1, "Cardinality {} of ManufacturerName must be equal 1.",
                manufacturerNameCounter);
            assertThat(manufacturerProductDesignationCounter == 1, "Cardinality {} of ManufacturerProductDesignation mu"
                + "st be equal 1.", manufacturerProductDesignationCounter);
            assertThat(0 <= manufacturerProductDescriptionCounter && manufacturerProductDescriptionCounter <= 1, 
                "Cardinality {} of ManufacturerProductDescription must be greater or equal 0 and less or equal 1.",
                manufacturerProductDescriptionCounter);
            assertThat(0 <= manufacturerProductFamilyCounter && manufacturerProductFamilyCounter <= 1, "Cardinality {} "
                + "of ManufacturerProductFamily must be greater or equal 0 and less or equal 1.", 
                manufacturerProductFamilyCounter);
            assertThat(0 <= manufacturerProductTypeCounter && manufacturerProductTypeCounter <= 1, "Cardinality {} of M"
                + "anufacturerProductType must be greater or equal 0 and less or equal 1.", 
                manufacturerProductTypeCounter);
            assertThat(0 <= softwareTypeCounter && softwareTypeCounter <= 1, "Cardinality {} of SoftwareType must be gr"
                + "eater or equal 0 and less or equal 1.", softwareTypeCounter);
            assertThat(versionCounter == 1, "Cardinality {} of Version must be equal 1.", versionCounter);
            assertThat(0 <= versionNameCounter && versionNameCounter <= 1, "Cardinality {} of VersionName must be great"
                + "er or equal 0 and less or equal 1.", versionNameCounter);
            assertThat(0 <= versionInfoCounter && versionInfoCounter <= 1, "Cardinality {} of VersionInfo must be great"
                + "er or equal 0 and less or equal 1.", versionInfoCounter);
            assertThat(releaseDateCounter == 1, "Cardinality {} of ReleaseDate must be equal 1.", releaseDateCounter);
            assertThat(0 <= releaseNotesCounter && releaseNotesCounter <= 1, "Cardinality {} of ReleaseNotes must be gr"
                + "eater or equal 0 and less or equal 1.", releaseNotesCounter);
            assertThat(buildDateCounter == 1, "Cardinality {} of BuildDate must be equal 1.", buildDateCounter);
            assertThat(0 <= installationURICounter && installationURICounter <= 1, "Cardinality {} of InstallationURI m"
                + "ust be greater or equal 0 and less or equal 1.", installationURICounter);
            assertThat(0 <= installationFileCounter && installationFileCounter <= 1, "Cardinality {} of InstallationFil"
                + "e must be greater or equal 0 and less or equal 1.", installationFileCounter);
            assertThat(0 <= installerTypeCounter && installerTypeCounter <= 1, "Cardinality {} of InstallerType must be"
                + " greater or equal 0 and less or equal 1.", installerTypeCounter);
            assertThat(0 <= installationChecksumCounter && installationChecksumCounter <= 1, "Cardinality {} of Install"
                + "ationChecksum must be greater or equal 0 and less or equal 1.", installationChecksumCounter);
            
            return super.build();
        }
    }
    
    // checkstyle: stop names check
    
    /**
    * Builder support for sMC containing the nameplate information for an instance of a software Asset.
    * Generated by: EASy-Producer.
    */
    public class SoftwareNameplate_InstanceBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        // checkstyle: resume names check
        
        private int serialNumberCounter = 0;
        private int instanceNameCounter = 0;
        private int installedVersionCounter = 0;
        private int installationDateCounter = 0;
        private int installationPathCounter = 0;
        private int installationSourceCounter = 0;
        private int installedOnArchitectureCounter = 0;
        private int installedOnOSCounter = 0;
        private int installedOnHostCounter = 0;
        private int installedModulesCounter = 0;
        private int configurationPathsCounter = 0;
        private int sLAInformationCounter = 0;
        private int contactCounter = 0;
        private int inventoryTagCounter = 0;
    
        /**
        * Creates a builder instance for SoftwareNameplate_Instance.
        *
        * @param smBuilder the parent submodel builder
        */
        protected SoftwareNameplate_InstanceBuilder(DelegatingSubmodelBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("SoftwareNameplate_Instance"), smBuilder);
            setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplateInstance"));
        }
        
        /**
        * Creates a builder instance for SoftwareNameplate_Instance.
        *
        * @param smBuilder the parent submodel builder
        * @param nr the structure number
        */
        protected SoftwareNameplate_InstanceBuilder(DelegatingSubmodelBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("SoftwareNameplate_Instance",
                nr)), smBuilder);
            setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplateInstance"));
        }
        
        /**
        * Changes unique combination of numbers and letters used to identify the software instance..
        *
        * @param serialNumber the value for SerialNumber
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_InstanceBuilder setSerialNumber(String serialNumber) {
            serialNumberCounter++;
            createPropertyBuilder("SerialNumber")
                .setSemanticId(irdi("0173-1#02-AAM556#002"))
                .setValue(Type.STRING, serialNumber).build();
            return this;
        }
        
        /**
        * Changes the name of the software instance..
        *
        * @param instanceName the value for InstanceName
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_InstanceBuilder setInstanceName(String instanceName) {
            instanceNameCounter++;
            createPropertyBuilder("InstanceName")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateInstance/InstanceName"))
                .setValue(Type.STRING, instanceName).build();
            return this;
        }
        
        /**
        * Changes the version information of the installed instance, consisting of Major Version, Minor Version,
        * Revision and Build Number indicates the actual version of the instance..
        *
        * @param installedVersion the value for InstalledVersion
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_InstanceBuilder setInstalledVersion(String installedVersion) {
            installedVersionCounter++;
            createPropertyBuilder("InstalledVersion")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateInstance/InstalledVersion"))
                .setValue(Type.STRING, installedVersion).build();
            return this;
        }
        
        /**
        * Changes date of Installation..
        *
        * @param installationDate the value for InstallationDate
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_InstanceBuilder setInstallationDate(java.util.Date installationDate) {
            installationDateCounter++;
            createPropertyBuilder("InstallationDate")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateInstance/InstallationDate"))
                .setValue(Type.DATE_TIME, installationDate).build();
            return this;
        }
        
        /**
        * Changes indicates the path to the installed instance of the software..
        *
        * @param installationPath the value for InstallationPath
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_InstanceBuilder setInstallationPath(String installationPath) {
            installationPathCounter++;
            createPropertyBuilder("InstallationPath")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateInstance/InstallationPath"))
                .setValue(Type.ANY_URI, installationPath).build();
            return this;
        }
        
        /**
        * Changes indicates the path to the installation files used in this instance of the software..
        *
        * @param installationSource the value for InstallationSource
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_InstanceBuilder setInstallationSource(String installationSource) {
            installationSourceCounter++;
            createPropertyBuilder("InstallationSource")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateInstance/InstallationSource"))
                .setValue(Type.ANY_URI, installationSource).build();
            return this;
        }
        
        /**
        * Changes indicates the processor architecture this instance is installed on..
        *
        * @param installedOnArchitecture the value for InstalledOnArchitecture
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_InstanceBuilder setInstalledOnArchitecture(String installedOnArchitecture) {
            installedOnArchitectureCounter++;
            createPropertyBuilder("InstalledOnArchitecture")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateInstance/InstalledOnArchitecture"))
                .setValue(Type.STRING, installedOnArchitecture).build();
            return this;
        }
        
        /**
        * Changes indicates the operating system this instance is installed on..
        *
        * @param installedOnOS the value for InstalledOnOS
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_InstanceBuilder setInstalledOnOS(String installedOnOS) {
            installedOnOSCounter++;
            createPropertyBuilder("InstalledOnOS")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateInstance/InstalledOnOS"))
                .setValue(Type.STRING, installedOnOS).build();
            return this;
        }
        
        /**
        * Changes indicates the host system in case of a virtual environment..
        *
        * @param installedOnHost the value for InstalledOnHost
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_InstanceBuilder setInstalledOnHost(String installedOnHost) {
            installedOnHostCounter++;
            createPropertyBuilder("InstalledOnHost")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateInstance/InstalledOnHost"))
                .setValue(Type.STRING, installedOnHost).build();
            return this;
        }
        
        /**
        * Creates a builder for InstalledModules.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public InstalledModulesBuilder createInstalledModulesBuilder() {
            installedModulesCounter++;
            return new InstalledModulesBuilder(this);
        }
        
        /**
        * Creates a builder for ConfigurationPaths.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public ConfigurationPathsBuilder createConfigurationPathsBuilder() {
            configurationPathsCounter++;
            return new ConfigurationPathsBuilder(this);
        }
        
        /**
        * Changes indicates the actual service level agreements..
        *
        * @param sLAInformation the value for SLAInformation
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_InstanceBuilder setSLAInformation(String sLAInformation) {
            sLAInformationCounter++;
            createPropertyBuilder("SLAInformation")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateInstance/SLAInformation"))
                .setValue(Type.STRING, sLAInformation).build();
            return this;
        }
        
        /**
        * Creates a builder for Contact.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public ContactInformationBuilder createContactBuilder() {
            contactCounter++;
            return new ContactInformationBuilder(this);
        }
        
        /**
        * Changes specifies an information used for inventory of the software..
        *
        * @param inventoryTag the value for InventoryTag
        * @return <b>this</b> (builder style)
        */
        public SoftwareNameplate_InstanceBuilder setInventoryTag(String inventoryTag) {
            // counting -> composition of idShort
            createPropertyBuilder(getCountingIdShort("InventoryTag", ++inventoryTagCounter))
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateInstance/InventoryTag"))
                .setValue(Type.STRING, inventoryTag).build();
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(0 <= serialNumberCounter && serialNumberCounter <= 1, "Cardinality {} of SerialNumber must be gr"
                + "eater or equal 0 and less or equal 1.", serialNumberCounter);
            assertThat(0 <= instanceNameCounter && instanceNameCounter <= 1, "Cardinality {} of InstanceName must be gr"
                + "eater or equal 0 and less or equal 1.", instanceNameCounter);
            assertThat(0 <= installedVersionCounter && installedVersionCounter <= 1, "Cardinality {} of InstalledVersio"
                + "n must be greater or equal 0 and less or equal 1.", installedVersionCounter);
            assertThat(0 <= installationDateCounter && installationDateCounter <= 1, "Cardinality {} of InstallationDat"
                + "e must be greater or equal 0 and less or equal 1.", installationDateCounter);
            assertThat(0 <= installationPathCounter && installationPathCounter <= 1, "Cardinality {} of InstallationPat"
                + "h must be greater or equal 0 and less or equal 1.", installationPathCounter);
            assertThat(0 <= installationSourceCounter && installationSourceCounter <= 1, "Cardinality {} of Installatio"
                + "nSource must be greater or equal 0 and less or equal 1.", installationSourceCounter);
            assertThat(0 <= installedOnArchitectureCounter && installedOnArchitectureCounter <= 1, "Cardinality {} of I"
                + "nstalledOnArchitecture must be greater or equal 0 and less or equal 1.", 
                installedOnArchitectureCounter);
            assertThat(0 <= installedOnOSCounter && installedOnOSCounter <= 1, "Cardinality {} of InstalledOnOS must be"
                + " greater or equal 0 and less or equal 1.", installedOnOSCounter);
            assertThat(0 <= installedOnHostCounter && installedOnHostCounter <= 1, "Cardinality {} of InstalledOnHost m"
                + "ust be greater or equal 0 and less or equal 1.", installedOnHostCounter);
            assertThat(0 <= installedModulesCounter && installedModulesCounter <= 1, "Cardinality {} of InstalledModule"
                + "s must be greater or equal 0 and less or equal 1.", installedModulesCounter);
            assertThat(0 <= configurationPathsCounter && configurationPathsCounter <= 1, "Cardinality {} of Configurati"
                + "onPaths must be greater or equal 0 and less or equal 1.", configurationPathsCounter);
            assertThat(0 <= sLAInformationCounter && sLAInformationCounter <= 1, "Cardinality {} of SLAInformation must"
                + " be greater or equal 0 and less or equal 1.", sLAInformationCounter);
            assertThat(0 <= contactCounter && contactCounter <= 1, "Cardinality {} of Contact must be greater or equal "
                + "0 and less or equal 1.", contactCounter);
            assertThat(0 <= inventoryTagCounter, "Cardinality {} of InventoryTag must be greater or equal 0.",
                inventoryTagCounter);
            
            return super.build();
        }
    }
    
    /**
    * Builder support for contains a list of installed modules of the software instance.
    * Generated by: EASy-Producer.
    */
    public class InstalledModulesBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int installedModuleCounter = 0;
    
        /**
        * Creates a builder instance for InstalledModules.
        *
        * @param smBuilder the parent submodel element container builder
        */
        protected InstalledModulesBuilder(DelegatingSubmodelElementContainerBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("InstalledModules"), smBuilder);
            setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                + "SoftwareNameplateInstance/InstalledModules"));
        }
        
        /**
        * Creates a builder instance for InstalledModules.
        *
        * @param smBuilder the parent submodel element container builder
        * @param nr the structure number
        */
        protected InstalledModulesBuilder(DelegatingSubmodelElementContainerBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("InstalledModules", nr)), 
                smBuilder);
            setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                + "SoftwareNameplateInstance/InstalledModules"));
        }
        
        /**
        * Changes the name of a particular module installed..
        *
        * @param installedModule the value for InstalledModule
        * @return <b>this</b> (builder style)
        */
        public InstalledModulesBuilder setInstalledModule(String installedModule) {
            // counting -> composition of idShort
            createPropertyBuilder(getCountingIdShort("InstalledModule", ++installedModuleCounter))
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateInstance/InstalledModule"))
                .setValue(Type.STRING, installedModule).build();
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(1 <= installedModuleCounter, "Cardinality {} of InstalledModule must be greater or equal 1.",
                installedModuleCounter);
            
            return super.build();
        }
    }
    
    /**
    * Builder support for contains a list of configuration entries of the software instance.
    * Generated by: EASy-Producer.
    */
    public class ConfigurationPathsBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int configurationPathCounter = 0;
    
        /**
        * Creates a builder instance for ConfigurationPaths.
        *
        * @param smBuilder the parent submodel element container builder
        */
        protected ConfigurationPathsBuilder(DelegatingSubmodelElementContainerBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("ConfigurationPaths"), smBuilder);
            setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                + "SoftwareNameplateInstance/ConfigurationPaths"));
        }
        
        /**
        * Creates a builder instance for ConfigurationPaths.
        *
        * @param smBuilder the parent submodel element container builder
        * @param nr the structure number
        */
        protected ConfigurationPathsBuilder(DelegatingSubmodelElementContainerBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("ConfigurationPaths", nr)), 
                smBuilder);
            setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                + "SoftwareNameplateInstance/ConfigurationPaths"));
        }
        
        /**
        * Creates a builder for ConfigurationPath.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public ConfigurationPathBuilder createConfigurationPathBuilder() {
            // counting -> composition of idShort
            return new ConfigurationPathBuilder(this, ++configurationPathCounter);
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(1 <= configurationPathCounter, "Cardinality {} of ConfigurationPath must be greater or equal 1.",
                configurationPathCounter);
            
            return super.build();
        }
    }
    
    /**
    * Builder support for contains a single configuration entry of the software instance.
    * Generated by: EASy-Producer.
    */
    public class ConfigurationPathBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int configurationURICounter = 0;
        private int configurationTypeCounter = 0;
    
        /**
        * Creates a builder instance for ConfigurationPath.
        *
        * @param smBuilder the parent submodel element container builder
        */
        protected ConfigurationPathBuilder(DelegatingSubmodelElementContainerBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("ConfigurationPath"), smBuilder);
            setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                + "SoftwareNameplateInstance/ConfigurationPath"));
        }
        
        /**
        * Creates a builder instance for ConfigurationPath.
        *
        * @param smBuilder the parent submodel element container builder
        * @param nr the structure number
        */
        protected ConfigurationPathBuilder(DelegatingSubmodelElementContainerBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("ConfigurationPath", nr)), 
                smBuilder);
            setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                + "SoftwareNameplateInstance/ConfigurationPath"));
        }
        
        /**
        * Changes indicates the path to the configuration..
        *
        * @param configurationURI the value for ConfigurationURI
        * @return <b>this</b> (builder style)
        */
        public ConfigurationPathBuilder setConfigurationURI(String configurationURI) {
            configurationURICounter++;
            createPropertyBuilder("ConfigurationURI")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateInstance/ConfigurationURI"))
                .setValue(Type.ANY_URI, configurationURI).build();
            return this;
        }
        
        /**
        * Changes indicates the type of configuration (e.g. general configuration, user configuration)..
        *
        * @param configurationType the value for ConfigurationType
        * @return <b>this</b> (builder style)
        */
        public ConfigurationPathBuilder setConfigurationType(String configurationType) {
            configurationTypeCounter++;
            createPropertyBuilder("ConfigurationType")
                .setSemanticId(iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/SoftwareNameplate/"
                    + "SoftwareNameplateInstance/ConfigurationType"))
                .setValue(Type.STRING, configurationType).build();
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(configurationURICounter == 1, "Cardinality {} of ConfigurationURI must be equal 1.",
                configurationURICounter);
            assertThat(0 <= configurationTypeCounter && configurationTypeCounter <= 1, "Cardinality {} of Configuration"
                + "Type must be greater or equal 0 and less or equal 1.", configurationTypeCounter);
            
            return super.build();
        }
    }
    
    /**
    * Builder support for the SMC "ContactInformation" contains information on how to contact the manufacturer or an
    * authorised service provider, e.g. when a maintenance service is required.
    * Generated by: EASy-Producer.
    */
    public class ContactInformationBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int roleOfContactPersonCounter = 0;
        private int nationalCodeCounter = 0;
        private int languageCounter = 0;
        private int timeZoneCounter = 0;
        private int cityTownCounter = 0;
        private int companyCounter = 0;
        private int departmentCounter = 0;
        private int phoneCounter = 0;
        private int faxCounter = 0;
        private int emailCounter = 0;
        private int iPCommunicationCounter = 0;
        private int streetCounter = 0;
        private int zipcodeCounter = 0;
        private int pOBoxCounter = 0;
        private int zipCodeOfPOBoxCounter = 0;
        private int stateCountyCounter = 0;
        private int nameOfContactCounter = 0;
        private int firstNameCounter = 0;
        private int middleNamesCounter = 0;
        private int titleCounter = 0;
        private int academicTitleCounter = 0;
        private int furtherDetailsOfContactCounter = 0;
        private int addressOfAdditionalLinkCounter = 0;
    
        /**
        * Creates a builder instance for ContactInformation.
        *
        * @param smBuilder the parent submodel element container builder
        */
        protected ContactInformationBuilder(DelegatingSubmodelElementContainerBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("ContactInformation"), smBuilder);
            setSemanticId(iri("https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation"));
        }
        
        /**
        * Creates a builder instance for ContactInformation.
        *
        * @param smBuilder the parent submodel element container builder
        * @param nr the structure number
        */
        protected ContactInformationBuilder(DelegatingSubmodelElementContainerBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("ContactInformation", nr)), 
                smBuilder);
            setSemanticId(iri("https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation"));
        }
        
        /**
        * Changes function of a contact person in a process..
        *
        * @param roleOfContactPerson the value for RoleOfContactPerson
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setRoleOfContactPerson(IRoleOfContactPerson roleOfContactPerson) {
            roleOfContactPersonCounter++;
            createPropertyBuilder("RoleOfContactPerson")
                .setSemanticId(irdi("0173-1#02-AAO204#003"))
                .setValue(Type.STRING, roleOfContactPerson.getValue()).build();
            return this;
        }
        
        /**
        * Changes code of a country..
        *
        * @param nationalCode the value for NationalCode
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setNationalCode(LangString... nationalCode) {
            if (nationalCode.length > 0) {
                nationalCodeCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "NationalCode", 
                irdi("0173-1#02-AAO134#002"), nationalCode);
            return this;
        }
        
        /**
        * Changes available language..
        *
        * @param language the value for Language
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setLanguage(String language) {
            // counting -> composition of idShort
            createPropertyBuilder(getCountingIdShort("Language", ++languageCounter))
                .setSemanticId(iri(
                    "https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/Language"))
                .setValue(Type.STRING, language).build();
            return this;
        }
        
        /**
        * Changes offsets from Coordinated Universal Time (UTC)..
        *
        * @param timeZone the value for TimeZone
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setTimeZone(String timeZone) {
            timeZoneCounter++;
            createPropertyBuilder("TimeZone")
                .setSemanticId(iri(
                    "https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/TimeZone"))
                .setValue(Type.STRING, timeZone).build();
            return this;
        }
        
        /**
        * Changes town or city..
        *
        * @param cityTown the value for CityTown
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setCityTown(LangString... cityTown) {
            if (cityTown.length > 0) {
                cityTownCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "CityTown", 
                irdi("0173-1#02-AAO132#002"), cityTown);
            return this;
        }
        
        /**
        * Changes name of the company..
        *
        * @param company the value for Company
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setCompany(LangString... company) {
            if (company.length > 0) {
                companyCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "Company", 
                irdi("0173-1#02-AAW001#001"), company);
            return this;
        }
        
        /**
        * Changes administrative section within an organisation where a business partner is located..
        *
        * @param department the value for Department
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setDepartment(LangString... department) {
            if (department.length > 0) {
                departmentCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "Department", 
                irdi("0173-1#02-AAO127#003"), department);
            return this;
        }
        
        /**
        * Creates a builder for Phone.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public PhoneBuilder createPhoneBuilder() {
            phoneCounter++;
            return new PhoneBuilder(this);
        }
        
        /**
        * Creates a builder for Fax.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public FaxBuilder createFaxBuilder() {
            faxCounter++;
            return new FaxBuilder(this);
        }
        
        /**
        * Creates a builder for Email.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public EmailBuilder createEmailBuilder() {
            emailCounter++;
            return new EmailBuilder(this);
        }
        
        /**
        * Creates a builder for IPCommunication.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public IPCommunicationBuilder createIPCommunicationBuilder() {
            // counting -> composition of idShort
            return new IPCommunicationBuilder(this, ++iPCommunicationCounter);
        }
        
        /**
        * Changes street name and house number..
        *
        * @param street the value for Street
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setStreet(LangString... street) {
            if (street.length > 0) {
                streetCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "Street", 
                irdi("0173-1#02-AAO128#002"), street);
            return this;
        }
        
        /**
        * Changes zIP code of address..
        *
        * @param zipcode the value for Zipcode
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setZipcode(LangString... zipcode) {
            if (zipcode.length > 0) {
                zipcodeCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "Zipcode", 
                irdi("0173-1#02-AAO129#002"), zipcode);
            return this;
        }
        
        /**
        * Changes p.O. box number..
        *
        * @param pOBox the value for POBox
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setPOBox(LangString... pOBox) {
            if (pOBox.length > 0) {
                pOBoxCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "POBox", 
                irdi("0173-1#02-AAO130#002"), pOBox);
            return this;
        }
        
        /**
        * Changes zIP code of P.O. box address..
        *
        * @param zipCodeOfPOBox the value for ZipCodeOfPOBox
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setZipCodeOfPOBox(LangString... zipCodeOfPOBox) {
            if (zipCodeOfPOBox.length > 0) {
                zipCodeOfPOBoxCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "ZipCodeOfPOBox", 
                irdi("0173-1#02-AAO131#002"), zipCodeOfPOBox);
            return this;
        }
        
        /**
        * Changes federal state a part of a state..
        *
        * @param stateCounty the value for StateCounty
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setStateCounty(LangString... stateCounty) {
            if (stateCounty.length > 0) {
                stateCountyCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "StateCounty", 
                irdi("0173-1#02-AAO133#002"), stateCounty);
            return this;
        }
        
        /**
        * Changes surname of a contact person..
        *
        * @param nameOfContact the value for NameOfContact
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setNameOfContact(LangString... nameOfContact) {
            if (nameOfContact.length > 0) {
                nameOfContactCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "NameOfContact", 
                irdi("0173-1#02-AAO205#002"), nameOfContact);
            return this;
        }
        
        /**
        * Changes first name of a contact person..
        *
        * @param firstName the value for FirstName
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setFirstName(LangString... firstName) {
            if (firstName.length > 0) {
                firstNameCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "FirstName", 
                irdi("0173-1#02-AAO206#002"), firstName);
            return this;
        }
        
        /**
        * Changes middle names of contact person..
        *
        * @param middleNames the value for MiddleNames
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setMiddleNames(LangString... middleNames) {
            if (middleNames.length > 0) {
                middleNamesCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "MiddleNames", 
                irdi("0173-1#02-AAO207#002"), middleNames);
            return this;
        }
        
        /**
        * Changes common, formal, religious, or other title preceding a contact person's name..
        *
        * @param title the value for Title
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setTitle(LangString... title) {
            if (title.length > 0) {
                titleCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "Title", 
                irdi("0173-1#02-AAO208#003"), title);
            return this;
        }
        
        /**
        * Changes academic title preceding a contact person's name..
        *
        * @param academicTitle the value for AcademicTitle
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setAcademicTitle(LangString... academicTitle) {
            if (academicTitle.length > 0) {
                academicTitleCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "AcademicTitle", 
                irdi("0173-1#02-AAO209#003"), academicTitle);
            return this;
        }
        
        /**
        * Changes additional information of the contact person..
        *
        * @param furtherDetailsOfContact the value for FurtherDetailsOfContact
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setFurtherDetailsOfContact(LangString... furtherDetailsOfContact) {
            if (furtherDetailsOfContact.length > 0) {
                furtherDetailsOfContactCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "FurtherDetailsOfContact", 
                irdi("0173-1#02-AAO210#002"), furtherDetailsOfContact);
            return this;
        }
        
        /**
        * Changes web site address where information about the product or contact is given..
        *
        * @param addressOfAdditionalLink the value for AddressOfAdditionalLink
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setAddressOfAdditionalLink(String addressOfAdditionalLink) {
            addressOfAdditionalLinkCounter++;
            createPropertyBuilder("AddressOfAdditionalLink")
                .setSemanticId(irdi("0173-1#02-AAQ326#002"))
                .setValue(Type.STRING, addressOfAdditionalLink).build();
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(0 <= roleOfContactPersonCounter && roleOfContactPersonCounter <= 1, "Cardinality {} of RoleOfCon"
                + "tactPerson must be greater or equal 0 and less or equal 1.", roleOfContactPersonCounter);
            assertThat(0 <= nationalCodeCounter && nationalCodeCounter <= 1, "Cardinality {} of NationalCode must be gr"
                + "eater or equal 0 and less or equal 1.", nationalCodeCounter);
            assertThat(0 <= languageCounter, "Cardinality {} of Language must be greater or equal 0.",
                languageCounter);
            assertThat(0 <= timeZoneCounter && timeZoneCounter <= 1, "Cardinality {} of TimeZone must be greater or equ"
                + "al 0 and less or equal 1.", timeZoneCounter);
            assertThat(0 <= cityTownCounter && cityTownCounter <= 1, "Cardinality {} of CityTown must be greater or equ"
                + "al 0 and less or equal 1.", cityTownCounter);
            assertThat(0 <= companyCounter && companyCounter <= 1, "Cardinality {} of Company must be greater or equal "
                + "0 and less or equal 1.", companyCounter);
            assertThat(0 <= departmentCounter && departmentCounter <= 1, "Cardinality {} of Department must be greater "
                + "or equal 0 and less or equal 1.", departmentCounter);
            assertThat(0 <= phoneCounter && phoneCounter <= 1, "Cardinality {} of Phone must be greater or equal 0 and "
                + "less or equal 1.", phoneCounter);
            assertThat(0 <= faxCounter && faxCounter <= 1, "Cardinality {} of Fax must be greater or equal 0 and less o"
                + "r equal 1.", faxCounter);
            assertThat(0 <= emailCounter && emailCounter <= 1, "Cardinality {} of Email must be greater or equal 0 and "
                + "less or equal 1.", emailCounter);
            assertThat(0 <= iPCommunicationCounter, "Cardinality {} of IPCommunication must be greater or equal 0.",
                iPCommunicationCounter);
            assertThat(0 <= streetCounter && streetCounter <= 1, "Cardinality {} of Street must be greater or equal 0 a"
                + "nd less or equal 1.", streetCounter);
            assertThat(0 <= zipcodeCounter && zipcodeCounter <= 1, "Cardinality {} of Zipcode must be greater or equal "
                + "0 and less or equal 1.", zipcodeCounter);
            assertThat(0 <= pOBoxCounter && pOBoxCounter <= 1, "Cardinality {} of POBox must be greater or equal 0 and "
                + "less or equal 1.", pOBoxCounter);
            assertThat(0 <= zipCodeOfPOBoxCounter && zipCodeOfPOBoxCounter <= 1, "Cardinality {} of ZipCodeOfPOBox must"
                + " be greater or equal 0 and less or equal 1.", zipCodeOfPOBoxCounter);
            assertThat(0 <= stateCountyCounter && stateCountyCounter <= 1, "Cardinality {} of StateCounty must be great"
                + "er or equal 0 and less or equal 1.", stateCountyCounter);
            assertThat(0 <= nameOfContactCounter && nameOfContactCounter <= 1, "Cardinality {} of NameOfContact must be"
                + " greater or equal 0 and less or equal 1.", nameOfContactCounter);
            assertThat(0 <= firstNameCounter && firstNameCounter <= 1, "Cardinality {} of FirstName must be greater or "
                + "equal 0 and less or equal 1.", firstNameCounter);
            assertThat(0 <= middleNamesCounter && middleNamesCounter <= 1, "Cardinality {} of MiddleNames must be great"
                + "er or equal 0 and less or equal 1.", middleNamesCounter);
            assertThat(0 <= titleCounter && titleCounter <= 1, "Cardinality {} of Title must be greater or equal 0 and "
                + "less or equal 1.", titleCounter);
            assertThat(0 <= academicTitleCounter && academicTitleCounter <= 1, "Cardinality {} of AcademicTitle must be"
                + " greater or equal 0 and less or equal 1.", academicTitleCounter);
            assertThat(0 <= furtherDetailsOfContactCounter && furtherDetailsOfContactCounter <= 1, "Cardinality {} of F"
                + "urtherDetailsOfContact must be greater or equal 0 and less or equal 1.", 
                furtherDetailsOfContactCounter);
            assertThat(0 <= addressOfAdditionalLinkCounter && addressOfAdditionalLinkCounter <= 1, "Cardinality {} of A"
                + "ddressOfAdditionalLink must be greater or equal 0 and less or equal 1.", 
                addressOfAdditionalLinkCounter);
            
            return super.build();
        }
    }
    
    /**
    * Builder support for phone number including type.
    * Generated by: EASy-Producer.
    */
    public class PhoneBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int telephoneNumberCounter = 0;
        private int typeOfTelephoneCounter = 0;
        private int availableTimeCounter = 0;
    
        /**
        * Creates a builder instance for Phone.
        *
        * @param smBuilder the parent submodel element container builder
        */
        protected PhoneBuilder(DelegatingSubmodelElementContainerBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("Phone"), smBuilder);
            setSemanticId(iri("https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/Phone"
                ));
        }
        
        /**
        * Creates a builder instance for Phone.
        *
        * @param smBuilder the parent submodel element container builder
        * @param nr the structure number
        */
        protected PhoneBuilder(DelegatingSubmodelElementContainerBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("Phone", nr)), smBuilder);
            setSemanticId(iri("https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/Phone"
                ));
        }
        
        /**
        * Changes complete telephone number to be called to reach a business partner..
        *
        * @param telephoneNumber the value for TelephoneNumber
        * @return <b>this</b> (builder style)
        */
        public PhoneBuilder setTelephoneNumber(LangString... telephoneNumber) {
            if (telephoneNumber.length > 0) {
                telephoneNumberCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "TelephoneNumber", 
                irdi("0173-1#02-AAO136#002"), telephoneNumber);
            return this;
        }
        
        /**
        * Changes characterization of a telephone according to its location or usage..
        *
        * @param typeOfTelephone the value for TypeOfTelephone
        * @return <b>this</b> (builder style)
        */
        public PhoneBuilder setTypeOfTelephone(TypeOfTelephone typeOfTelephone) {
            typeOfTelephoneCounter++;
            createPropertyBuilder("TypeOfTelephone")
                .setSemanticId(irdi("0173-1#02-AAO137#003"))
                .setValue(Type.STRING, typeOfTelephone.getValue()).build();
            return this;
        }
        
        /**
        * Changes specification of the available time window..
        *
        * @param availableTime the value for AvailableTime
        * @return <b>this</b> (builder style)
        */
        public PhoneBuilder setAvailableTime(LangString... availableTime) {
            if (availableTime.length > 0) {
                availableTimeCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "AvailableTime", 
                iri("https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/AvailableTime/"
                    ), availableTime);
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(telephoneNumberCounter == 1, "Cardinality {} of TelephoneNumber must be equal 1.",
                telephoneNumberCounter);
            assertThat(0 <= typeOfTelephoneCounter && typeOfTelephoneCounter <= 1, "Cardinality {} of TypeOfTelephone m"
                + "ust be greater or equal 0 and less or equal 1.", typeOfTelephoneCounter);
            assertThat(0 <= availableTimeCounter && availableTimeCounter <= 1, "Cardinality {} of AvailableTime must be"
                + " greater or equal 0 and less or equal 1.", availableTimeCounter);
            
            return super.build();
        }
    }
    
    /**
    * Builder support for fax number including type.
    * Generated by: EASy-Producer.
    */
    public class FaxBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int faxNumberCounter = 0;
        private int typeOfFaxNumberCounter = 0;
    
        /**
        * Creates a builder instance for Fax.
        *
        * @param smBuilder the parent submodel element container builder
        */
        protected FaxBuilder(DelegatingSubmodelElementContainerBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("Fax"), smBuilder);
            setSemanticId(irdi("0173-1#02-AAQ834#005"));
        }
        
        /**
        * Creates a builder instance for Fax.
        *
        * @param smBuilder the parent submodel element container builder
        * @param nr the structure number
        */
        protected FaxBuilder(DelegatingSubmodelElementContainerBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("Fax", nr)), smBuilder);
            setSemanticId(irdi("0173-1#02-AAQ834#005"));
        }
        
        /**
        * Changes complete telephone number to be called to reach a business partner's fax machine..
        *
        * @param faxNumber the value for FaxNumber
        * @return <b>this</b> (builder style)
        */
        public FaxBuilder setFaxNumber(LangString... faxNumber) {
            if (faxNumber.length > 0) {
                faxNumberCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "FaxNumber", 
                irdi("0173-1#02-AAO195#002"), faxNumber);
            return this;
        }
        
        /**
        * Changes characterization of the fax according its location or usage..
        *
        * @param typeOfFaxNumber the value for TypeOfFaxNumber
        * @return <b>this</b> (builder style)
        */
        public FaxBuilder setTypeOfFaxNumber(TypeOfFaxNumber typeOfFaxNumber) {
            typeOfFaxNumberCounter++;
            createPropertyBuilder("TypeOfFaxNumber")
                .setSemanticId(irdi("0173-1#02-AAO196#003"))
                .setValue(Type.STRING, typeOfFaxNumber.getValue()).build();
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(faxNumberCounter == 1, "Cardinality {} of FaxNumber must be equal 1.", faxNumberCounter);
            assertThat(0 <= typeOfFaxNumberCounter && typeOfFaxNumberCounter <= 1, "Cardinality {} of TypeOfFaxNumber m"
                + "ust be greater or equal 0 and less or equal 1.", typeOfFaxNumberCounter);
            
            return super.build();
        }
    }
    
    /**
    * Builder support for e-mail address and encryption method.
    * Generated by: EASy-Producer.
    */
    public class EmailBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int emailAddressCounter = 0;
        private int publicKeyCounter = 0;
        private int typeOfEmailAddressCounter = 0;
        private int typeOfPublicKeyCounter = 0;
    
        /**
        * Creates a builder instance for Email.
        *
        * @param smBuilder the parent submodel element container builder
        */
        protected EmailBuilder(DelegatingSubmodelElementContainerBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("Email"), smBuilder);
            setSemanticId(irdi("0173-1#02-AAQ836#005"));
        }
        
        /**
        * Creates a builder instance for Email.
        *
        * @param smBuilder the parent submodel element container builder
        * @param nr the structure number
        */
        protected EmailBuilder(DelegatingSubmodelElementContainerBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("Email", nr)), smBuilder);
            setSemanticId(irdi("0173-1#02-AAQ836#005"));
        }
        
        /**
        * Changes electronic mail address of a business partner..
        *
        * @param emailAddress the value for EmailAddress
        * @return <b>this</b> (builder style)
        */
        public EmailBuilder setEmailAddress(String emailAddress) {
            emailAddressCounter++;
            createPropertyBuilder("EmailAddress")
                .setSemanticId(irdi("0173-1#02-AAO198#002"))
                .setValue(Type.STRING, emailAddress).build();
            return this;
        }
        
        /**
        * Changes public part of an unsymmetrical key pair to sign or encrypt text or messages..
        *
        * @param publicKey the value for PublicKey
        * @return <b>this</b> (builder style)
        */
        public EmailBuilder setPublicKey(LangString... publicKey) {
            if (publicKey.length > 0) {
                publicKeyCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "PublicKey", 
                irdi("0173-1#02-AAO200#002"), publicKey);
            return this;
        }
        
        /**
        * Changes characterization of an e-mail address according to its location or usage..
        *
        * @param typeOfEmailAddress the value for TypeOfEmailAddress
        * @return <b>this</b> (builder style)
        */
        public EmailBuilder setTypeOfEmailAddress(TypeOfEmailAddress typeOfEmailAddress) {
            typeOfEmailAddressCounter++;
            createPropertyBuilder("TypeOfEmailAddress")
                .setSemanticId(irdi("0173-1#02-AAO199#003"))
                .setValue(Type.STRING, typeOfEmailAddress.getValue()).build();
            return this;
        }
        
        /**
        * Changes characterization of a public key according to its encryption process..
        *
        * @param typeOfPublicKey the value for TypeOfPublicKey
        * @return <b>this</b> (builder style)
        */
        public EmailBuilder setTypeOfPublicKey(LangString... typeOfPublicKey) {
            if (typeOfPublicKey.length > 0) {
                typeOfPublicKeyCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "TypeOfPublicKey", 
                irdi("0173-1#02-AAO201#002"), typeOfPublicKey);
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(emailAddressCounter == 1, "Cardinality {} of EmailAddress must be equal 1.",
                emailAddressCounter);
            assertThat(0 <= publicKeyCounter && publicKeyCounter <= 1, "Cardinality {} of PublicKey must be greater or "
                + "equal 0 and less or equal 1.", publicKeyCounter);
            assertThat(0 <= typeOfEmailAddressCounter && typeOfEmailAddressCounter <= 1, "Cardinality {} of TypeOfEmail"
                + "Address must be greater or equal 0 and less or equal 1.", typeOfEmailAddressCounter);
            assertThat(0 <= typeOfPublicKeyCounter && typeOfPublicKeyCounter <= 1, "Cardinality {} of TypeOfPublicKey m"
                + "ust be greater or equal 0 and less or equal 1.", typeOfPublicKeyCounter);
            
            return super.build();
        }
    }
    
    /**
    * Builder support for iP-based communication channels, e.g. chat or video call.
    * Generated by: EASy-Producer.
    */
    public class IPCommunicationBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int addressOfAdditionalLinkCounter = 0;
        private int typeOfCommunicationCounter = 0;
        private int availableTimeCounter = 0;
    
        /**
        * Creates a builder instance for IPCommunication.
        *
        * @param smBuilder the parent submodel element container builder
        */
        protected IPCommunicationBuilder(DelegatingSubmodelElementContainerBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("IPCommunication"), smBuilder);
            setSemanticId(iri(
                "https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/IPCommunication/"));
        }
        
        /**
        * Creates a builder instance for IPCommunication.
        *
        * @param smBuilder the parent submodel element container builder
        * @param nr the structure number
        */
        protected IPCommunicationBuilder(DelegatingSubmodelElementContainerBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("IPCommunication", nr)), 
                smBuilder);
            setSemanticId(iri(
                "https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/IPCommunication/"));
        }
        
        /**
        * Changes web site address where information about the product or contact is given..
        *
        * @param addressOfAdditionalLink the value for AddressOfAdditionalLink
        * @return <b>this</b> (builder style)
        */
        public IPCommunicationBuilder setAddressOfAdditionalLink(String addressOfAdditionalLink) {
            addressOfAdditionalLinkCounter++;
            createPropertyBuilder("AddressOfAdditionalLink")
                .setSemanticId(irdi("0173-1#02-AAQ326#002"))
                .setValue(Type.STRING, addressOfAdditionalLink).build();
            return this;
        }
        
        /**
        * Changes characterization of an IP-based communication channel..
        *
        * @param typeOfCommunication the value for TypeOfCommunication
        * @return <b>this</b> (builder style)
        */
        public IPCommunicationBuilder setTypeOfCommunication(String typeOfCommunication) {
            typeOfCommunicationCounter++;
            createPropertyBuilder("TypeOfCommunication")
                .setSemanticId(iri("https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/"
                    + "IPCommunication/TypeOfCommunication"))
                .setValue(Type.STRING, typeOfCommunication).build();
            return this;
        }
        
        /**
        * Changes specification of the available time window..
        *
        * @param availableTime the value for AvailableTime
        * @return <b>this</b> (builder style)
        */
        public IPCommunicationBuilder setAvailableTime(LangString... availableTime) {
            if (availableTime.length > 0) {
                availableTimeCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "AvailableTime", 
                iri("https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/AvailableTime/"
                    ), availableTime);
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(addressOfAdditionalLinkCounter == 1, "Cardinality {} of AddressOfAdditionalLink must be equal 1."
                + "", addressOfAdditionalLinkCounter);
            assertThat(0 <= typeOfCommunicationCounter && typeOfCommunicationCounter <= 1, "Cardinality {} of TypeOfCom"
                + "munication must be greater or equal 0 and less or equal 1.", typeOfCommunicationCounter);
            assertThat(0 <= availableTimeCounter && availableTimeCounter <= 1, "Cardinality {} of AvailableTime must be"
                + " greater or equal 0 and less or equal 1.", availableTimeCounter);
            
            return super.build();
        }
    }
    
}
