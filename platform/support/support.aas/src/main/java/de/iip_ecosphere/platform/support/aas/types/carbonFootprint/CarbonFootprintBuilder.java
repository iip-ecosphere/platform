package de.iip_ecosphere.platform.support.aas.types.carbonFootprint;

import static de.iip_ecosphere.platform.support.aas.IdentifierType.*;
import static de.iip_ecosphere.platform.support.aas.types.common.Utils.*;

import de.iip_ecosphere.platform.support.Builder;
import de.iip_ecosphere.platform.support.aas.Aas.AasBuilder;
import de.iip_ecosphere.platform.support.aas.Submodel.SubmodelBuilder;
import de.iip_ecosphere.platform.support.aas.*;
import de.iip_ecosphere.platform.support.aas.types.common.*;

/**
* Builder support for the Submodel provides the means to access the Carbon Footprint of the asset.
* Generated by: EASy-Producer.
*/
public class CarbonFootprintBuilder extends DelegatingSubmodelBuilder {

    private boolean createMultiLanguageProperties = true;

    private int productCarbonFootprintCounter = 0;
    private int transportCarbonFootprintCounter = 0;

    /**
    * Enumeration support for standard, method for determining the greenhouse gas emissions of a product.
    * Generated by: EASy-Producer.
    */
    public enum PCFCalculationMethod {
    
        EN_15804(0, "0173-1#07-ABU223#002", "EN 15804"),
        GHG_PROTOCOL(0, "0173-1#07-ABU221#002", "GHG Protocol"),
        IEC_TS_63058(0, "0173-1#07-ABU222#002", "IEC TS 63058"),
        ISO_14040(0, "0173-1#07-ABV505#002", "ISO 14040"),
        ISO_14044(0, "0173-1#07-ABV506#002", "ISO 14044"),
        ISO_14067(0, "0173-1#07-ABU218#002", "ISO 14067"),
        IEC_63366(0, "0173-1#07-ACA792#001", "IEC 63366"),
        PEP_ECOPASSPORT(0, "0173-1#07-ABU220#002", "PEP Ecopassport");
    
        private int valueId;
        private String semanticId;
        private String value;
    
        /**
         * Creates a constant.
         * 
         * @param valueId the value id/given ordinal
         * @param semanticId the semantic id
         * @param value the value
         */
        private PCFCalculationMethod(int valueId, String semanticId, String value) {
            this.valueId = valueId;
            this.semanticId = semanticId;
            this.value = value;
        }
        
        /**
        * Returns the (optional) value id/given ordinal.
        *
        * @return the (optional) value id/given ordinal
        */
        public int getValueId() {
            return valueId;
        }
        
        /**
        * Returns the (optional) semantic id.
        *
        * @return the (optional) semantic id
        */
        public String getSemanticId() {
            return semanticId;
        }
        
        /**
        * Returns the value to be used in the AAS.
        *
        * @return the value to be used in the AAS
        */
        public String getValue() {
            return value;
        }
        
    }
    
    /**
    * Enumeration support for quantity unit of the product to which the PCF information on the CO footprint refers.
    * Generated by: EASy-Producer.
    */
    public enum PCFReferenceValueForCalculation {
    
        G(0, "0173-1#07-ABZ596#001", "g"),
        KG(0, "0173-1#07-ABZ597#001", "kg"),
        T(0, "0173-1#07-ABZ598#001", "t"),
        ML(0, "0173-1#07-ABZ599#001", "ml"),
        L(0, "0173-1#07-ABZ600#001", "l"),
        CBM(0, "0173-1#07-ABZ601#001", "cbm"),
        QM(0, "0173-1#07-ABZ602#001", "qm"),
        PIECE(0, "0173-1#07-ABZ603#001", "piece");
    
        private int valueId;
        private String semanticId;
        private String value;
    
        /**
         * Creates a constant.
         * 
         * @param valueId the value id/given ordinal
         * @param semanticId the semantic id
         * @param value the value
         */
        private PCFReferenceValueForCalculation(int valueId, String semanticId, String value) {
            this.valueId = valueId;
            this.semanticId = semanticId;
            this.value = value;
        }
        
        /**
        * Returns the (optional) value id/given ordinal.
        *
        * @return the (optional) value id/given ordinal
        */
        public int getValueId() {
            return valueId;
        }
        
        /**
        * Returns the (optional) semantic id.
        *
        * @return the (optional) semantic id
        */
        public String getSemanticId() {
            return semanticId;
        }
        
        /**
        * Returns the value to be used in the AAS.
        *
        * @return the value to be used in the AAS
        */
        public String getValue() {
            return value;
        }
        
    }
    
    /**
    * Enumeration support for life cycle stages of the product according to the quantification requirements of the
    * standard to which the PCF carbon footprint statement refers.
    * Generated by: EASy-Producer.
    */
    public enum PCFLifeCyclePhase {
    
        A1(0, "0173-1#07-ABU208#001", "A1 - raw material supply (and upstream production)"),
        A2(0, "0173-1#07-ABU209#001", "A2 - cradle-to-gate transport to factory"),
        A3(0, "0173-1#07-ABU210#001", "A3 - production"),
        A4(0, "0173-1#07-ABU211#001", "A4 - transport to final destination"),
        B1(0, "0173-1#07-ABU212#001", "B1 - usage phase"),
        B2(0, "0173-1#07-ABV498#001", "B2 - maintenance"),
        B3(0, "0173-1#07-ABV497#001", "B3 - repair"),
        B6(0, "0173-1#07-ABV500#001", "B6 - usage energy consumption"),
        B7(0, "0173-1#07-ABV501#001", "B7 - usage water consumption"),
        C1(0, "0173-1#07-ABV502#001", "C1 - reassembly"),
        C2(0, "0173-1#07-ABU213#001", "C2 - transport to recycler"),
        C3(0, "0173-1#07-ABV503#001", "C3 - recycling, waste treatment"),
        C4(0, "0173-1#07-ABV504#001", "C4 - landfill"),
        D(0, "0173-1#07-ABU214#001", "D - reuse"),
        A1_A3(0, "0173-1#07-ABZ789#001", "A1-A3");
    
        private int valueId;
        private String semanticId;
        private String value;
    
        /**
         * Creates a constant.
         * 
         * @param valueId the value id/given ordinal
         * @param semanticId the semantic id
         * @param value the value
         */
        private PCFLifeCyclePhase(int valueId, String semanticId, String value) {
            this.valueId = valueId;
            this.semanticId = semanticId;
            this.value = value;
        }
        
        /**
        * Returns the (optional) value id/given ordinal.
        *
        * @return the (optional) value id/given ordinal
        */
        public int getValueId() {
            return valueId;
        }
        
        /**
        * Returns the (optional) semantic id.
        *
        * @return the (optional) semantic id
        */
        public String getSemanticId() {
            return semanticId;
        }
        
        /**
        * Returns the value to be used in the AAS.
        *
        * @return the value to be used in the AAS
        */
        public String getValue() {
            return value;
        }
        
    }
    
    /**
    * Enumeration support for standard, method for determining the greenhouse gas emissions for the transport of a
    * product.
    * Generated by: EASy-Producer.
    */
    public enum TCFCalculationMethod {
    
        EN_16258(0, "0173-1#07-ABU224#001", "EN 16258");
    
        private int valueId;
        private String semanticId;
        private String value;
    
        /**
         * Creates a constant.
         * 
         * @param valueId the value id/given ordinal
         * @param semanticId the semantic id
         * @param value the value
         */
        private TCFCalculationMethod(int valueId, String semanticId, String value) {
            this.valueId = valueId;
            this.semanticId = semanticId;
            this.value = value;
        }
        
        /**
        * Returns the (optional) value id/given ordinal.
        *
        * @return the (optional) value id/given ordinal
        */
        public int getValueId() {
            return valueId;
        }
        
        /**
        * Returns the (optional) semantic id.
        *
        * @return the (optional) semantic id
        */
        public String getSemanticId() {
            return semanticId;
        }
        
        /**
        * Returns the value to be used in the AAS.
        *
        * @return the value to be used in the AAS
        */
        public String getValue() {
            return value;
        }
        
    }
    
    /**
    * Enumeration support for amount of product to which the TCF carbon footprint statement relates.
    * Generated by: EASy-Producer.
    */
    public enum TCFReferenceValueForCalculation {
    
        G(0, "0173-1#07-ABZ596#001", "g"),
        KG(0, "0173-1#07-ABZ597#001", "kg"),
        T(0, "0173-1#07-ABZ598#001", "t"),
        ML(0, "0173-1#07-ABZ599#001", "ml"),
        L(0, "0173-1#07-ABZ600#001", "l"),
        CBM(0, "0173-1#07-ABZ601#001", "cbm"),
        QM(0, "0173-1#07-ABZ602#001", "qm"),
        PIECE(0, "0173-1#07-ABZ603#001", "piece");
    
        private int valueId;
        private String semanticId;
        private String value;
    
        /**
         * Creates a constant.
         * 
         * @param valueId the value id/given ordinal
         * @param semanticId the semantic id
         * @param value the value
         */
        private TCFReferenceValueForCalculation(int valueId, String semanticId, String value) {
            this.valueId = valueId;
            this.semanticId = semanticId;
            this.value = value;
        }
        
        /**
        * Returns the (optional) value id/given ordinal.
        *
        * @return the (optional) value id/given ordinal
        */
        public int getValueId() {
            return valueId;
        }
        
        /**
        * Returns the (optional) semantic id.
        *
        * @return the (optional) semantic id
        */
        public String getSemanticId() {
            return semanticId;
        }
        
        /**
        * Returns the value to be used in the AAS.
        *
        * @return the value to be used in the AAS
        */
        public String getValue() {
            return value;
        }
        
    }
    
    /**
    * Enumeration support for processes in a transport service to determine the sum of all direct or indirect
    * greenhouse gas emissions from fuel supply and vehicle operation.
    * Generated by: EASy-Producer.
    */
    public enum TCFProcessesForGreenhouseGasEmissionInATransportService {
    
        WTT(0, "0173-1#07-ABU216#001", "WTT - Well-to-Tank"),
        TTW(0, "0173-1#07-ABU215#001", "TTW - Tank-to-Wheel"),
        WTW(0, "0173-1#07-ABU217#001", "WTW - Well-to-Wheel");
    
        private int valueId;
        private String semanticId;
        private String value;
    
        /**
         * Creates a constant.
         * 
         * @param valueId the value id/given ordinal
         * @param semanticId the semantic id
         * @param value the value
         */
        private TCFProcessesForGreenhouseGasEmissionInATransportService(int valueId, String semanticId, String value) {
            this.valueId = valueId;
            this.semanticId = semanticId;
            this.value = value;
        }
        
        /**
        * Returns the (optional) value id/given ordinal.
        *
        * @return the (optional) value id/given ordinal
        */
        public int getValueId() {
            return valueId;
        }
        
        /**
        * Returns the (optional) semantic id.
        *
        * @return the (optional) semantic id
        */
        public String getSemanticId() {
            return semanticId;
        }
        
        /**
        * Returns the value to be used in the AAS.
        *
        * @return the value to be used in the AAS
        */
        public String getValue() {
            return value;
        }
        
    }
    
    /**
    * Creates a CarbonFootprint submodel builder.
    * 
    * @param aasBuilder the parent AAS builder
    * @param identifier the submodel identifier
    */            
    public CarbonFootprintBuilder(AasBuilder aasBuilder, String identifier) {
        this(aasBuilder, identifier, "CarbonFootprint");
    }

    /**
    * Creates a CarbonFootprint submodel builder.
    * 
    * @param aasBuilder the parent AAS builder
    * @param identifier the submodel identifier
    * @param idShort the idShort of the submodel to create
    */            
    public CarbonFootprintBuilder(AasBuilder aasBuilder, String identifier, String idShort) {
        super(aasBuilder.createSubmodelBuilder(idShort, identifier));
        setSemanticId(iri("https://admin-shell.io/idta/CarbonFootprint/CarbonFootprint/0/9"));
    }
    
    /**
     * Defines whether multi-language properties shall be created. AASPackageExplorer compliance.
     *
     * @param createMultiLanguageProperties whether multi-language properties shall be created, taints compliance 
     *     if {@code false}
     */
    public void setCreateMultiLanguageProperties(boolean createMultiLanguageProperties) {
        this.createMultiLanguageProperties = createMultiLanguageProperties;
    } 

    /**
    * Creates a builder for ProductCarbonFootprint.
    *
    * @return the builder instance, {@link Builder#build()} must be called
    */
    public ProductCarbonFootprintBuilder createProductCarbonFootprintBuilder() {
        // counting -> composition of idShort
        return new ProductCarbonFootprintBuilder(this, ++productCarbonFootprintCounter);
    }
    
    /**
    * Creates a builder for TransportCarbonFootprint.
    *
    * @return the builder instance, {@link Builder#build()} must be called
    */
    public TransportCarbonFootprintBuilder createTransportCarbonFootprintBuilder() {
        // counting -> composition of idShort
        return new TransportCarbonFootprintBuilder(this, ++transportCarbonFootprintCounter);
    }
    
    @Override
    public Submodel build() {
        assertThat(0 <= productCarbonFootprintCounter, "Cardinality of ProductCarbonFootprint must be greater or equal "
            + "0.");
        assertThat(0 <= transportCarbonFootprintCounter, "Cardinality of TransportCarbonFootprint must be greater or eq"
            + "ual 0.");
        
        return super.build();
    }

    /**
    * Builder support for balance of greenhouse gas emissions along the entire life cycle of a product in a defined
    * application and in relation to a defined unit of use.
    * Generated by: EASy-Producer.
    */
    public class ProductCarbonFootprintBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int pCFCalculationMethodCounter = 0;
        private int pCFCO2eqCounter = 0;
        private int pCFReferenceValueForCalculationCounter = 0;
        private int pCFQuantityOfMeasureForCalculationCounter = 0;
        private int pCFLifeCyclePhaseCounter = 0;
        private int explanatoryStatementCounter = 0;
        private int pCFGoodsAddressHandoverCounter = 0;
        private int publicationDateCounter = 0;
        private int expirationDateCounter = 0;
    
        /**
        * Creates a builder instance for ProductCarbonFootprint.
        *
        * @param smBuilder the parent submodel builder
        */
        protected ProductCarbonFootprintBuilder(SubmodelBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("ProductCarbonFootprint", false, false));
            setSemanticId(irdi("https://admin-shell.io/idta/CarbonFootprint/ProductCarbonFootprint/0/9"));
        }
        
        /**
        * Creates a builder instance for ProductCarbonFootprint.
        *
        * @param smBuilder the parent submodel builder
        * @param nr the structure number
        */
        protected ProductCarbonFootprintBuilder(SubmodelBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("ProductCarbonFootprint", nr),
                false, false));
            setSemanticId(irdi("https://admin-shell.io/idta/CarbonFootprint/ProductCarbonFootprint/0/9"));
        }
        
        /**
        * Changes note 2: The usage of values that are not given in this table is possible, but not recommended,
        * because this would reduce the compatibility..
        *
        * @param pCFCalculationMethod the value for PCFCalculationMethod
        * @return <b>this</b> (builder style)
        */
        public ProductCarbonFootprintBuilder setPCFCalculationMethod(PCFCalculationMethod pCFCalculationMethod) {
            // counting -> composition of idShort
            createPropertyBuilder(getCountingIdShort("PCFCalculationMethod", ++pCFCalculationMethodCounter))
                .setSemanticId(irdi("0173-1#02-ABG854#002"))
                .setValue(Type.STRING, pCFCalculationMethod.getValue()).build();
            return this;
        }
        
        /**
        * Changes sum of all greenhouse gas emissions of a product according to the quantification requirements of the
        * standard..
        *
        * @param pCFCO2eq the value for PCFCO2eq
        * @return <b>this</b> (builder style)
        */
        public ProductCarbonFootprintBuilder setPCFCO2eq(double pCFCO2eq) {
            pCFCO2eqCounter++;
            createPropertyBuilder("PCFCO2eq")
                .setSemanticId(irdi("0173-1#02-ABG855#001"))
                .setValue(Type.DOUBLE, pCFCO2eq).build();
            return this;
        }
        
        /**
        * Changes note 1: The usage of values that are not given in this table is possible, but not recommended,
        * because this would reduce the compatibility..
        *
        * @param pCFReferenceValueForCalculation the value for PCFReferenceValueForCalculation
        * @return <b>this</b> (builder style)
        */
        public ProductCarbonFootprintBuilder setPCFReferenceValueForCalculation(PCFReferenceValueForCalculation
            pCFReferenceValueForCalculation) {
            pCFReferenceValueForCalculationCounter++;
            createPropertyBuilder("PCFReferenceValueForCalculation")
                .setSemanticId(irdi("0173-1#02-ABG856#001"))
                .setValue(Type.STRING, pCFReferenceValueForCalculation.getValue()).build();
            return this;
        }
        
        /**
        * Changes quantity of the product to which the PCF information on the CO  footprint refers..
        *
        * @param pCFQuantityOfMeasureForCalculation the value for PCFQuantityOfMeasureForCalculation
        * @return <b>this</b> (builder style)
        */
        public ProductCarbonFootprintBuilder setPCFQuantityOfMeasureForCalculation(double
            pCFQuantityOfMeasureForCalculation) {
            pCFQuantityOfMeasureForCalculationCounter++;
            createPropertyBuilder("PCFQuantityOfMeasureForCalculation")
                .setSemanticId(irdi("0173-1#02-ABG857#001"))
                .setValue(Type.DOUBLE, pCFQuantityOfMeasureForCalculation).build();
            return this;
        }
        
        /**
        * Changes note 1: Multiple lifecycle phases can be listed in the SMC. The interpretation is that the
        * calculated PCF value is the sum of the PCF that has been produced in all the listed lifecycle phases. If the 
        * PCF value needs to be supplied for each lifecycle phase separately, multiple SMCs should be created instead. 
        * Note 2: The usage of values that are not given in this table is possible, but not recommended, because this 
        * would reduce the compatibility..
        *
        * @param pCFLifeCyclePhase the value for PCFLifeCyclePhase
        * @return <b>this</b> (builder style)
        */
        public ProductCarbonFootprintBuilder setPCFLifeCyclePhase(PCFLifeCyclePhase pCFLifeCyclePhase) {
            // counting -> composition of idShort
            createPropertyBuilder(getCountingIdShort("PCFLifeCyclePhase", ++pCFLifeCyclePhaseCounter))
                .setSemanticId(irdi("0173-1#02-ABG858#001"))
                .setValue(Type.STRING, pCFLifeCyclePhase.getValue()).build();
            return this;
        }
        
        /**
        * Changes explanation which is needed or given so that a footprint communication can be properly understood by
        * a purchaser, potential purchaser or user of the product definition..
        *
        * @param file the relative or absolute file name with extension
        * @param mimeType the mime type of the file
        * @return <b>this</b> (builder style)
        */
        public ProductCarbonFootprintBuilder setExplanatoryStatement(String file, String mimeType) {
            explanatoryStatementCounter++;
            createFileDataElementBuilder("ExplanatoryStatement", file, mimeType)
                .setSemanticId(iri("https://admin-shell.io/idta/CarbonFootprint/ExplanatoryStatement/1/0"))
                .build();
            return this;
        }
        
        /**
        * Creates a builder for PCFGoodsAddressHandover.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public PCFGoodsAddressHandoverBuilder createPCFGoodsAddressHandoverBuilder() {
            pCFGoodsAddressHandoverCounter++;
            return new PCFGoodsAddressHandoverBuilder(this);
        }
        
        /**
        * Changes time at which something was first published or made available..
        *
        * @param publicationDate the value for PublicationDate
        * @return <b>this</b> (builder style)
        */
        public ProductCarbonFootprintBuilder setPublicationDate(java.util.Date publicationDate) {
            publicationDateCounter++;
            createPropertyBuilder("PublicationDate")
                .setSemanticId(iri("https://admin-shell.io/idta/CarbonFootprint/PublicationDate/1/0"))
                .setValue(Type.DATE_TIME, publicationDate).build();
            return this;
        }
        
        /**
        * Changes time at which something should no longer be used effectively because it may lose its validity,
        * quality or safety..
        *
        * @param expirationDate the value for ExpirationDate
        * @return <b>this</b> (builder style)
        */
        public ProductCarbonFootprintBuilder setExpirationDate(java.util.Date expirationDate) {
            expirationDateCounter++;
            createPropertyBuilder("ExpirationDate")
                .setSemanticId(iri("https://admin-shell.io/idta/CarbonFootprint/ExpirationnDate/1/0"))
                .setValue(Type.DATE_TIME, expirationDate).build();
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(1 <= pCFCalculationMethodCounter, "Cardinality of PCFCalculationMethod must be greater or equal "
                + "1.");
            assertThat(pCFCO2eqCounter == 1, "Cardinality of PCFCO2eq must be equal 1.");
            assertThat(pCFReferenceValueForCalculationCounter == 1, "Cardinality of PCFReferenceValueForCalculation mus"
                + "t be equal 1.");
            assertThat(pCFQuantityOfMeasureForCalculationCounter == 1, "Cardinality of PCFQuantityOfMeasureForCalculati"
                + "on must be equal 1.");
            assertThat(1 <= pCFLifeCyclePhaseCounter, "Cardinality of PCFLifeCyclePhase must be greater or equal 1.");
            assertThat(0 <= explanatoryStatementCounter && explanatoryStatementCounter <= 1, "Cardinality of Explanator"
                + "yStatement must be greater or equal 0 and less or equal 1.");
            assertThat(pCFGoodsAddressHandoverCounter == 1, "Cardinality of PCFGoodsAddressHandover must be equal 1.");
            assertThat(publicationDateCounter == 1, "Cardinality of PublicationDate must be equal 1.");
            assertThat(0 <= expirationDateCounter && expirationDateCounter <= 1, "Cardinality of ExpirationDate must be"
                + " greater or equal 0 and less or equal 1.");
            
            return super.build();
        }
    }
    
    /**
    * Builder support for structure to be reused for denoting addresses.
    * Generated by: EASy-Producer.
    */
    public class PCFGoodsAddressHandoverBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int streetCounter = 0;
        private int houseNumberCounter = 0;
        private int zipCodeCounter = 0;
        private int cityTownCounter = 0;
        private int countryCounter = 0;
    
        /**
        * Creates a builder instance for PCFGoodsAddressHandover.
        *
        * @param smBuilder the parent submodel element container builder
        */
        protected PCFGoodsAddressHandoverBuilder(SubmodelElementContainerBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("PCFGoodsAddressHandover", false, false));
            setSemanticId(irdi("0173-1#02-ABI498#001"));
        }
        
        /**
        * Creates a builder instance for PCFGoodsAddressHandover.
        *
        * @param smBuilder the parent submodel element container builder
        * @param nr the structure number
        */
        protected PCFGoodsAddressHandoverBuilder(SubmodelElementContainerBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("PCFGoodsAddressHandover", nr),
                false, false));
            setSemanticId(irdi("0173-1#02-ABI498#001"));
        }
        
        /**
        * Changes street indication of the place of transfer of goods..
        *
        * @param street the value for Street
        * @return <b>this</b> (builder style)
        */
        public PCFGoodsAddressHandoverBuilder setStreet(String street) {
            streetCounter++;
            createPropertyBuilder("Street")
                .setSemanticId(irdi("0173-1#02-ABH956#001"))
                .setValue(Type.STRING, street).build();
            return this;
        }
        
        /**
        * Changes number for identification or differentiation of individual houses of a street..
        *
        * @param houseNumber the value for HouseNumber
        * @return <b>this</b> (builder style)
        */
        public PCFGoodsAddressHandoverBuilder setHouseNumber(String houseNumber) {
            houseNumberCounter++;
            createPropertyBuilder("HouseNumber")
                .setSemanticId(irdi("0173-1#02-ABH957#001"))
                .setValue(Type.STRING, houseNumber).build();
            return this;
        }
        
        /**
        * Changes zip code of the goods transfer address..
        *
        * @param zipCode the value for ZipCode
        * @return <b>this</b> (builder style)
        */
        public PCFGoodsAddressHandoverBuilder setZipCode(String zipCode) {
            zipCodeCounter++;
            createPropertyBuilder("ZipCode")
                .setSemanticId(irdi("0173-1#02-ABH958#001"))
                .setValue(Type.STRING, zipCode).build();
            return this;
        }
        
        /**
        * Changes indication of the city or town of the transfer of goods..
        *
        * @param cityTown the value for CityTown
        * @return <b>this</b> (builder style)
        */
        public PCFGoodsAddressHandoverBuilder setCityTown(String cityTown) {
            cityTownCounter++;
            createPropertyBuilder("CityTown")
                .setSemanticId(irdi("0173-1#02-ABH959#001"))
                .setValue(Type.STRING, cityTown).build();
            return this;
        }
        
        /**
        * Changes country where the product is transmitted..
        *
        * @param country the value for Country
        * @return <b>this</b> (builder style)
        */
        public PCFGoodsAddressHandoverBuilder setCountry(String country) {
            countryCounter++;
            createPropertyBuilder("Country")
                .setSemanticId(irdi("0173-1#02-AAO259#005"))
                .setValue(Type.STRING, country).build();
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(0 <= streetCounter && streetCounter <= 1, "Cardinality of Street must be greater or equal 0 and "
                + "less or equal 1.");
            assertThat(0 <= houseNumberCounter && houseNumberCounter <= 1, "Cardinality of HouseNumber must be greater "
                + "or equal 0 and less or equal 1.");
            assertThat(0 <= zipCodeCounter && zipCodeCounter <= 1, "Cardinality of ZipCode must be greater or equal 0 a"
                + "nd less or equal 1.");
            assertThat(0 <= cityTownCounter && cityTownCounter <= 1, "Cardinality of CityTown must be greater or equal "
                + "0 and less or equal 1.");
            assertThat(0 <= countryCounter && countryCounter <= 1, "Cardinality of Country must be greater or equal 0 a"
                + "nd less or equal 1.");
            
            return super.build();
        }
    }
    
    /**
    * Builder support for balance of greenhouse gas emissions generated by a transport service of a product.
    * Generated by: EASy-Producer.
    */
    public class TransportCarbonFootprintBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int tCFCalculationMethodCounter = 0;
        private int tCFCO2eqCounter = 0;
        private int tCFReferenceValueForCalculationCounter = 0;
        private int tCFQuantityOfMeasureForCalculationCounter = 0;
        private int tCFProcessesForGreenhouseGasEmissionInATransportServiceCounter = 0;
        private int explanatoryStatementCounter = 0;
        private int tCFGoodsTransportAddressTakeoverCounter = 0;
        private int tCFGoodsTransportAddressHandoverCounter = 0;
        private int publicationDateCounter = 0;
        private int expirationDateCounter = 0;
    
        /**
        * Creates a builder instance for TransportCarbonFootprint.
        *
        * @param smBuilder the parent submodel builder
        */
        protected TransportCarbonFootprintBuilder(SubmodelBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("TransportCarbonFootprint", false, false));
            setSemanticId(irdi("https://admin-shell.io/idta/CarbonFootprint/TransportCarbonFootprint/0/9"));
        }
        
        /**
        * Creates a builder instance for TransportCarbonFootprint.
        *
        * @param smBuilder the parent submodel builder
        * @param nr the structure number
        */
        protected TransportCarbonFootprintBuilder(SubmodelBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("TransportCarbonFootprint", nr),
                false, false));
            setSemanticId(irdi("https://admin-shell.io/idta/CarbonFootprint/TransportCarbonFootprint/0/9"));
        }
        
        /**
        * Changes value..
        *
        * @param tCFCalculationMethod the value for TCFCalculationMethod
        * @return <b>this</b> (builder style)
        */
        public TransportCarbonFootprintBuilder setTCFCalculationMethod(TCFCalculationMethod tCFCalculationMethod) {
            tCFCalculationMethodCounter++;
            createPropertyBuilder("TCFCalculationMethod")
                .setSemanticId(irdi("0173-1#02-ABG859#002"))
                .setValue(Type.STRING, tCFCalculationMethod.getValue()).build();
            return this;
        }
        
        /**
        * Changes sum of all greenhouse gas emissions from vehicle operation..
        *
        * @param tCFCO2eq the value for TCFCO2eq
        * @return <b>this</b> (builder style)
        */
        public TransportCarbonFootprintBuilder setTCFCO2eq(double tCFCO2eq) {
            tCFCO2eqCounter++;
            createPropertyBuilder("TCFCO2eq")
                .setSemanticId(irdi("0173-1#02-ABG860#001"))
                .setValue(Type.DOUBLE, tCFCO2eq).build();
            return this;
        }
        
        /**
        * Changes value..
        *
        * @param tCFReferenceValueForCalculation the value for TCFReferenceValueForCalculation
        * @return <b>this</b> (builder style)
        */
        public TransportCarbonFootprintBuilder setTCFReferenceValueForCalculation(TCFReferenceValueForCalculation
            tCFReferenceValueForCalculation) {
            tCFReferenceValueForCalculationCounter++;
            createPropertyBuilder("TCFReferenceValueForCalculation")
                .setSemanticId(irdi("0173-1#02-ABG861#002"))
                .setValue(Type.STRING, tCFReferenceValueForCalculation.getValue()).build();
            return this;
        }
        
        /**
        * Changes quantity of the product to which the TCF information on the CO footprint refers..
        *
        * @param tCFQuantityOfMeasureForCalculation the value for TCFQuantityOfMeasureForCalculation
        * @return <b>this</b> (builder style)
        */
        public TransportCarbonFootprintBuilder setTCFQuantityOfMeasureForCalculation(double
            tCFQuantityOfMeasureForCalculation) {
            tCFQuantityOfMeasureForCalculationCounter++;
            createPropertyBuilder("TCFQuantityOfMeasureForCalculation")
                .setSemanticId(irdi("0173-1#02-ABG862#001"))
                .setValue(Type.DOUBLE, tCFQuantityOfMeasureForCalculation).build();
            return this;
        }
        
        /**
        * Changes value..
        *
        * @param tCFProcessesForGreenhouseGasEmissionInATransportService the value for
        * TCFProcessesForGreenhouseGasEmissionInATransportService
        * @return <b>this</b> (builder style)
        */
        public TransportCarbonFootprintBuilder setTCFProcessesForGreenhouseGasEmissionInATransportService(
            TCFProcessesForGreenhouseGasEmissionInATransportService 
            tCFProcessesForGreenhouseGasEmissionInATransportService) {
            // counting -> composition of idShort
            createPropertyBuilder(getCountingIdShort("TCFProcessesForGreenhouseGasEmissionInATransportService",
                ++tCFProcessesForGreenhouseGasEmissionInATransportServiceCounter))
                .setSemanticId(irdi("0173-1#02-ABG863#002"))
                .setValue(Type.STRING, tCFProcessesForGreenhouseGasEmissionInATransportService.getValue()).build();
            return this;
        }
        
        /**
        * Changes explanation which is needed or given so that a footprint communication can be properly understood by
        * a purchaser, potential purchaser or user of the product definition..
        *
        * @param file the relative or absolute file name with extension
        * @param mimeType the mime type of the file
        * @return <b>this</b> (builder style)
        */
        public TransportCarbonFootprintBuilder setExplanatoryStatement(String file, String mimeType) {
            explanatoryStatementCounter++;
            createFileDataElementBuilder("ExplanatoryStatement", file, mimeType)
                .setSemanticId(irdi("https://admin-shell.io/idta/CarbonFootprint/ExplanatoryStatement/1/0"))
                .build();
            return this;
        }
        
        /**
        * Creates a builder for TCFGoodsTransportAddressTakeover.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public TCFGoodsTransportAddressHandoverBuilder createTCFGoodsTransportAddressTakeoverBuilder() {
            tCFGoodsTransportAddressTakeoverCounter++;
            return new TCFGoodsTransportAddressHandoverBuilder(this);
        }
        
        /**
        * Creates a builder for TCFGoodsTransportAddressHandover.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public TCFGoodsTransportAddressHandoverBuilder createTCFGoodsTransportAddressHandoverBuilder() {
            tCFGoodsTransportAddressHandoverCounter++;
            return new TCFGoodsTransportAddressHandoverBuilder(this);
        }
        
        /**
        * Changes time at which something was first published or made available..
        *
        * @param publicationDate the value for PublicationDate
        * @return <b>this</b> (builder style)
        */
        public TransportCarbonFootprintBuilder setPublicationDate(java.util.Date publicationDate) {
            publicationDateCounter++;
            createPropertyBuilder("PublicationDate")
                .setSemanticId(iri("https://admin-shell.io/idta/CarbonFootprint/PublicationDate/1/0"))
                .setValue(Type.DATE_TIME, publicationDate).build();
            return this;
        }
        
        /**
        * Changes time at which something should no longer be used effectively because it may lose its validity,
        * quality or safety..
        *
        * @param expirationDate the value for ExpirationDate
        * @return <b>this</b> (builder style)
        */
        public TransportCarbonFootprintBuilder setExpirationDate(java.util.Date expirationDate) {
            expirationDateCounter++;
            createPropertyBuilder("ExpirationDate")
                .setSemanticId(iri("https://admin-shell.io/idta/CarbonFootprint/ExpirationnDate/1/0"))
                .setValue(Type.DATE_TIME, expirationDate).build();
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(tCFCalculationMethodCounter == 1, "Cardinality of TCFCalculationMethod must be equal 1.");
            assertThat(tCFCO2eqCounter == 1, "Cardinality of TCFCO2eq must be equal 1.");
            assertThat(tCFReferenceValueForCalculationCounter == 1, "Cardinality of TCFReferenceValueForCalculation mus"
                + "t be equal 1.");
            assertThat(tCFQuantityOfMeasureForCalculationCounter == 1, "Cardinality of TCFQuantityOfMeasureForCalculati"
                + "on must be equal 1.");
            assertThat(1 <= tCFProcessesForGreenhouseGasEmissionInATransportServiceCounter, "Cardinality of TCFProcesse"
                + "sForGreenhouseGasEmissionInATransportService must be greater or equal 1.");
            assertThat(0 <= explanatoryStatementCounter && explanatoryStatementCounter <= 1, "Cardinality of Explanator"
                + "yStatement must be greater or equal 0 and less or equal 1.");
            assertThat(tCFGoodsTransportAddressTakeoverCounter == 1, "Cardinality of TCFGoodsTransportAddressTakeover m"
                + "ust be equal 1.");
            assertThat(tCFGoodsTransportAddressHandoverCounter == 1, "Cardinality of TCFGoodsTransportAddressHandover m"
                + "ust be equal 1.");
            assertThat(publicationDateCounter == 1, "Cardinality of PublicationDate must be equal 1.");
            assertThat(0 <= expirationDateCounter && expirationDateCounter <= 1, "Cardinality of ExpirationDate must be"
                + " greater or equal 0 and less or equal 1.");
            
            return super.build();
        }
    }
    
    /**
    * Builder support for structure to be reused for denoting addresses.
    * Generated by: EASy-Producer.
    */
    public class TCFGoodsTransportAddressHandoverBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int streetCounter = 0;
        private int houseNumberCounter = 0;
        private int zipCodeCounter = 0;
        private int cityTownCounter = 0;
        private int countryCounter = 0;
    
        /**
        * Creates a builder instance for TCFGoodsTransportAddressHandover.
        *
        * @param smBuilder the parent submodel element container builder
        */
        protected TCFGoodsTransportAddressHandoverBuilder(SubmodelElementContainerBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("TCFGoodsTransportAddressHandover", false, false));
            setSemanticId(irdi("0173-1#02-ABI499#001"));
        }
        
        /**
        * Creates a builder instance for TCFGoodsTransportAddressHandover.
        *
        * @param smBuilder the parent submodel element container builder
        * @param nr the structure number
        */
        protected TCFGoodsTransportAddressHandoverBuilder(SubmodelElementContainerBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort(
                "TCFGoodsTransportAddressHandover", nr), false, false));
            setSemanticId(irdi("0173-1#02-ABI499#001"));
        }
        
        /**
        * Changes street indication of the place of transfer of goods..
        *
        * @param street the value for Street
        * @return <b>this</b> (builder style)
        */
        public TCFGoodsTransportAddressHandoverBuilder setStreet(String street) {
            streetCounter++;
            createPropertyBuilder("Street")
                .setSemanticId(irdi("0173-1#02-ABH956#001"))
                .setValue(Type.STRING, street).build();
            return this;
        }
        
        /**
        * Changes number for identification or differentiation of individual houses of a street..
        *
        * @param houseNumber the value for HouseNumber
        * @return <b>this</b> (builder style)
        */
        public TCFGoodsTransportAddressHandoverBuilder setHouseNumber(String houseNumber) {
            houseNumberCounter++;
            createPropertyBuilder("HouseNumber")
                .setSemanticId(irdi("0173-1#02-ABH957#001"))
                .setValue(Type.STRING, houseNumber).build();
            return this;
        }
        
        /**
        * Changes zip code of the goods transfer address..
        *
        * @param zipCode the value for ZipCode
        * @return <b>this</b> (builder style)
        */
        public TCFGoodsTransportAddressHandoverBuilder setZipCode(String zipCode) {
            zipCodeCounter++;
            createPropertyBuilder("ZipCode")
                .setSemanticId(irdi("0173-1#02-ABH958#001"))
                .setValue(Type.STRING, zipCode).build();
            return this;
        }
        
        /**
        * Changes indication of the city or town of the transfer of goods..
        *
        * @param cityTown the value for CityTown
        * @return <b>this</b> (builder style)
        */
        public TCFGoodsTransportAddressHandoverBuilder setCityTown(String cityTown) {
            cityTownCounter++;
            createPropertyBuilder("CityTown")
                .setSemanticId(irdi("0173-1#02-ABH959#001"))
                .setValue(Type.STRING, cityTown).build();
            return this;
        }
        
        /**
        * Changes country where the product is transmitted..
        *
        * @param country the value for Country
        * @return <b>this</b> (builder style)
        */
        public TCFGoodsTransportAddressHandoverBuilder setCountry(String country) {
            countryCounter++;
            createPropertyBuilder("Country")
                .setSemanticId(irdi("0173-1#02-AAO259#005"))
                .setValue(Type.STRING, country).build();
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(0 <= streetCounter && streetCounter <= 1, "Cardinality of Street must be greater or equal 0 and "
                + "less or equal 1.");
            assertThat(0 <= houseNumberCounter && houseNumberCounter <= 1, "Cardinality of HouseNumber must be greater "
                + "or equal 0 and less or equal 1.");
            assertThat(0 <= zipCodeCounter && zipCodeCounter <= 1, "Cardinality of ZipCode must be greater or equal 0 a"
                + "nd less or equal 1.");
            assertThat(0 <= cityTownCounter && cityTownCounter <= 1, "Cardinality of CityTown must be greater or equal "
                + "0 and less or equal 1.");
            assertThat(0 <= countryCounter && countryCounter <= 1, "Cardinality of Country must be greater or equal 0 a"
                + "nd less or equal 1.");
            
            return super.build();
        }
    }
    
}
