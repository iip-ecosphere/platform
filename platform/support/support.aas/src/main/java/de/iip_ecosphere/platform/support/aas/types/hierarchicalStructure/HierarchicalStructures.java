package de.iip_ecosphere.platform.support.aas.types.hierarchicalStructure;

import static de.iip_ecosphere.platform.support.aas.IdentifierType.*;
import static de.iip_ecosphere.platform.support.aas.types.common.Utils.*;

import java.util.concurrent.ExecutionException;

import de.iip_ecosphere.platform.support.aas.Aas;
import de.iip_ecosphere.platform.support.aas.*;
import de.iip_ecosphere.platform.support.aas.types.common.*;

import de.iip_ecosphere.platform.support.aas.types.hierarchicalStructure.HierarchicalStructuresBuilder.*;

/**
* Accessor support for definition of the Submodel HierarchicalStructures identified by its semanticId. The Submodel
* idShort can be picked freely.
* Generated by: EASy-Producer.
*/
public class HierarchicalStructures extends DelegatingSubmodel {

    /**
    * Creates a wrapping HierarchicalStructures submodel instance.
    * 
    * @param aas the parent AAS
    */            
    public HierarchicalStructures(Aas aas) {
        super(aas.getSubmodel("HierarchicalStructures"));
    }
    
    /**
    * Gets an instance of EntryNode.
    *
    * @return the instance or <b>null</b> for none
    */
    public EntryNode getEntryNode() {
        return new EntryNode(super.getEntity("EntryNode"));
    }
    
    /**
    * Returns the property ArcheType.
    *
    * @return the property
    */
    public Property getArcheTypeProperty() {
        return getProperty("ArcheType");
    }
    
    /**
    * Returns the value of property ArcheType.
    *
    * @return the value
    * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
    */
    public ArcheType getArcheType() throws ExecutionException {
        return getEnumValue(this, "ArcheType", ArcheType.class, ArcheType.class);
    }
    
    /**
    * Accessor support for base entry point for the Entity tree in this Submodel, this must be a Self-managed Entity
    * reflecting the Assets administrated in the Asset Administration Shell this Submodel is part of. The idShort of the
    * EntryNode can be picked freely and may reflect a name of the asset.
    * Generated by: EASy-Producer.
    */
    public static class EntryNode extends DelegatingEntity {
        
        /**
        * Creates a wrapping instance for EntryNode.
        *
        * @param parent the parent submodel element collection builder
        */
        protected EntryNode(Entity parent) {
            super(parent);
        }
        
        /**
        * Gets an instance of Node.
        *
        * @param index 0-based index to access a specific instance
        * @return the instance or <b>null</b> for none
        */
        public Node getNode(int index) {
            var tmp = super.getEntity(getCountingIdShort("Node", index));
            return null == tmp ? null : new Node(tmp);
        }
        
        /**
        * Returns the property SameAs.
        *
        * @param index the index of the field
        * @return the property
        */
        public RelationshipElement getSameAsProperty(int index) {
            return getRelationshipElement(getCountingIdShort("SameAs", index));
        }
        
        /**
        * Returns the value of property SameAs.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<RelationshipElement> getSameAs() throws ExecutionException {
            return collect(elements(), RelationshipElement.class, iri(
                "https://admin-shell.io/idta/HierarchicalStructures/SameAs/1/0"));
        }
        
        /**
        * Returns the property IsPartOf.
        *
        * @param index the index of the field
        * @return the property
        */
        public RelationshipElement getIsPartOfProperty(int index) {
            return getRelationshipElement(getCountingIdShort("IsPartOf", index));
        }
        
        /**
        * Returns the value of property IsPartOf.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<RelationshipElement> getIsPartOf() throws ExecutionException {
            return collect(elements(), RelationshipElement.class, iri(
                "https://admin-shell.io/idta/HierarchicalStructures/IsPartOf/1/0"));
        }
        
        /**
        * Returns the property HasPart.
        *
        * @param index the index of the field
        * @return the property
        */
        public RelationshipElement getHasPartProperty(int index) {
            return getRelationshipElement(getCountingIdShort("HasPart", index));
        }
        
        /**
        * Returns the value of property HasPart.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<RelationshipElement> getHasPart() throws ExecutionException {
            return collect(elements(), RelationshipElement.class, iri(
                "https://admin-shell.io/idta/HierarchicalStructures/HasPart/1/0"));
        }
        
    }
    
    /**
    * Accessor support for can be a Co-managed or Self-managed entity. A Node reflects an element in the hierarchical
    * model is set into relation with one or more defined relations. The name of a node can be picked freely but it 
    * must be unique in its hierarchical (sub-)level.
    * Generated by: EASy-Producer.
    */
    public static class Node extends DelegatingEntity {
        
        /**
        * Creates a wrapping instance for Node.
        *
        * @param parent the parent submodel element collection builder
        */
        protected Node(Entity parent) {
            super(parent);
        }
        
        /**
        * Gets an instance of Node.
        *
        * @param index 0-based index to access a specific instance
        * @return the instance or <b>null</b> for none
        */
        public Node getNode(int index) {
            var tmp = super.getEntity(getCountingIdShort("Node", index));
            return null == tmp ? null : new Node(tmp);
        }
        
        /**
        * Returns the property SameAs.
        *
        * @param index the index of the field
        * @return the property
        */
        public RelationshipElement getSameAsProperty(int index) {
            return getRelationshipElement(getCountingIdShort("SameAs", index));
        }
        
        /**
        * Returns the value of property SameAs.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<RelationshipElement> getSameAs() throws ExecutionException {
            return collect(elements(), RelationshipElement.class, iri(
                "https://admin-shell.io/idta/HierarchicalStructures/SameAs/1/0"));
        }
        
        /**
        * Returns the property IsPartOf.
        *
        * @param index the index of the field
        * @return the property
        */
        public RelationshipElement getIsPartOfProperty(int index) {
            return getRelationshipElement(getCountingIdShort("IsPartOf", index));
        }
        
        /**
        * Returns the value of property IsPartOf.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<RelationshipElement> getIsPartOf() throws ExecutionException {
            return collect(elements(), RelationshipElement.class, iri(
                "https://admin-shell.io/idta/HierarchicalStructures/IsPartOf/1/0"));
        }
        
        /**
        * Returns the property HasPart.
        *
        * @param index the index of the field
        * @return the property
        */
        public RelationshipElement getHasPartProperty(int index) {
            return getRelationshipElement(getCountingIdShort("HasPart", index));
        }
        
        /**
        * Returns the value of property HasPart.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<RelationshipElement> getHasPart() throws ExecutionException {
            return collect(elements(), RelationshipElement.class, iri(
                "https://admin-shell.io/idta/HierarchicalStructures/HasPart/1/0"));
        }
        
        /**
        * Returns the property BulkCount.
        *
        * @return the property
        */
        public Property getBulkCountProperty() {
            return getProperty("BulkCount");
        }
        
        /**
        * Returns the value of property BulkCount.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.math.BigInteger getBulkCount() throws ExecutionException {
            return getBigIntegerValue(this, "BulkCount");
        }
        
    }
    
}
