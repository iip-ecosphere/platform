package de.iip_ecosphere.platform.support.aas.types.contactInformations;

import static de.iip_ecosphere.platform.support.aas.IdentifierType.*;
import static de.iip_ecosphere.platform.support.aas.types.common.Utils.*;

import java.util.concurrent.ExecutionException;

import de.iip_ecosphere.platform.support.aas.Aas;
import de.iip_ecosphere.platform.support.aas.SubmodelElementCollection;
import de.iip_ecosphere.platform.support.aas.*;
import de.iip_ecosphere.platform.support.aas.types.common.*;

import de.iip_ecosphere.platform.support.aas.types.contactInformations.ContactInformationsBuilder.*;

/**
* Accessor support for the Submodel "ContactInformations" is the collection for various contact information.
* Generated by: EASy-Producer.
*/
public class ContactInformations extends DelegatingSubmodel {

    /**
    * Creates a wrapping ContactInformations submodel instance.
    * 
    * @param aas the parent AAS
    */            
    public ContactInformations(Aas aas) {
        super(aas.getSubmodel("ContactInformations"));
    }
    
    /**
    * Gets an instance of ContactInformation.
    *
    * @param index 0-based index to access a specific instance
    * @return the instance or <b>null</b> for none
    */
    public ContactInformation getContactInformation(int index) {
        var tmp = super.getSubmodelElementCollection(getCountingIdShort("ContactInformation", index));
        return null == tmp ? null : new ContactInformation(tmp);
    }
    
    /**
    * Accessor support for the SMC "ContactInformation" contains information on how to contact the manufacturer or an
    * authorised service provider, e.g. when a maintenance service is required.
    * Generated by: EASy-Producer.
    */
    public static class ContactInformation extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for ContactInformation.
        *
        * @param parent the parent submodel element collection builder
        */
        protected ContactInformation(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property RoleOfContactPerson.
        *
        * @return the property
        */
        public Property getRoleOfContactPersonProperty() {
            return getProperty("RoleOfContactPerson");
        }
        
        /**
        * Returns the value of property RoleOfContactPerson.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public IRoleOfContactPerson getRoleOfContactPerson() throws ExecutionException {
            return getEnumValue(this, "RoleOfContactPerson", IRoleOfContactPerson.class, RoleOfContactPerson.class);
        }
        
        /**
        * Returns the property NationalCode.
        *
        * @return the property
        */
        public MultiLanguageProperty getNationalCodeProperty() {
            return (MultiLanguageProperty) getDataElement("NationalCode");
        }
        
        /**
        * Returns the value of property NationalCode.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getNationalCode() throws ExecutionException {
            return getLangStringValue(this, "NationalCode");
        }
        
        /**
        * Returns the property Language.
        *
        * @param index the index of the field
        * @return the property
        */
        public Property getLanguageProperty(int index) {
            return getProperty(getCountingIdShort("Language", index));
        }
        
        /**
        * Returns the value of property Language.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<String> getLanguage() throws ExecutionException {
            return collect(elements(), Property.class, iri(
                "https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/Language"), 
                p -> cast(p, String.class));
        }
        
        /**
        * Returns the property TimeZone.
        *
        * @return the property
        */
        public Property getTimeZoneProperty() {
            return getProperty("TimeZone");
        }
        
        /**
        * Returns the value of property TimeZone.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getTimeZone() throws ExecutionException {
            return getStringValue(this, "TimeZone");
        }
        
        /**
        * Returns the property CityTown.
        *
        * @return the property
        */
        public MultiLanguageProperty getCityTownProperty() {
            return (MultiLanguageProperty) getDataElement("CityTown");
        }
        
        /**
        * Returns the value of property CityTown.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getCityTown() throws ExecutionException {
            return getLangStringValue(this, "CityTown");
        }
        
        /**
        * Returns the property Company.
        *
        * @return the property
        */
        public MultiLanguageProperty getCompanyProperty() {
            return (MultiLanguageProperty) getDataElement("Company");
        }
        
        /**
        * Returns the value of property Company.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getCompany() throws ExecutionException {
            return getLangStringValue(this, "Company");
        }
        
        /**
        * Returns the property Department.
        *
        * @return the property
        */
        public MultiLanguageProperty getDepartmentProperty() {
            return (MultiLanguageProperty) getDataElement("Department");
        }
        
        /**
        * Returns the value of property Department.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getDepartment() throws ExecutionException {
            return getLangStringValue(this, "Department");
        }
        
        /**
        * Gets an instance of Phone.
        *
        * @return the instance or <b>null</b> for none
        */
        public Phone getPhone() {
            return new Phone(super.getSubmodelElementCollection("Phone"));
        }
        
        /**
        * Gets an instance of Fax.
        *
        * @return the instance or <b>null</b> for none
        */
        public Fax getFax() {
            return new Fax(super.getSubmodelElementCollection("Fax"));
        }
        
        /**
        * Gets an instance of Email.
        *
        * @return the instance or <b>null</b> for none
        */
        public Email getEmail() {
            return new Email(super.getSubmodelElementCollection("Email"));
        }
        
        /**
        * Gets an instance of IPCommunication.
        *
        * @param index 0-based index to access a specific instance
        * @return the instance or <b>null</b> for none
        */
        public IPCommunication getIPCommunication(int index) {
            var tmp = super.getSubmodelElementCollection(getCountingIdShort("IPCommunication", index));
            return null == tmp ? null : new IPCommunication(tmp);
        }
        
        /**
        * Returns the property Street.
        *
        * @return the property
        */
        public MultiLanguageProperty getStreetProperty() {
            return (MultiLanguageProperty) getDataElement("Street");
        }
        
        /**
        * Returns the value of property Street.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getStreet() throws ExecutionException {
            return getLangStringValue(this, "Street");
        }
        
        /**
        * Returns the property Zipcode.
        *
        * @return the property
        */
        public MultiLanguageProperty getZipcodeProperty() {
            return (MultiLanguageProperty) getDataElement("Zipcode");
        }
        
        /**
        * Returns the value of property Zipcode.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getZipcode() throws ExecutionException {
            return getLangStringValue(this, "Zipcode");
        }
        
        /**
        * Returns the property POBox.
        *
        * @return the property
        */
        public MultiLanguageProperty getPOBoxProperty() {
            return (MultiLanguageProperty) getDataElement("POBox");
        }
        
        /**
        * Returns the value of property POBox.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getPOBox() throws ExecutionException {
            return getLangStringValue(this, "POBox");
        }
        
        /**
        * Returns the property ZipCodeOfPOBox.
        *
        * @return the property
        */
        public MultiLanguageProperty getZipCodeOfPOBoxProperty() {
            return (MultiLanguageProperty) getDataElement("ZipCodeOfPOBox");
        }
        
        /**
        * Returns the value of property ZipCodeOfPOBox.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getZipCodeOfPOBox() throws ExecutionException {
            return getLangStringValue(this, "ZipCodeOfPOBox");
        }
        
        /**
        * Returns the property StateCounty.
        *
        * @return the property
        */
        public MultiLanguageProperty getStateCountyProperty() {
            return (MultiLanguageProperty) getDataElement("StateCounty");
        }
        
        /**
        * Returns the value of property StateCounty.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getStateCounty() throws ExecutionException {
            return getLangStringValue(this, "StateCounty");
        }
        
        /**
        * Returns the property NameOfContact.
        *
        * @return the property
        */
        public MultiLanguageProperty getNameOfContactProperty() {
            return (MultiLanguageProperty) getDataElement("NameOfContact");
        }
        
        /**
        * Returns the value of property NameOfContact.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getNameOfContact() throws ExecutionException {
            return getLangStringValue(this, "NameOfContact");
        }
        
        /**
        * Returns the property FirstName.
        *
        * @return the property
        */
        public MultiLanguageProperty getFirstNameProperty() {
            return (MultiLanguageProperty) getDataElement("FirstName");
        }
        
        /**
        * Returns the value of property FirstName.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getFirstName() throws ExecutionException {
            return getLangStringValue(this, "FirstName");
        }
        
        /**
        * Returns the property MiddleNames.
        *
        * @return the property
        */
        public MultiLanguageProperty getMiddleNamesProperty() {
            return (MultiLanguageProperty) getDataElement("MiddleNames");
        }
        
        /**
        * Returns the value of property MiddleNames.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getMiddleNames() throws ExecutionException {
            return getLangStringValue(this, "MiddleNames");
        }
        
        /**
        * Returns the property Title.
        *
        * @return the property
        */
        public MultiLanguageProperty getTitleProperty() {
            return (MultiLanguageProperty) getDataElement("Title");
        }
        
        /**
        * Returns the value of property Title.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getTitle() throws ExecutionException {
            return getLangStringValue(this, "Title");
        }
        
        /**
        * Returns the property AcademicTitle.
        *
        * @return the property
        */
        public MultiLanguageProperty getAcademicTitleProperty() {
            return (MultiLanguageProperty) getDataElement("AcademicTitle");
        }
        
        /**
        * Returns the value of property AcademicTitle.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getAcademicTitle() throws ExecutionException {
            return getLangStringValue(this, "AcademicTitle");
        }
        
        /**
        * Returns the property FurtherDetailsOfContact.
        *
        * @return the property
        */
        public MultiLanguageProperty getFurtherDetailsOfContactProperty() {
            return (MultiLanguageProperty) getDataElement("FurtherDetailsOfContact");
        }
        
        /**
        * Returns the value of property FurtherDetailsOfContact.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getFurtherDetailsOfContact() throws ExecutionException {
            return getLangStringValue(this, "FurtherDetailsOfContact");
        }
        
        /**
        * Returns the property AddressOfAdditionalLink.
        *
        * @return the property
        */
        public Property getAddressOfAdditionalLinkProperty() {
            return getProperty("AddressOfAdditionalLink");
        }
        
        /**
        * Returns the value of property AddressOfAdditionalLink.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getAddressOfAdditionalLink() throws ExecutionException {
            return getStringValue(this, "AddressOfAdditionalLink");
        }
        
    }
    
    /**
    * Accessor support for phone number including type.
    * Generated by: EASy-Producer.
    */
    public static class Phone extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for Phone.
        *
        * @param parent the parent submodel element collection builder
        */
        protected Phone(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property TelephoneNumber.
        *
        * @return the property
        */
        public MultiLanguageProperty getTelephoneNumberProperty() {
            return (MultiLanguageProperty) getDataElement("TelephoneNumber");
        }
        
        /**
        * Returns the value of property TelephoneNumber.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getTelephoneNumber() throws ExecutionException {
            return getLangStringValue(this, "TelephoneNumber");
        }
        
        /**
        * Returns the property TypeOfTelephone.
        *
        * @return the property
        */
        public Property getTypeOfTelephoneProperty() {
            return getProperty("TypeOfTelephone");
        }
        
        /**
        * Returns the value of property TypeOfTelephone.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public TypeOfTelephone getTypeOfTelephone() throws ExecutionException {
            return getEnumValue(this, "TypeOfTelephone", TypeOfTelephone.class, TypeOfTelephone.class);
        }
        
        /**
        * Returns the property AvailableTime.
        *
        * @return the property
        */
        public MultiLanguageProperty getAvailableTimeProperty() {
            return (MultiLanguageProperty) getDataElement("AvailableTime");
        }
        
        /**
        * Returns the value of property AvailableTime.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getAvailableTime() throws ExecutionException {
            return getLangStringValue(this, "AvailableTime");
        }
        
    }
    
    /**
    * Accessor support for fax number including type.
    * Generated by: EASy-Producer.
    */
    public static class Fax extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for Fax.
        *
        * @param parent the parent submodel element collection builder
        */
        protected Fax(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property FaxNumber.
        *
        * @return the property
        */
        public MultiLanguageProperty getFaxNumberProperty() {
            return (MultiLanguageProperty) getDataElement("FaxNumber");
        }
        
        /**
        * Returns the value of property FaxNumber.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getFaxNumber() throws ExecutionException {
            return getLangStringValue(this, "FaxNumber");
        }
        
        /**
        * Returns the property TypeOfFaxNumber.
        *
        * @return the property
        */
        public Property getTypeOfFaxNumberProperty() {
            return getProperty("TypeOfFaxNumber");
        }
        
        /**
        * Returns the value of property TypeOfFaxNumber.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public TypeOfFaxNumber getTypeOfFaxNumber() throws ExecutionException {
            return getEnumValue(this, "TypeOfFaxNumber", TypeOfFaxNumber.class, TypeOfFaxNumber.class);
        }
        
    }
    
    /**
    * Accessor support for e-mail address and encryption method.
    * Generated by: EASy-Producer.
    */
    public static class Email extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for Email.
        *
        * @param parent the parent submodel element collection builder
        */
        protected Email(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property EmailAddress.
        *
        * @return the property
        */
        public Property getEmailAddressProperty() {
            return getProperty("EmailAddress");
        }
        
        /**
        * Returns the value of property EmailAddress.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getEmailAddress() throws ExecutionException {
            return getStringValue(this, "EmailAddress");
        }
        
        /**
        * Returns the property PublicKey.
        *
        * @return the property
        */
        public MultiLanguageProperty getPublicKeyProperty() {
            return (MultiLanguageProperty) getDataElement("PublicKey");
        }
        
        /**
        * Returns the value of property PublicKey.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getPublicKey() throws ExecutionException {
            return getLangStringValue(this, "PublicKey");
        }
        
        /**
        * Returns the property TypeOfEmailAddress.
        *
        * @return the property
        */
        public Property getTypeOfEmailAddressProperty() {
            return getProperty("TypeOfEmailAddress");
        }
        
        /**
        * Returns the value of property TypeOfEmailAddress.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public TypeOfEmailAddress getTypeOfEmailAddress() throws ExecutionException {
            return getEnumValue(this, "TypeOfEmailAddress", TypeOfEmailAddress.class, TypeOfEmailAddress.class);
        }
        
        /**
        * Returns the property TypeOfPublicKey.
        *
        * @return the property
        */
        public MultiLanguageProperty getTypeOfPublicKeyProperty() {
            return (MultiLanguageProperty) getDataElement("TypeOfPublicKey");
        }
        
        /**
        * Returns the value of property TypeOfPublicKey.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getTypeOfPublicKey() throws ExecutionException {
            return getLangStringValue(this, "TypeOfPublicKey");
        }
        
    }
    
    /**
    * Accessor support for iP-based communication channels, e.g. chat or video call.
    * Generated by: EASy-Producer.
    */
    public static class IPCommunication extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for IPCommunication.
        *
        * @param parent the parent submodel element collection builder
        */
        protected IPCommunication(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property AddressOfAdditionalLink.
        *
        * @return the property
        */
        public Property getAddressOfAdditionalLinkProperty() {
            return getProperty("AddressOfAdditionalLink");
        }
        
        /**
        * Returns the value of property AddressOfAdditionalLink.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getAddressOfAdditionalLink() throws ExecutionException {
            return getStringValue(this, "AddressOfAdditionalLink");
        }
        
        /**
        * Returns the property TypeOfCommunication.
        *
        * @return the property
        */
        public Property getTypeOfCommunicationProperty() {
            return getProperty("TypeOfCommunication");
        }
        
        /**
        * Returns the value of property TypeOfCommunication.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getTypeOfCommunication() throws ExecutionException {
            return getStringValue(this, "TypeOfCommunication");
        }
        
        /**
        * Returns the property AvailableTime.
        *
        * @return the property
        */
        public MultiLanguageProperty getAvailableTimeProperty() {
            return (MultiLanguageProperty) getDataElement("AvailableTime");
        }
        
        /**
        * Returns the value of property AvailableTime.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getAvailableTime() throws ExecutionException {
            return getLangStringValue(this, "AvailableTime");
        }
        
    }
    
}
