package de.iip_ecosphere.platform.support.aas.types.documentation;

import static de.iip_ecosphere.platform.support.aas.IdentifierType.*;
import static de.iip_ecosphere.platform.support.aas.types.common.Utils.*;

import java.util.concurrent.ExecutionException;

import de.iip_ecosphere.platform.support.aas.Aas;
import de.iip_ecosphere.platform.support.aas.SubmodelElementCollection;
import de.iip_ecosphere.platform.support.aas.*;
import de.iip_ecosphere.platform.support.aas.types.common.*;

import de.iip_ecosphere.platform.support.aas.types.documentation.HandoverDocumentationBuilder.*;

/**
* Accessor support for the Submodel defines a set meta data for the handover of documentation from the manufacturer to
* the operator for industrial equipment.
* Generated by: EASy-Producer.
*/
public class HandoverDocumentation extends DelegatingSubmodel {

    /**
    * Creates a wrapping HandoverDocumentation submodel instance.
    * 
    * @param aas the parent AAS
    */            
    public HandoverDocumentation(Aas aas) {
        super(aas.getSubmodel("HandoverDocumentation"));
    }
    
    /**
    * Gets an instance of Document.
    *
    * @param index 0-based index to access a specific instance
    * @return the instance or <b>null</b> for none
    */
    public Document getDocument(int index) {
        var tmp = super.getSubmodelElementCollection(getCountingIdShort("Document", index));
        return null == tmp ? null : new Document(tmp);
    }
    
    /**
    * Gets an instance of Entity.
    *
    * @param index 0-based index to access a specific instance
    * @return the instance or <b>null</b> for none
    */
    public Entity getEntity(int index) {
        return super.getEntity(getCountingIdShort("Entity", index));
    }
    
    /**
    * Accessor support for this SubmodelElementCollection holds the information for a VDI 2770 Document entity.
    * Generated by: EASy-Producer.
    */
    public static class Document extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for Document.
        *
        * @param parent the parent submodel element collection builder
        */
        protected Document(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Gets an instance of DocumentId.
        *
        * @param index 0-based index to access a specific instance
        * @return the instance or <b>null</b> for none
        */
        public DocumentId getDocumentId(int index) {
            var tmp = super.getSubmodelElementCollection(getCountingIdShort("DocumentId", index));
            return null == tmp ? null : new DocumentId(tmp);
        }
        
        /**
        * Gets an instance of DocumentClassification.
        *
        * @param index 0-based index to access a specific instance
        * @return the instance or <b>null</b> for none
        */
        public DocumentClassification getDocumentClassification(int index) {
            var tmp = super.getSubmodelElementCollection(getCountingIdShort("DocumentClassification", index));
            return null == tmp ? null : new DocumentClassification(tmp);
        }
        
        /**
        * Gets an instance of DocumentVersion.
        *
        * @param index 0-based index to access a specific instance
        * @return the instance or <b>null</b> for none
        */
        public DocumentVersion getDocumentVersion(int index) {
            var tmp = super.getSubmodelElementCollection(getCountingIdShort("DocumentVersion", index));
            return null == tmp ? null : new DocumentVersion(tmp);
        }
        
        /**
        * Returns the property DocumentedEntity.
        *
        * @param index the index of the field
        * @return the property
        */
        public ReferenceElement getDocumentedEntityProperty(int index) {
            return (ReferenceElement) getReferenceElement(getCountingIdShort("DocumentedEntity", index));
        }
        
        /**
        * Returns the value of property DocumentedEntity.
        *
        * @param semanticId the actual semanticId
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<ReferenceElement> getDocumentedEntity(String semanticId) throws ExecutionException {
            return collect(elements(), ReferenceElement.class, semanticId != null && semanticId.length() > 0 
                ? semanticId : "<no semId given>");
        }
        
    }
    
    /**
    * Accessor support for this SubmodelElementCollection holds the information for a VDI 2770 DocumentIdDomain entity
    * and the DocumentId property.
    * Generated by: EASy-Producer.
    */
    public static class DocumentId extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for DocumentId.
        *
        * @param parent the parent submodel element collection builder
        */
        protected DocumentId(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property DocumentDomainId.
        *
        * @return the property
        */
        public Property getDocumentDomainIdProperty() {
            return getProperty("DocumentDomainId");
        }
        
        /**
        * Returns the value of property DocumentDomainId.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getDocumentDomainId() throws ExecutionException {
            return getStringValue(this, "DocumentDomainId");
        }
        
        /**
        * Returns the property ValueId.
        *
        * @return the property
        */
        public Property getValueIdProperty() {
            return getProperty("ValueId");
        }
        
        /**
        * Returns the value of property ValueId.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getValueId() throws ExecutionException {
            return getStringValue(this, "ValueId");
        }
        
        /**
        * Returns the property IsPrimary.
        *
        * @return the property
        */
        public Property getIsPrimaryProperty() {
            return getProperty("IsPrimary");
        }
        
        /**
        * Returns the value of property IsPrimary.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public boolean getIsPrimary() throws ExecutionException {
            return getBooleanValue(this, "IsPrimary");
        }
        
    }
    
    /**
    * Accessor support for this SubmodelElementCollection holds the information for a VDI 2770 DocumentClassification
    * entity.
    * Generated by: EASy-Producer.
    */
    public static class DocumentClassification extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for DocumentClassification.
        *
        * @param parent the parent submodel element collection builder
        */
        protected DocumentClassification(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property ClassId.
        *
        * @return the property
        */
        public Property getClassIdProperty() {
            return getProperty("ClassId");
        }
        
        /**
        * Returns the value of property ClassId.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getClassId() throws ExecutionException {
            return getStringValue(this, "ClassId");
        }
        
        /**
        * Returns the property ClassName.
        *
        * @return the property
        */
        public MultiLanguageProperty getClassNameProperty() {
            return (MultiLanguageProperty) getDataElement("ClassName");
        }
        
        /**
        * Returns the value of property ClassName.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getClassName() throws ExecutionException {
            return getLangStringValue(this, "ClassName");
        }
        
        /**
        * Returns the property ClassificationSystem.
        *
        * @return the property
        */
        public Property getClassificationSystemProperty() {
            return getProperty("ClassificationSystem");
        }
        
        /**
        * Returns the value of property ClassificationSystem.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getClassificationSystem() throws ExecutionException {
            return getStringValue(this, "ClassificationSystem");
        }
        
    }
    
    /**
    * Accessor support for this SubmodelElementCollection holds the information for a VDI2770 DocumentVersion entity.
    * Generated by: EASy-Producer.
    */
    public static class DocumentVersion extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for DocumentVersion.
        *
        * @param parent the parent submodel element collection builder
        */
        protected DocumentVersion(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property Language.
        *
        * @param index the index of the field
        * @return the property
        */
        public Property getLanguageProperty(int index) {
            return getProperty(getCountingIdShort("Language", index));
        }
        
        /**
        * Returns the value of property Language.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<String> getLanguage() throws ExecutionException {
            return collect(elements(), Property.class, irdi("0173-1#02-AAN468#006"), p -> cast(p, String.class));
        }
        
        /**
        * Returns the property DocumentVersionId.
        *
        * @return the property
        */
        public Property getDocumentVersionIdProperty() {
            return getProperty("DocumentVersionId");
        }
        
        /**
        * Returns the value of property DocumentVersionId.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getDocumentVersionId() throws ExecutionException {
            return getStringValue(this, "DocumentVersionId");
        }
        
        /**
        * Returns the property Title.
        *
        * @return the property
        */
        public MultiLanguageProperty getTitleProperty() {
            return (MultiLanguageProperty) getDataElement("Title");
        }
        
        /**
        * Returns the value of property Title.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getTitle() throws ExecutionException {
            return getLangStringValue(this, "Title");
        }
        
        /**
        * Returns the property SubTitle.
        *
        * @return the property
        */
        public MultiLanguageProperty getSubTitleProperty() {
            return (MultiLanguageProperty) getDataElement("SubTitle");
        }
        
        /**
        * Returns the value of property SubTitle.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getSubTitle() throws ExecutionException {
            return getLangStringValue(this, "SubTitle");
        }
        
        /**
        * Returns the property Summary.
        *
        * @return the property
        */
        public MultiLanguageProperty getSummaryProperty() {
            return (MultiLanguageProperty) getDataElement("Summary");
        }
        
        /**
        * Returns the value of property Summary.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getSummary() throws ExecutionException {
            return getLangStringValue(this, "Summary");
        }
        
        /**
        * Returns the property KeyWords.
        *
        * @return the property
        */
        public MultiLanguageProperty getKeyWordsProperty() {
            return (MultiLanguageProperty) getDataElement("KeyWords");
        }
        
        /**
        * Returns the value of property KeyWords.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getKeyWords() throws ExecutionException {
            return getLangStringValue(this, "KeyWords");
        }
        
        /**
        * Returns the property StatusSetDate.
        *
        * @return the property
        */
        public Property getStatusSetDateProperty() {
            return getProperty("StatusSetDate");
        }
        
        /**
        * Returns the value of property StatusSetDate.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getStatusSetDate() throws ExecutionException {
            return getDateValue(this, "StatusSetDate");
        }
        
        /**
        * Returns the property StatusValue.
        *
        * @return the property
        */
        public Property getStatusValueProperty() {
            return getProperty("StatusValue");
        }
        
        /**
        * Returns the value of property StatusValue.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public StatusValue getStatusValue() throws ExecutionException {
            return getEnumValue(this, "StatusValue", StatusValue.class, StatusValue.class);
        }
        
        /**
        * Returns the property OrganizationName.
        *
        * @return the property
        */
        public Property getOrganizationNameProperty() {
            return getProperty("OrganizationName");
        }
        
        /**
        * Returns the value of property OrganizationName.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getOrganizationName() throws ExecutionException {
            return getStringValue(this, "OrganizationName");
        }
        
        /**
        * Returns the property OrganizationOfficialName.
        *
        * @return the property
        */
        public Property getOrganizationOfficialNameProperty() {
            return getProperty("OrganizationOfficialName");
        }
        
        /**
        * Returns the value of property OrganizationOfficialName.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getOrganizationOfficialName() throws ExecutionException {
            return getStringValue(this, "OrganizationOfficialName");
        }
        
        /**
        * Returns the property DigitalFile.
        *
        * @param index the index of the field
        * @return the property
        */
        public FileDataElement getDigitalFileProperty(int index) {
            return (FileDataElement) getDataElement(getCountingIdShort("DigitalFile", index));
        }
        
        /**
        * Returns the value of property DigitalFile.
        *
        * @param semanticId the actual semanticId
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<FileDataElement> getDigitalFile(String semanticId) throws ExecutionException {
            return collect(elements(), FileDataElement.class, semanticId != null && semanticId.length() > 0 
                ? semanticId : irdi("0173-1#01-AHF583#001"));
        }
        
        /**
        * Returns the property PreviewFile.
        *
        * @param index the index of the field
        * @return the property
        */
        public FileDataElement getPreviewFileProperty(int index) {
            return (FileDataElement) getDataElement(getCountingIdShort("PreviewFile", index));
        }
        
        /**
        * Returns the value of property PreviewFile.
        *
        * @param semanticId the actual semanticId
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<FileDataElement> getPreviewFile(String semanticId) throws ExecutionException {
            return collect(elements(), FileDataElement.class, semanticId != null && semanticId.length() > 0 
                ? semanticId : irdi("0173-1#01-AHF584#001"));
        }
        
        /**
        * Returns the property RefersTo.
        *
        * @param index the index of the field
        * @return the property
        */
        public ReferenceElement getRefersToProperty(int index) {
            return (ReferenceElement) getReferenceElement(getCountingIdShort("RefersTo", index));
        }
        
        /**
        * Returns the value of property RefersTo.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<ReferenceElement> getRefersTo() throws ExecutionException {
            return collect(elements(), ReferenceElement.class, irdi("0173-1#02-ABI006#001"));
        }
        
        /**
        * Returns the property BasedOn.
        *
        * @param index the index of the field
        * @return the property
        */
        public ReferenceElement getBasedOnProperty(int index) {
            return (ReferenceElement) getReferenceElement(getCountingIdShort("BasedOn", index));
        }
        
        /**
        * Returns the value of property BasedOn.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<ReferenceElement> getBasedOn() throws ExecutionException {
            return collect(elements(), ReferenceElement.class, irdi("0173-1#02-ABI007#001"));
        }
        
        /**
        * Returns the property TranslationOf.
        *
        * @param index the index of the field
        * @return the property
        */
        public ReferenceElement getTranslationOfProperty(int index) {
            return (ReferenceElement) getReferenceElement(getCountingIdShort("TranslationOf", index));
        }
        
        /**
        * Returns the value of property TranslationOf.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<ReferenceElement> getTranslationOf() throws ExecutionException {
            return collect(elements(), ReferenceElement.class, irdi("0173-1#02-ABI008#001"));
        }
        
    }
    
}
