package de.iip_ecosphere.platform.support.aas.types.technicaldata;

import static de.iip_ecosphere.platform.support.aas.IdentifierType.*;
import static de.iip_ecosphere.platform.support.aas.types.common.Utils.*;

import java.util.concurrent.ExecutionException;

import de.iip_ecosphere.platform.support.aas.Aas;
import de.iip_ecosphere.platform.support.aas.SubmodelElementCollection;
import de.iip_ecosphere.platform.support.aas.*;
import de.iip_ecosphere.platform.support.aas.types.common.*;

/**
* Accessor support for submodel containing technical data of the asset and associated product classificatons.
* Generated by: EASy-Producer.
*/
public class TechnicalData extends DelegatingSubmodel {

    /**
    * Creates a wrapping TechnicalData submodel instance.
    * 
    * @param aas the parent AAS
    */            
    public TechnicalData(Aas aas) {
        super(aas.getSubmodel("TechnicalData"));
    }
    
    /**
    * Gets an instance of GeneralInformation.
    *
    * @return the instance or <b>null</b> for none
    */
    public GeneralInformation getGeneralInformation() {
        return new GeneralInformation(super.getSubmodelElementCollection("GeneralInformation"));
    }
    
    /**
    * Gets an instance of ProductClassifications.
    *
    * @return the instance or <b>null</b> for none
    */
    public ProductClassifications getProductClassifications() {
        return new ProductClassifications(super.getSubmodelElementCollection("ProductClassifications"));
    }
    
    /**
    * Gets an instance of TechnicalProperties.
    *
    * @return the instance or <b>null</b> for none
    */
    public TechnicalProperties getTechnicalProperties() {
        return new TechnicalProperties(super.getSubmodelElementCollection("TechnicalProperties"));
    }
    
    /**
    * Gets an instance of FurtherInformation.
    *
    * @return the instance or <b>null</b> for none
    */
    public FurtherInformation getFurtherInformation() {
        return new FurtherInformation(super.getSubmodelElementCollection("FurtherInformation"));
    }
    
    /**
    * Accessor support for general information, for example ordering and manufacturer information.
    * Generated by: EASy-Producer.
    */
    public static class GeneralInformation extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for GeneralInformation.
        *
        * @param parent the parent submodel element collection builder
        */
        protected GeneralInformation(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property ManufacturerName.
        *
        * @return the property
        */
        public Property getManufacturerNameProperty() {
            return getProperty("ManufacturerName");
        }
        
        /**
        * Returns the value of property ManufacturerName.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getManufacturerName() throws ExecutionException {
            return getStringValue(this, "ManufacturerName");
        }
        
        /**
        * Returns the property ManufacturerLogo.
        *
        * @return the property
        */
        public FileDataElement getManufacturerLogoProperty() {
            return (FileDataElement) getDataElement("ManufacturerLogo");
        }
        
        /**
        * Returns the value of property ManufacturerLogo.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public FileDataElement getManufacturerLogo() throws ExecutionException {
            return getFileDataElementValue(this, "ManufacturerLogo");
        }
        
        /**
        * Returns the property ManufacturerProductDesignation.
        *
        * @return the property
        */
        public MultiLanguageProperty getManufacturerProductDesignationProperty() {
            return (MultiLanguageProperty) getDataElement("ManufacturerProductDesignation");
        }
        
        /**
        * Returns the value of property ManufacturerProductDesignation.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getManufacturerProductDesignation() throws ExecutionException {
            return getLangStringValue(this, "ManufacturerProductDesignation");
        }
        
        /**
        * Returns the property ManufacturerArticleNumber.
        *
        * @return the property
        */
        public Property getManufacturerArticleNumberProperty() {
            return getProperty("ManufacturerArticleNumber");
        }
        
        /**
        * Returns the value of property ManufacturerArticleNumber.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getManufacturerArticleNumber() throws ExecutionException {
            return getStringValue(this, "ManufacturerArticleNumber");
        }
        
        /**
        * Returns the property ManufacturerOrderCode.
        *
        * @return the property
        */
        public Property getManufacturerOrderCodeProperty() {
            return getProperty("ManufacturerOrderCode");
        }
        
        /**
        * Returns the value of property ManufacturerOrderCode.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getManufacturerOrderCode() throws ExecutionException {
            return getStringValue(this, "ManufacturerOrderCode");
        }
        
        /**
        * Returns the property ProductImage.
        *
        * @param index the index of the field
        * @return the property
        */
        public FileDataElement getProductImageProperty(int index) {
            return (FileDataElement) getDataElement(getCountingIdShort("ProductImage", index));
        }
        
        /**
        * Returns the value of property ProductImage.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<FileDataElement> getProductImage() throws ExecutionException {
            return collect(elements(), FileDataElement.class, iri(
                "https://admin-shell.io/ZVEI/TechnicalData/ProductImage/1/1"));
        }
        
    }
    
    /**
    * Accessor support for product classifications by association with product classes in common classification
    * systems.
    * Generated by: EASy-Producer.
    */
    public static class ProductClassifications extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for ProductClassifications.
        *
        * @param parent the parent submodel element collection builder
        */
        protected ProductClassifications(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Gets an instance of ProductClassificationItem.
        *
        * @param index 0-based index to access a specific instance
        * @return the instance or <b>null</b> for none
        */
        public ProductClassificationItem getProductClassificationItem(int index) {
            var tmp = super.getSubmodelElementCollection(getCountingIdShort(
                "ProductClassificationItem", index));
            return null == tmp ? null : new ProductClassificationItem(tmp);
        }
        
    }
    
    /**
    * Accessor support for single product classification by association with product class in a particular
    * classification system or property dictionary.
    * Generated by: EASy-Producer.
    */
    public static class ProductClassificationItem extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for ProductClassificationItem.
        *
        * @param parent the parent submodel element collection builder
        */
        protected ProductClassificationItem(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property ProductClassificationSystem.
        *
        * @return the property
        */
        public Property getProductClassificationSystemProperty() {
            return getProperty("ProductClassificationSystem");
        }
        
        /**
        * Returns the value of property ProductClassificationSystem.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getProductClassificationSystem() throws ExecutionException {
            return getStringValue(this, "ProductClassificationSystem");
        }
        
        /**
        * Returns the property ClassificationSystemVersion.
        *
        * @return the property
        */
        public Property getClassificationSystemVersionProperty() {
            return getProperty("ClassificationSystemVersion");
        }
        
        /**
        * Returns the value of property ClassificationSystemVersion.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getClassificationSystemVersion() throws ExecutionException {
            return getStringValue(this, "ClassificationSystemVersion");
        }
        
        /**
        * Returns the property ProductClassId.
        *
        * @return the property
        */
        public Property getProductClassIdProperty() {
            return getProperty("ProductClassId");
        }
        
        /**
        * Returns the value of property ProductClassId.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getProductClassId() throws ExecutionException {
            return getStringValue(this, "ProductClassId");
        }
        
    }
    
    /**
    * Accessor support for individual characteristics that describe the product (industrial equipment) and its
    * technical properties.
    * Generated by: EASy-Producer.
    */
    public static class TechnicalProperties extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for TechnicalProperties.
        *
        * @param parent the parent submodel element collection builder
        */
        protected TechnicalProperties(SubmodelElementCollection parent) {
            super(parent);
        }
        
    /**
        * Returns the property arbitrary.
        *
        * @param idShort the actual idShort
        * @param index the index of the field
        * @return the property
        */
        public Property getArbitraryProperty(String idShort, int index) {
            return getProperty(getCountingIdShort(idShort, index));
        }
        
        /**
        * Returns the value of property arbitrary.
        *
        * @param idShort the actual idShort
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<String> getArbitrary(String idShort) throws ExecutionException {
            return collect(elements(), Property.class, iri("https://admin-shell.io/SemanticIdNotAvailable/1/1"), p ->
                cast(p, String.class));
        }
        
        /**
        * Gets an instance of MainSection.
        *
        * @param index 0-based index to access a specific instance
        * @return the instance or <b>null</b> for none
        */
        public SubmodelElementCollection getMainSection(int index) {
            return super.getSubmodelElementCollection(getCountingIdShort("MainSection", index));
        }
        
        /**
        * Gets an instance of SubSection.
        *
        * @param index 0-based index to access a specific instance
        * @return the instance or <b>null</b> for none
        */
        public SubmodelElementCollection getSubSection(int index) {
            return super.getSubmodelElementCollection(getCountingIdShort("SubSection", index));
        }
        
    }
    
    /**
    * Accessor support for further information on the product, the validity of the information provided and this data
    * record.
    * Generated by: EASy-Producer.
    */
    public static class FurtherInformation extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for FurtherInformation.
        *
        * @param parent the parent submodel element collection builder
        */
        protected FurtherInformation(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property TextStatement.
        *
        * @param index the index of the field
        * @return the property
        */
        public MultiLanguageProperty getTextStatementProperty(int index) {
            return (MultiLanguageProperty) getDataElement(getCountingIdShort("TextStatement", index));
        }
        
        /**
        * Returns the value of property TextStatement.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<LangString[]> getTextStatement() throws ExecutionException {
            return collect(elements(), MultiLanguageProperty.class, iri(
                "https://admin-shell.io/ZVEI/TechnicalData/TextStatement/1/1"), p -> getLangStringValue(p));
        }
        
        /**
        * Returns the property ValidDate.
        *
        * @return the property
        */
        public Property getValidDateProperty() {
            return getProperty("ValidDate");
        }
        
        /**
        * Returns the value of property ValidDate.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getValidDate() throws ExecutionException {
            return getDateValue(this, "ValidDate");
        }
        
    }
    
}
