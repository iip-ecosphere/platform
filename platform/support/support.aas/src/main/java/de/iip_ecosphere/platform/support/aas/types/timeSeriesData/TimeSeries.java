package de.iip_ecosphere.platform.support.aas.types.timeSeriesData;

import static de.iip_ecosphere.platform.support.aas.IdentifierType.*;
import static de.iip_ecosphere.platform.support.aas.types.common.Utils.*;

import java.util.concurrent.ExecutionException;

import de.iip_ecosphere.platform.support.aas.Aas;
import de.iip_ecosphere.platform.support.aas.SubmodelElementCollection;
import de.iip_ecosphere.platform.support.aas.*;
import de.iip_ecosphere.platform.support.aas.types.common.*;

import de.iip_ecosphere.platform.support.aas.types.timeSeriesData.TimeSeriesBuilder.*;

/**
* Accessor support for contains time series data and references to time series data to discover and semantically
* describe them along the asset lifecycle.
* Generated by: EASy-Producer.
*/
public class TimeSeries extends DelegatingSubmodel {

    /**
    * Creates a wrapping TimeSeries submodel instance.
    * 
    * @param aas the parent AAS
    */            
    public TimeSeries(Aas aas) {
        super(aas.getSubmodel("TimeSeries"));
    }
    
    /**
    * Gets an instance of Metadata.
    *
    * @return the instance or <b>null</b> for none
    */
    public Metadata getMetadata() {
        return new Metadata(super.getSubmodelElementCollection("Metadata"));
    }
    
    /**
    * Gets an instance of Segments.
    *
    * @return the instance or <b>null</b> for none
    */
    public Segments getSegments() {
        return new Segments(super.getSubmodelElementCollection("Segments"));
    }
    
    /**
    * Accessor support for a set of data describing and providing information about the time series.
    * Generated by: EASy-Producer.
    */
    public static class Metadata extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for Metadata.
        *
        * @param parent the parent submodel element collection builder
        */
        protected Metadata(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property Name.
        *
        * @return the property
        */
        public MultiLanguageProperty getNameProperty() {
            return (MultiLanguageProperty) getDataElement("Name");
        }
        
        /**
        * Returns the value of property Name.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getName() throws ExecutionException {
            return getLangStringValue(this, "Name");
        }
        
        /**
        * Returns the property Description.
        *
        * @return the property
        */
        public MultiLanguageProperty getDescriptionProperty() {
            return (MultiLanguageProperty) getDataElement("Description");
        }
        
        /**
        * Returns the value of property Description.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getDescription() throws ExecutionException {
            return getLangStringValue(this, "Description");
        }
        
        /**
        * Gets an instance of Record.
        *
        * @return the instance or <b>null</b> for none
        */
        public Record getRecord() {
            return new Record(super.getSubmodelElementCollection("Record"));
        }
        
    }
    
    /**
    * Accessor support for a time series record is unique by its ID within the time series and contains the timestamps
    * and variable values referenced to the ID. Similar to a row in a table.
    * Generated by: EASy-Producer.
    */
    public static class Record extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for Record.
        *
        * @param parent the parent submodel element collection builder
        */
        protected Record(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property Time.
        *
        * @param index the index of the field
        * @return the property
        */
        public Property getTimeProperty(int index) {
            return getProperty(getCountingIdShort("Time", index));
        }
        
        /**
        * Returns the value of property Time.
        *
        * @param semanticId the actual semanticId
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<String> getTime(String semanticId) throws ExecutionException {
            return collect(elements(), Property.class, semanticId != null && semanticId.length() > 0 ? semanticId 
                : iri("https://admin-shell.io/idta/TimeSeries/UtcTime/1/1"), p -> cast(p, String.class));
        }
        
    }
    
    /**
    * Accessor support for contains segments of a time series.
    * Generated by: EASy-Producer.
    */
    public static class Segments extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for Segments.
        *
        * @param parent the parent submodel element collection builder
        */
        protected Segments(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Gets an instance of ExternalSegment.
        *
        * @param index 0-based index to access a specific instance
        * @return the instance or <b>null</b> for none
        */
        public ExternalSegment getExternalSegment(int index) {
            return new ExternalSegment(super.getSubmodelElementCollection(getCountingIdShort("ExternalSegment",
                index)));
        }
        
        /**
        * Gets an instance of LinkedSegment.
        *
        * @param index 0-based index to access a specific instance
        * @return the instance or <b>null</b> for none
        */
        public LinkedSegment getLinkedSegment(int index) {
            return new LinkedSegment(super.getSubmodelElementCollection(getCountingIdShort("LinkedSegment", index)));
        }
        
        /**
        * Gets an instance of InternalSegment.
        *
        * @param index 0-based index to access a specific instance
        * @return the instance or <b>null</b> for none
        */
        public InternalSegment getInternalSegment(int index) {
            return new InternalSegment(super.getSubmodelElementCollection(getCountingIdShort("InternalSegment",
                index)));
        }
        
    }
    
    /**
    * Accessor support for reference to a file of data points in sequential order over a period of time.
    * Generated by: EASy-Producer.
    */
    public static class ExternalSegment extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for ExternalSegment.
        *
        * @param parent the parent submodel element collection builder
        */
        protected ExternalSegment(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property Name.
        *
        * @return the property
        */
        public MultiLanguageProperty getNameProperty() {
            return (MultiLanguageProperty) getDataElement("Name");
        }
        
        /**
        * Returns the value of property Name.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getName() throws ExecutionException {
            return getLangStringValue(this, "Name");
        }
        
        /**
        * Returns the property Description.
        *
        * @return the property
        */
        public MultiLanguageProperty getDescriptionProperty() {
            return (MultiLanguageProperty) getDataElement("Description");
        }
        
        /**
        * Returns the value of property Description.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getDescription() throws ExecutionException {
            return getLangStringValue(this, "Description");
        }
        
        /**
        * Returns the property RecordCount.
        *
        * @return the property
        */
        public Property getRecordCountProperty() {
            return getProperty("RecordCount");
        }
        
        /**
        * Returns the value of property RecordCount.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public long getRecordCount() throws ExecutionException {
            return getLongValue(this, "RecordCount");
        }
        
        /**
        * Returns the property StartTime.
        *
        * @return the property
        */
        public Property getStartTimeProperty() {
            return getProperty("StartTime");
        }
        
        /**
        * Returns the value of property StartTime.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getStartTime() throws ExecutionException {
            return getDateValue(this, "StartTime");
        }
        
        /**
        * Returns the property EndTime.
        *
        * @return the property
        */
        public Property getEndTimeProperty() {
            return getProperty("EndTime");
        }
        
        /**
        * Returns the value of property EndTime.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getEndTime() throws ExecutionException {
            return getDateValue(this, "EndTime");
        }
        
        /**
        * Returns the property Duration.
        *
        * @return the property
        */
        public Property getDurationProperty() {
            return getProperty("Duration");
        }
        
        /**
        * Returns the value of property Duration.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getDuration() throws ExecutionException {
            return getStringValue(this, "Duration");
        }
        
        /**
        * Returns the property SamplingInterval.
        *
        * @return the property
        */
        public Property getSamplingIntervalProperty() {
            return getProperty("SamplingInterval");
        }
        
        /**
        * Returns the value of property SamplingInterval.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public long getSamplingInterval() throws ExecutionException {
            return getLongValue(this, "SamplingInterval");
        }
        
        /**
        * Returns the property SamplingRate.
        *
        * @return the property
        */
        public Property getSamplingRateProperty() {
            return getProperty("SamplingRate");
        }
        
        /**
        * Returns the value of property SamplingRate.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public long getSamplingRate() throws ExecutionException {
            return getLongValue(this, "SamplingRate");
        }
        
        /**
        * Returns the property State.
        *
        * @return the property
        */
        public Property getStateProperty() {
            return getProperty("State");
        }
        
        /**
        * Returns the value of property State.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public State getState() throws ExecutionException {
            return getEnumValue(this, "State", State.class, State.class);
        }
        
        /**
        * Returns the property LastUpdate.
        *
        * @return the property
        */
        public Property getLastUpdateProperty() {
            return getProperty("LastUpdate");
        }
        
        /**
        * Returns the value of property LastUpdate.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getLastUpdate() throws ExecutionException {
            return getDateValue(this, "LastUpdate");
        }
        
        /**
        * Returns the property File.
        *
        * @return the property
        */
        public FileDataElement getFileProperty() {
            return (FileDataElement) getDataElement("File");
        }
        
        /**
        * Returns the value of property File.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public FileDataElement getFile() throws ExecutionException {
            return getFileDataElementValue(this, "File");
        }
        
        /**
        * Returns the property Blob.
        *
        * @return the property
        */
        public BlobDataElement getBlobProperty() {
            return (BlobDataElement) getDataElement("Blob");
        }
        
        /**
        * Returns the value of property Blob.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public BlobDataElement getBlob() throws ExecutionException {
            return getBlobDataElementValue(this, "Blob");
        }
        
    }
    
    /**
    * Accessor support for reference to an endpoint of data points in sequential order over a period of time.
    * Generated by: EASy-Producer.
    */
    public static class LinkedSegment extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for LinkedSegment.
        *
        * @param parent the parent submodel element collection builder
        */
        protected LinkedSegment(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property Name.
        *
        * @return the property
        */
        public MultiLanguageProperty getNameProperty() {
            return (MultiLanguageProperty) getDataElement("Name");
        }
        
        /**
        * Returns the value of property Name.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getName() throws ExecutionException {
            return getLangStringValue(this, "Name");
        }
        
        /**
        * Returns the property Description.
        *
        * @return the property
        */
        public MultiLanguageProperty getDescriptionProperty() {
            return (MultiLanguageProperty) getDataElement("Description");
        }
        
        /**
        * Returns the value of property Description.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getDescription() throws ExecutionException {
            return getLangStringValue(this, "Description");
        }
        
        /**
        * Returns the property RecordCount.
        *
        * @return the property
        */
        public Property getRecordCountProperty() {
            return getProperty("RecordCount");
        }
        
        /**
        * Returns the value of property RecordCount.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public long getRecordCount() throws ExecutionException {
            return getLongValue(this, "RecordCount");
        }
        
        /**
        * Returns the property StartTime.
        *
        * @return the property
        */
        public Property getStartTimeProperty() {
            return getProperty("StartTime");
        }
        
        /**
        * Returns the value of property StartTime.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getStartTime() throws ExecutionException {
            return getDateValue(this, "StartTime");
        }
        
        /**
        * Returns the property EndTime.
        *
        * @return the property
        */
        public Property getEndTimeProperty() {
            return getProperty("EndTime");
        }
        
        /**
        * Returns the value of property EndTime.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getEndTime() throws ExecutionException {
            return getDateValue(this, "EndTime");
        }
        
        /**
        * Returns the property Duration.
        *
        * @return the property
        */
        public Property getDurationProperty() {
            return getProperty("Duration");
        }
        
        /**
        * Returns the value of property Duration.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getDuration() throws ExecutionException {
            return getStringValue(this, "Duration");
        }
        
        /**
        * Returns the property SamplingInterval.
        *
        * @return the property
        */
        public Property getSamplingIntervalProperty() {
            return getProperty("SamplingInterval");
        }
        
        /**
        * Returns the value of property SamplingInterval.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public long getSamplingInterval() throws ExecutionException {
            return getLongValue(this, "SamplingInterval");
        }
        
        /**
        * Returns the property SamplingRate.
        *
        * @return the property
        */
        public Property getSamplingRateProperty() {
            return getProperty("SamplingRate");
        }
        
        /**
        * Returns the value of property SamplingRate.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public long getSamplingRate() throws ExecutionException {
            return getLongValue(this, "SamplingRate");
        }
        
        /**
        * Returns the property State.
        *
        * @return the property
        */
        public Property getStateProperty() {
            return getProperty("State");
        }
        
        /**
        * Returns the value of property State.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public State getState() throws ExecutionException {
            return getEnumValue(this, "State", State.class, State.class);
        }
        
        /**
        * Returns the property LastUpdate.
        *
        * @return the property
        */
        public Property getLastUpdateProperty() {
            return getProperty("LastUpdate");
        }
        
        /**
        * Returns the value of property LastUpdate.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getLastUpdate() throws ExecutionException {
            return getDateValue(this, "LastUpdate");
        }
        
        /**
        * Returns the property Endpoint.
        *
        * @return the property
        */
        public Property getEndpointProperty() {
            return getProperty("Endpoint");
        }
        
        /**
        * Returns the value of property Endpoint.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getEndpoint() throws ExecutionException {
            return getStringValue(this, "Endpoint");
        }
        
        /**
        * Returns the property Query.
        *
        * @return the property
        */
        public Property getQueryProperty() {
            return getProperty("Query");
        }
        
        /**
        * Returns the value of property Query.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getQuery() throws ExecutionException {
            return getStringValue(this, "Query");
        }
        
    }
    
    /**
    * Accessor support for grouped sequence of data points in successive order over a specified period of time.
    * Generated by: EASy-Producer.
    */
    public static class InternalSegment extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for InternalSegment.
        *
        * @param parent the parent submodel element collection builder
        */
        protected InternalSegment(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property Name.
        *
        * @return the property
        */
        public MultiLanguageProperty getNameProperty() {
            return (MultiLanguageProperty) getDataElement("Name");
        }
        
        /**
        * Returns the value of property Name.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getName() throws ExecutionException {
            return getLangStringValue(this, "Name");
        }
        
        /**
        * Returns the property Description.
        *
        * @return the property
        */
        public MultiLanguageProperty getDescriptionProperty() {
            return (MultiLanguageProperty) getDataElement("Description");
        }
        
        /**
        * Returns the value of property Description.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getDescription() throws ExecutionException {
            return getLangStringValue(this, "Description");
        }
        
        /**
        * Returns the property RecordCount.
        *
        * @return the property
        */
        public Property getRecordCountProperty() {
            return getProperty("RecordCount");
        }
        
        /**
        * Returns the value of property RecordCount.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public long getRecordCount() throws ExecutionException {
            return getLongValue(this, "RecordCount");
        }
        
        /**
        * Returns the property StartTime.
        *
        * @return the property
        */
        public Property getStartTimeProperty() {
            return getProperty("StartTime");
        }
        
        /**
        * Returns the value of property StartTime.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getStartTime() throws ExecutionException {
            return getDateValue(this, "StartTime");
        }
        
        /**
        * Returns the property EndTime.
        *
        * @return the property
        */
        public Property getEndTimeProperty() {
            return getProperty("EndTime");
        }
        
        /**
        * Returns the value of property EndTime.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getEndTime() throws ExecutionException {
            return getDateValue(this, "EndTime");
        }
        
        /**
        * Returns the property Duration.
        *
        * @return the property
        */
        public Property getDurationProperty() {
            return getProperty("Duration");
        }
        
        /**
        * Returns the value of property Duration.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getDuration() throws ExecutionException {
            return getStringValue(this, "Duration");
        }
        
        /**
        * Returns the property SamplingInterval.
        *
        * @return the property
        */
        public Property getSamplingIntervalProperty() {
            return getProperty("SamplingInterval");
        }
        
        /**
        * Returns the value of property SamplingInterval.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public long getSamplingInterval() throws ExecutionException {
            return getLongValue(this, "SamplingInterval");
        }
        
        /**
        * Returns the property SamplingRate.
        *
        * @return the property
        */
        public Property getSamplingRateProperty() {
            return getProperty("SamplingRate");
        }
        
        /**
        * Returns the value of property SamplingRate.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public long getSamplingRate() throws ExecutionException {
            return getLongValue(this, "SamplingRate");
        }
        
        /**
        * Returns the property State.
        *
        * @return the property
        */
        public Property getStateProperty() {
            return getProperty("State");
        }
        
        /**
        * Returns the value of property State.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public State getState() throws ExecutionException {
            return getEnumValue(this, "State", State.class, State.class);
        }
        
        /**
        * Returns the property LastUpdate.
        *
        * @return the property
        */
        public Property getLastUpdateProperty() {
            return getProperty("LastUpdate");
        }
        
        /**
        * Returns the value of property LastUpdate.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getLastUpdate() throws ExecutionException {
            return getDateValue(this, "LastUpdate");
        }
        
        /**
        * Gets an instance of Records.
        *
        * @return the instance or <b>null</b> for none
        */
        public Records getRecords() {
            return new Records(super.getSubmodelElementCollection("Records"));
        }
        
    }
    
    /**
    * Accessor support for group of data points in successive order over a specified period of time.
    * Generated by: EASy-Producer.
    */
    public static class Records extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for Records.
        *
        * @param parent the parent submodel element collection builder
        */
        protected Records(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Gets an instance of Record.
        *
        * @param index 0-based index to access a specific instance
        * @return the instance or <b>null</b> for none
        */
        public Record getRecord(int index) {
            return new Record(super.getSubmodelElementCollection(getCountingIdShort("Record", index)));
        }
        
    }
    
}
