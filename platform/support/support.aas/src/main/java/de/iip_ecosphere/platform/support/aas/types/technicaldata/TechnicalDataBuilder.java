package de.iip_ecosphere.platform.support.aas.types.technicaldata;

import static de.iip_ecosphere.platform.support.aas.IdentifierType.*;
import static de.iip_ecosphere.platform.support.aas.types.common.Utils.*;

import de.iip_ecosphere.platform.support.Builder;
import de.iip_ecosphere.platform.support.aas.Aas.AasBuilder;
import de.iip_ecosphere.platform.support.aas.SubmodelElementCollection.SubmodelElementCollectionBuilder;
import de.iip_ecosphere.platform.support.aas.*;
import de.iip_ecosphere.platform.support.aas.types.common.*;

/**
* Builder support for submodel containing technical data of the asset and associated product classificatons.
* Generated by: EASy-Producer.
*/
public class TechnicalDataBuilder extends DelegatingSubmodelBuilder {

    private boolean createMultiLanguageProperties = true;

    private int generalInformationCounter = 0;
    private int productClassificationsCounter = 0;
    private int technicalPropertiesCounter = 0;
    private int furtherInformationCounter = 0;

    /**
    * Creates a TechnicalData submodel builder.
    * 
    * @param aasBuilder the parent AAS builder
    * @param identifier the submodel identifier
    */            
    public TechnicalDataBuilder(AasBuilder aasBuilder, String identifier) {
        this(aasBuilder, identifier, "TechnicalData");
    }

    /**
    * Creates a TechnicalData submodel builder.
    * 
    * @param aasBuilder the parent AAS builder
    * @param identifier the submodel identifier
    * @param idShort the idShort of the submodel to create
    */            
    private TechnicalDataBuilder(AasBuilder aasBuilder, String identifier, String idShort) {
        super(aasBuilder.createSubmodelBuilder(idShort, identifier));
        setSemanticId(iri("https://admin-shell.io/ZVEI/TechnicalData/Submodel/1/2"));
    }
    
    /**
     * Defines whether multi-language properties shall be created. AASPackageExplorer compliance.
     *
     * @param createMultiLanguageProperties whether multi-language properties shall be created, taints compliance 
     *     if {@code false}
     */
    public void setCreateMultiLanguageProperties(boolean createMultiLanguageProperties) {
        this.createMultiLanguageProperties = createMultiLanguageProperties;
    } 

    /**
    * Creates a builder for GeneralInformation.
    *
    * @return the builder instance, {@link Builder#build()} must be called
    */
    public GeneralInformationBuilder createGeneralInformationBuilder() {
        generalInformationCounter++;
        return new GeneralInformationBuilder(this);
    }
    
    /**
    * Creates a builder for ProductClassifications.
    *
    * @return the builder instance, {@link Builder#build()} must be called
    */
    public ProductClassificationsBuilder createProductClassificationsBuilder() {
        productClassificationsCounter++;
        return new ProductClassificationsBuilder(this);
    }
    
    /**
    * Creates a builder for TechnicalProperties.
    *
    * @return the builder instance, {@link Builder#build()} must be called
    */
    public TechnicalPropertiesBuilder createTechnicalPropertiesBuilder() {
        technicalPropertiesCounter++;
        return new TechnicalPropertiesBuilder(this);
    }
    
    /**
    * Creates a builder for FurtherInformation.
    *
    * @return the builder instance, {@link Builder#build()} must be called
    */
    public FurtherInformationBuilder createFurtherInformationBuilder() {
        furtherInformationCounter++;
        return new FurtherInformationBuilder(this);
    }
    
    @Override
    public Submodel build() {
        assertThat(generalInformationCounter == 1, "Cardinality {} of GeneralInformation must be equal 1.",
            generalInformationCounter);
        assertThat(0 <= productClassificationsCounter && productClassificationsCounter <= 1, "Cardinality {} of Product"
            + "Classifications must be greater or equal 0 and less or equal 1.", productClassificationsCounter);
        assertThat(technicalPropertiesCounter == 1, "Cardinality {} of TechnicalProperties must be equal 1.",
            technicalPropertiesCounter);
        assertThat(0 <= furtherInformationCounter && furtherInformationCounter <= 1, "Cardinality {} of FurtherInformat"
            + "ion must be greater or equal 0 and less or equal 1.", furtherInformationCounter);
        
        return super.build();
    }

    /**
    * Builder support for general information, for example ordering and manufacturer information.
    * Generated by: EASy-Producer.
    */
    public class GeneralInformationBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int manufacturerNameCounter = 0;
        private int manufacturerLogoCounter = 0;
        private int manufacturerProductDesignationCounter = 0;
        private int manufacturerArticleNumberCounter = 0;
        private int manufacturerOrderCodeCounter = 0;
        private int productImageCounter = 0;
    
        /**
        * Creates a builder instance for GeneralInformation.
        *
        * @param smBuilder the parent submodel builder
        */
        protected GeneralInformationBuilder(DelegatingSubmodelBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("GeneralInformation"), smBuilder);
            setSemanticId(iri("https://admin-shell.io/ZVEI/TechnicalData/GeneralInformation/1/1"));
        }
        
        /**
        * Creates a builder instance for GeneralInformation.
        *
        * @param smBuilder the parent submodel builder
        * @param nr the structure number
        */
        protected GeneralInformationBuilder(DelegatingSubmodelBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("GeneralInformation", nr)), 
                smBuilder);
            setSemanticId(iri("https://admin-shell.io/ZVEI/TechnicalData/GeneralInformation/1/1"));
        }
        
        /**
        * Changes legally valid designation of the natural or judicial body which is directly responsible for the
        * design, production, packaging and labeling of a product in respect to its being brought into the market..
        *
        * @param manufacturerName the value for ManufacturerName
        * @return <b>this</b> (builder style)
        */
        public GeneralInformationBuilder setManufacturerName(String manufacturerName) {
            manufacturerNameCounter++;
            createPropertyBuilder("ManufacturerName")
                .setSemanticId(irdi("0173-1#02-AAO677#002"))
                .setValue(Type.STRING, manufacturerName).build();
            return this;
        }
        
        /**
        * Changes imagefile for logo of manufacturer provided in common format (.png, .jpg)..
        *
        * @param file the relative or absolute file name with extension
        * @param mimeType the mime type of the file
        * @return <b>this</b> (builder style)
        */
        public GeneralInformationBuilder setManufacturerLogo(String file, String mimeType) {
            manufacturerLogoCounter++;
            createFileDataElementBuilder("ManufacturerLogo", file, mimeType)
                .setSemanticId(iri("https://admin-shell.io/ZVEI/TechnicalData/ManufacturerLogo/1/1"))
                .build();
            return this;
        }
        
        /**
        * Changes product designation as given by the manufacturer. Short description of the product, product group or
        * function (short text) in common language..
        *
        * @param manufacturerProductDesignation the value for ManufacturerProductDesignation
        * @return <b>this</b> (builder style)
        */
        public GeneralInformationBuilder setManufacturerProductDesignation(LangString...
            manufacturerProductDesignation) {
            if (manufacturerProductDesignation.length > 0) {
                manufacturerProductDesignationCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "ManufacturerProductDesignation"
                , 
                irdi("0173-1#02-AAW338#001"), manufacturerProductDesignation);
            return this;
        }
        
        /**
        * Changes unique product identifier of the manufacturer..
        *
        * @param manufacturerArticleNumber the value for ManufacturerArticleNumber
        * @return <b>this</b> (builder style)
        */
        public GeneralInformationBuilder setManufacturerArticleNumber(String manufacturerArticleNumber) {
            manufacturerArticleNumberCounter++;
            createPropertyBuilder("ManufacturerArticleNumber")
                .setSemanticId(irdi("0173-1#02-AAO676#003"))
                .setValue(Type.STRING, manufacturerArticleNumber).build();
            return this;
        }
        
        /**
        * Changes by manufactures issued unique combination of numbers and letters used to identify the device for
        * ordering..
        *
        * @param manufacturerOrderCode the value for ManufacturerOrderCode
        * @return <b>this</b> (builder style)
        */
        public GeneralInformationBuilder setManufacturerOrderCode(String manufacturerOrderCode) {
            manufacturerOrderCodeCounter++;
            createPropertyBuilder("ManufacturerOrderCode")
                .setSemanticId(irdi("0173-1#02-AAO227#002"))
                .setValue(Type.STRING, manufacturerOrderCode).build();
            return this;
        }
        
        /**
        * Changes image file for associated product provided in common format (.png, .jpg)..
        *
        * @param file the relative or absolute file name with extension
        * @param mimeType the mime type of the file
        * @return <b>this</b> (builder style)
        */
        public GeneralInformationBuilder setProductImage(String file, String mimeType) {
            // counting -> composition of idShort
            createFileDataElementBuilder(getCountingIdShort("ProductImage", ++productImageCounter), file, mimeType)
                .setSemanticId(iri("https://admin-shell.io/ZVEI/TechnicalData/ProductImage/1/1"))
                .build();
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(manufacturerNameCounter == 1, "Cardinality {} of ManufacturerName must be equal 1.",
                manufacturerNameCounter);
            assertThat(0 <= manufacturerLogoCounter && manufacturerLogoCounter <= 1, "Cardinality {} of ManufacturerLog"
                + "o must be greater or equal 0 and less or equal 1.", manufacturerLogoCounter);
            assertThat(manufacturerProductDesignationCounter == 1, "Cardinality {} of ManufacturerProductDesignation mu"
                + "st be equal 1.", manufacturerProductDesignationCounter);
            assertThat(manufacturerArticleNumberCounter == 1, "Cardinality {} of ManufacturerArticleNumber must be equa"
                + "l 1.", manufacturerArticleNumberCounter);
            assertThat(manufacturerOrderCodeCounter == 1, "Cardinality {} of ManufacturerOrderCode must be equal 1.",
                manufacturerOrderCodeCounter);
            assertThat(0 <= productImageCounter, "Cardinality {} of ProductImage must be greater or equal 0.",
                productImageCounter);
            
            return super.build();
        }
    }
    
    /**
    * Builder support for product classifications by association with product classes in common classification
    * systems.
    * Generated by: EASy-Producer.
    */
    public class ProductClassificationsBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int productClassificationItemCounter = 0;
    
        /**
        * Creates a builder instance for ProductClassifications.
        *
        * @param smBuilder the parent submodel builder
        */
        protected ProductClassificationsBuilder(DelegatingSubmodelBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("ProductClassifications"), smBuilder);
            setSemanticId(iri("https://admin-shell.io/ZVEI/TechnicalData/ProductClassifications/1/1"));
        }
        
        /**
        * Creates a builder instance for ProductClassifications.
        *
        * @param smBuilder the parent submodel builder
        * @param nr the structure number
        */
        protected ProductClassificationsBuilder(DelegatingSubmodelBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("ProductClassifications", nr)), 
                smBuilder);
            setSemanticId(iri("https://admin-shell.io/ZVEI/TechnicalData/ProductClassifications/1/1"));
        }
        
        /**
        * Creates a builder for ProductClassificationItem.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public ProductClassificationItemBuilder createProductClassificationItemBuilder() {
            // counting -> composition of idShort
            return new ProductClassificationItemBuilder(this, ++productClassificationItemCounter);
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(0 <= productClassificationItemCounter, "Cardinality {} of ProductClassificationItem must be grea"
                + "ter or equal 0.", productClassificationItemCounter);
            
            return super.build();
        }
    }
    
    /**
    * Builder support for single product classification by association with product class in a particular
    * classification system or property dictionary.
    * Generated by: EASy-Producer.
    */
    public class ProductClassificationItemBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int productClassificationSystemCounter = 0;
        private int classificationSystemVersionCounter = 0;
        private int productClassIdCounter = 0;
    
        /**
        * Creates a builder instance for ProductClassificationItem.
        *
        * @param smBuilder the parent submodel element container builder
        */
        protected ProductClassificationItemBuilder(DelegatingSubmodelElementContainerBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("ProductClassificationItem"), smBuilder);
            setSemanticId(iri("https://admin-shell.io/ZVEI/TechnicalData/ProductClassificationItem/1/1"));
        }
        
        /**
        * Creates a builder instance for ProductClassificationItem.
        *
        * @param smBuilder the parent submodel element container builder
        * @param nr the structure number
        */
        protected ProductClassificationItemBuilder(DelegatingSubmodelElementContainerBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("ProductClassificationItem",
                nr)), smBuilder);
            setSemanticId(iri("https://admin-shell.io/ZVEI/TechnicalData/ProductClassificationItem/1/1"));
        }
        
        /**
        * Changes common name of the classification system..
        *
        * @param productClassificationSystem the value for ProductClassificationSystem
        * @return <b>this</b> (builder style)
        */
        public ProductClassificationItemBuilder setProductClassificationSystem(String productClassificationSystem) {
            productClassificationSystemCounter++;
            createPropertyBuilder("ProductClassificationSystem")
                .setSemanticId(iri("https://admin-shell.io/ZVEI/TechnicalData/ProductClassificationSystem/1/1"))
                .setValue(Type.STRING, productClassificationSystem).build();
            return this;
        }
        
        /**
        * Changes common version identifier of the used classification system, in order to distinguish different
        * version of the property dictionary..
        *
        * @param classificationSystemVersion the value for ClassificationSystemVersion
        * @return <b>this</b> (builder style)
        */
        public ProductClassificationItemBuilder setClassificationSystemVersion(String classificationSystemVersion) {
            classificationSystemVersionCounter++;
            createPropertyBuilder("ClassificationSystemVersion")
                .setSemanticId(iri("https://admin-shell.io/ZVEI/TechnicalData/ClassificationSystemVersion/1/1"))
                .setValue(Type.STRING, classificationSystemVersion).build();
            return this;
        }
        
        /**
        * Changes class of the associated product or industrial equipment in the classification system. According to
        * the notation of the system..
        *
        * @param productClassId the value for ProductClassId
        * @return <b>this</b> (builder style)
        */
        public ProductClassificationItemBuilder setProductClassId(String productClassId) {
            productClassIdCounter++;
            createPropertyBuilder("ProductClassId")
                .setSemanticId(iri("https://admin-shell.io/ZVEI/TechnicalData/ProductClassId/1/1"))
                .setValue(Type.STRING, productClassId).build();
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(productClassificationSystemCounter == 1, "Cardinality {} of ProductClassificationSystem must be "
                + "equal 1.", productClassificationSystemCounter);
            assertThat(0 <= classificationSystemVersionCounter && classificationSystemVersionCounter <= 1, 
                "Cardinality {} of ClassificationSystemVersion must be greater or equal 0 and less or equal 1.",
                classificationSystemVersionCounter);
            assertThat(productClassIdCounter == 1, "Cardinality {} of ProductClassId must be equal 1.",
                productClassIdCounter);
            
            return super.build();
        }
    }
    
    /**
    * Builder support for individual characteristics that describe the product (industrial equipment) and its
    * technical properties.
    * Generated by: EASy-Producer.
    */
    public class TechnicalPropertiesBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int arbitraryCounter = 0;
        private int mainSectionCounter = 0;
        private int subSectionCounter = 0;
    
        /**
        * Creates a builder instance for TechnicalProperties.
        *
        * @param smBuilder the parent submodel builder
        */
        protected TechnicalPropertiesBuilder(DelegatingSubmodelBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("TechnicalProperties"), smBuilder);
            setSemanticId(iri("https://admin-shell.io/ZVEI/TechnicalData/TechnicalProperties/1/1"));
        }
        
        /**
        * Creates a builder instance for TechnicalProperties.
        *
        * @param smBuilder the parent submodel builder
        * @param nr the structure number
        */
        protected TechnicalPropertiesBuilder(DelegatingSubmodelBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("TechnicalProperties", nr)), 
                smBuilder);
            setSemanticId(iri("https://admin-shell.io/ZVEI/TechnicalData/TechnicalProperties/1/1"));
        }
        
       /**
        * Changes represents a SubmodelElement that is not described using a common classification system, a
        * consortium specification, an open community standard, a published manufacturer specification or such..
        *
        * @param arbitrary the value for arbitrary
        * @param idShort the actual idShort
        * @return <b>this</b> (builder style)
        */
        public TechnicalPropertiesBuilder setArbitrary(String idShort, String arbitrary) {
            // counting -> composition of idShort
            createPropertyBuilder(getCountingIdShort(idShort, ++arbitraryCounter))
                .setSemanticId(iri("https://admin-shell.io/SemanticIdNotAvailable/1/1"))
                .setValue(Type.STRING, arbitrary).build();
            return this;
        }
        
        /**
        * Creates a builder for MainSection.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public SubmodelElementCollectionBuilder createMainSectionBuilder() {
            // counting -> composition of idShort
            return super.createSubmodelElementCollectionBuilder(getCountingIdShort("MainSection",
                ++mainSectionCounter));
        }
        
        /**
        * Creates a builder for SubSection.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public SubmodelElementCollectionBuilder createSubSectionBuilder() {
            // counting -> composition of idShort
            return super.createSubmodelElementCollectionBuilder(getCountingIdShort("SubSection", ++subSectionCounter));
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(0 <= arbitraryCounter, "Cardinality {} of arbitrary must be greater or equal 0.",
                arbitraryCounter);
            assertThat(0 <= mainSectionCounter, "Cardinality {} of MainSection must be greater or equal 0.",
                mainSectionCounter);
            assertThat(0 <= subSectionCounter, "Cardinality {} of SubSection must be greater or equal 0.",
                subSectionCounter);
            
            return super.build();
        }
    }
    
    /**
    * Builder support for further information on the product, the validity of the information provided and this data
    * record.
    * Generated by: EASy-Producer.
    */
    public class FurtherInformationBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int textStatementCounter = 0;
        private int validDateCounter = 0;
    
        /**
        * Creates a builder instance for FurtherInformation.
        *
        * @param smBuilder the parent submodel builder
        */
        protected FurtherInformationBuilder(DelegatingSubmodelBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("FurtherInformation"), smBuilder);
            setSemanticId(iri("https://admin-shell.io/ZVEI/TechnicalData/FurtherInformation/1/1"));
        }
        
        /**
        * Creates a builder instance for FurtherInformation.
        *
        * @param smBuilder the parent submodel builder
        * @param nr the structure number
        */
        protected FurtherInformationBuilder(DelegatingSubmodelBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("FurtherInformation", nr)), 
                smBuilder);
            setSemanticId(iri("https://admin-shell.io/ZVEI/TechnicalData/FurtherInformation/1/1"));
        }
        
        /**
        * Changes statement by the manufacturer in text form, e.g. scope of validity of the statements, scopes of
        * application, conditions of operation..
        *
        * @param textStatement the value for TextStatement
        * @return <b>this</b> (builder style)
        */
        public FurtherInformationBuilder setTextStatement(LangString... textStatement) {
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, 
                getCountingIdShort("TextStatement", ++textStatementCounter), 
                iri("https://admin-shell.io/ZVEI/TechnicalData/TextStatement/1/1"), textStatement);
            return this;
        }
        
        /**
        * Changes denotes a date on which the data specified in the Submodel was valid from for the associated asset..
        *
        * @param validDate the value for ValidDate
        * @return <b>this</b> (builder style)
        */
        public FurtherInformationBuilder setValidDate(java.util.Date validDate) {
            validDateCounter++;
            createPropertyBuilder("ValidDate")
                .setSemanticId(iri("https://admin-shell.io/ZVEI/TechnicalData/ValidDate/1/1"))
                .setValue(Type.DATE_TIME, validDate).build();
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(0 <= textStatementCounter, "Cardinality {} of TextStatement must be greater or equal 0.",
                textStatementCounter);
            assertThat(validDateCounter == 1, "Cardinality {} of ValidDate must be equal 1.", validDateCounter);
            
            return super.build();
        }
    }
    
}
