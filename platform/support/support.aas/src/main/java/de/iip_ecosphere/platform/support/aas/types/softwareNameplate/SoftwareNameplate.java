package de.iip_ecosphere.platform.support.aas.types.softwareNameplate;

import static de.iip_ecosphere.platform.support.aas.IdentifierType.*;
import static de.iip_ecosphere.platform.support.aas.types.common.Utils.*;

import java.util.concurrent.ExecutionException;

import de.iip_ecosphere.platform.support.aas.Aas;
import de.iip_ecosphere.platform.support.aas.SubmodelElementCollection;
import de.iip_ecosphere.platform.support.aas.*;
import de.iip_ecosphere.platform.support.aas.types.common.*;

import de.iip_ecosphere.platform.support.aas.types.softwareNameplate.SoftwareNameplateBuilder.*;

/**
* Accessor support for submodel containing the nameplate information for software Asset and associated product
* classificatons.
* Generated by: EASy-Producer.
*/
public class SoftwareNameplate extends DelegatingSubmodel {

    /**
    * Creates a wrapping SoftwareNameplate submodel instance.
    * 
    * @param aas the parent AAS
    */            
    public SoftwareNameplate(Aas aas) {
        super(aas.getSubmodel("SoftwareNameplate"));
    }
    
    /**
    * Gets an instance of SoftwareNameplate_Type.
    *
    * @return the instance or <b>null</b> for none
    */
    public SoftwareNameplate_Type getSoftwareNameplate_Type() {
        return new SoftwareNameplate_Type(super.getSubmodelElementCollection("SoftwareNameplate_Type"));
    }
    
    /**
    * Gets an instance of SoftwareNameplate_Instance.
    *
    * @return the instance or <b>null</b> for none
    */
    public SoftwareNameplate_Instance getSoftwareNameplate_Instance() {
        return new SoftwareNameplate_Instance(super.getSubmodelElementCollection("SoftwareNameplate_Instance"));
    }
    
    // checkstyle: stop names check
    
    /**
    * Accessor support for sMC containing the nameplate information for a type of a software Asset.
    * Generated by: EASy-Producer.
    */
    public static class SoftwareNameplate_Type extends DelegatingSubmodelElementCollection {
        
        // checkstyle: resume names check
        
        /**
        * Creates a wrapping instance for SoftwareNameplate_Type.
        *
        * @param parent the parent submodel element collection builder
        */
        protected SoftwareNameplate_Type(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property URIOfTheProduct.
        *
        * @return the property
        */
        public Property getURIOfTheProductProperty() {
            return getProperty("URIOfTheProduct");
        }
        
        /**
        * Returns the value of property URIOfTheProduct.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getURIOfTheProduct() throws ExecutionException {
            return getStringValue(this, "URIOfTheProduct");
        }
        
        /**
        * Returns the property ManufacturerName.
        *
        * @return the property
        */
        public MultiLanguageProperty getManufacturerNameProperty() {
            return (MultiLanguageProperty) getDataElement("ManufacturerName");
        }
        
        /**
        * Returns the value of property ManufacturerName.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getManufacturerName() throws ExecutionException {
            return getLangStringValue(this, "ManufacturerName");
        }
        
        /**
        * Returns the property ManufacturerProductDesignation.
        *
        * @return the property
        */
        public MultiLanguageProperty getManufacturerProductDesignationProperty() {
            return (MultiLanguageProperty) getDataElement("ManufacturerProductDesignation");
        }
        
        /**
        * Returns the value of property ManufacturerProductDesignation.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getManufacturerProductDesignation() throws ExecutionException {
            return getLangStringValue(this, "ManufacturerProductDesignation");
        }
        
        /**
        * Returns the property ManufacturerProductDescription.
        *
        * @return the property
        */
        public MultiLanguageProperty getManufacturerProductDescriptionProperty() {
            return (MultiLanguageProperty) getDataElement("ManufacturerProductDescription");
        }
        
        /**
        * Returns the value of property ManufacturerProductDescription.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getManufacturerProductDescription() throws ExecutionException {
            return getLangStringValue(this, "ManufacturerProductDescription");
        }
        
        /**
        * Returns the property ManufacturerProductFamily.
        *
        * @return the property
        */
        public MultiLanguageProperty getManufacturerProductFamilyProperty() {
            return (MultiLanguageProperty) getDataElement("ManufacturerProductFamily");
        }
        
        /**
        * Returns the value of property ManufacturerProductFamily.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getManufacturerProductFamily() throws ExecutionException {
            return getLangStringValue(this, "ManufacturerProductFamily");
        }
        
        /**
        * Returns the property ManufacturerProductType.
        *
        * @return the property
        */
        public MultiLanguageProperty getManufacturerProductTypeProperty() {
            return (MultiLanguageProperty) getDataElement("ManufacturerProductType");
        }
        
        /**
        * Returns the value of property ManufacturerProductType.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getManufacturerProductType() throws ExecutionException {
            return getLangStringValue(this, "ManufacturerProductType");
        }
        
        /**
        * Returns the property SoftwareType.
        *
        * @return the property
        */
        public Property getSoftwareTypeProperty() {
            return getProperty("SoftwareType");
        }
        
        /**
        * Returns the value of property SoftwareType.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getSoftwareType() throws ExecutionException {
            return getStringValue(this, "SoftwareType");
        }
        
        /**
        * Returns the property Version.
        *
        * @return the property
        */
        public Property getVersionProperty() {
            return getProperty("Version");
        }
        
        /**
        * Returns the value of property Version.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getVersion() throws ExecutionException {
            return getStringValue(this, "Version");
        }
        
        /**
        * Returns the property VersionName.
        *
        * @return the property
        */
        public MultiLanguageProperty getVersionNameProperty() {
            return (MultiLanguageProperty) getDataElement("VersionName");
        }
        
        /**
        * Returns the value of property VersionName.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getVersionName() throws ExecutionException {
            return getLangStringValue(this, "VersionName");
        }
        
        /**
        * Returns the property VersionInfo.
        *
        * @return the property
        */
        public MultiLanguageProperty getVersionInfoProperty() {
            return (MultiLanguageProperty) getDataElement("VersionInfo");
        }
        
        /**
        * Returns the value of property VersionInfo.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getVersionInfo() throws ExecutionException {
            return getLangStringValue(this, "VersionInfo");
        }
        
        /**
        * Returns the property ReleaseDate.
        *
        * @return the property
        */
        public Property getReleaseDateProperty() {
            return getProperty("ReleaseDate");
        }
        
        /**
        * Returns the value of property ReleaseDate.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getReleaseDate() throws ExecutionException {
            return getDateValue(this, "ReleaseDate");
        }
        
        /**
        * Returns the property ReleaseNotes.
        *
        * @return the property
        */
        public MultiLanguageProperty getReleaseNotesProperty() {
            return (MultiLanguageProperty) getDataElement("ReleaseNotes");
        }
        
        /**
        * Returns the value of property ReleaseNotes.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getReleaseNotes() throws ExecutionException {
            return getLangStringValue(this, "ReleaseNotes");
        }
        
        /**
        * Returns the property BuildDate.
        *
        * @return the property
        */
        public Property getBuildDateProperty() {
            return getProperty("BuildDate");
        }
        
        /**
        * Returns the value of property BuildDate.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getBuildDate() throws ExecutionException {
            return getDateValue(this, "BuildDate");
        }
        
        /**
        * Returns the property InstallationURI.
        *
        * @return the property
        */
        public Property getInstallationURIProperty() {
            return getProperty("InstallationURI");
        }
        
        /**
        * Returns the value of property InstallationURI.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getInstallationURI() throws ExecutionException {
            return getAnyUriValue(this, "InstallationURI");
        }
        
        /**
        * Returns the property InstallationFile.
        *
        * @return the property
        */
        public BlobDataElement getInstallationFileProperty() {
            return (BlobDataElement) getDataElement("InstallationFile");
        }
        
        /**
        * Returns the value of property InstallationFile.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public BlobDataElement getInstallationFile() throws ExecutionException {
            return getBlobDataElementValue(this, "InstallationFile");
        }
        
        /**
        * Returns the property InstallerType.
        *
        * @return the property
        */
        public Property getInstallerTypeProperty() {
            return getProperty("InstallerType");
        }
        
        /**
        * Returns the value of property InstallerType.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getInstallerType() throws ExecutionException {
            return getStringValue(this, "InstallerType");
        }
        
        /**
        * Returns the property InstallationChecksum.
        *
        * @return the property
        */
        public Property getInstallationChecksumProperty() {
            return getProperty("InstallationChecksum");
        }
        
        /**
        * Returns the value of property InstallationChecksum.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getInstallationChecksum() throws ExecutionException {
            return getStringValue(this, "InstallationChecksum");
        }
        
    }
    
    // checkstyle: stop names check
    
    /**
    * Accessor support for sMC containing the nameplate information for an instance of a software Asset.
    * Generated by: EASy-Producer.
    */
    public static class SoftwareNameplate_Instance extends DelegatingSubmodelElementCollection {
        
        // checkstyle: resume names check
        
        /**
        * Creates a wrapping instance for SoftwareNameplate_Instance.
        *
        * @param parent the parent submodel element collection builder
        */
        protected SoftwareNameplate_Instance(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property SerialNumber.
        *
        * @return the property
        */
        public Property getSerialNumberProperty() {
            return getProperty("SerialNumber");
        }
        
        /**
        * Returns the value of property SerialNumber.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getSerialNumber() throws ExecutionException {
            return getStringValue(this, "SerialNumber");
        }
        
        /**
        * Returns the property InstanceName.
        *
        * @return the property
        */
        public Property getInstanceNameProperty() {
            return getProperty("InstanceName");
        }
        
        /**
        * Returns the value of property InstanceName.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getInstanceName() throws ExecutionException {
            return getStringValue(this, "InstanceName");
        }
        
        /**
        * Returns the property InstalledVersion.
        *
        * @return the property
        */
        public Property getInstalledVersionProperty() {
            return getProperty("InstalledVersion");
        }
        
        /**
        * Returns the value of property InstalledVersion.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getInstalledVersion() throws ExecutionException {
            return getStringValue(this, "InstalledVersion");
        }
        
        /**
        * Returns the property InstallationDate.
        *
        * @return the property
        */
        public Property getInstallationDateProperty() {
            return getProperty("InstallationDate");
        }
        
        /**
        * Returns the value of property InstallationDate.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getInstallationDate() throws ExecutionException {
            return getDateValue(this, "InstallationDate");
        }
        
        /**
        * Returns the property InstallationPath.
        *
        * @return the property
        */
        public Property getInstallationPathProperty() {
            return getProperty("InstallationPath");
        }
        
        /**
        * Returns the value of property InstallationPath.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getInstallationPath() throws ExecutionException {
            return getAnyUriValue(this, "InstallationPath");
        }
        
        /**
        * Returns the property InstallationSource.
        *
        * @return the property
        */
        public Property getInstallationSourceProperty() {
            return getProperty("InstallationSource");
        }
        
        /**
        * Returns the value of property InstallationSource.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getInstallationSource() throws ExecutionException {
            return getAnyUriValue(this, "InstallationSource");
        }
        
        /**
        * Returns the property InstalledOnArchitecture.
        *
        * @return the property
        */
        public Property getInstalledOnArchitectureProperty() {
            return getProperty("InstalledOnArchitecture");
        }
        
        /**
        * Returns the value of property InstalledOnArchitecture.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getInstalledOnArchitecture() throws ExecutionException {
            return getStringValue(this, "InstalledOnArchitecture");
        }
        
        /**
        * Returns the property InstalledOnOS.
        *
        * @return the property
        */
        public Property getInstalledOnOSProperty() {
            return getProperty("InstalledOnOS");
        }
        
        /**
        * Returns the value of property InstalledOnOS.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getInstalledOnOS() throws ExecutionException {
            return getStringValue(this, "InstalledOnOS");
        }
        
        /**
        * Returns the property InstalledOnHost.
        *
        * @return the property
        */
        public Property getInstalledOnHostProperty() {
            return getProperty("InstalledOnHost");
        }
        
        /**
        * Returns the value of property InstalledOnHost.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getInstalledOnHost() throws ExecutionException {
            return getStringValue(this, "InstalledOnHost");
        }
        
        /**
        * Gets an instance of InstalledModules.
        *
        * @return the instance or <b>null</b> for none
        */
        public InstalledModules getInstalledModules() {
            return new InstalledModules(super.getSubmodelElementCollection("InstalledModules"));
        }
        
        /**
        * Gets an instance of ConfigurationPaths.
        *
        * @return the instance or <b>null</b> for none
        */
        public ConfigurationPaths getConfigurationPaths() {
            return new ConfigurationPaths(super.getSubmodelElementCollection("ConfigurationPaths"));
        }
        
        /**
        * Returns the property SLAInformation.
        *
        * @return the property
        */
        public Property getSLAInformationProperty() {
            return getProperty("SLAInformation");
        }
        
        /**
        * Returns the value of property SLAInformation.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getSLAInformation() throws ExecutionException {
            return getStringValue(this, "SLAInformation");
        }
        
        /**
        * Gets an instance of Contact.
        *
        * @return the instance or <b>null</b> for none
        */
        public ContactInformation getContact() {
            return new ContactInformation(super.getSubmodelElementCollection("ContactInformation"));
        }
        
        /**
        * Returns the property InventoryTag.
        *
        * @param index the index of the field
        * @return the property
        */
        public Property getInventoryTagProperty(int index) {
            return getProperty(getCountingIdShort("InventoryTag", index));
        }
        
        /**
        * Returns the value of property InventoryTag.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<String> getInventoryTag() throws ExecutionException {
            return collect(elements(), Property.class, iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/"
                + "SoftwareNameplate/SoftwareNameplateInstance/InventoryTag"), p -> cast(p, String.class));
        }
        
    }
    
    /**
    * Accessor support for contains a list of installed modules of the software instance.
    * Generated by: EASy-Producer.
    */
    public static class InstalledModules extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for InstalledModules.
        *
        * @param parent the parent submodel element collection builder
        */
        protected InstalledModules(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property InstalledModule.
        *
        * @param index the index of the field
        * @return the property
        */
        public Property getInstalledModuleProperty(int index) {
            return getProperty(getCountingIdShort("InstalledModule", index));
        }
        
        /**
        * Returns the value of property InstalledModule.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<String> getInstalledModule() throws ExecutionException {
            return collect(elements(), Property.class, iri("https://admin-shell.io/idta/SoftwareNameplate/1/0/"
                + "SoftwareNameplate/SoftwareNameplateInstance/InstalledModule"), p -> cast(p, String.class));
        }
        
    }
    
    /**
    * Accessor support for contains a list of configuration entries of the software instance.
    * Generated by: EASy-Producer.
    */
    public static class ConfigurationPaths extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for ConfigurationPaths.
        *
        * @param parent the parent submodel element collection builder
        */
        protected ConfigurationPaths(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Gets an instance of ConfigurationPath.
        *
        * @param index 0-based index to access a specific instance
        * @return the instance or <b>null</b> for none
        */
        public ConfigurationPath getConfigurationPath(int index) {
            var tmp = super.getSubmodelElementCollection(getCountingIdShort("ConfigurationPath", index));
            return null == tmp ? null : new ConfigurationPath(tmp);
        }
        
    }
    
    /**
    * Accessor support for contains a single configuration entry of the software instance.
    * Generated by: EASy-Producer.
    */
    public static class ConfigurationPath extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for ConfigurationPath.
        *
        * @param parent the parent submodel element collection builder
        */
        protected ConfigurationPath(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property ConfigurationURI.
        *
        * @return the property
        */
        public Property getConfigurationURIProperty() {
            return getProperty("ConfigurationURI");
        }
        
        /**
        * Returns the value of property ConfigurationURI.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getConfigurationURI() throws ExecutionException {
            return getAnyUriValue(this, "ConfigurationURI");
        }
        
        /**
        * Returns the property ConfigurationType.
        *
        * @return the property
        */
        public Property getConfigurationTypeProperty() {
            return getProperty("ConfigurationType");
        }
        
        /**
        * Returns the value of property ConfigurationType.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getConfigurationType() throws ExecutionException {
            return getStringValue(this, "ConfigurationType");
        }
        
    }
    
    /**
    * Accessor support for the SMC "ContactInformation" contains information on how to contact the manufacturer or an
    * authorised service provider, e.g. when a maintenance service is required.
    * Generated by: EASy-Producer.
    */
    public static class ContactInformation extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for ContactInformation.
        *
        * @param parent the parent submodel element collection builder
        */
        protected ContactInformation(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property RoleOfContactPerson.
        *
        * @return the property
        */
        public Property getRoleOfContactPersonProperty() {
            return getProperty("RoleOfContactPerson");
        }
        
        /**
        * Returns the value of property RoleOfContactPerson.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public IRoleOfContactPerson getRoleOfContactPerson() throws ExecutionException {
            return getEnumValue(this, "RoleOfContactPerson", IRoleOfContactPerson.class, RoleOfContactPerson.class);
        }
        
        /**
        * Returns the property NationalCode.
        *
        * @return the property
        */
        public MultiLanguageProperty getNationalCodeProperty() {
            return (MultiLanguageProperty) getDataElement("NationalCode");
        }
        
        /**
        * Returns the value of property NationalCode.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getNationalCode() throws ExecutionException {
            return getLangStringValue(this, "NationalCode");
        }
        
        /**
        * Returns the property Language.
        *
        * @param index the index of the field
        * @return the property
        */
        public Property getLanguageProperty(int index) {
            return getProperty(getCountingIdShort("Language", index));
        }
        
        /**
        * Returns the value of property Language.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<String> getLanguage() throws ExecutionException {
            return collect(elements(), Property.class, iri("https://admin-shell.io/zvei/nameplate/1/0/"
                + "ContactInformations/ContactInformation/Language"), p -> cast(p, String.class));
        }
        
        /**
        * Returns the property TimeZone.
        *
        * @return the property
        */
        public Property getTimeZoneProperty() {
            return getProperty("TimeZone");
        }
        
        /**
        * Returns the value of property TimeZone.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getTimeZone() throws ExecutionException {
            return getStringValue(this, "TimeZone");
        }
        
        /**
        * Returns the property CityTown.
        *
        * @return the property
        */
        public MultiLanguageProperty getCityTownProperty() {
            return (MultiLanguageProperty) getDataElement("CityTown");
        }
        
        /**
        * Returns the value of property CityTown.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getCityTown() throws ExecutionException {
            return getLangStringValue(this, "CityTown");
        }
        
        /**
        * Returns the property Company.
        *
        * @return the property
        */
        public MultiLanguageProperty getCompanyProperty() {
            return (MultiLanguageProperty) getDataElement("Company");
        }
        
        /**
        * Returns the value of property Company.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getCompany() throws ExecutionException {
            return getLangStringValue(this, "Company");
        }
        
        /**
        * Returns the property Department.
        *
        * @return the property
        */
        public MultiLanguageProperty getDepartmentProperty() {
            return (MultiLanguageProperty) getDataElement("Department");
        }
        
        /**
        * Returns the value of property Department.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getDepartment() throws ExecutionException {
            return getLangStringValue(this, "Department");
        }
        
        /**
        * Gets an instance of Phone.
        *
        * @return the instance or <b>null</b> for none
        */
        public Phone getPhone() {
            return new Phone(super.getSubmodelElementCollection("Phone"));
        }
        
        /**
        * Gets an instance of Fax.
        *
        * @return the instance or <b>null</b> for none
        */
        public Fax getFax() {
            return new Fax(super.getSubmodelElementCollection("Fax"));
        }
        
        /**
        * Gets an instance of Email.
        *
        * @return the instance or <b>null</b> for none
        */
        public Email getEmail() {
            return new Email(super.getSubmodelElementCollection("Email"));
        }
        
        /**
        * Gets an instance of IPCommunication.
        *
        * @param index 0-based index to access a specific instance
        * @return the instance or <b>null</b> for none
        */
        public IPCommunication getIPCommunication(int index) {
            var tmp = super.getSubmodelElementCollection(getCountingIdShort("IPCommunication", index));
            return null == tmp ? null : new IPCommunication(tmp);
        }
        
        /**
        * Returns the property Street.
        *
        * @return the property
        */
        public MultiLanguageProperty getStreetProperty() {
            return (MultiLanguageProperty) getDataElement("Street");
        }
        
        /**
        * Returns the value of property Street.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getStreet() throws ExecutionException {
            return getLangStringValue(this, "Street");
        }
        
        /**
        * Returns the property Zipcode.
        *
        * @return the property
        */
        public MultiLanguageProperty getZipcodeProperty() {
            return (MultiLanguageProperty) getDataElement("Zipcode");
        }
        
        /**
        * Returns the value of property Zipcode.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getZipcode() throws ExecutionException {
            return getLangStringValue(this, "Zipcode");
        }
        
        /**
        * Returns the property POBox.
        *
        * @return the property
        */
        public MultiLanguageProperty getPOBoxProperty() {
            return (MultiLanguageProperty) getDataElement("POBox");
        }
        
        /**
        * Returns the value of property POBox.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getPOBox() throws ExecutionException {
            return getLangStringValue(this, "POBox");
        }
        
        /**
        * Returns the property ZipCodeOfPOBox.
        *
        * @return the property
        */
        public MultiLanguageProperty getZipCodeOfPOBoxProperty() {
            return (MultiLanguageProperty) getDataElement("ZipCodeOfPOBox");
        }
        
        /**
        * Returns the value of property ZipCodeOfPOBox.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getZipCodeOfPOBox() throws ExecutionException {
            return getLangStringValue(this, "ZipCodeOfPOBox");
        }
        
        /**
        * Returns the property StateCounty.
        *
        * @return the property
        */
        public MultiLanguageProperty getStateCountyProperty() {
            return (MultiLanguageProperty) getDataElement("StateCounty");
        }
        
        /**
        * Returns the value of property StateCounty.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getStateCounty() throws ExecutionException {
            return getLangStringValue(this, "StateCounty");
        }
        
        /**
        * Returns the property NameOfContact.
        *
        * @return the property
        */
        public MultiLanguageProperty getNameOfContactProperty() {
            return (MultiLanguageProperty) getDataElement("NameOfContact");
        }
        
        /**
        * Returns the value of property NameOfContact.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getNameOfContact() throws ExecutionException {
            return getLangStringValue(this, "NameOfContact");
        }
        
        /**
        * Returns the property FirstName.
        *
        * @return the property
        */
        public MultiLanguageProperty getFirstNameProperty() {
            return (MultiLanguageProperty) getDataElement("FirstName");
        }
        
        /**
        * Returns the value of property FirstName.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getFirstName() throws ExecutionException {
            return getLangStringValue(this, "FirstName");
        }
        
        /**
        * Returns the property MiddleNames.
        *
        * @return the property
        */
        public MultiLanguageProperty getMiddleNamesProperty() {
            return (MultiLanguageProperty) getDataElement("MiddleNames");
        }
        
        /**
        * Returns the value of property MiddleNames.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getMiddleNames() throws ExecutionException {
            return getLangStringValue(this, "MiddleNames");
        }
        
        /**
        * Returns the property Title.
        *
        * @return the property
        */
        public MultiLanguageProperty getTitleProperty() {
            return (MultiLanguageProperty) getDataElement("Title");
        }
        
        /**
        * Returns the value of property Title.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getTitle() throws ExecutionException {
            return getLangStringValue(this, "Title");
        }
        
        /**
        * Returns the property AcademicTitle.
        *
        * @return the property
        */
        public MultiLanguageProperty getAcademicTitleProperty() {
            return (MultiLanguageProperty) getDataElement("AcademicTitle");
        }
        
        /**
        * Returns the value of property AcademicTitle.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getAcademicTitle() throws ExecutionException {
            return getLangStringValue(this, "AcademicTitle");
        }
        
        /**
        * Returns the property FurtherDetailsOfContact.
        *
        * @return the property
        */
        public MultiLanguageProperty getFurtherDetailsOfContactProperty() {
            return (MultiLanguageProperty) getDataElement("FurtherDetailsOfContact");
        }
        
        /**
        * Returns the value of property FurtherDetailsOfContact.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getFurtherDetailsOfContact() throws ExecutionException {
            return getLangStringValue(this, "FurtherDetailsOfContact");
        }
        
        /**
        * Returns the property AddressOfAdditionalLink.
        *
        * @return the property
        */
        public Property getAddressOfAdditionalLinkProperty() {
            return getProperty("AddressOfAdditionalLink");
        }
        
        /**
        * Returns the value of property AddressOfAdditionalLink.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getAddressOfAdditionalLink() throws ExecutionException {
            return getStringValue(this, "AddressOfAdditionalLink");
        }
        
    }
    
    /**
    * Accessor support for phone number including type.
    * Generated by: EASy-Producer.
    */
    public static class Phone extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for Phone.
        *
        * @param parent the parent submodel element collection builder
        */
        protected Phone(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property TelephoneNumber.
        *
        * @return the property
        */
        public MultiLanguageProperty getTelephoneNumberProperty() {
            return (MultiLanguageProperty) getDataElement("TelephoneNumber");
        }
        
        /**
        * Returns the value of property TelephoneNumber.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getTelephoneNumber() throws ExecutionException {
            return getLangStringValue(this, "TelephoneNumber");
        }
        
        /**
        * Returns the property TypeOfTelephone.
        *
        * @return the property
        */
        public Property getTypeOfTelephoneProperty() {
            return getProperty("TypeOfTelephone");
        }
        
        /**
        * Returns the value of property TypeOfTelephone.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public TypeOfTelephone getTypeOfTelephone() throws ExecutionException {
            return getEnumValue(this, "TypeOfTelephone", TypeOfTelephone.class, TypeOfTelephone.class);
        }
        
        /**
        * Returns the property AvailableTime.
        *
        * @return the property
        */
        public MultiLanguageProperty getAvailableTimeProperty() {
            return (MultiLanguageProperty) getDataElement("AvailableTime");
        }
        
        /**
        * Returns the value of property AvailableTime.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getAvailableTime() throws ExecutionException {
            return getLangStringValue(this, "AvailableTime");
        }
        
    }
    
    /**
    * Accessor support for fax number including type.
    * Generated by: EASy-Producer.
    */
    public static class Fax extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for Fax.
        *
        * @param parent the parent submodel element collection builder
        */
        protected Fax(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property FaxNumber.
        *
        * @return the property
        */
        public MultiLanguageProperty getFaxNumberProperty() {
            return (MultiLanguageProperty) getDataElement("FaxNumber");
        }
        
        /**
        * Returns the value of property FaxNumber.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getFaxNumber() throws ExecutionException {
            return getLangStringValue(this, "FaxNumber");
        }
        
        /**
        * Returns the property TypeOfFaxNumber.
        *
        * @return the property
        */
        public Property getTypeOfFaxNumberProperty() {
            return getProperty("TypeOfFaxNumber");
        }
        
        /**
        * Returns the value of property TypeOfFaxNumber.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public TypeOfFaxNumber getTypeOfFaxNumber() throws ExecutionException {
            return getEnumValue(this, "TypeOfFaxNumber", TypeOfFaxNumber.class, TypeOfFaxNumber.class);
        }
        
    }
    
    /**
    * Accessor support for e-mail address and encryption method.
    * Generated by: EASy-Producer.
    */
    public static class Email extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for Email.
        *
        * @param parent the parent submodel element collection builder
        */
        protected Email(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property EmailAddress.
        *
        * @return the property
        */
        public Property getEmailAddressProperty() {
            return getProperty("EmailAddress");
        }
        
        /**
        * Returns the value of property EmailAddress.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getEmailAddress() throws ExecutionException {
            return getStringValue(this, "EmailAddress");
        }
        
        /**
        * Returns the property PublicKey.
        *
        * @return the property
        */
        public MultiLanguageProperty getPublicKeyProperty() {
            return (MultiLanguageProperty) getDataElement("PublicKey");
        }
        
        /**
        * Returns the value of property PublicKey.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getPublicKey() throws ExecutionException {
            return getLangStringValue(this, "PublicKey");
        }
        
        /**
        * Returns the property TypeOfEmailAddress.
        *
        * @return the property
        */
        public Property getTypeOfEmailAddressProperty() {
            return getProperty("TypeOfEmailAddress");
        }
        
        /**
        * Returns the value of property TypeOfEmailAddress.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public TypeOfEmailAddress getTypeOfEmailAddress() throws ExecutionException {
            return getEnumValue(this, "TypeOfEmailAddress", TypeOfEmailAddress.class, TypeOfEmailAddress.class);
        }
        
        /**
        * Returns the property TypeOfPublicKey.
        *
        * @return the property
        */
        public MultiLanguageProperty getTypeOfPublicKeyProperty() {
            return (MultiLanguageProperty) getDataElement("TypeOfPublicKey");
        }
        
        /**
        * Returns the value of property TypeOfPublicKey.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getTypeOfPublicKey() throws ExecutionException {
            return getLangStringValue(this, "TypeOfPublicKey");
        }
        
    }
    
    /**
    * Accessor support for iP-based communication channels, e.g. chat or video call.
    * Generated by: EASy-Producer.
    */
    public static class IPCommunication extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for IPCommunication.
        *
        * @param parent the parent submodel element collection builder
        */
        protected IPCommunication(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property AddressOfAdditionalLink.
        *
        * @return the property
        */
        public Property getAddressOfAdditionalLinkProperty() {
            return getProperty("AddressOfAdditionalLink");
        }
        
        /**
        * Returns the value of property AddressOfAdditionalLink.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getAddressOfAdditionalLink() throws ExecutionException {
            return getStringValue(this, "AddressOfAdditionalLink");
        }
        
        /**
        * Returns the property TypeOfCommunication.
        *
        * @return the property
        */
        public Property getTypeOfCommunicationProperty() {
            return getProperty("TypeOfCommunication");
        }
        
        /**
        * Returns the value of property TypeOfCommunication.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getTypeOfCommunication() throws ExecutionException {
            return getStringValue(this, "TypeOfCommunication");
        }
        
        /**
        * Returns the property AvailableTime.
        *
        * @return the property
        */
        public MultiLanguageProperty getAvailableTimeProperty() {
            return (MultiLanguageProperty) getDataElement("AvailableTime");
        }
        
        /**
        * Returns the value of property AvailableTime.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public LangString[] getAvailableTime() throws ExecutionException {
            return getLangStringValue(this, "AvailableTime");
        }
        
    }
    
}
