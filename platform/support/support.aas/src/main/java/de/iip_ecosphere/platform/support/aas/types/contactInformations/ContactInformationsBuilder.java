package de.iip_ecosphere.platform.support.aas.types.contactInformations;

import static de.iip_ecosphere.platform.support.aas.IdentifierType.*;
import static de.iip_ecosphere.platform.support.aas.types.common.Utils.*;

import de.iip_ecosphere.platform.support.Builder;
import de.iip_ecosphere.platform.support.aas.Aas.AasBuilder;
import de.iip_ecosphere.platform.support.aas.Submodel.SubmodelBuilder;
import de.iip_ecosphere.platform.support.aas.*;
import de.iip_ecosphere.platform.support.aas.types.common.*;

/**
* Builder support for the Submodel "ContactInformations" is the collection for various contact information.
* Generated by: EASy-Producer.
*/
public class ContactInformationsBuilder extends DelegatingSubmodelBuilder {

    private boolean createMultiLanguageProperties = true;

    private int contactInformationCounter = 0;

    /**
    * Interface support for function of a contact person in a process.
    * Generated by: EASy-Producer.
    */
    public interface IRoleOfContactPerson {
    
        /**
         * Returns the value id/given ordinal.
         * 
         * @return the value id/given ordinal
         */
        public int getValueId();
        
        /**
         * Returns the semantic id.
         * 
         * @return the semantic id
         */
        public String getSemanticId();
        
        /**
         * Returns the value to be used in the AAS.
         * 
         * @return the value to be used in the AAS
         */
        public String getValue();
    
    }
    
    /**
    * Enumeration support for function of a contact person in a process.
    * Generated by: EASy-Producer.
    */
    public enum RoleOfContactPerson implements IRoleOfContactPerson {
    
        ADMINISTRATIV_CONTACT(0, irdi("0173-1#07-AAS927#001"), "administrativ contact"),
        COMMERCIAL_CONTACT(0, irdi("0173-1#07-AAS928#001"), "commercial contact"),
        OTHER_CONTACT(0, irdi("0173-1#07-AAS929#001"), "other contact"),
        HAZARDOUS_GOODS_CONTACT(0, irdi("0173-1#07-AAS930#001"), "hazardous goods contact"),
        TECHNICAL_CONTACT(0, irdi("0173-1#07-AAS931#001"), "technical contact");
    
        private int valueId;
        private String semanticId;
        private String value;
    
        /**
         * Creates a constant.
         * 
         * @param valueId the value id/given ordinal
         * @param semanticId the semantic id
         * @param value the value
         */
        private RoleOfContactPerson(int valueId, String semanticId, String value) {
            this.valueId = valueId;
            this.semanticId = semanticId;
            this.value = value;
        }
        
        @Override
        public int getValueId() {
            return valueId;
        }
        
        @Override
        public String getSemanticId() {
            return semanticId;
        }
        
        @Override
        public String getValue() {
            return value;
        }
        
    }
    
    /**
    * Enumeration support for characterization of a telephone according to its location or usage.
    * Generated by: EASy-Producer.
    */
    public enum TypeOfTelephone {
    
        OFFICE(0, irdi("0173-1#07-AAS754#001"), "office"),
        OFFICE_MOBILE(0, irdi("0173-1#07-AAS755#001"), "office mobile"),
        SECRETARY(0, irdi("0173-1#07-AAS756#001"), "secretary"),
        SUBSTITUTE(0, irdi("0173-1#07-AAS757#001"), "substitute"),
        HOME(0, irdi("0173-1#07-AAS758#001"), "home"),
        PRIVATE_MOBILE(0, irdi("0173-1#07-AAS759#001"), "private mobile");
    
        private int valueId;
        private String semanticId;
        private String value;
    
        /**
         * Creates a constant.
         * 
         * @param valueId the value id/given ordinal
         * @param semanticId the semantic id
         * @param value the value
         */
        private TypeOfTelephone(int valueId, String semanticId, String value) {
            this.valueId = valueId;
            this.semanticId = semanticId;
            this.value = value;
        }
        
        /**
        * Returns the (optional) value id/given ordinal.
        *
        * @return the (optional) value id/given ordinal
        */
        public int getValueId() {
            return valueId;
        }
        
        /**
        * Returns the (optional) semantic id.
        *
        * @return the (optional) semantic id
        */
        public String getSemanticId() {
            return semanticId;
        }
        
        /**
        * Returns the value to be used in the AAS.
        *
        * @return the value to be used in the AAS
        */
        public String getValue() {
            return value;
        }
        
    }
    
    /**
    * Enumeration support for characterization of the fax according its location or usage.
    * Generated by: EASy-Producer.
    */
    public enum TypeOfFaxNumber {
    
        OFFICE(0, irdi("0173-1#07-AAS754#001"), "office"),
        SECRETARY(0, irdi("0173-1#07-AAS756#001"), "secretary"),
        HOME(0, irdi("0173-1#07-AAS758#001"), "home");
    
        private int valueId;
        private String semanticId;
        private String value;
    
        /**
         * Creates a constant.
         * 
         * @param valueId the value id/given ordinal
         * @param semanticId the semantic id
         * @param value the value
         */
        private TypeOfFaxNumber(int valueId, String semanticId, String value) {
            this.valueId = valueId;
            this.semanticId = semanticId;
            this.value = value;
        }
        
        /**
        * Returns the (optional) value id/given ordinal.
        *
        * @return the (optional) value id/given ordinal
        */
        public int getValueId() {
            return valueId;
        }
        
        /**
        * Returns the (optional) semantic id.
        *
        * @return the (optional) semantic id
        */
        public String getSemanticId() {
            return semanticId;
        }
        
        /**
        * Returns the value to be used in the AAS.
        *
        * @return the value to be used in the AAS
        */
        public String getValue() {
            return value;
        }
        
    }
    
    /**
    * Enumeration support for characterization of an e-mail address according to its location or usage.
    * Generated by: EASy-Producer.
    */
    public enum TypeOfEmailAddress {
    
        OFFICE(0, irdi("0173-1#07-AAS754#001"), "office"),
        SECRETARY(0, irdi("0173-1#07-AAS756#001"), "secretary"),
        SUBSTITUTE(0, irdi("0173-1#07-AAS757#001"), "substitute"),
        HOME(0, irdi("0173-1#07-AAS758#001"), "home");
    
        private int valueId;
        private String semanticId;
        private String value;
    
        /**
         * Creates a constant.
         * 
         * @param valueId the value id/given ordinal
         * @param semanticId the semantic id
         * @param value the value
         */
        private TypeOfEmailAddress(int valueId, String semanticId, String value) {
            this.valueId = valueId;
            this.semanticId = semanticId;
            this.value = value;
        }
        
        /**
        * Returns the (optional) value id/given ordinal.
        *
        * @return the (optional) value id/given ordinal
        */
        public int getValueId() {
            return valueId;
        }
        
        /**
        * Returns the (optional) semantic id.
        *
        * @return the (optional) semantic id
        */
        public String getSemanticId() {
            return semanticId;
        }
        
        /**
        * Returns the value to be used in the AAS.
        *
        * @return the value to be used in the AAS
        */
        public String getValue() {
            return value;
        }
        
    }
    
    /**
    * Creates a ContactInformations submodel builder.
    * 
    * @param aasBuilder the parent AAS builder
    * @param identifier the submodel identifier
    */            
    public ContactInformationsBuilder(AasBuilder aasBuilder, String identifier) {
        this(aasBuilder, identifier, "ContactInformations");
    }

    /**
    * Creates a ContactInformations submodel builder.
    * 
    * @param aasBuilder the parent AAS builder
    * @param identifier the submodel identifier
    * @param idShort the idShort of the submodel to create
    */            
    private ContactInformationsBuilder(AasBuilder aasBuilder, String identifier, String idShort) {
        super(aasBuilder.createSubmodelBuilder(idShort, identifier));
        setSemanticId(iri("https://admin-shell.io/zvei/nameplate/1/0/ContactInformations"));
    }
    
    /**
     * Defines whether multi-language properties shall be created. AASPackageExplorer compliance.
     *
     * @param createMultiLanguageProperties whether multi-language properties shall be created, taints compliance 
     *     if {@code false}
     */
    public void setCreateMultiLanguageProperties(boolean createMultiLanguageProperties) {
        this.createMultiLanguageProperties = createMultiLanguageProperties;
    } 

    /**
    * Creates a builder for ContactInformation.
    *
    * @return the builder instance, {@link Builder#build()} must be called
    */
    public ContactInformationBuilder createContactInformationBuilder() {
        // counting -> composition of idShort
        return new ContactInformationBuilder(this, ++contactInformationCounter);
    }
    
    @Override
    public Submodel build() {
        assertThat(1 <= contactInformationCounter, "Cardinality {} of ContactInformation must be greater or equal 1.",
            contactInformationCounter);
        
        return super.build();
    }

    /**
    * Builder support for the SMC "ContactInformation" contains information on how to contact the manufacturer or an
    * authorised service provider, e.g. when a maintenance service is required.
    * Generated by: EASy-Producer.
    */
    public class ContactInformationBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int roleOfContactPersonCounter = 0;
        private int nationalCodeCounter = 0;
        private int languageCounter = 0;
        private int timeZoneCounter = 0;
        private int cityTownCounter = 0;
        private int companyCounter = 0;
        private int departmentCounter = 0;
        private int phoneCounter = 0;
        private int faxCounter = 0;
        private int emailCounter = 0;
        private int iPCommunicationCounter = 0;
        private int streetCounter = 0;
        private int zipcodeCounter = 0;
        private int pOBoxCounter = 0;
        private int zipCodeOfPOBoxCounter = 0;
        private int stateCountyCounter = 0;
        private int nameOfContactCounter = 0;
        private int firstNameCounter = 0;
        private int middleNamesCounter = 0;
        private int titleCounter = 0;
        private int academicTitleCounter = 0;
        private int furtherDetailsOfContactCounter = 0;
        private int addressOfAdditionalLinkCounter = 0;
    
        /**
        * Creates a builder instance for ContactInformation.
        *
        * @param smBuilder the parent submodel builder
        */
        protected ContactInformationBuilder(SubmodelBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("ContactInformation"));
            setSemanticId(iri("https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation"));
        }
        
        /**
        * Creates a builder instance for ContactInformation.
        *
        * @param smBuilder the parent submodel builder
        * @param nr the structure number
        */
        protected ContactInformationBuilder(SubmodelBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("ContactInformation", nr)));
            setSemanticId(iri("https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation"));
        }
        
        /**
        * Changes function of a contact person in a process..
        *
        * @param roleOfContactPerson the value for RoleOfContactPerson
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setRoleOfContactPerson(IRoleOfContactPerson roleOfContactPerson) {
            roleOfContactPersonCounter++;
            createPropertyBuilder("RoleOfContactPerson")
                .setSemanticId(irdi("0173-1#02-AAO204#003"))
                .setValue(Type.STRING, roleOfContactPerson.getValue()).build();
            return this;
        }
        
        /**
        * Changes code of a country..
        *
        * @param nationalCode the value for NationalCode
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setNationalCode(LangString... nationalCode) {
            if (nationalCode.length > 0) {
                nationalCodeCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "NationalCode", 
                irdi("0173-1#02-AAO134#002"), nationalCode);
            return this;
        }
        
        /**
        * Changes available language..
        *
        * @param language the value for Language
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setLanguage(String language) {
            // counting -> composition of idShort
            createPropertyBuilder(getCountingIdShort("Language", ++languageCounter))
                .setSemanticId(iri(
                    "https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/Language"))
                .setValue(Type.STRING, language).build();
            return this;
        }
        
        /**
        * Changes offsets from Coordinated Universal Time (UTC)..
        *
        * @param timeZone the value for TimeZone
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setTimeZone(String timeZone) {
            timeZoneCounter++;
            createPropertyBuilder("TimeZone")
                .setSemanticId(iri(
                    "https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/TimeZone"))
                .setValue(Type.STRING, timeZone).build();
            return this;
        }
        
        /**
        * Changes town or city..
        *
        * @param cityTown the value for CityTown
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setCityTown(LangString... cityTown) {
            if (cityTown.length > 0) {
                cityTownCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "CityTown", 
                irdi("0173-1#02-AAO132#002"), cityTown);
            return this;
        }
        
        /**
        * Changes name of the company..
        *
        * @param company the value for Company
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setCompany(LangString... company) {
            if (company.length > 0) {
                companyCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "Company", 
                irdi("0173-1#02-AAW001#001"), company);
            return this;
        }
        
        /**
        * Changes administrative section within an organisation where a business partner is located..
        *
        * @param department the value for Department
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setDepartment(LangString... department) {
            if (department.length > 0) {
                departmentCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "Department", 
                irdi("0173-1#02-AAO127#003"), department);
            return this;
        }
        
        /**
        * Creates a builder for Phone.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public PhoneBuilder createPhoneBuilder() {
            phoneCounter++;
            return new PhoneBuilder(this);
        }
        
        /**
        * Creates a builder for Fax.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public FaxBuilder createFaxBuilder() {
            faxCounter++;
            return new FaxBuilder(this);
        }
        
        /**
        * Creates a builder for Email.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public EmailBuilder createEmailBuilder() {
            emailCounter++;
            return new EmailBuilder(this);
        }
        
        /**
        * Creates a builder for IPCommunication.
        *
        * @return the builder instance, {@link Builder#build()} must be called
        */
        public IPCommunicationBuilder createIPCommunicationBuilder() {
            // counting -> composition of idShort
            return new IPCommunicationBuilder(this, ++iPCommunicationCounter);
        }
        
        /**
        * Changes street name and house number..
        *
        * @param street the value for Street
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setStreet(LangString... street) {
            if (street.length > 0) {
                streetCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "Street", 
                irdi("0173-1#02-AAO128#002"), street);
            return this;
        }
        
        /**
        * Changes zIP code of address..
        *
        * @param zipcode the value for Zipcode
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setZipcode(LangString... zipcode) {
            if (zipcode.length > 0) {
                zipcodeCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "Zipcode", 
                irdi("0173-1#02-AAO129#002"), zipcode);
            return this;
        }
        
        /**
        * Changes p.O. box number..
        *
        * @param pOBox the value for POBox
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setPOBox(LangString... pOBox) {
            if (pOBox.length > 0) {
                pOBoxCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "POBox", 
                irdi("0173-1#02-AAO130#002"), pOBox);
            return this;
        }
        
        /**
        * Changes zIP code of P.O. box address..
        *
        * @param zipCodeOfPOBox the value for ZipCodeOfPOBox
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setZipCodeOfPOBox(LangString... zipCodeOfPOBox) {
            if (zipCodeOfPOBox.length > 0) {
                zipCodeOfPOBoxCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "ZipCodeOfPOBox", 
                irdi("0173-1#02-AAO131#002"), zipCodeOfPOBox);
            return this;
        }
        
        /**
        * Changes federal state a part of a state..
        *
        * @param stateCounty the value for StateCounty
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setStateCounty(LangString... stateCounty) {
            if (stateCounty.length > 0) {
                stateCountyCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "StateCounty", 
                irdi("0173-1#02-AAO133#002"), stateCounty);
            return this;
        }
        
        /**
        * Changes surname of a contact person..
        *
        * @param nameOfContact the value for NameOfContact
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setNameOfContact(LangString... nameOfContact) {
            if (nameOfContact.length > 0) {
                nameOfContactCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "NameOfContact", 
                irdi("0173-1#02-AAO205#002"), nameOfContact);
            return this;
        }
        
        /**
        * Changes first name of a contact person..
        *
        * @param firstName the value for FirstName
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setFirstName(LangString... firstName) {
            if (firstName.length > 0) {
                firstNameCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "FirstName", 
                irdi("0173-1#02-AAO206#002"), firstName);
            return this;
        }
        
        /**
        * Changes middle names of contact person..
        *
        * @param middleNames the value for MiddleNames
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setMiddleNames(LangString... middleNames) {
            if (middleNames.length > 0) {
                middleNamesCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "MiddleNames", 
                irdi("0173-1#02-AAO207#002"), middleNames);
            return this;
        }
        
        /**
        * Changes common, formal, religious, or other title preceding a contact person's name..
        *
        * @param title the value for Title
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setTitle(LangString... title) {
            if (title.length > 0) {
                titleCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "Title", 
                irdi("0173-1#02-AAO208#003"), title);
            return this;
        }
        
        /**
        * Changes academic title preceding a contact person's name..
        *
        * @param academicTitle the value for AcademicTitle
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setAcademicTitle(LangString... academicTitle) {
            if (academicTitle.length > 0) {
                academicTitleCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "AcademicTitle", 
                irdi("0173-1#02-AAO209#003"), academicTitle);
            return this;
        }
        
        /**
        * Changes additional information of the contact person..
        *
        * @param furtherDetailsOfContact the value for FurtherDetailsOfContact
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setFurtherDetailsOfContact(LangString... furtherDetailsOfContact) {
            if (furtherDetailsOfContact.length > 0) {
                furtherDetailsOfContactCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "FurtherDetailsOfContact", 
                irdi("0173-1#02-AAO210#002"), furtherDetailsOfContact);
            return this;
        }
        
        /**
        * Changes web site address where information about the product or contact is given..
        *
        * @param addressOfAdditionalLink the value for AddressOfAdditionalLink
        * @return <b>this</b> (builder style)
        */
        public ContactInformationBuilder setAddressOfAdditionalLink(String addressOfAdditionalLink) {
            addressOfAdditionalLinkCounter++;
            createPropertyBuilder("AddressOfAdditionalLink")
                .setSemanticId(irdi("0173-1#02-AAQ326#002"))
                .setValue(Type.STRING, addressOfAdditionalLink).build();
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(0 <= roleOfContactPersonCounter && roleOfContactPersonCounter <= 1, "Cardinality {} of RoleOfCon"
                + "tactPerson must be greater or equal 0 and less or equal 1.", roleOfContactPersonCounter);
            assertThat(0 <= nationalCodeCounter && nationalCodeCounter <= 1, "Cardinality {} of NationalCode must be gr"
                + "eater or equal 0 and less or equal 1.", nationalCodeCounter);
            assertThat(0 <= languageCounter, "Cardinality {} of Language must be greater or equal 0.",
                languageCounter);
            assertThat(0 <= timeZoneCounter && timeZoneCounter <= 1, "Cardinality {} of TimeZone must be greater or equ"
                + "al 0 and less or equal 1.", timeZoneCounter);
            assertThat(0 <= cityTownCounter && cityTownCounter <= 1, "Cardinality {} of CityTown must be greater or equ"
                + "al 0 and less or equal 1.", cityTownCounter);
            assertThat(0 <= companyCounter && companyCounter <= 1, "Cardinality {} of Company must be greater or equal "
                + "0 and less or equal 1.", companyCounter);
            assertThat(0 <= departmentCounter && departmentCounter <= 1, "Cardinality {} of Department must be greater "
                + "or equal 0 and less or equal 1.", departmentCounter);
            assertThat(0 <= phoneCounter && phoneCounter <= 1, "Cardinality {} of Phone must be greater or equal 0 and "
                + "less or equal 1.", phoneCounter);
            assertThat(0 <= faxCounter && faxCounter <= 1, "Cardinality {} of Fax must be greater or equal 0 and less o"
                + "r equal 1.", faxCounter);
            assertThat(0 <= emailCounter && emailCounter <= 1, "Cardinality {} of Email must be greater or equal 0 and "
                + "less or equal 1.", emailCounter);
            assertThat(0 <= iPCommunicationCounter, "Cardinality {} of IPCommunication must be greater or equal 0.",
                iPCommunicationCounter);
            assertThat(0 <= streetCounter && streetCounter <= 1, "Cardinality {} of Street must be greater or equal 0 a"
                + "nd less or equal 1.", streetCounter);
            assertThat(0 <= zipcodeCounter && zipcodeCounter <= 1, "Cardinality {} of Zipcode must be greater or equal "
                + "0 and less or equal 1.", zipcodeCounter);
            assertThat(0 <= pOBoxCounter && pOBoxCounter <= 1, "Cardinality {} of POBox must be greater or equal 0 and "
                + "less or equal 1.", pOBoxCounter);
            assertThat(0 <= zipCodeOfPOBoxCounter && zipCodeOfPOBoxCounter <= 1, "Cardinality {} of ZipCodeOfPOBox must"
                + " be greater or equal 0 and less or equal 1.", zipCodeOfPOBoxCounter);
            assertThat(0 <= stateCountyCounter && stateCountyCounter <= 1, "Cardinality {} of StateCounty must be great"
                + "er or equal 0 and less or equal 1.", stateCountyCounter);
            assertThat(0 <= nameOfContactCounter && nameOfContactCounter <= 1, "Cardinality {} of NameOfContact must be"
                + " greater or equal 0 and less or equal 1.", nameOfContactCounter);
            assertThat(0 <= firstNameCounter && firstNameCounter <= 1, "Cardinality {} of FirstName must be greater or "
                + "equal 0 and less or equal 1.", firstNameCounter);
            assertThat(0 <= middleNamesCounter && middleNamesCounter <= 1, "Cardinality {} of MiddleNames must be great"
                + "er or equal 0 and less or equal 1.", middleNamesCounter);
            assertThat(0 <= titleCounter && titleCounter <= 1, "Cardinality {} of Title must be greater or equal 0 and "
                + "less or equal 1.", titleCounter);
            assertThat(0 <= academicTitleCounter && academicTitleCounter <= 1, "Cardinality {} of AcademicTitle must be"
                + " greater or equal 0 and less or equal 1.", academicTitleCounter);
            assertThat(0 <= furtherDetailsOfContactCounter && furtherDetailsOfContactCounter <= 1, "Cardinality {} of F"
                + "urtherDetailsOfContact must be greater or equal 0 and less or equal 1.", 
                furtherDetailsOfContactCounter);
            assertThat(0 <= addressOfAdditionalLinkCounter && addressOfAdditionalLinkCounter <= 1, "Cardinality {} of A"
                + "ddressOfAdditionalLink must be greater or equal 0 and less or equal 1.", 
                addressOfAdditionalLinkCounter);
            
            return super.build();
        }
    }
    
    /**
    * Builder support for phone number including type.
    * Generated by: EASy-Producer.
    */
    public class PhoneBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int telephoneNumberCounter = 0;
        private int typeOfTelephoneCounter = 0;
        private int availableTimeCounter = 0;
    
        /**
        * Creates a builder instance for Phone.
        *
        * @param smBuilder the parent submodel element container builder
        */
        protected PhoneBuilder(SubmodelElementContainerBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("Phone"));
            setSemanticId(iri("https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/Phone"
                ));
        }
        
        /**
        * Creates a builder instance for Phone.
        *
        * @param smBuilder the parent submodel element container builder
        * @param nr the structure number
        */
        protected PhoneBuilder(SubmodelElementContainerBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("Phone", nr)));
            setSemanticId(iri("https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/Phone"
                ));
        }
        
        /**
        * Changes complete telephone number to be called to reach a business partner..
        *
        * @param telephoneNumber the value for TelephoneNumber
        * @return <b>this</b> (builder style)
        */
        public PhoneBuilder setTelephoneNumber(LangString... telephoneNumber) {
            if (telephoneNumber.length > 0) {
                telephoneNumberCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "TelephoneNumber", 
                irdi("0173-1#02-AAO136#002"), telephoneNumber);
            return this;
        }
        
        /**
        * Changes characterization of a telephone according to its location or usage..
        *
        * @param typeOfTelephone the value for TypeOfTelephone
        * @return <b>this</b> (builder style)
        */
        public PhoneBuilder setTypeOfTelephone(TypeOfTelephone typeOfTelephone) {
            typeOfTelephoneCounter++;
            createPropertyBuilder("TypeOfTelephone")
                .setSemanticId(irdi("0173-1#02-AAO137#003"))
                .setValue(Type.STRING, typeOfTelephone.getValue()).build();
            return this;
        }
        
        /**
        * Changes specification of the available time window..
        *
        * @param availableTime the value for AvailableTime
        * @return <b>this</b> (builder style)
        */
        public PhoneBuilder setAvailableTime(LangString... availableTime) {
            if (availableTime.length > 0) {
                availableTimeCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "AvailableTime", 
                iri("https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/AvailableTime/"
                    ), availableTime);
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(telephoneNumberCounter == 1, "Cardinality {} of TelephoneNumber must be equal 1.",
                telephoneNumberCounter);
            assertThat(0 <= typeOfTelephoneCounter && typeOfTelephoneCounter <= 1, "Cardinality {} of TypeOfTelephone m"
                + "ust be greater or equal 0 and less or equal 1.", typeOfTelephoneCounter);
            assertThat(0 <= availableTimeCounter && availableTimeCounter <= 1, "Cardinality {} of AvailableTime must be"
                + " greater or equal 0 and less or equal 1.", availableTimeCounter);
            
            return super.build();
        }
    }
    
    /**
    * Builder support for fax number including type.
    * Generated by: EASy-Producer.
    */
    public class FaxBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int faxNumberCounter = 0;
        private int typeOfFaxNumberCounter = 0;
    
        /**
        * Creates a builder instance for Fax.
        *
        * @param smBuilder the parent submodel element container builder
        */
        protected FaxBuilder(SubmodelElementContainerBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("Fax"));
            setSemanticId(irdi("0173-1#02-AAQ834#005"));
        }
        
        /**
        * Creates a builder instance for Fax.
        *
        * @param smBuilder the parent submodel element container builder
        * @param nr the structure number
        */
        protected FaxBuilder(SubmodelElementContainerBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("Fax", nr)));
            setSemanticId(irdi("0173-1#02-AAQ834#005"));
        }
        
        /**
        * Changes complete telephone number to be called to reach a business partner's fax machine..
        *
        * @param faxNumber the value for FaxNumber
        * @return <b>this</b> (builder style)
        */
        public FaxBuilder setFaxNumber(LangString... faxNumber) {
            if (faxNumber.length > 0) {
                faxNumberCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "FaxNumber", 
                irdi("0173-1#02-AAO195#002"), faxNumber);
            return this;
        }
        
        /**
        * Changes characterization of the fax according its location or usage..
        *
        * @param typeOfFaxNumber the value for TypeOfFaxNumber
        * @return <b>this</b> (builder style)
        */
        public FaxBuilder setTypeOfFaxNumber(TypeOfFaxNumber typeOfFaxNumber) {
            typeOfFaxNumberCounter++;
            createPropertyBuilder("TypeOfFaxNumber")
                .setSemanticId(irdi("0173-1#02-AAO196#003"))
                .setValue(Type.STRING, typeOfFaxNumber.getValue()).build();
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(faxNumberCounter == 1, "Cardinality {} of FaxNumber must be equal 1.", faxNumberCounter);
            assertThat(0 <= typeOfFaxNumberCounter && typeOfFaxNumberCounter <= 1, "Cardinality {} of TypeOfFaxNumber m"
                + "ust be greater or equal 0 and less or equal 1.", typeOfFaxNumberCounter);
            
            return super.build();
        }
    }
    
    /**
    * Builder support for e-mail address and encryption method.
    * Generated by: EASy-Producer.
    */
    public class EmailBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int emailAddressCounter = 0;
        private int publicKeyCounter = 0;
        private int typeOfEmailAddressCounter = 0;
        private int typeOfPublicKeyCounter = 0;
    
        /**
        * Creates a builder instance for Email.
        *
        * @param smBuilder the parent submodel element container builder
        */
        protected EmailBuilder(SubmodelElementContainerBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("Email"));
            setSemanticId(irdi("0173-1#02-AAQ836#005"));
        }
        
        /**
        * Creates a builder instance for Email.
        *
        * @param smBuilder the parent submodel element container builder
        * @param nr the structure number
        */
        protected EmailBuilder(SubmodelElementContainerBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("Email", nr)));
            setSemanticId(irdi("0173-1#02-AAQ836#005"));
        }
        
        /**
        * Changes electronic mail address of a business partner..
        *
        * @param emailAddress the value for EmailAddress
        * @return <b>this</b> (builder style)
        */
        public EmailBuilder setEmailAddress(String emailAddress) {
            emailAddressCounter++;
            createPropertyBuilder("EmailAddress")
                .setSemanticId(irdi("0173-1#02-AAO198#002"))
                .setValue(Type.STRING, emailAddress).build();
            return this;
        }
        
        /**
        * Changes public part of an unsymmetrical key pair to sign or encrypt text or messages..
        *
        * @param publicKey the value for PublicKey
        * @return <b>this</b> (builder style)
        */
        public EmailBuilder setPublicKey(LangString... publicKey) {
            if (publicKey.length > 0) {
                publicKeyCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "PublicKey", 
                irdi("0173-1#02-AAO200#002"), publicKey);
            return this;
        }
        
        /**
        * Changes characterization of an e-mail address according to its location or usage..
        *
        * @param typeOfEmailAddress the value for TypeOfEmailAddress
        * @return <b>this</b> (builder style)
        */
        public EmailBuilder setTypeOfEmailAddress(TypeOfEmailAddress typeOfEmailAddress) {
            typeOfEmailAddressCounter++;
            createPropertyBuilder("TypeOfEmailAddress")
                .setSemanticId(irdi("0173-1#02-AAO199#003"))
                .setValue(Type.STRING, typeOfEmailAddress.getValue()).build();
            return this;
        }
        
        /**
        * Changes characterization of a public key according to its encryption process..
        *
        * @param typeOfPublicKey the value for TypeOfPublicKey
        * @return <b>this</b> (builder style)
        */
        public EmailBuilder setTypeOfPublicKey(LangString... typeOfPublicKey) {
            if (typeOfPublicKey.length > 0) {
                typeOfPublicKeyCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "TypeOfPublicKey", 
                irdi("0173-1#02-AAO201#002"), typeOfPublicKey);
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(emailAddressCounter == 1, "Cardinality {} of EmailAddress must be equal 1.",
                emailAddressCounter);
            assertThat(0 <= publicKeyCounter && publicKeyCounter <= 1, "Cardinality {} of PublicKey must be greater or "
                + "equal 0 and less or equal 1.", publicKeyCounter);
            assertThat(0 <= typeOfEmailAddressCounter && typeOfEmailAddressCounter <= 1, "Cardinality {} of TypeOfEmail"
                + "Address must be greater or equal 0 and less or equal 1.", typeOfEmailAddressCounter);
            assertThat(0 <= typeOfPublicKeyCounter && typeOfPublicKeyCounter <= 1, "Cardinality {} of TypeOfPublicKey m"
                + "ust be greater or equal 0 and less or equal 1.", typeOfPublicKeyCounter);
            
            return super.build();
        }
    }
    
    /**
    * Builder support for iP-based communication channels, e.g. chat or video call.
    * Generated by: EASy-Producer.
    */
    public class IPCommunicationBuilder extends DelegatingSubmodelElementCollectionBuilder {
        
        private int addressOfAdditionalLinkCounter = 0;
        private int typeOfCommunicationCounter = 0;
        private int availableTimeCounter = 0;
    
        /**
        * Creates a builder instance for IPCommunication.
        *
        * @param smBuilder the parent submodel element container builder
        */
        protected IPCommunicationBuilder(SubmodelElementContainerBuilder smBuilder) {
            super(smBuilder.createSubmodelElementCollectionBuilder("IPCommunication"));
            setSemanticId(iri(
                "https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/IPCommunication/"));
        }
        
        /**
        * Creates a builder instance for IPCommunication.
        *
        * @param smBuilder the parent submodel element container builder
        * @param nr the structure number
        */
        protected IPCommunicationBuilder(SubmodelElementContainerBuilder smBuilder, int nr) {
            super(smBuilder.createSubmodelElementCollectionBuilder(getCountingIdShort("IPCommunication", nr)));
            setSemanticId(iri(
                "https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/IPCommunication/"));
        }
        
        /**
        * Changes web site address where information about the product or contact is given..
        *
        * @param addressOfAdditionalLink the value for AddressOfAdditionalLink
        * @return <b>this</b> (builder style)
        */
        public IPCommunicationBuilder setAddressOfAdditionalLink(String addressOfAdditionalLink) {
            addressOfAdditionalLinkCounter++;
            createPropertyBuilder("AddressOfAdditionalLink")
                .setSemanticId(irdi("0173-1#02-AAQ326#002"))
                .setValue(Type.STRING, addressOfAdditionalLink).build();
            return this;
        }
        
        /**
        * Changes characterization of an IP-based communication channel..
        *
        * @param typeOfCommunication the value for TypeOfCommunication
        * @return <b>this</b> (builder style)
        */
        public IPCommunicationBuilder setTypeOfCommunication(String typeOfCommunication) {
            typeOfCommunicationCounter++;
            createPropertyBuilder("TypeOfCommunication")
                .setSemanticId(iri("https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation"
                    + "/IPCommunication/TypeOfCommunication"))
                .setValue(Type.STRING, typeOfCommunication).build();
            return this;
        }
        
        /**
        * Changes specification of the available time window..
        *
        * @param availableTime the value for AvailableTime
        * @return <b>this</b> (builder style)
        */
        public IPCommunicationBuilder setAvailableTime(LangString... availableTime) {
            if (availableTime.length > 0) {
                availableTimeCounter++;
            }
            createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, "AvailableTime", 
                iri("https://admin-shell.io/zvei/nameplate/1/0/ContactInformations/ContactInformation/AvailableTime/"
                    ), availableTime);
            return this;
        }
        
        @Override
        public SubmodelElementCollection build() {
            assertThat(addressOfAdditionalLinkCounter == 1, "Cardinality {} of AddressOfAdditionalLink must be equal 1."
                + "", addressOfAdditionalLinkCounter);
            assertThat(0 <= typeOfCommunicationCounter && typeOfCommunicationCounter <= 1, "Cardinality {} of TypeOfCom"
                + "munication must be greater or equal 0 and less or equal 1.", typeOfCommunicationCounter);
            assertThat(0 <= availableTimeCounter && availableTimeCounter <= 1, "Cardinality {} of AvailableTime must be"
                + " greater or equal 0 and less or equal 1.", availableTimeCounter);
            
            return super.build();
        }
    }
    
}
