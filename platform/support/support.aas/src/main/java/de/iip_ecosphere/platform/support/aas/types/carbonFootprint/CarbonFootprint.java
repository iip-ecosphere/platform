package de.iip_ecosphere.platform.support.aas.types.carbonFootprint;

import static de.iip_ecosphere.platform.support.aas.IdentifierType.*;
import static de.iip_ecosphere.platform.support.aas.types.common.Utils.*;

import java.util.concurrent.ExecutionException;

import de.iip_ecosphere.platform.support.aas.Aas;
import de.iip_ecosphere.platform.support.aas.SubmodelElementCollection;
import de.iip_ecosphere.platform.support.aas.*;
import de.iip_ecosphere.platform.support.aas.types.common.*;

import de.iip_ecosphere.platform.support.aas.types.carbonFootprint.CarbonFootprintBuilder.*;

/**
* Accessor support for the Submodel provides the means to access the Carbon Footprint of the asset.
* Generated by: EASy-Producer.
*/
public class CarbonFootprint extends DelegatingSubmodel {

    /**
    * Creates a wrapping CarbonFootprint submodel instance.
    * 
    * @param aas the parent AAS
    */            
    public CarbonFootprint(Aas aas) {
        super(aas.getSubmodel("CarbonFootprint"));
    }
    
    /**
    * Gets an instance of ProductCarbonFootprint.
    *
    * @param index 0-based index to access a specific instance
    * @return the instance or <b>null</b> for none
    */
    public ProductCarbonFootprint getProductCarbonFootprint(int index) {
        return new ProductCarbonFootprint(super.getSubmodelElementCollection(getCountingIdShort(
            "ProductCarbonFootprint", index)));
    }
    
    /**
    * Gets an instance of TransportCarbonFootprint.
    *
    * @param index 0-based index to access a specific instance
    * @return the instance or <b>null</b> for none
    */
    public TransportCarbonFootprint getTransportCarbonFootprint(int index) {
        return new TransportCarbonFootprint(super.getSubmodelElementCollection(getCountingIdShort(
            "TransportCarbonFootprint", index)));
    }
    
    /**
    * Accessor support for balance of greenhouse gas emissions along the entire life cycle of a product in a defined
    * application and in relation to a defined unit of use.
    * Generated by: EASy-Producer.
    */
    public static class ProductCarbonFootprint extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for ProductCarbonFootprint.
        *
        * @param parent the parent submodel element collection builder
        */
        protected ProductCarbonFootprint(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property PCFCalculationMethod.
        *
        * @param index the index of the field
        * @return the property
        */
        public Property getPCFCalculationMethodProperty(int index) {
            return getProperty(getCountingIdShort("PCFCalculationMethod", index));
        }
        
        /**
        * Returns the value of property PCFCalculationMethod.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<PCFCalculationMethod> getPCFCalculationMethod() throws ExecutionException {
            return collect(elements(), Property.class, irdi("0173-1#02-ABG854#002"), p -> getEnumValue(p,
                PCFCalculationMethod.class, PCFCalculationMethod.class));
        }
        
        /**
        * Returns the property PCFCO2eq.
        *
        * @return the property
        */
        public Property getPCFCO2eqProperty() {
            return getProperty("PCFCO2eq");
        }
        
        /**
        * Returns the value of property PCFCO2eq.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public double getPCFCO2eq() throws ExecutionException {
            return getDoubleValue(this, "PCFCO2eq");
        }
        
        /**
        * Returns the property PCFReferenceValueForCalculation.
        *
        * @return the property
        */
        public Property getPCFReferenceValueForCalculationProperty() {
            return getProperty("PCFReferenceValueForCalculation");
        }
        
        /**
        * Returns the value of property PCFReferenceValueForCalculation.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public PCFReferenceValueForCalculation getPCFReferenceValueForCalculation() throws ExecutionException {
            return getEnumValue(this, "PCFReferenceValueForCalculation", PCFReferenceValueForCalculation.class,
                PCFReferenceValueForCalculation.class);
        }
        
        /**
        * Returns the property PCFQuantityOfMeasureForCalculation.
        *
        * @return the property
        */
        public Property getPCFQuantityOfMeasureForCalculationProperty() {
            return getProperty("PCFQuantityOfMeasureForCalculation");
        }
        
        /**
        * Returns the value of property PCFQuantityOfMeasureForCalculation.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public double getPCFQuantityOfMeasureForCalculation() throws ExecutionException {
            return getDoubleValue(this, "PCFQuantityOfMeasureForCalculation");
        }
        
        /**
        * Returns the property PCFLifeCyclePhase.
        *
        * @param index the index of the field
        * @return the property
        */
        public Property getPCFLifeCyclePhaseProperty(int index) {
            return getProperty(getCountingIdShort("PCFLifeCyclePhase", index));
        }
        
        /**
        * Returns the value of property PCFLifeCyclePhase.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<PCFLifeCyclePhase> getPCFLifeCyclePhase() throws ExecutionException {
            return collect(elements(), Property.class, irdi("0173-1#02-ABG858#001"), p -> getEnumValue(p,
                PCFLifeCyclePhase.class, PCFLifeCyclePhase.class));
        }
        
        /**
        * Returns the property ExplanatoryStatement.
        *
        * @return the property
        */
        public FileDataElement getExplanatoryStatementProperty() {
            return (FileDataElement) getDataElement("ExplanatoryStatement");
        }
        
        /**
        * Returns the value of property ExplanatoryStatement.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public FileDataElement getExplanatoryStatement() throws ExecutionException {
            return getFileDataElementValue(this, "ExplanatoryStatement");
        }
        
        /**
        * Gets an instance of PCFGoodsAddressHandover.
        *
        * @return the instance or <b>null</b> for none
        */
        public PCFGoodsAddressHandover getPCFGoodsAddressHandover() {
            return new PCFGoodsAddressHandover(super.getSubmodelElementCollection("PCFGoodsAddressHandover"));
        }
        
        /**
        * Returns the property PublicationDate.
        *
        * @return the property
        */
        public Property getPublicationDateProperty() {
            return getProperty("PublicationDate");
        }
        
        /**
        * Returns the value of property PublicationDate.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getPublicationDate() throws ExecutionException {
            return getDateValue(this, "PublicationDate");
        }
        
        /**
        * Returns the property ExpirationDate.
        *
        * @return the property
        */
        public Property getExpirationDateProperty() {
            return getProperty("ExpirationDate");
        }
        
        /**
        * Returns the value of property ExpirationDate.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getExpirationDate() throws ExecutionException {
            return getDateValue(this, "ExpirationDate");
        }
        
    }
    
    /**
    * Accessor support for structure to be reused for denoting addresses.
    * Generated by: EASy-Producer.
    */
    public static class PCFGoodsAddressHandover extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for PCFGoodsAddressHandover.
        *
        * @param parent the parent submodel element collection builder
        */
        protected PCFGoodsAddressHandover(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property Street.
        *
        * @return the property
        */
        public Property getStreetProperty() {
            return getProperty("Street");
        }
        
        /**
        * Returns the value of property Street.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getStreet() throws ExecutionException {
            return getStringValue(this, "Street");
        }
        
        /**
        * Returns the property HouseNumber.
        *
        * @return the property
        */
        public Property getHouseNumberProperty() {
            return getProperty("HouseNumber");
        }
        
        /**
        * Returns the value of property HouseNumber.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getHouseNumber() throws ExecutionException {
            return getStringValue(this, "HouseNumber");
        }
        
        /**
        * Returns the property ZipCode.
        *
        * @return the property
        */
        public Property getZipCodeProperty() {
            return getProperty("ZipCode");
        }
        
        /**
        * Returns the value of property ZipCode.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getZipCode() throws ExecutionException {
            return getStringValue(this, "ZipCode");
        }
        
        /**
        * Returns the property CityTown.
        *
        * @return the property
        */
        public Property getCityTownProperty() {
            return getProperty("CityTown");
        }
        
        /**
        * Returns the value of property CityTown.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getCityTown() throws ExecutionException {
            return getStringValue(this, "CityTown");
        }
        
        /**
        * Returns the property Country.
        *
        * @return the property
        */
        public Property getCountryProperty() {
            return getProperty("Country");
        }
        
        /**
        * Returns the value of property Country.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getCountry() throws ExecutionException {
            return getStringValue(this, "Country");
        }
        
    }
    
    /**
    * Accessor support for balance of greenhouse gas emissions generated by a transport service of a product.
    * Generated by: EASy-Producer.
    */
    public static class TransportCarbonFootprint extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for TransportCarbonFootprint.
        *
        * @param parent the parent submodel element collection builder
        */
        protected TransportCarbonFootprint(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property TCFCalculationMethod.
        *
        * @return the property
        */
        public Property getTCFCalculationMethodProperty() {
            return getProperty("TCFCalculationMethod");
        }
        
        /**
        * Returns the value of property TCFCalculationMethod.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public TCFCalculationMethod getTCFCalculationMethod() throws ExecutionException {
            return getEnumValue(this, "TCFCalculationMethod", TCFCalculationMethod.class, TCFCalculationMethod.class);
        }
        
        /**
        * Returns the property TCFCO2eq.
        *
        * @return the property
        */
        public Property getTCFCO2eqProperty() {
            return getProperty("TCFCO2eq");
        }
        
        /**
        * Returns the value of property TCFCO2eq.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public double getTCFCO2eq() throws ExecutionException {
            return getDoubleValue(this, "TCFCO2eq");
        }
        
        /**
        * Returns the property TCFReferenceValueForCalculation.
        *
        * @return the property
        */
        public Property getTCFReferenceValueForCalculationProperty() {
            return getProperty("TCFReferenceValueForCalculation");
        }
        
        /**
        * Returns the value of property TCFReferenceValueForCalculation.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public TCFReferenceValueForCalculation getTCFReferenceValueForCalculation() throws ExecutionException {
            return getEnumValue(this, "TCFReferenceValueForCalculation", TCFReferenceValueForCalculation.class,
                TCFReferenceValueForCalculation.class);
        }
        
        /**
        * Returns the property TCFQuantityOfMeasureForCalculation.
        *
        * @return the property
        */
        public Property getTCFQuantityOfMeasureForCalculationProperty() {
            return getProperty("TCFQuantityOfMeasureForCalculation");
        }
        
        /**
        * Returns the value of property TCFQuantityOfMeasureForCalculation.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public double getTCFQuantityOfMeasureForCalculation() throws ExecutionException {
            return getDoubleValue(this, "TCFQuantityOfMeasureForCalculation");
        }
        
        /**
        * Returns the property TCFProcessesForGreenhouseGasEmissionInATransportService.
        *
        * @param index the index of the field
        * @return the property
        */
        public Property getTCFProcessesForGreenhouseGasEmissionInATransportServiceProperty(int index) {
            return getProperty(getCountingIdShort("TCFProcessesForGreenhouseGasEmissionInATransportService", index));
        }
        
        /**
        * Returns the value of property TCFProcessesForGreenhouseGasEmissionInATransportService.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public Iterable<TCFProcessesForGreenhouseGasEmissionInATransportService>
            getTCFProcessesForGreenhouseGasEmissionInATransportService() throws ExecutionException {
            return collect(elements(), Property.class, irdi("0173-1#02-ABG863#002"), p -> getEnumValue(p,
                TCFProcessesForGreenhouseGasEmissionInATransportService.class, 
                TCFProcessesForGreenhouseGasEmissionInATransportService.class));
        }
        
        /**
        * Returns the property ExplanatoryStatement.
        *
        * @return the property
        */
        public FileDataElement getExplanatoryStatementProperty() {
            return (FileDataElement) getDataElement("ExplanatoryStatement");
        }
        
        /**
        * Returns the value of property ExplanatoryStatement.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public FileDataElement getExplanatoryStatement() throws ExecutionException {
            return getFileDataElementValue(this, "ExplanatoryStatement");
        }
        
        /**
        * Gets an instance of TCFGoodsTransportAddressTakeover.
        *
        * @return the instance or <b>null</b> for none
        */
        public TCFGoodsTransportAddressHandover getTCFGoodsTransportAddressTakeover() {
            return new TCFGoodsTransportAddressHandover(super.getSubmodelElementCollection(
                "TCFGoodsTransportAddressHandover"));
        }
        
        /**
        * Gets an instance of TCFGoodsTransportAddressHandover.
        *
        * @return the instance or <b>null</b> for none
        */
        public TCFGoodsTransportAddressHandover getTCFGoodsTransportAddressHandover() {
            return new TCFGoodsTransportAddressHandover(super.getSubmodelElementCollection(
                "TCFGoodsTransportAddressHandover"));
        }
        
        /**
        * Returns the property PublicationDate.
        *
        * @return the property
        */
        public Property getPublicationDateProperty() {
            return getProperty("PublicationDate");
        }
        
        /**
        * Returns the value of property PublicationDate.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getPublicationDate() throws ExecutionException {
            return getDateValue(this, "PublicationDate");
        }
        
        /**
        * Returns the property ExpirationDate.
        *
        * @return the property
        */
        public Property getExpirationDateProperty() {
            return getProperty("ExpirationDate");
        }
        
        /**
        * Returns the value of property ExpirationDate.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public java.util.Date getExpirationDate() throws ExecutionException {
            return getDateValue(this, "ExpirationDate");
        }
        
    }
    
    /**
    * Accessor support for structure to be reused for denoting addresses.
    * Generated by: EASy-Producer.
    */
    public static class TCFGoodsTransportAddressHandover extends DelegatingSubmodelElementCollection {
        
        /**
        * Creates a wrapping instance for TCFGoodsTransportAddressHandover.
        *
        * @param parent the parent submodel element collection builder
        */
        protected TCFGoodsTransportAddressHandover(SubmodelElementCollection parent) {
            super(parent);
        }
        
        /**
        * Returns the property Street.
        *
        * @return the property
        */
        public Property getStreetProperty() {
            return getProperty("Street");
        }
        
        /**
        * Returns the value of property Street.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getStreet() throws ExecutionException {
            return getStringValue(this, "Street");
        }
        
        /**
        * Returns the property HouseNumber.
        *
        * @return the property
        */
        public Property getHouseNumberProperty() {
            return getProperty("HouseNumber");
        }
        
        /**
        * Returns the value of property HouseNumber.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getHouseNumber() throws ExecutionException {
            return getStringValue(this, "HouseNumber");
        }
        
        /**
        * Returns the property ZipCode.
        *
        * @return the property
        */
        public Property getZipCodeProperty() {
            return getProperty("ZipCode");
        }
        
        /**
        * Returns the value of property ZipCode.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getZipCode() throws ExecutionException {
            return getStringValue(this, "ZipCode");
        }
        
        /**
        * Returns the property CityTown.
        *
        * @return the property
        */
        public Property getCityTownProperty() {
            return getProperty("CityTown");
        }
        
        /**
        * Returns the value of property CityTown.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getCityTown() throws ExecutionException {
            return getStringValue(this, "CityTown");
        }
        
        /**
        * Returns the property Country.
        *
        * @return the property
        */
        public Property getCountryProperty() {
            return getProperty("Country");
        }
        
        /**
        * Returns the value of property Country.
        *
        * @return the value
        * @throws ExecutionException if the property cannot be accessed or the contained value cannot be converted
        */
        public String getCountry() throws ExecutionException {
            return getStringValue(this, "Country");
        }
        
    }
    
}
