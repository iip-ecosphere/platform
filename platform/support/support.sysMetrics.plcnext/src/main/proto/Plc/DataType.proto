///////////////////////////////////////////////////////////////////////////////
//
//  Copyright PHOENIX CONTACT Electronics GmbH
//
///////////////////////////////////////////////////////////////////////////////
syntax = "proto3";




// DO NOT MODIFY THIS FILE, THIS FILE IS AUTOGENERATED

/*NAMESPACE_BEGIN*/

package Arp.Plc.Grpc;

/// <summary>
/// These enumerated types are equivalent to the types from ARP::DataType.
/// </summary>
/// <remarks>
/// Each port with one of these types is subscribable, independently of the
/// kind(input/intern/output) of the particular port.
/// </remarks>
enum DataType
{
    /// <summary>Unspecified.</summary>
    DT_None           = 0;

    /// <summary>Void - Arp C++ empty type</summary>
    DT_Void           = 1;    // (1 << 0)

    /// <summary>Bit - Arp C++ data type (1 Byte)</summary>
    DT_Bit            = 2;    // (1 << 1)

    /// <summary>Boolean - Arp C++ data type (1 Byte)</summary>
    DT_Boolean        = 3;

    /// <summary>UInt8 - Arp C++ data type (1 Byte)</summary>
    DT_UInt8          = 4;    // (1 << 2)

    /// <summary>Int8 - Arp C++ data type (1 Byte)</summary>
    DT_Int8           = 5;

    /// <summary>Char8 - Arp C++ data type (1 Byte)</summary>
    DT_Char8          = 6;

    /// <summary>Char16 - Arp C++ data type (2 Byte)</summary>
    DT_Char16         = 7;

    /// <summary>UInt16 - Arp C++ data type (2 Byte)</summary>
    DT_UInt16         = 8;    // (1 << 3)

    /// <summary>Int16 - Arp C++ data type (2 Byte)</summary>
    DT_Int16          = 9;

    /// <summary>UInt32 - Arp C++ data type (4 Byte)</summary>
    DT_UInt32         = 10;

    /// <summary>Int32 - Arp C++ data type (4 Byte)</summary>
    DT_Int32          = 11;

    /// <summary>UInt64 - Arp C++ data type (8 Byte)</summary>
    DT_UInt64         = 12;

    /// <summary>Int64 - Arp C++ data type (8 Byte)</summary>
    DT_Int64          = 13;

    /// <summary>Float32 - Arp C++ data type (4 Byte)</summary>
    DT_Float32        = 14;

    /// <summary>Float64 - Arp C++ data type (8 Byte)</summary>
    DT_Float64        = 15;

    /// <summary>Limit of primitive types.</summary>
    DT_Primitive      = 32;   // (1 << 5)

    /// <summary>C++ DateTime type</summary>
    DT_DateTime       = 33;

    /// <summary>IEC type: TIME [int32]</summary>
    DT_IecTime        = 34;

    /// <summary>IEC type: LTIME [int64]</summary>
    DT_IecTime64      = 35;

    /// <summary>IEC type: DATE [N/A]</summary>
    /// <remarks>Not supported by PCWE.</remarks>
    DT_IecDate        = 36;

    /// <summary>IEC type: LDATE [int64]</summary>
    DT_IecDate64      = 37;

    /// <summary>IEC type: DATE_AND_TIME, DT [N/A]</summary>
    /// <remarks>Not supported by PCWE.</remarks>
    DT_IecDateTime    = 38;

    /// <summary>IEC type: LDATE_AND_TIME, LDT [int64]</summary>
    DT_IecDateTime64  = 39;

    /// <summary>IEC type: TIME_OF_DAY, TOD [N/A]</summary>
    /// <remarks>Not supported by PCWE.</remarks>
    DT_IecTimeOfDay   = 40;

    /// <summary>IEC type: LTIME_OF_DAY, LTOD [int64]</summary>
    DT_IecTimeOfDay64 = 41;

    /// <summary>Static String type</summary>
    DT_StaticString   = 42;

    /// <summary>Iec String type, only for internal use</summary>
    DT_IecString      = 43;

    /// <summary>.NET/C# String type, only for internal use</summary>
    DT_ClrString      = 44;

    /// <summary>C++ String type, only for internal use</summary>
    DT_String         = 45;

    /// <summary>Limit of elementary types.</summary>
    DT_Elementary     = 64;   // (1 << 6)

    /// <summary>ArrayOfArray</summary>
    DT_ArrayElement   = 65;

    /// <summary>Struct</summary>
    DT_Struct         = 66;

    /// <summary>Class</summary>
    DT_Class          = 67;

    /// <summary>Function Block</summary>
    DT_FunctionBlock  = 68;

    /// <summary>Subsystem</summary>
    DT_Subsystem      = 69;

    /// <summary>Program</summary>
    DT_Program        = 70;

    /// <summary>Component</summary>
    DT_Component      = 71;

    /// <summary>Library</summary>
    DT_Library        = 72;

    /// <summary>Limit of complex types.</summary>
    DT_Complex        = 254;

    /// <summary>Pointer flag.</summary>
    /// <remarks>Pointer are declared as <see cref="Arp.Plc.DataType.Elementary" /> kind.</remarks>
    DT_Pointer        = 512;  // (1 << 9)

    /// <summary>ArrayOfArray</summary>
    DT_Array          = 1024; // (1 << 10)

    /// <summary>Enumaration flag</summary>
    /// <remarks>Enums are declared as <see cref="Arp.Plc.DataType.Elementary" /> kind.</remarks>
    DT_Enum           = 2048; // (1 << 11)

    /// <summary>Reference flag</summary>
    /// <remarks>Determines a C# reference type.</remarks>
    DT_Reference      = 4096; // (1 << 12)

    /// <summary>For removing all flags</summary>
    DT_BaseTypeMask   = 255;
}
