///////////////////////////////////////////////////////////////////////////////
//
//  Copyright PHOENIX CONTACT Electronics GmbH
//
///////////////////////////////////////////////////////////////////////////////


syntax = "proto3";

import "System/Security/SecurityToken.proto";
import "System/Um/AuthenticationError.proto";
import "System/Um/ChannelInformation.proto";
import "google/protobuf/empty.proto";

package Arp.System.Um.Services.Grpc;


/**
 * Use this service to read device information.
 */

service IPasswordAuthenticationService 
{
    /// <summary>
    /// Creates a new Session against the UserManager.
    /// </summary>
    /// <remarks>
    /// This method allows other components such as the RSC-gateway to create sessions under a username and password.
    /// It returns a <code>securityToken</code> which is to be used within extended Remoting headers in subsequent remoting calls, to authorize these calls or
    /// to check for authorization with the <see cref="!:IAuthorizationService" />.
    /// For authentication the operation "arp.static.device/CreateSession" needs to be granted for the specific protocol as described by <paramref name="channelInformation" />.
    /// </remarks>
    /// <param name="userName">
    /// username to use for the authentication for the new session
    /// </param>
    /// <param name="password">
    /// password corresponding to the username
    /// </param>
    /// <param name="channelInformation">
    /// describes properties of the channel which are used to augment the session context within the UserManager
    /// </param>
    /// <param name="securityToken">
    /// If and only if this method returns with <see cref="Arp.System.Um.Services.AuthenticationError.None" /> then value of this parameter is valid.
    /// It is a value which shall be used within extended Remoting headers in subsequent Remoting calls.
    /// </param>
    /// <param name="penaltyDelayMillis">
    /// If and only if this method returns with <see cref="Arp.System.Um.Services.AuthenticationError.PenaltyDelayActive" />
    /// then the value of this parameter is valid.
    /// It describes a delay in milliseconds which must pass before the next authentication attempt
    /// due to this or a former authentication failure. The penalty is enforced by the UserManager.
    /// The penalty delay may be enforced per user or global - depending on the security policy which is implemented
    /// by the UserManager.
    /// </param>
    /// <param name="initialTimeOutMillis">
    /// Each session is created with a timeout. After exeeding the timeout the session will be closed automatically
    /// the session can be prolonged with a call to <see cref="!:ProlongSession(UInt32, out uint)" />.
    /// The initial timeout set for this session is returned by this out parameter expressed in milliseconds.
    /// </param>
    /// <returns>
    /// AuthenticationError::None if the Session was successfully created
    /// Error code from AuthenticationError if unsuccessful
    /// </returns>
  rpc CreateSession(IPasswordAuthenticationServiceCreateSessionRequest) returns (IPasswordAuthenticationServiceCreateSessionResponse)  {}

    /// <summary>
    /// Prolongs the timeout of the current session (as referenced by the <code>securityToken</code> within an extended Remoting header).
    /// </summary>
    /// <param name="securityToken">
    /// the security token of the session which is to be prolonged
    /// </param>
    /// <param name="newTimeOutMillis">
    /// The new timeout set for this session is returned by this out parameter expressed in milliseconds.
    /// </param>
  rpc ProlongSession(IPasswordAuthenticationServiceProlongSessionRequest) returns (IPasswordAuthenticationServiceProlongSessionResponse)  {}

    /// <summary>
    /// Closed the current session (as referenced by the <code>securityToken</code> within an extended Remoting header).
    /// </summary>
  rpc CloseSession(IPasswordAuthenticationServiceCloseSessionRequest) returns (google.protobuf.Empty)  {}
}

message IPasswordAuthenticationServiceCreateSessionRequest
{
   string userName = 1;
   string password = 2;
   Arp.System.Um.Services.Grpc.ChannelInformation channelInformation = 3;
}
message IPasswordAuthenticationServiceProlongSessionRequest
{
   Arp.System.Security.Grpc.SecurityToken securityToken = 1;
}

message IPasswordAuthenticationServiceCloseSessionRequest
{
   Arp.System.Security.Grpc.SecurityToken securityToken = 1;
}


message IPasswordAuthenticationServiceCreateSessionResponse
{
   Arp.System.Security.Grpc.AuthenticationError _ReturnValue = 1;
   Arp.System.Security.Grpc.SecurityToken _securityToken = 2;
   uint32 penaltyDelayMillis = 3;
   uint32 initialTimeOutMillis = 4;
}
message IPasswordAuthenticationServiceProlongSessionResponse
{
   uint32 _newTimeOutMillis = 1;
}
