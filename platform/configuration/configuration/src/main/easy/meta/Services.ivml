project Services {

   import Connectors;
   import MetaConcepts;
   import DataTypes;
   import Devices;
   import Resources;
   
   annotate BindingTime bindingTime = BindingTime::compile to .;
   
   // -------------------- service manager ------------------
   
   abstract compound ServiceManager {
       Integer memLimit = 0; // e.g., JVM memory limit in MBytes 
   };
   
   compound SpringCloudStream refines ServiceManager {
       // logging.level.root: INFO
       Boolean deleteFilesOnExit = true;
       Boolean deleteArtifacts = true;
       Integer waitingTime = 30000;
       String brokerHost = "localhost";
       Integer brokerPort = 8883;
       Integer availabilityRetryDelay = 500;
   };
   
   ServiceManager serviceManager = SpringCloudStream {};
   
   isDefined(serviceManager);
   // TODO service manager requires corresponding broker

   // -------------------- service protocol ------------------
 
   abstract compound ServiceProtocol {
   	   ProtocolType type;
   };
   
   compound ServiceProtocolAMQP refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Amqp;
   };
   
   compound ServiceProtocolMQTTv3 refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv3;
   }
   
   compound ServiceProtocolMQTTv5 refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv5;
   }
   
   compound ServiceProtocolMQTTv3hive refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv3;
   }
   
   compound ServiceProtocolMQTTv5hive refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv5;
   };
   
   ServiceProtocol serviceProtocol = ServiceProtocolAMQP {};
   
   // might be too strict, but its ok for now
   //serviceProtocol.type == transportProtocol.type;
   
   isDefined(serviceProtocol);

   // -------------------- service parameters -------------------------
   
    compound Parameter refines CReversibleProperty {
    }
    typedef Parameters sequenceOf(Parameter) with (Parameters->collect(p|p.name).size() == Parameters.size()/*  and isDefined(Parameters)*/);

    compound IntegerParameter refines Parameter {
        Integer defaultValue;
        /*assign(bindingTime = BindingTime.runtimeEnact) to {
            Integer value;
        }*/
        //Constraint defaultValueCheck = isDefined(defaultValue);
    }
    
    compound StringParameter refines Parameter {
        String defaultValue;
        /*assign(bindingTime = BindingTime.runtimeEnact) to {
            String value;
        }*/
        //Constraint defaultValueCheck = isDefined(defaultValue);
    }

    compound RealParameter refines Parameter {
        Real defaultValue;
        /*assign(bindingTime = BindingTime.runtimeEnact) to {
            Real value;
        }*/
        //Constraint defaultValueCheck = isDefined(defaultValue);
    }

    compound BooleanParameter refines Parameter {
        Boolean defaultValue;
        /*assign(bindingTime = BindingTime.runtimeEnact) to {
            Boolean value;
        }*/
        //Constraint defaultValueCheck = isDefined(defaultValue);
    }
    
    compound LongParameter refines Parameter {
        Real defaultValue;
        /*assign(bindingTime = BindingTime.runtimeEnact) to {
            Real value;
        }*/
        //Constraint defaultValueCheck = isDefined(defaultValue);
    }
   
   // -------------------- services -----------------------------------

   // required by meta concepts, direct ref would be alternative but conflit with QM   
   compound IOType refines CDataProperty {
       refTo(DataType) type;
   }
   
   // aligned to services.environment
   enum ServiceKind {SOURCE_SERVICE, TRANSFORMATION_SERVICE, SINK_SERVICE, PROBE_SERVICE};
   
   // service base is the parent type of Service and ServiceFamily. They may be used in interchangable manner
   // in some situations while in others it is important to have a service not being a family avoiding potential
   // instance recursions
   abstract compound ServiceBase refines CDataComponent {
       Integer memLimit = 0; // e.g., JVM memory limit in MBytes 
       Id id; // forward declaration
       NonEmptyString name; // forward declaration
       ServiceKind kind;
       Boolean asynchronous = true;
       sequenceOf(IOType) input;
       sequenceOf(IOType) output;
       Parameters parameter = {};
       setOf(refTo(EcsDevice)) requires;
       refTo(EcsDevice) allocatedTo; // -> BindingTime::runtimeEnact

       kind == ServiceKind.SOURCE_SERVICE implies isDefined(output) and output.size() > 0;
       kind == ServiceKind.SINK_SERVICE implies isDefined(input) and input.size() > 0;
       kind == ServiceKind.TRANSFORMATION_SERVICE or kind == ServiceKind.PROBE_SERVICE implies isDefined(input) and input.size() > 0 and isDefined(output) and output.size() > 0;
       not(asynchronous) and kind <> ServiceKind.SOURCE_SERVICE implies isDefined(input) and isDefined(output) and input.size() == output.size();
   }
   
   abstract compound Service refines ServiceBase {
       String description;
       IipVersion ver;
       Boolean deployable;
   }
   
   // a service for which a complete implementation exists and no generated interfaces are needed
   abstract compound CompleteService refines Service {
       String artifact = ""; // optional maven artifact
   }
   
   // ------------------------------ Java services -------------------------------
   
   enum JavaVersion {jdk11, jdk16}; 
   
   compound JavaService refines Service { // not implemented service as not necessarily shipped with platform
       String class; // optional class name, if not given do not generate service binding
       String artifact; // optional maven artifact
       
       isDefined(class); // must be defined, not necessarily with a value
       isDefined(artifact); // must be defined, not necessarily with a value
       
       JavaVersion javaVersion; // minimum requirement
   }
   
   // ------------------------------- python (integrated) services -----------------
   
   compound PythonDependency {      //e.g. numpy 1.21.5
       String name;
       String version;
   }
   
   enum PythonIntegrationMode {
       console_continuous,
       console_oneShot
   };
   
   compound PythonService refines Service {
       String entrypointModule; // optional, would override default ServiceEnvironment.py
       String artifact;
       setOf(PythonDependency) dependencies;
       PythonIntegrationMode integrationMode = PythonIntegrationMode::console_continuous;
   }
   
   // ------------------------------- integrated KODEX service -----------------------
   
   // initial, unclear, input missing
   enum KodexAction {
       PseudonymizeMerengue
   };
   
   // applies KodexAction to field
   compound KodexFieldAction {
       refTo(Field) field;
       KodexAction action;
       // parameter needed?
   }
   
   // preliminary, own module as kind of "extension"?
   compound KodexService refines CompleteService {
       setOf(KodexFieldAction) actions;
       ServiceKind kind = ServiceKind::TRANSFORMATION_SERVICE;
       IipVersion ver = "0.7.0";
       String artifact = "de.iip-ecosphere.platform:security.services.kodex:" + iipVer;
       // asynchronous true
       // deployable may influcence integration type
       // integration type: CMD, REST, CENTRAL
       // TODO constraint all action fields must match input/output fieldsM actions must be defined
       // TODO #input=#output
       // TODO unclear - multiple types per DataForm, multiple DataForms, prevent same id, nested fields
   }
      
   // ------------------------ families -----------------
   
   abstract compound ServiceFamily refines ServiceBase, CFamily {
        setOf(refTo(Service)) members; // refinement
        Constraint typeCheck = members->collect(refTo(Service) s | s.kind).toSet().size() < 2;
        kind == members.asSequence().first().kind; // propagate
   }
      
      
      
   // --------------------------- connectors preliminary (easy import bug) --------------------      
 
 
     enum TextEncoding{ANSI, ASCII, UTF8};
    
    // ------------------------------ Machine Parsers -----------------------------------------
    
    // turn machine-level information into input that can be used by a generated connector
    // serializer. May parse into linear or hierarchical structure, either by name convention
    // (given in implementation, configured by mapping) or via index/positions in structure 
    // (linear up-down traversal in IVML sequence). Name-based mapping has priority if given.
    
    abstract compound MachineParser {
        setOf(MachineParserMappingEntry) mapping = {};
    }
    
    compound MachineParserMappingEntry {
        Integer position;
        String name;
    }
    
    compound JavaMachineParser refines MachineParser {
       String class; // optional class name, must comply with parser.InputParser 
       String artifact; // optional maven artifact
    }
    
    abstract compound GenericMachineParser refines MachineParser {
    }
    
    // represents parser.TestLineParser
    // reads text line and splits according to separator, serves also for TSV, CSV
    compound TextLineParser refines GenericMachineParser {
        NonEmptyString separator;
    }
    
    // --------------------------------------- Machine Formatters --------------------------------
    
    // opposite direction of machine parsers for sending back commands on the same connector
    
    abstract compound MachineFormatter {
        setOf(MachineParserMappingEntry) mapping = {};
    }
    
    compound JavaMachineFormatter refines MachineFormatter {
       String class; // optional class name, must comply with formatter.OutputFormatter
       String artifact; // optional maven artifact
    }

    abstract compound GenericMachineFormatter refines MachineFormatter {
    }

    // represents formatter.TestLineFormatter
    // composes text lines using separator, serves also for TSV, CSV
    compound TextLineFormatter refines GenericMachineFormatter {
        NonEmptyString separator;
    }
    
    // -------------------------------------- Connector Operations -------------------------------
    
    // Post-parser mapping operations forming a simplified expression tree structure with 
    // record-field leaf nodes
    
    compound AssignmentOperation { // non refines ConnectorOperation, top level operation in connector 
        refTo(Field) field;
        ConnectorOperation operation;
    }
    
    abstract compound ConnectorOperation {
    }
    
    compound ConnectorFieldAccess refines ConnectorOperation {
        refTo(Field) field;
    }

    abstract compound ConstantConnectorOperation refines ConnectorOperation {
    }

    compound IntegerConstantConnectorOperation refines ConstantConnectorOperation {
        Integer value;
    }

    compound StringConstantConnectorOperation refines ConstantConnectorOperation {
        String value;
    }

    compound BooleanConstantConnectorOperation refines ConstantConnectorOperation {
        Boolean value;
    }

    compound RealConstantConnectorOperation refines ConstantConnectorOperation {
        Real value;
    }
    
    abstract compound ConnectorTranslationOperation refines ConnectorOperation {
        sequenceOf(ConnectorOperation) arguments;
    }
    
    compound AddConnectorTranslationOperation refines ConnectorTranslationOperation {
        // TODO constraint: args only real, integer fields/constants
    }

    compound SubtractConnectorTranslationOperation refines ConnectorTranslationOperation {
        // TODO constraint: args only real, integer fields/constants
    }

    compound MuliplyConnectorTranslationOperation refines ConnectorTranslationOperation {
        // TODO constraint: args only real, integer fields/constants
    }

    compound DivideConnectorTranslationOperation refines ConnectorTranslationOperation {
        // TODO constraint: args only real, integer fields/constants
    }
      
    // IIP-Ecosphere provided connectors
    compound Connector refines Service {
       IOType machineInput; // initial only one, connector not machine representation
       IOType machineOutput; // initial only one, connector not machine representation
       //setOf(AssignmentOperation) operations = {};
       //TextEncoding encoding = TextEncoding::ASCII;
       
       String class;
       String artifact;
       String inAdapterClass = ""; // if given, use adapter
       String outAdapterClass = ""; // if given, use adapter
       // may collapse into one, to be supported by configurable mapping
       refTo(DataType) inInterface; // provided data input to be mapped into adapter, alternative to adapterClass
       refTo(DataType) outInterface; // provided data output to be mapped into adapter, alternative to adapterClass
       
       NonEmptyString host = "localhost";
       Port port;

       output.size() < 2;
       input.size() < 2;
       kind == ServiceKind.SOURCE_SERVICE;
       deployable == true;
   }
   
   compound ChannelConnector refines Connector {
       String inSerializerClass = ""; // if not given, use registry
       String outSerializerClass = ""; // if not given, use registry
       String inChannel = "";
       String outChannel = "";
       IOType machineInput = {type = refBy(ByteArrayType)};
       IOType machineOutput = {type = refBy(ByteArrayType)};
       //MachineFormatter outputFormatter;
       //MachineParser inputParser;
   }
   
   compound OpcUaV1Connector refines Connector {
        String class = "de.iip_ecosphere.platform.connectors.opcuav1.OpcUaConnector";
        String artifact ="de.iip-ecosphere.platform:connectors.opcuav1:";
        IOType machineInput = {type = refBy(ObjectType)};
        IOType machineOutput = {type = refBy(OpcUaV1DataItemType)};
   }
   
   compound MqttV3Connector refines ChannelConnector {
        String class = "de.iip_ecosphere.platform.connectors.mqttv3.PahoMqttv3Connector";
        String artifact ="de.iip-ecosphere.platform:connectors.mqttv3:";
   }
   
   compound MqttV5Connector refines ChannelConnector {
        String class = "de.iip_ecosphere.platform.connectors.mqttv5.PahoMqttv5Connector";
        String artifact ="de.iip-ecosphere.platform:connectors.mqttv5:";
   }

   PrimitiveType OpcUaV1DataItemType = {
       name = "de.iip_ecosphere.platform.connectors.opcuav1.DataItem"
   };
   
   // TODO remaining connectors
    
   freeze {
       OpcUaV1DataItemType;
   } but (f|f.bindingTime >= BindingTime.runtimeMon);
      
      
}