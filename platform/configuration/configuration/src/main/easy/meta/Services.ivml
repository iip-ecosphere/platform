project Services {

   import MetaConcepts;
   import Devices;
   import Resources;
   import Transport;
   import Nameplate;
   
   annotate BindingTime bindingTime = BindingTime::compile to .;
   
   // -------------------- service manager ------------------
   
   abstract compound ServiceManager {
       Integer memLimit = 0; // e.g., JVM memory limit in MBytes 
   };
   
   compound SpringCloudStream refines ServiceManager {
       // logging.level.root: INFO
       Boolean deleteFilesOnExit = true;
       Boolean deleteArtifacts = true;
       Integer waitingTime = 60000;
       String brokerHost = "localhost";
       Integer brokerPort = 8883;
       Integer availabilityRetryDelay = 500;
   };
   
   ServiceManager serviceManager = SpringCloudStream {};
   
   isDefined(serviceManager);
   // TODO service manager requires corresponding broker

   // -------------------- service protocol ------------------
 
   abstract compound ServiceProtocol {
   	   ProtocolType type;
   };
   
   compound ServiceProtocolAMQP refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Amqp;
   };
   
   compound ServiceProtocolMQTTv3 refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv3;
   }
   
   compound ServiceProtocolMQTTv5 refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv5;
   }
   
   compound ServiceProtocolMQTTv3hive refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv3;
   }
   
   compound ServiceProtocolMQTTv5hive refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv5;
   };
   
   ServiceProtocol serviceProtocol = ServiceProtocolAMQP {};
   
   // might be too strict, but its ok for now
   //serviceProtocol.type == transportProtocol.type;
   
   isDefined(serviceProtocol);

   // -------------------- service parameters -------------------------
   
    compound Parameter refines CReversibleProperty {
    }
    typedef Parameters sequenceOf(Parameter) with (Parameters->collect(p|p.name).size() == Parameters.size()/*  and isDefined(Parameters)*/);

    compound IntegerParameter refines Parameter {
        Integer defaultValue;
        /*assign(bindingTime = BindingTime.runtimeEnact) to {
            Integer value;
        }*/
        //Constraint defaultValueCheck = isDefined(defaultValue);
    }
    
    compound StringParameter refines Parameter {
        String defaultValue;
        /*assign(bindingTime = BindingTime.runtimeEnact) to {
            String value;
        }*/
        //Constraint defaultValueCheck = isDefined(defaultValue);
    }

    compound RealParameter refines Parameter {
        Real defaultValue;
        /*assign(bindingTime = BindingTime.runtimeEnact) to {
            Real value;
        }*/
        //Constraint defaultValueCheck = isDefined(defaultValue);
    }

    compound BooleanParameter refines Parameter {
        Boolean defaultValue;
        /*assign(bindingTime = BindingTime.runtimeEnact) to {
            Boolean value;
        }*/
        //Constraint defaultValueCheck = isDefined(defaultValue);
    }
    
    compound LongParameter refines Parameter {
        Integer defaultValue;
        /*assign(bindingTime = BindingTime.runtimeEnact) to {
            Real value;
        }*/
        //Constraint defaultValueCheck = isDefined(defaultValue);
    }
   
   // -------------------- services -----------------------------------

   // required by meta concepts, direct ref would be alternative but conflict with QM   
   compound IOType refines CDataProperty {
       refTo(DataType) type;
       Boolean forward = true;
   }
   
   // aligned to services.environment
   enum ServiceKind {SOURCE_SERVICE, TRANSFORMATION_SERVICE, SINK_SERVICE, PROBE_SERVICE};
   enum TraceKind {NONE, TRACE, LOG, SYSOUT};
   
   // service base is the parent type of Service and ServiceFamily. They may be used in interchangable manner
   // in some situations while in others it is important to have a service not being a family avoiding potential
   // instance recursions
   abstract compound ServiceBase refines CDataComponent {
       Integer memLimit = 0; // e.g., JVM memory limit in MBytes 
       Id id; // forward declaration
       NonEmptyString name; // forward declaration
       ServiceKind kind;
       Boolean asynchronous = true;
       sequenceOf(IOType) input;
       sequenceOf(IOType) output;
       Parameters parameter = {};
       setOf(refTo(EcsDevice)) requires;
       refTo(EcsDevice) allocatedTo; // -> BindingTime::runtimeEnact
       Boolean monitorRcvCount = true;
       Boolean monitorSentCount = true;
       Boolean monitorProcessingTime = true;
       TraceKind traceRcv = TraceKind::NONE;
       TraceKind traceSent = TraceKind::NONE;
       setOf(refTo(Dependency)) dependencies = {};
       NameplateInfo nameplateInfo;

       kind == ServiceKind.SOURCE_SERVICE implies isDefined(output) and fwdTypes(output).size() > 0; // does not hold for connectors: and fwdTypes(input).size() == 0;
       kind == ServiceKind.SINK_SERVICE implies isDefined(input) and fwdTypes(input).size() > 0;
       kind == ServiceKind.TRANSFORMATION_SERVICE or kind == ServiceKind.PROBE_SERVICE implies isDefined(input) and fwdTypes(input).size() > 0 and isDefined(output) and fwdTypes(output).size() > 0;
       Constraint syncEqualIO = not(asynchronous) and kind <> ServiceKind.SOURCE_SERVICE implies isDefined(input) and isDefined(output) and fwdTypes(input).size() == fwdTypes(output).size();
   }
   
   def sequenceOf(IOType) fwdTypes(sequenceOf(IOType) types) = types->select(t|t.forward);
   def sequenceOf(IOType) bwdTypes(sequenceOf(IOType) types) = types->select(t|not(t.forward));
   
   abstract compound Service refines ServiceBase {
       String description = ""; // TODO Constraint: must be configured
       IipVersion ver;
       Boolean deployable;
   }
   
   // a service for which a complete implementation exists and no generated interfaces are needed
   abstract compound CompleteService refines Service {
       String artifact = ""; // optional maven artifact
   }
      
   // ------------------------------ Java services -------------------------------
   
   compound JavaService refines Service { // not implemented service as not necessarily shipped with platform
       String class; // optional class name, if not given do not generate service binding
       String artifact; // optional maven artifact
       
       isDefined(class); // must be defined, not necessarily with a value
       isDefined(artifact); // must be defined, not necessarily with a value
       
       JavaVersion javaVersion; // minimum requirement, todo remove
   }
   
   // ------------------------------- python (integrated) services -----------------
   
   enum PythonIntegrationMode {
       console_continuous,
       console_oneShot
   };
   
   compound PythonService refines Service {
       String entrypointModule; // optional, would override default ServiceEnvironment.py
       String artifact;
       String servicesPackageName = null; // use the default, helps in testing/mocking
       //dependency refinement removed -> system dependencies, use VIL dynamic dispatch 
       PythonIntegrationMode integrationMode = PythonIntegrationMode::console_continuous;
   }
   
   // ------------------------------- integrated KODEX service (-> own project, VIL?) -----------------------
   
   // initial, unclear, input missing
   // https://heykodex.com/docs/actions/pseudonymization
   enum KodexAction {
       PseudonymizeMerengue, PseudonymizeHmac, PseudonymizeStructured
   };
   
   // applies KodexAction to field
   compound KodexFieldAction {
       refTo(Field) field;
       KodexAction action;
       // initial, not nice
       String type = ""; // for Structured
       String format = ""; // for Structured
       Boolean preservePrefixes = false; // for Structured
       Integer typeIntMin = 0; // for Structured
       Integer typeIntMax = 0; // for Structured
   }
   
   // preliminary, own module as kind of "extension"?
   compound KodexService refines CompleteService {
       setOf(KodexFieldAction) actions;
       ServiceKind kind = ServiceKind::TRANSFORMATION_SERVICE;
       IipVersion ver = "0.7.0";
       String artifact = "de.iip-ecosphere.platform:security.services.kodex:" + iipVer;
       NameplateInfo nameplateInfo = {
           manufacturerProductDesignation = "KODEX anonymizer/pseudonymizer service@en",
           manufacturer = refBy(manufacturer_kiprotect)
       };       // asynchronous true
       // deployable may influcence integration type
       // integration type: CMD, REST, CENTRAL
       // TODO constraint all action fields must match input/output fieldsM actions must be defined
       // TODO #input=#output -> _kip
       // TODO unclear - multiple types per DataForm, multiple DataForms, prevent same id, nested fields
   }
   
   // ------------------------------- integrated RapidMiner RTSA service (-> own project, VIL?) -----------------------
   
   // preliminary, own module as kind of "extension"?
   compound RtsaService refines CompleteService {
       ServiceKind kind = ServiceKind::TRANSFORMATION_SERVICE;
       IipVersion rtsaVer = "0.14.5";
       // file name of RTSA is derived from rtsaVer, file name for instance in RTSA is derived from ver and service name
       String artifact = "de.iip-ecosphere.platform:kiServices.rapidminer.rtsa:" + iipVer;
       setOf(refTo(Dependency)) dependencies = {refBy(JRE8)};
       NonEmptyString path;
       NameplateInfo nameplateInfo = {
           manufacturerProductDesignation = "RTSA AI service@en",
           manufacturer = refBy(manufacturer_rapidminer)
       };
       asynchronous == true; // always
       // TODO constraint: flat input/output, not hierarchical
   }
   
   // ------------------------ families -----------------
   
   abstract compound FamilyMemberSelector {
   }

   def Boolean selectorTypeOk(FamilyMemberSelector selector, ServiceFamily family) = 
        true;

   // class must be instance of ServiceSelector   
   compound ServiceSelectorBasedFamilyMemberSelector refines FamilyMemberSelector {
       refTo(DataType) type;
       String class; // optional class name, if not given do not generate service binding
       String artifact; // optional maven artifact
   }
   
   def Boolean selectorTypeOk(ServiceSelectorBasedFamilyMemberSelector selector, ServiceFamily family) = 
        family.input->exists(t|t.type == selector.type) or family.output->exists(t|t.type == selector.type);
   
   compound ServiceFamily refines ServiceBase, CFamily {
        String description = ""; // TODO Constraint: must be configured
        setOf(refTo(Service)) members; // refinement
        Constraint typeCheck = members->collect(refTo(Service) s | s.kind).toSet().size() < 2;
        FamilyMemberSelector selector;
        kind == members.asSequence().first().kind; // propagate
        // TODO interface check
        // members must be same, synch or async; same deployable
        // same kind
        // same parameter
        // requires??
        selector <> null implies selectorTypeOk(selector, self);
        members->forAll(m|m.asynchronous = self.asynchronous);
   }
   
}