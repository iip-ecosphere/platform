project Services {

   import MetaConcepts;
   import Devices;
   import DevicePart*;
   import Resources;
   import Transport;
   import Nameplate;
   
   annotate BindingTime bindingTime = BindingTime::compile to .;
   annotate String semanticId = "" to .;
   annotate Integer uiGroup = UiMandatoryGroup1 to .;
   
   // -------------------- service manager ------------------
   
   abstract compound ServiceManager {
       assign (semanticId = Eclass_Unit_MByte) to {
         Integer memLimit = 512; // e.g., JVM memory limit in MBytes
       }
       assign (semanticId = Eclass_Unit_ms) to {
           Integer monitoringUpdatePeriod = 2000;
       }
   };
   
   compound SpringCloudStream refines ServiceManager {
       // logging.level.root: INFO
       Boolean deleteFilesOnExit = true;
       Boolean deleteArtifacts = true;
       String brokerHost = "localhost";
       Integer brokerPort = 8883;
       assign (semanticId = Eclass_Unit_ms) to {
           Integer waitingTime = 60000;
           Integer availabilityRetryDelay = 500;
       }
   };
   
   ServiceManager serviceManager = SpringCloudStream {};
   
   isDefined(serviceManager);
   // TODO service manager requires corresponding broker

   // -------------------- service protocol ------------------
 
   abstract compound ServiceProtocol {
   	   ProtocolType type;
   };
   
   compound ServiceProtocolAMQP refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Amqp;
   };
   
   compound ServiceProtocolMQTTv3 refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv3;
   }
   
   compound ServiceProtocolMQTTv5 refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv5;
   }
   
   compound ServiceProtocolMQTTv3hive refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv3;
   }
   
   compound ServiceProtocolMQTTv5hive refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv5;
   };
   
   ServiceProtocol serviceProtocol = ServiceProtocolAMQP {};
   
   // might be too strict, but its ok for now
   serviceProtocol.type == transportProtocol.type;
   
   isDefined(serviceProtocol);

   // -------------------- service parameters -------------------------
   
    compound Parameter refines CReversibleProperty {
        String systemProperty = "";
    }
    typedef Parameters sequenceOf(Parameter) with (Parameters->collect(p|p.name).size() == Parameters.size()/*  and isDefined(Parameters)*/);

    compound IntegerParameter refines Parameter {
        Integer defaultValue;
        /*assign(bindingTime = BindingTime.runtimeEnact) to {
            Integer value;
        }*/
        //Constraint defaultValueCheck = isDefined(defaultValue);
    }

    def IntegerParameter getIntegerParameter(refTo(ServiceBase) service, String param) = 
        service.parameter->selectByType(IntegerParameter)->select(p|p.name==param).first();
    
    compound StringParameter refines Parameter {
        String defaultValue;
        /*assign(bindingTime = BindingTime.runtimeEnact) to {
            String value;
        }*/
        //Constraint defaultValueCheck = isDefined(defaultValue);
    }
    
    def StringParameter getStringParameter(refTo(ServiceBase) service, String param) = 
        service.parameter->selectByType(StringParameter)->select(p|p.name==param).first();

    compound RealParameter refines Parameter {
        Real defaultValue;
        /*assign(bindingTime = BindingTime.runtimeEnact) to {
            Real value;
        }*/
        //Constraint defaultValueCheck = isDefined(defaultValue);
    }

    def RealParameter getRealParameter(refTo(ServiceBase) service, String param) = 
        service.parameter->selectByType(RealParameter)->select(p|p.name==param).first();

    compound BooleanParameter refines Parameter {
        Boolean defaultValue;
        /*assign(bindingTime = BindingTime.runtimeEnact) to {
            Boolean value;
        }*/
        //Constraint defaultValueCheck = isDefined(defaultValue);
    }

    def BooleanParameter getBooleanParameter(refTo(ServiceBase) service, String param) = 
        service.parameter->selectByType(BooleanParameter)->select(p|p.name==param).first();
    
    compound LongParameter refines Parameter {
        Integer defaultValue;
        /*assign(bindingTime = BindingTime.runtimeEnact) to {
            Real value;
        }*/
        //Constraint defaultValueCheck = isDefined(defaultValue);
    }

    def LongParameter getLongParameter(refTo(ServiceBase) service, String param) = 
        service.parameter->selectByType(LongParameter)->select(p|p.name==param).first();
   
   // -------------------- services -----------------------------------

   // required by meta concepts, direct ref would be alternative but conflict with QM   
   compound IOType refines CDataProperty {
       refTo(DataType) type;
       Boolean forward = true;
   }
   
   def Boolean isFlatDataType(IOType type) = 
        isFlatDataType(type.type);
   
   // aligned to services.environment
   enum ServiceKind {SOURCE_SERVICE, TRANSFORMATION_SERVICE, SINK_SERVICE, PROBE_SERVICE};
   enum TraceKind {NONE, TRACE, TRACE_NO_DATA, LOG, LOG_NO_DATA, SYSOUT};
   
   // service base is the parent type of Service and ServiceFamily. They may be used in interchangable manner
   // in some situations while in others it is important to have a service not being a family avoiding potential
   // instance recursions
   abstract compound ServiceBase refines CDataComponent {
       Id id; // forward declaration
       NonEmptyNameString name; // forward declaration
       ServiceKind kind;
       Boolean asynchronous = true;
       sequenceOf(IOType) input;
       sequenceOf(IOType) output;
       assign (uiGroup = UiOptionalGroup1) to {
           NameplateInfo nameplateInfo;
           setOf(refTo(Dependency)) dependencies = {};
           assign (semanticId = Eclass_Unit_MByte) to {
               Integer memLimit = 0; // e.g., JVM memory limit in MBytes
           }
           Parameters parameter = {};
           refTo(Server) server;
           sequenceOf(refTo(Plugin)) plugins = {};
       }
       assign (uiGroup = UiInvisibleGroup) to {
           setOf(refTo(EcsDevice)) requires;
           assign(bindingTime = BindingTime::runtimeEnact) to {
                refTo(EcsDevice) allocatedTo;
           }       
       }
       assign (uiGroup = UiOptionalGroup2) to {
           Boolean monitorRcvCount = true;
           Boolean monitorSentCount = true;
           Boolean monitorProcessingTime = true;
           TraceKind traceRcv = TraceKind::NONE;
           TraceKind traceSent = TraceKind::NONE;
       }

       Constraint idOk = matches(id, "^[^@]+$");
       Constraint sourceTypesOk = kind == ServiceKind.SOURCE_SERVICE implies isDefined(output) and fwdTypes(output).size() > 0; // does not hold for connectors: and fwdTypes(input).size() == 0;
       Constraint sinkTypesOk = kind == ServiceKind.SINK_SERVICE implies isDefined(input) and fwdTypes(input).size() > 0;
       Constraint transTypesOk = kind == ServiceKind.TRANSFORMATION_SERVICE or kind == ServiceKind.PROBE_SERVICE implies isDefined(input) and fwdTypes(input).size() > 0 and isDefined(output) and fwdTypes(output).size() > 0;
       Constraint syncEqualIO = not(asynchronous) and kind <> ServiceKind.SOURCE_SERVICE and kind <> ServiceKind.SINK_SERVICE implies isDefined(input) and isDefined(output) and fwdTypes(input).size() == fwdTypes(output).size();
       Constraint hasKind = isDefined(kind) and kind <> null;
   }

   Constraint serviceIdsUnique = allInstances(ServiceBase)->isUnique(s|s.id);
   Constraint serviceNamesUnique = allInstances(ServiceBase)->isUnique(s|s.name);
   def sequenceOf(IOType) fwdTypes(sequenceOf(IOType) types) = types->select(t|t.forward);
   def sequenceOf(IOType) bwdTypes(sequenceOf(IOType) types) = types->select(t|not(t.forward));
   
   abstract compound Service refines ServiceBase {
       assign (uiGroup = UiOptionalGroup1) to {
           Description description = "";
       }
       assign(semanticId = Eclass_Property_swVersion) to {
           OktoVersion ver;
       }
       assign (uiGroup = UiOptionalGroup1) to {
        Boolean deployable;
        setOf(String) artifacts = {};
       }
   }
   
   // a service for which a complete implementation exists and no generated interfaces are needed
   abstract compound CompleteService refines Service {
       assign (uiGroup = UiOptionalGroup1) to {
           String artifact = ""; // optional maven artifact
       }
   }
      
   // ------------------------------ Java services -------------------------------
   
   compound JavaService refines Service { // not implemented service as not necessarily shipped with platform
       String class; // optional class name, if not given do not generate service binding
       String artifact; // optional maven artifact
       
       isDefined(class); // must be defined, not necessarily with a value
       isDefined(artifact); // must be defined, not necessarily with a value
       
       assign (uiGroup = UiOptionalGroup1) to {
           JavaVersion javaVersion; // minimum requirement, todo remove and to be unified with Java System dependency
       }
   }
   
   // ------------------------------- python (integrated) services -----------------
   
   enum PythonIntegrationMode {
       console_continuous,
       console_oneShot,
       websocket_continuous
   };
   
   compound PythonService refines Service {
       String artifact;
       assign (uiGroup = UiOptionalGroup1) to {
           String entrypointModule; // optional, would override default ServiceEnvironment.py
           String servicesPackageName = null; // use the default, helps in testing/mocking
           PythonIntegrationMode integrationMode = PythonIntegrationMode::console_continuous;
           String condaEnv;
       }
       dependencies.uiGroup = UiMandatoryGroup1;
       //Constraint conda = isDefined(condaEnv) and condaEnv <> "" implies dependencies->->selectByType(SystemDependency)->select(d|d.key.startsWith("CONDA")).notEmpty();
   }
   
   // ------------------------ families -----------------
   
   abstract compound FamilyMemberSelector {
   }

   @dispatchBasis
   def Boolean selectorTypeOk(FamilyMemberSelector selector, ServiceFamily family) = 
        true;

   // class must be instance of ServiceSelector   
   compound ServiceSelectorBasedFamilyMemberSelector refines FamilyMemberSelector {
       refTo(DataType) type;
       String class; // optional class name, if not given do not generate service binding
       String artifact; // optional maven artifact
   }
   
   @dispatchCase
   def Boolean selectorTypeOk(ServiceSelectorBasedFamilyMemberSelector selector, ServiceFamily family) = 
        family.input->exists(t|t.type == selector.type) or family.output->exists(t|t.type == selector.type);
   
   compound ServiceFamily refines ServiceBase, CFamily {
       setOf(refTo(Service)) members; // refinement
       Constraint typeCheck = members->collect(refTo(Service) s | s.kind).toSet().size() < 2;
       FamilyMemberSelector selector;
       assign (uiGroup = UiOptionalGroup1) to {
           Description description = "";
       }
       Constraint familyKind = kind == members.asSequence().first().kind; // propagate
       Constraint familySelectorOk = selector <> null implies selectorTypeOk(selector, self);
       Constraint familyAllSync = members->forAll(m|m.asynchronous = self.asynchronous);
       Constraint familyAllDeployable = members->collect(m|m.deployable).toSet().size() < 2;
       Constraint familyParameterOk = members->forAll(m|m.parameter = self.parameter);
       Constraint familyInputOk = members->forAll(m|m.input = self.input);
       Constraint familyOutputOk = members->forAll(m|m.output = self.output);
   }
   
   // ----------------------------- server processes ---------------------------
   
    // required by application, to be started/stopped
    abstract compound Server {
        NonEmptyString id;
        assign(semanticId = Eclass_Property_swVersion) to {
            OktoVersion ver;
        }
        NonEmptyString host = "127.0.0.1";
        NonEmptyEphemeralPort port;
        NonEmptyString executable;
        assign (uiGroup = UiOptionalGroup1) to {
            NameplateInfo nameplateInfo;
            Description description = "";
            String artifact = ""; // optional maven artifact
            Boolean running = false; // running somewhere else, do we have to start it
            Parameters parameter = {};
            setOf(refTo(Dependency)) dependencies = {};
            String transportChannel;
            setOf(String) artifacts = {};
        }
    }
    
    // direct Java-based Server, must implement Server interface
    compound JavaServer refines Server {
        NonEmptyString class;
        assign (uiGroup = UiOptionalGroup1) to {
            String cmdArg; // for now, comma separated
            assign (semanticId = Eclass_Unit_MByte) to {
                Integer memLimit = 256; // e.g., JVM memory limit in MBytes
            }
        }
    }

    // python based server instance, based on PythonServiceEnvironment, may be generated, must implement Server interface
    compound PythonServer refines Server {
        assign (uiGroup = UiOptionalGroup1) to {
            NonEmptyString executable = "python";
            String servicesPackageName = null; // use the default, helps in testing/mocking
        }
    }
    
    Constraint serversUnique = allInstances(Server)->isUnique(e|e.id);
    Constraint servicesServerUnique = allInstances(Service)->collect(s|s.id)
        .excludesAll(allInstances(Server)->collect(e|e.id));
   
}