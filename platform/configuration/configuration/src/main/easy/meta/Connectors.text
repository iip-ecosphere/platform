Connectors::CachingTimeMappingEntry::cachingTime = Time to cache an entry in ms.
Connectors::CachingTimeMappingEntry::field = The field to address/cache.
Connectors::InputOutputMappingEntry::fromField = Field to take data from while mapping.
Connectors::InputOutputMappingEntry::toField = Field to write data to while mapping.
Connectors::JavaMachineParser::class = Name of the class implementing "parser.InputParser" to be called.
Connectors::JavaMachineParser::converterClass = Name of the data converter class to be utilized with the parser.
Connectors::JavaMachineParser::resultClass = Name of the result class provided by the parser.
Connectors::JavaMachineParser::artifact = Optional mvn coordinate of the artifact containing the parser classes.
Connectors::TextLineParser::separator = String/character representing the separator splitting individual data fields. 
Connectors::JavaMachineFormatter::class = Java class implementing "formatter.OutputFormatter" to be called. 
Connectors::JavaMachineFormatter::converterClass = Name of the data converter class to be utilized with the formatter.
Connectors::JavaMachineFormatter::artifact = Optional mvn coordinate of the artifact containing the formatter classes.
Connectors::TextLineFormatter::separator = String/character representing the separator splitting individual data fields. 
Connectors::JavaDataTimeDiffProvider::class = Java class implementing "formatter.OutputFormatter" to be called. 
Connectors::JavaDataTimeDiffProvider::type = The type of data the provider handles.
Connectors::JavaDataTimeDiffProvider::artifact = Optional mvn coordinate of the artifact containing the formatter classes.
Connectors::TransferAssignmentOperation::field = The target field of the assignment.
Connectors::FieldAssignmentOperation::field = The field to assign the resulting value of "operation" to.
Connectors::FieldAssignmentOperation::operation = The operation determining the new value of field.
Connectors::TransferAssignmentOperation::valueField = The field determining the source value to transfer from.
Connectors::TransferAssignmentOperation::nameField = The field determining the name of the source field to transfer from.
Connectors::DataFieldAccess::field = The field to access to get a value from.
Connectors::IntegerConstantDataOperation::value = Constant integer value.
Connectors::StringConstantDataOperation::value = Constant String value.
Connectors::BooleanConstantDataOperation::value = Constant Boolean value.
Connectors::RealConstantDataOperation::value = Constant real value.
Connectors::ParenthesisDataOperation::operation = Operation to be evaluated with precedence.
Connectors::FieldNameDataOperation::field = Field determining the name.
Connectors::DataTranslationOperation::arguments = Data operations acting as arguments after individual evaluation.
Connectors::ModelCallOperation::field = Optional field reference, may be given to indicate that the call shall replace the translation of field.
Connectors::ModelCallOperation::name = Name of the model operation to call.
Connectors::ModelCallOperation::arguments= Expressions defining the arguments for the call.
Connectors::ConnectorInputHandler::type = The type of data the handler handles.
Connectors::ConnectorInputHandler::class = Implementation class implementing "ConnectorInputHandler".
Connectors::ConnectorInputHandler::artifact = Optional mvn coordinate of the artifact containing the input handler.
Connectors::IOTypeWithPath::path = Prefix access path within a model/connector. May or may not end with path separator "/", depending on desired path access. Usually empty except for connector types. 
Connectors::Connector::operations = Data transfer operations.
Connectors::Connector::encoding = When transferring text, which encoding shall be used.
Connectors::Connector::mapping = Data field mapping to ease translation operations (currently unused).
Connectors::Connector::class = Class implementing the connector (usually pre-defined by refining connector types).
Connectors::Connector::artifact = Optional mvn coordinate of the artifact containing the connector implementation (usually pre-defined by refining connector types).
Connectors::Connector::inAdapterClass = Provided programmed input adapter class name to use (may be "*" to use generated transport serializer).
Connectors::Connector::outAdapterClass = Provided programmed output class name to use (may be "*" to use generated transport serializer).
Connectors::Connector::inInterface = Provided data input to be mapped into adapter, alternative to adapterClass.
Connectors::Connector::outInterface = Provided data output to be mapped into adapter, alternative to adapterClass.
Connectors::Connector::inputHandlers = Input handler plugins.
Connectors::Connector::inputHandlersOk = Input handlers must map to the connector, e.g., one input type must equal the handled type. May depend on handler.
Connectors::Connector::dataTimeProviderOk = Data time provider must map to the connector, e.g., one input type must equal the data type.
Connectors::Connector::host = The network host name to connect to (may be superseded in ad-hoc manner if executing device AAS declares service data via "deviceServiceKey").
Connectors::Connector::port = The network port on host to connect to (may be superseded in ad-hoc manner if executing device AAS declares service data via "deviceServiceKey").
Connectors::Connector::deviceServiceKey = Logical name for the underlying service, e.g., "opcua" to consider from executing device AAS for ad-hoc connections. May supersede host/port.
Connectors::Connector::samplingPeriod = For non-event based connectors, the period in ms to retrieve new data.
Connectors::Connector::security = Connector security settings pointing to the platform identity store.
Connectors::Connector::mock = In-vivo testing, enable a mocking connector service wrapper reading data from a JSON file in src/test/resources.
Connectors::Connector::cacheMode = Whether only new data shall be ingested and according to which strategy equal data shall be detected.
Connectors::Connector::kind = Refined default value to SOURCE_SERVICE. May be overridden, e.g., for a sink connector.
Connectors::Connector::parameter = Optional connector parameters.
Connectors::Connector::dataTimeDiffProvider = Optional data ingestion time difference provider.
Connectors::Connector::connectorKind = Connectors must not be probe services.
Connectors::Connector::connectorOutputSize = The number of connector forward output types must be less than 2.
Connectors::Connector::connectorInputSize = The number of connector forward input types must be less than 2.
Connectors::Connector::connectorDeployability = A connector must be deployable rather than just a central platform service.
Connectors::Connector::inInterfaceOk = The inInterface must be defined.
Connectors::Connector::outInterfaceOk = The outInterface must be defined.
Connectors::ChannelConnector::inSerializerClass = Explicit class defining the input data serializer. If empty, the serializer registry is consulted for a (generated) serializer.
Connectors::ChannelConnector::outSerializerClass = Explicit class defining the output data serializer. If empty, the serializer registry is consulted for a (generated) serializer.
Connectors::ChannelConnector::inChannel = Input channel name.
Connectors::ChannelConnector::outChannel = Output channel name (for single channel connectors).
Connectors::ChannelConnector::outChannels = Output channel names (for multi-channel connectors) - will be unified with outChannel. 
Connectors::ChannelConnector::machineFormatter = Formatter turning data received from application into connector output.
Connectors::ChannelConnector::machineParser = Parser turning data received from external/connector into application data.
Connectors::ChannelConnector::noModelCallOperation = Channel connectors do not support model call operations. Please remove the model call operation from your operation expressions.
Connectors::ChannelConnector::samplingPeriod = For non-event based connectors, the period in ms to retrieve new data (refeind to default = 0 as usually event-triggered).
Connectors::ChannelConnector::mustHaveParser = The machine parser must be specified.
Connectors::ChannelConnector::mustHaveFormatter = The machine formatter must be specified.
Connectors::OpcUaV1Connector::class = Refined/predefined class for the platform OPC connector.
Connectors::OpcUaV1Connector::artifact = Refined/predefined Mvn coordinates for the platform OPC connector.
Connectors::OpcUaV1Connector::port = Refined/predefined default OPC port.
Connectors::OpcUaV1Connector::deviceServiceKey = Refined/predefined default OPC service key for ad hoc connector data.
Connectors::OpcUaV1Connector::nameplateInfo = Refined/predefined AAS nameplate information for connector AAS.
Connectors::AasConnector::class = Refined/predefined class for the platform OPC connector.
Connectors::AasConnector::artifact = Refined/predefined Mvn coordinates for the platform OPC connector.
Connectors::AasConnector::idShortSpec = AAS idshort name or java regex pattern of AAS to be considered, shall start with iri:urn.
Connectors::AasConnector::registryHost = The AAS registry to be queried for AAS instances (default "localhost").
Connectors::AasConnector::registryPort = The AAS registry port to be queried for AAS instances.
Connectors::AasConnector::port = Refined/predefined default OPC port.
Connectors::AasConnector::nameplateInfo = Refined/predefined AAS nameplate information for connector AAS.
Connectors::AasConnector::registryPath = URL path to the registry.
Connectors::MqttV3Connector::class = Refined/predefined class for the platform MQTT v3 connector.
Connectors::MqttV3Connector::artifact = Refined/predefined Mvn coordinates for the platform MQTT v3 connector.
Connectors::MqttV3Connector::port = Refined/predefined default MQTT v3 port.
Connectors::MqttV3Connector::deviceServiceKey = Refined/predefined default OPC service key for ad hoc connector data.
Connectors::MqttV3Connector::nameplateInfo = Refined/predefined AAS nameplate information for connector AAS.
Connectors::MqttV5Connector::class = Refined/predefined class for the platform MQTT v5 connector.
Connectors::MqttV5Connector::artifact = Refined/predefined Mvn coordinates for the platform MQTT v5 connector.
Connectors::MqttV5Connector::port = Refined/predefined default MQTT v5 port.
Connectors::MqttV5Connector::deviceServiceKey = Refined/predefined default OPC service key for ad hoc connector data.
Connectors::MqttV5Connector::nameplateInfo = Refined/predefined AAS nameplate information for connector AAS.
Connectors::MqttConnector::class = Refined/predefined class for the platform MQTT v3/v5 connector.
Connectors::MqttConnector::artifact = Refined/predefined Mvn coordinates for the platform MQTT v3/v5 connector.
Connectors::MqttConnector::port = Refined/predefined default MQTT v3/v5 port.
Connectors::MqttConnector::deviceServiceKey = Refined/predefined default OPC service key for ad hoc connector data.
Connectors::MqttConnector::nameplateInfo = Refined/predefined AAS nameplate information for connector AAS.
Connectors::SerialConnector::class = Refined/predefined class for the platform serial connector.
Connectors::SerialConnector::artifact = Refined/predefined Mvn coordinates for the platform serial connector.
Connectors::SerialConnector::port = Refined/predefined default serial port.
Connectors::SerialConnector::deviceServiceKey = Refined/predefined default OPC service key for ad hoc connector data.
Connectors::SerialConnector::nameplateInfo = Refined/predefined AAS nameplate information for connector AAS.
Connectors::SerialConnector::host = The operating system specific name of the serial port to use.
Connectors::SerialConnector::baudRate = The serial baud rate (default 9600).
Connectors::SerialConnector::dataBits = The number of data bits (default 8).
Connectors::SerialConnector::stopBits = The number of stop bits (default 1).
Connectors::SerialConnector::parity = The parity error-detection scheme (default NO).
Connectors::SerialConnector::inChannel = Refined default input channel name.
Connectors::SerialConnector::outChannel = Refined default output channel name.
Connectors::SerialConnector::outChannels = Refined default output channel names.
Connectors::AdsConnector::artifact = Pre-defined artifact implementing the ADS connector.
Connectors::AdsConnector::class = Pre-defined class implementing the ADS connector.
Connectors::AdsConnector::deviceServiceKey = Pre-defined device service key for the ADS connector.
Connectors::AdsConnector::nameplateInfo = Pre-defined nameplate info for the ADS connector.
Connectors::AdsConnector::deviceServiceKey = Refined logical name for the underlying service, e.g., "ADS" to consider from executing device AAS for ad-hoc connections. May supersede host/port.
Connectors::ModbusField::offset = Offset address in the server's modbus table.
Connectors::ModbusTcpV1Connector::artifact = Pre-defined artifact implementing the modbus connector.
Connectors::ModbusTcpV1Connector::class = Pre-defined class implementing the modbus connector.
Connectors::ModbusTcpV1Connector::deviceServiceKey = Pre-defined device service key for the modbus connector.
Connectors::ModbusTcpV1Connector::inInterfaceOk = The inInterface must only contain ModbusFields with the pre-defined modbus types.
Connectors::ModbusTcpV1Connector::nameplateInfo = Pre-defined nameplate info for the modbus connector.
Connectors::ModbusTcpV1Connector::outInterfaceOk = The outInterface must only contain ModbusFields with the pre-defined modbus types.
Connectors::ModbusTcpV1Connector::port = Pre-defined TCP port for the modbus connector.
Connectors::ModbusTcpV1Connector::unitId = ID of the addressed modbus device (default = 1).
Connectors::ModbusTcpV1Connector::timeout = Desired network connection timeout (default = 1000).
Connectors::ModbusTcpV1Connector::bigByteOrder = Does the device apply big or little endian byte order (default big/true).
Connectors::Modbus_ascii = The modbus ASCII type.
Connectors::Modbus_bitmap = The modbus bitmap type. 
Connectors::Modbus_datetime = The modbus datetime type.
Connectors::Modbus_float32 = The modbus float32 type.
Connectors::Modbus_int16 = The modbus int16 type.
Connectors::Modbus_int32 = The modbus int32 type.
Connectors::Modbus_int64 = The modbus int64 type.
Connectors::Modbus_uint16 = The modbus uint16 type.
Connectors::Modbus_uint32 = The modbus uint32 type.
Connectors::Modbus_uint64 = The modbus uint64 type.
Connectors::Modbus_boolean = The modbus boolean type.
Connectors::Modbus_double = The modbus double type.
Connectors::RestConnector::artifact = Pre-defined artifact implementing the modbus connector.
Connectors::RestConnector::class = Pre-defined class implementing the modbus connector.
Connectors::RestConnector::deviceServiceKey = Pre-defined device service key for the modbus connector.
Connectors::RestConnector::nameplateInfo = Pre-defined nameplate info for the modbus connector.
Connectors::RestConnector::port = Pre-defined TCP port for the modbus connector.
Connectors::RestConnector::endpointPrefix = Optional endpoint prefix for all contained fields.
Connectors::RestField::endpoint = Optional endpoint for this field, prefixed by the connector endpoint, replaced by the field name if empty.
Connectors::RestField::asSingleValue = Write the type as a single value/batch. Default is false.
Connectors::InfluxField::mappedName = Explicitly mapping a field name into a database field name. (default: not given)
Connectors::InfluxField::tag = Is the field an INFLUX tag? (default: none)
Connectors::InfluxConnector::artifact = Pre-defined artifact implementing the INFLUX connector.
Connectors::InfluxConnector::class = Pre-defined class implementing the INFLUX connector.
Connectors::InfluxConnector::deviceServiceKey = Pre-defined device service key for the INFLUX connector.
Connectors::InfluxConnector::nameplateInfo = Pre-defined nameplate info for the INFLUX connector.
Connectors::InfluxConnector::deviceServiceKey = Refined logical name for the underlying service, e.g., "INFLUX" to consider from executing device AAS for ad-hoc connections. May supersede host/port.
Connectors::InfluxConnector::organization = Organization holding the instance of the INFLUX DB.
Connectors::InfluxConnector::bucket = Source/target bucket.
Connectors::InfluxConnector::measurement = Logical name of the type of data being stored/requested.
Connectors::InfluxConnector::batchSize = Number of data points to cache/write at once, by default 1.
Connectors::InfluxConnector::urlPath = Path part of the INFLUX access URL (empty by default).
Connectors::InfluxConnector::ssl = Use ssl (default true).
Connectors::FileConnector::artifact = Pre-defined artifact implementing the INFLUX connector.
Connectors::FileConnector::class = Pre-defined class implementing the INFLUX connector.
Connectors::FileConnector::host = The network host name, not used here.
Connectors::FileConnector::port = The network port on host, not used here.
Connectors::FileConnector::nameplateInfo = Pre-defined nameplate info for the file connector.
Connectors::FileConnector::deviceServiceKey = Refined logical name for the underlying service, not used here.
Connectors::FileConnector::readFiles = The data files to read; may be a single file, a folder to take all contained files from or a regular expression. App resources are considered if possible. Identified files are sorted by path/name to determine the processing sequence.
Connectors::FileConnector::writeFiles = The data files to write to; may be a single file or a folder.
Connectors::FileConnector::dataTimeDiff = Default time difference between two data points to ingest in ms if not polling is enabled, then "samplingFrequency" counts. May be dynamically superseded by dataTimeDiffProvider or inputHandlers.
Connectors::FileConnector::inChannel = Input channel name (overridden with fake value).
Connectors::FileConnector::outChannel = Output channel name (overridden with fake value).
