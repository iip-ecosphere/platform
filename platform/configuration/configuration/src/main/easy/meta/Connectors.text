Connectors::CachingTimeMappingEntry::cachingTime = Time to cache an entry in ms.
Connectors::CachingTimeMappingEntry::field = The field to address/cache.
Connectors::InputOutputMappingEntry::fromField = Field to take data from while mapping.
Connectors::InputOutputMappingEntry::toField = Field to write data to while mapping.
Connectors::JavaMachineParser::class = Name of the class implementing "parser.InputParser" to be called.
Connectors::JavaMachineParser::converterClass = Name of the data converter class to be utilized with the parser.
Connectors::JavaMachineParser::resultClass = Name of the result class provided by the parser.
Connectors::JavaMachineParser::artifact = Optional mvn coordinate of the artifact containing the parser classes.
Connectors::TextLineParser::separator = String/character representing the separator splitting individual data fields. 
Connectors::JavaMachineFormatter::class = Java class implementing "formatter.OutputFormatter" to be called. 
Connectors::JavaMachineFormatter::converterClass = Name of the data converter class to be utilized with the formatter.
Connectors::JavaMachineFormatter::artifact = Optional mvn coordinate of the artifact containing the formatter classes.
Connectors::TextLineFormatter::separator = String/character representing the separator splitting individual data fields. 
Connectors::FieldAssignmentOperation::field = The field to assign the resulting value of "operation" to.
Connectors::FieldAssignmentOperation::operation = The operation determining the new value of field.
Connectors::TransferAssignmentOperation::valueField = The field determining the source value to transfer from.
Connectors::TransferAssignmentOperation::nameField = The field determining the name of the source field to transfer from.
Connectors::DataFieldAccess::field = The field to access to get a value from.
Connectors::IntegerConstantDataOperation::value = Constant integer value.
Connectors::StringConstantDataOperation::value = Constant String value.
Connectors::BooleanConstantDataOperation::value = Constant Boolean value.
Connectors::RealConstantDataOperation::value = Constant real value.
Connectors::ParenthesisDataOperation::operation = Operation to be evaluated with precedence.
Connectors::FieldNameDataOperation::field = Field determining the name.
Connectors::DataTranslationOperation::arguments = Data operations acting as arguments after individual evaluation.
Connectors::ConnectorInputHandler::type = The type of data the handler handles.
Connectors::ConnectorInputHandler::class = Implementation class implementing "ConnectorInputHandler".
Connectors::ConnectorInputHandler::artifact = Optional mvn coordinate of the artifact containing the input handler.
Connectors::Connector::operations = Data transfer operations.
Connectors::Connector::encoding = When transferring text, which encoding shall be used.
Connectors::Connector::mapping = Data field mapping to ease translation operations (currently unused).
Connectors::Connector::class = Class implementing the connector (usually pre-defined by refining connector types).
Connectors::Connector::artifact = Optional mvn coordinate of the artifact containing the connector implementation (usually pre-defined by refining connector types).
Connectors::Connector::inAdapterClass = Provided programmed input adapter class name to use (may be "*" to use generated transport serializer).
Connectors::Connector::outputAdapterClass = Provided programmed output class name to use (may be "*" to use generated transport serializer).
Connectors::Connector::inInterface = Provided data input to be mapped into adapter, alternative to adapterClass.
Connectors::Connector::outInterface = Provided data output to be mapped into adapter, alternative to adapterClass.
Connectors::Connector::inputHandlers = Input handler plugins.
Connectors::Connector::inputHandlersOk = Input handlers must map to the connector, e.g., one input type must equal the handled type. May depend on handler.
Connectors::Connector::host = The network host name to connect to (may be superseded in ad-hoc manner if executing device AAS declares service data via "deviceServiceKey").
Connectors::Connector::port = The network port on host to connect to (may be superseded in ad-hoc manner if executing device AAS declares service data via "deviceServiceKey").
Connectors::Connector::deviceServiceKey = Logical name for the underlying service, e.g., "opcua" to consider from executing device AAS for ad-hoc connections. May supersede host/port.
Connectors::Connector::samplingPeriod = For non-event based connectors, the period in ms to retrive new data.
Connectors::Connector::security = Connector security settings pointing to the platform identity store.
Connectors::Connector::mock = In-vivo testing, enable a mocking connector service wrapper reading data from a JSON file in src/test/resources.
Connectors::Connector::cacheMode = Whether only new data shall be ingested and according to which strategy equal data shall be detected.
Connectors::Connector::kind = Refined default value to SOURCE_SERVICE. May be overridden, e.g., for a sink connector.
Connectors::Connector::connectorKind = Connectors can either be used as source or sink.
Connectors::Connector::connectorOutputSize = The number of connector forward output types must be less than 2.
Connectors::Connector::connectorInputSize = The number of connector forward input types must be less than 2.
Connectors::Connector::connectorDeployability = A connector must be deployable rather than just a central platform service.
Connectors::ChannelConnector::inSerializerClass = Explicit class defining the input data serializer. If empty, the serializer registry is consulted for a (generated) serializer.
Connectors::ChannelConnector::outSerializerClass = Explicit class defining the output data serializer. If empty, the serializer registry is consulted for a (generated) serializer.
Connectors::ChannelConnector::inChannel = Input channel name.
Connectors::ChannelConnector::outChannel = Output channel name (for single channel connectors).
Connectors::ChannelConnector::outChannels = Output channel names (for multi-channel connectors) - will be unified with outChannel. 
Connectors::ChannelConnector::machineFormatter = Formatter turning data received from application into connector output.
Connectors::ChannelConnector::machineParser = Parser turning data received from external/connector into application data.
Connectors::OpcUaV1Connector::class = Refined/predefined class for the platform OPC connector.
Connectors::OpcUaV1Connector::artifact = Refined/predefined Mvn coordinates for the platform OPC connector.
Connectors::OpcUaV1Connector::port = Refined/predefined default OPC port.
Connectors::OpcUaV1Connector::deviceServiceKey = Refined/predefined default OPC service key for ad hoc connector data.
Connectors::OpcUaV1Connector::nameplateInfo = Refined/predefined AAS nameplate information for connector AAS.
Connectors::AasConnector::class = Refined/predefined class for the platform OPC connector.
Connectors::AasConnector::artifact = Refined/predefined Mvn coordinates for the platform OPC connector.
Connectors::AasConnector::idShortSpec = AAS idshort name or java regex pattern of AAS to be considered, shall start with iri:urn.
Connectors::AasConnector::registryHost = The AAS registry to be queried for AAS instances (default "localhost").
Connectors::AasConnector::registryPort = The AAS registry port to be queried for AAS instances.
Connectors::AasConnector::port = Refined/predefined default OPC port.
Connectors::AasConnector::nameplateInfo = Refined/predefined AAS nameplate information for connector AAS.
Connectors::MqttV3Connector::class = Refined/predefined class for the platform MQTT v3 connector.
Connectors::MqttV3Connector::artifact = Refined/predefined Mvn coordinates for the platform MQTT v3 connector.
Connectors::MqttV3Connector::port = Refined/predefined default MQTT v3 port.
Connectors::MqttV3Connector::deviceServiceKey = Refined/predefined default OPC service key for ad hoc connector data.
Connectors::MqttV3Connector::nameplateInfo = Refined/predefined AAS nameplate information for connector AAS.
Connectors::MqttV5Connector::class = Refined/predefined class for the platform MQTT v5 connector.
Connectors::MqttV5Connector::artifact = Refined/predefined Mvn coordinates for the platform MQTT v5 connector.
Connectors::MqttV5Connector::port = Refined/predefined default MQTT v5 port.
Connectors::MqttV5Connector::deviceServiceKey = Refined/predefined default OPC service key for ad hoc connector data.
Connectors::MqttV5Connector::nameplateInfo = Refined/predefined AAS nameplate information for connector AAS.
Connectors::MqttConnector::class = Refined/predefined class for the platform MQTT v3/v5 connector.
Connectors::MqttConnector::artifact = Refined/predefined Mvn coordinates for the platform MQTT v3/v5 connector.
Connectors::MqttConnector::port = Refined/predefined default MQTT v3/v5 port.
Connectors::MqttConnector::deviceServiceKey = Refined/predefined default OPC service key for ad hoc connector data.
Connectors::MqttConnector::nameplateInfo = Refined/predefined AAS nameplate information for connector AAS.
