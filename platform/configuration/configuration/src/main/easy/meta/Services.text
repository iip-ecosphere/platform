Services::serviceManager = The service manager
Services::ServiceManager = Base of hierarchy of supported service managers
Services::ServiceManager::monitoringUpdatePeriod = Monitoring update period in ms.
Services::SpringCloudStream = Service manager based on Spring Cloud Stream
Services::SpringCloudStream::deleteFilesOnExit = Delete service artifacts at latest on manager exit.
Services::SpringCloudStream::deleteArtifacts = Delete service artifacts on their release.
Services::SpringCloudStream::waitingTime = Time (in ms) to wait for a service operation, e.g., starting, until classified as failure.
Services::SpringCloudStream::brokerHost = The broker for device-internal communication, usually localhost.
Services::SpringCloudStream::brokerPort = The broker port for device-internal communication.
Services::SpringCloudStream::availabilityRetryDelay = Delay (in ms) to ask again for the availability of a certain service.
Services::ServiceProtocol = Base of hierarchy of supported streaming protocols for data among services on Java level.
Services::ServiceProtocol::type = The streaming protocol type as multiple protocols may run the same type of protocol.
Services::ServiceProtocolAMQP = Default AMQP service streaming protocol based on Rabbitmq.
Services::ServiceProtocolMQTTv3 = Default MQTTv3 service streaming protocol based on Paho.
Services::ServiceProtocolMQTTv5 = Default MQTTv5 service streaming protocol based on Paho.
Services::ServiceProtocolMQTTv3hive = MQTTv3 service streaming protocol based on the HiveMq client.
Services::ServiceProtocolMQTTv5hive = MQTTv5 service streaming protocol based on the HiveMq client.
Services::serviceProtocol = The service/streaming data protocol
Services::ServiceBase::syncEqualIO = Synchronous services must have same # of forward input/output types as they are mapped into functions. Consider an asynchronous service here.
Services::ServiceBase::idOk = Application id must not contain @
Services::ServiceBase::hasKind = Kind must be defined
Services::ServiceBase::plugins = Plugins used/required by the service
Services::Parameter::systemProperty = Name of system property to provide default/initial value taking precedence over model-provided value.
Services::BooleanParameter::defaultValue = Default/initial value of Boolean service parameter.
Services::IntegerParameter::defaultValue = Default/initial value of Integer service parameter.
Services::LongParameter::defaultValue = Default/initial value of Long service parameter.
Services::RealParameter::defaultValue = Default/initial value of Real service parameter.
Services::StringParameter::defaultValue = Default/initial value of String service parameter. 
Services::CompleteService::artifact = Maven coordinate for optional artifact containing the service implementation.
Services::IOType::forward = Type will be transported forward to next service. Opposite, backward broadcasting of data.
Services::IOType::type = The actual implementing data type.
Services::JavaService::artifact = Maven coordinate for artifact containing the service implementation.
Services::JavaService::class = Qualified name of implementing class in artifact). 
Services::JavaService::javaVersion = Required Java version (legacy).
Services::JavaService::memLimit = Memory limit on the executing process in MBytes (0 for none).
Services::PythonService::artifact = Maven coordinate for artifact containing the service implementation.
Services::PythonService::entrypointModule = If something else then the Python service environment shall execute the service (default empty). 
Services::PythonService::integrationMode = Integration mode for python services (default console_continuous). 
Services::PythonService::servicesPackageName = Name of the packages the service implementation is located in (default "services").
Services::PythonService::condaEnv = Optional name of the conda environment. The conda command is either taken from the path or from specified installedDependencies.
Services::Service::deployable = Can service be deployed to remote resources or must it be executed centrally.
Services::Service::description = Description of service functionality.
Services::Service::ver = Version of service (numbers separated by a dot).
Services::Service::artifacts = Names of (shared) application artifacts to be unpacked with a service. 
Services::ServiceBase::allocatedTo = Allocation of service to resource (at runtime).
Services::ServiceBase::asynchronous = Asynchronous (return at any time) or synchronous (immediate return on input) service.
Services::ServiceBase::dependencies = Dependencies required by service.
Services::ServiceBase::id = Unique service id to be used to manage/administer service through the platform. 
Services::ServiceBase::input = Data types forming the input to the service.
Services::ServiceBase::kind = Kind of service (SOURCE_SERVICE, TRANSFORMATION_SERVICE, SINK_SERVICE, PROBE_SERVICE).
Services::ServiceBase::memLimit = Memory limit on the executing process in MBytes (0 for none).
Services::ServiceBase::monitorProcessingTime = Shall the processing time of this service be monitored.
Services::ServiceBase::monitorRcvCount = Shall the number of data items received by this service be monitored.
Services::ServiceBase::monitorSentCount = Shall the number of data items produced/sent by this service be monitored. 
Services::ServiceBase::name = The human readable name of the service.
Services::ServiceBase::nameplateInfo = Information used to construct the AAS nameplate of the service. 
Services::ServiceBase::output = Data types forming the output produced by the service.
Services::ServiceBase::parameter = The service parameters to be set on start and (possibly) be changed at runtime (default empty).
Services::ServiceBase::server = Optional link to a required server.
Services::ServiceBase::requires = Required/permitted types of devices the service can run on (empty for all, default). 
Services::ServiceBase::traceRcv = Shall the reception of data by this service be traced (NONE, TRACE, LOG, SYSOUT).
Services::ServiceBase::traceSent = Shall the sending of data by this service be traced (NONE, TRACE, LOG, SYSOUT).
Services::ServiceBase::sinkTypesOk = Sink service requires input types declared.
Services::ServiceBase::sourceTypesOk = Source service requires output types declared. 
Services::ServiceBase::transTypesOk = Transformation service requires input and output types declared.  
Services::ServiceFamily::description = Description of service family. 
Services::ServiceFamily::familySelectorOk = If a service selector is defined, is the used type provided by this family.
Services::ServiceFamily::members = The members of the family.
Services::ServiceFamily::selector = The runtime member selection plugin.
Services::ServiceFamily::typeCheck = The member types of this family do not have the same service kind.
Services::ServiceFamily::familyKind = Family kind must match kind of all members. 
Services::ServiceFamily::familyAllSync = All family members must either be synchronous or asynchronous as the family. 
Services::ServiceFamily::familyAllDeployable = All family members must either be deployable or not deployable as the family.
Services::ServiceFamily::familyParameterOk = All family members must have the same parameter declarations.
Services::ServiceFamily::familyInputOk = All family members must have the same input type declarations.
Services::ServiceFamily::familyOutputOk = All family members must have the same input type declarations.
Services::ServiceManager::memLimit = Memory limit on the executing process in MBytes (0 for none). 
Services::ServiceProtocolAMQP::type = Type of the service data transport protocol (see Transport).
Services::ServiceProtocolMQTTv3::type = Type of the service data transport protocol (see Transport). 
Services::ServiceProtocolMQTTv3hive::type = Type of the service data transport protocol (see Transport).
Services::ServiceProtocolMQTTv5::type = Type of the service data transport protocol (see Transport).
Services::ServiceProtocolMQTTv5hive::type = Type of the service data transport protocol (see Transport).
Services::ServiceSelectorBasedFamilyMemberSelector::artifact = Maven coordinate of the artifact containing implementing class of the runtime family member selector.   
Services::ServiceSelectorBasedFamilyMemberSelector::class = Implementing class of the runtime family member selector.
Services::ServiceSelectorBasedFamilyMemberSelector::type = Input type of the service family the member selector shall react on.
Services::serviceNamesUnique = The names of the declared services are not unique.
Services::serviceIdsUnique = The ids of the declared services are not unique.
Services::Server::host = Default host where to start the server instance (may be superseded by deployment plan).  
Services::Server::id = Unique server id.
Services::Server::port =  Default/intended port number on where to start the host.
Services::Server::running = Shall the server be started/stopped by the platform or is it assumed to be installed/running.
Services::Server::executable = The server executable. Artifact information will be added by the generation depending on the server type.
Services::Server::nameplateInfo = Information used to construct the AAS nameplate of the service. 
Services::Server::parameter = Server parameters, "port" is implicitly declared as integer parameter.
Services::Server::artifact = Maven coordinate for optional artifact containing the service implementation.
Services::Server::transportChannel = The name of the transport channel for client-server (empty for none).
Services::Server::description = Description of service functionality.
Services::Server::ver = Version of service (numbers separated by a dot).
Services::Server::dependencies = Dependencies required by a server.
Services::Server::artifacts = Names of (shared) application artifacts to be unpacked with a service. 
Services::JavaServer::class = Class in artifact to be executed as server (must implement IIP-Ecosphere server interface with String[]/no-arg constructor)
Services::JavaServer::cmdArg = Comma-separated command line arguments, may be empty.
Services::JavaServer::memLimit = Memory limit on the executing process in MBytes (0 for none).
Services::PythonServer::executable = The executable for the server implementation.
Services::PythonServer::servicesPackageName = Name of the packages the service implementation is located in (default "services").
Services::serversUnique = The id of all defined servers must be unique.
Services::servicesServerUnique = The id of all defined services and servers must be unique.
