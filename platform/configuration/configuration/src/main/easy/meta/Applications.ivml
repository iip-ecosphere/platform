project Applications {

    import Connectors;
    import DataTypes;
    import Nameplate;
    
    annotate BindingTime bindingTime = BindingTime::compile to .;

    compound Application {
        Id id;
        NonEmptyString name;
        String description = "";
        IipVersion ver;
        Boolean snapshot = true;
        String artifact = "";
        setOf(refTo(ServiceMesh)) services; // no services is ok, then the artifact must have hand-crafted services
        NameplateInfo nameplateInfo;
        Boolean createContainer = false;
        Boolean debug = false;
        String cmdArg; // for now, comma separated
    }
    
    compound ServiceMesh {
        String description;
        setOf(refTo(MeshSource)) sources;
    }
    
    compound MeshElement {
        NonEmptyString name;
        ServiceKind kind;
        refTo(ServiceBase) impl; // allow for family or service
        refTo(MeshElement) ensemble = null; // in same process as referenced, usually not; here not in service to facilitate service reuse
        assign (bindingTime = BindingTime::runtimeEnact) to {
            Integer pos_x = -1;
            Integer pos_y = -1;
        }
        
        name == impl.name; // propagate
        kind == impl.kind; // propagate
    }
    
    // hint to requirements!
    compound MeshConnector refines CConnector {
        refTo(MeshElement) next;
    }
    
    // TODO graph validation -> QM
    
    compound MeshSource refines MeshElement {
        setOf(refTo(MeshConnector)) next;
        Integer pollInterval = 1000; //in ms, ignored if negative or asynchronous
        sequenceOf(IOType) output;
        output == impl.output;
        
        kind == ServiceKind::SOURCE_SERVICE;
    }
    
    abstract compound MeshInnerElement refines MeshElement {
        setOf(refTo(MeshConnector)) next;
    }
    
    compound MeshProcessor refines MeshInnerElement {
        sequenceOf(IOType) input;
        sequenceOf(IOType) output;
        input == impl.input;
        output == impl.output;

        kind == ServiceKind::TRANSFORMATION_SERVICE or kind == ServiceKind::PROBE_SERVICE;
    }
    
    compound MeshSink refines MeshInnerElement {
        sequenceOf(IOType) input;
        input == impl.input;

        kind == ServiceKind::SINK_SERVICE;
    }


   // ------------------------------ platform trace -> AAS service -------------------

   // data ignored for now, only tracing   
   compound TraceToAasService refines CompleteService {
       ServiceKind kind = ServiceKind::SINK_SERVICE;
       IipVersion ver = "0.1.0";
       String artifact = ""; // ships with platform in service environment
       refTo(Application) application;
       NameplateInfo nameplateInfo = {
           manufacturerProductDesignation = "Application AAS with Trace embedding@en",
           manufacturer = refBy(manufacturer_sse)
       };
       Parameters parameter = {
         LongParameter{name="timeout", defaultValue=3600000}
       };
   }
   
}