project ConnectorsPartNovoAI {

   import Connectors;
   
   annotate BindingTime bindingTime = BindingTime::compile to .;
   
   Manufacturer manufacturer_NovoAITech = {
        manufacturerName = "NovoAI Technology@de",
        manufacturerLogo = "NovoAI-Logo.png",
        address = {
            department = "NovoAI Technology@de",
            street = "Hollerithallee 17@de",
            zipCode = "30419@de",
            cityTown = "Hannover@de"
        }
    };
      
   compound NovoAIMqttV3Connector refines MqttV3Connector { // Mqtt connector for NovoAI
       String name = "NovoAI MQTT Data connector";
       Description description = "";
       OktoVersion ver = "0.1.0";
       sequenceOf(IOType) input = {{type=refBy(AvaMqttOutput)}};
       sequenceOf(IOType) output = {{type=refBy(AvaMqttOutput)}};
       IOTypeWithPath inInterface = {type=refBy(AvaMqttOutput)};
       IOTypeWithPath outInterface = {type=refBy(AvaMqttOutput)};
       MachineFormatter machineFormatter = JsonFormatter{};
       MachineParser machineParser = JsonParser{};
       NameplateInfo nameplateInfo = {
           manufacturerProductDesignation = "NovoAI MQTT connector@en",
           manufacturer = refBy(manufacturer_NovoAITech)
       };
   }

    RecordType AvaMqttOutput = {
        name = "AvaMqttOutput",
        fields = {
            Field {
                name = "xaxis",
                type = refBy(StringType)
            }, Field {
                name = "yaxis",
                type = refBy(StringType)
            }, Field {
                name = "zaxis",
                type = refBy(StringType)
            }
        }
    };


   freeze {
       manufacturer_NovoAITech;
       AvaMqttOutput;
   };
   
}