project ServicePartRtsa {

   import Services;
   
   annotate BindingTime bindingTime = BindingTime::compile to .;
   
   // preliminary, own module as kind of "extension"?
   compound RtsaService refines CompleteService {
       ServiceKind kind = ServiceKind::TRANSFORMATION_SERVICE;
       IipVersion rtsaVer = "0.14.5";
       // file name of RTSA is derived from rtsaVer, file name for instance in RTSA is derived from ver and service name
       Boolean selfContained = false; // or in special cases, just take <name>-<version>.zip
       String artifact = "de.iip-ecosphere.platform:kiServices.rapidminer.rtsa:" + iipVer;
       setOf(refTo(Dependency)) dependencies = {refBy(JRE8)};
       NonEmptyString path;
       NameplateInfo nameplateInfo = {
           manufacturerProductDesignation = "RTSA AI service@en",
           manufacturer = refBy(manufacturer_rapidminer)
       };
       asynchronous == true; // always
       Constraint rtsaInputFlat = input->forAll(t|isFlatDataType(t));
       Constraint rtsaOutputFlat = input->forAll(t|isFlatDataType(t));
   }
   
}