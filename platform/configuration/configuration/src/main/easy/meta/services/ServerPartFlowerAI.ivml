project ServerPartFlowerAI {

   import Services;
   
   annotate BindingTime bindingTime = BindingTime::compile to .;

   PythonDependency flowrDependency = {
       name = "flwr",
       version = "1.2.0"
   };

   compound FlowerAiFramework {
       setOf(refTo(Dependency)) dependencies;
   };
   
   FlowerAiFramework TensorFlowFlowerAiFramework = {
       dependencies = {refBy(tensorflow290)}
   };

   FlowerAiFramework PyTorchFlowerAiFramework = {
       dependencies = {refBy(pytorch201)} // TODO add dependency
   };
   
   // minimum dependencies
   setOf(refTo(Dependency)) reqFlowerDependencies = {refBy(PYTHON38), refBy(flowrDependency)};
   
   compound FlowerFederatedAiServer refines PythonServer {
       String transportChannel = "Server-FlowerAi";
       Description description = "Flower Federated Learning Server";
       setOf(refTo(Dependency)) dependencies = reqFlowerDependencies.union(framework.dependencies);
       OktoVersion ver = "1.3.0"; 
       refTo(FlowerAiFramework) framework = refBy(TensorFlowFlowerAiFramework);
       PositiveInteger numServerClients = 1;
       PositiveInteger numServerRounds = 3;
       PositiveInteger numFlClients = 1;
       PositiveInteger numFlRounds = 3;
       Constraint reqDependenciesOk = dependencies.includesAll(reqFlowerDependencies.union(framework.dependencies));
   }

   freeze {
       flowrDependency;
       reqFlowerDependencies;
       TensorFlowFlowerAiFramework;
       PyTorchFlowerAiFramework;
   };
   
}