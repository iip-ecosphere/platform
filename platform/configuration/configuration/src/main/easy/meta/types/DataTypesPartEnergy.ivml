project DataTypesPartEnergy {

    import DataTypes;
    
    annotate BindingTime bindingTime = BindingTime::compile to .;
    
    const String Eclass_Unit_Ampere = "0173-1#05-AAA220#005";
    const String Eclass_Unit_MilliAmpere = "0173-1#05-AAA187#005";
    const String Eclass_Unit_KiloAmpere = "0173-1#05-AAA280#005";
    const String Eclass_Unit_Watt = "0173-1#05-AAA093#001";
    const String Eclass_Unit_KiloWatt = "0173-1#05-AAA756#005"; 
    const String Eclass_Unit_MegaWatt = "0173-1#05-AAA632#005";
    const String Eclass_Unit_GigaWatt = "0173-1#05-AAA170#005";
    const String Eclass_Unit_MilliWatt = "0173-1#05-AAA143#005";
    const String Eclass_Unit_TeraWatt = "0173-1#05-AAA465#005";
    const String Eclass_Unit_WattHour = "0173-1#05-AAA753#005";
    const String Eclass_Unit_KiloWattHour = "0173-1#05-AAA555#005";
    const String Eclass_Unit_MegaWattHour = "0173-1#05-AAA124#005";
    const String Eclass_Unit_GigaWattHour = "0173-1#05-AAA124#005";
    const String Eclass_Unit_TeraWattHour = "0173-1#05-AAA098#005";

    AliasType MilliAmpereDoubleType = {
        name = "MilliAmpere Double",
        represents = refBy(DoubleType),
        semanticId = Eclass_Unit_MilliAmpere
    };

    AliasType MilliAmpereFloatType = {
        name = "MilliAmpere Float",
        represents = refBy(FloatType),
        semanticId = Eclass_Unit_MilliAmpere
    };
    
    AliasType AmpereDoubleType = {
        name = "Ampere Double",
        represents = refBy(DoubleType),
        semanticId = Eclass_Unit_Ampere
    };

    AliasType AmpereFloatType = {
        name = "Ampere Float",
        represents = refBy(FloatType),
        semanticId = Eclass_Unit_Ampere
    };

    AliasType KiloAmpereDoubleType = {
        name = "KiloAmpere Double",
        represents = refBy(DoubleType),
        semanticId = Eclass_Unit_KiloAmpere
    };

    AliasType KiloAmpereFloatType = {
        name = "KiloAmpere Float",
        represents = refBy(FloatType),
        semanticId = Eclass_Unit_KiloAmpere
    };
    

    AliasType WattFloatType = {
        name = "Watt Float",
        represents = refBy(FloatType),
        semanticId = Eclass_Unit_Watt
    };

    AliasType KiloWattFloatType = {
        name = "KiloWatt Float",
        represents = refBy(FloatType),
        semanticId = Eclass_Unit_KiloWatt 
    };

    AliasType MegaWattFloatType = {
        name = "MegaWatt Float",
        represents = refBy(FloatType),
        semanticId = Eclass_Unit_MegaWatt 
    };

    AliasType GigaWattFloatType = {
        name = "GigaWatt Float",
        represents = refBy(FloatType),
        semanticId = Eclass_Unit_GigaWatt
    };

    AliasType MilliWattFloatType = {
        name = "MilliWatt Float",
        represents = refBy(FloatType),
        semanticId = Eclass_Unit_MilliWatt 
    };

    AliasType TeraWattFloatType = {
        name = "TeraWatt Float",
        represents = refBy(FloatType),
        semanticId = Eclass_Unit_TeraWatt 
    };
    
    
    AliasType WattDoubleType = {
        name = "Watt Double",
        represents = refBy(DoubleType),
        semanticId = Eclass_Unit_Watt
    };

    AliasType KiloWattDoubleType = {
        name = "KiloWatt Double",
        represents = refBy(DoubleType),
        semanticId = Eclass_Unit_KiloWatt 
    };

    AliasType MegaWattDoubleType = {
        name = "MegaWatt Double",
        represents = refBy(DoubleType),
        semanticId = Eclass_Unit_MegaWatt
    };

    AliasType GigaWattDoubleType = {
        name = "GigaWatt Double",
        represents = refBy(DoubleType),
        semanticId = Eclass_Unit_GigaWatt
    };

    AliasType MilliWattDoubleType = {
        name = "MilliWatt Double",
        represents = refBy(DoubleType),
        semanticId = Eclass_Unit_MilliWatt
    };

    AliasType TeraWattDoubleType = {
        name = "TeraWatt Double",
        represents = refBy(DoubleType),
        semanticId = Eclass_Unit_TeraWatt
    };
    
    // -------------------------------- freeze fixed stuff ----------------------------------------
    
    // freeze all
    freeze {
        .;
    };
    
}