project DataTypes {

    import MetaConcepts;
    
    annotate BindingTime bindingTime = BindingTime::compile to .;
    
    NonEmptyString iipVer = "0.3.0"; // Maven version of platform
    
    typedef EphemeralPort Integer with (EphemeralPort >= -1 and EphemeralPort <= 65535);
    typedef NonEmptyEphemeralPort EphemeralPort with (isDefined(NonEmptyEphemeralPort));
    typedef Port EphemeralPort with (Port >= 0);
    typedef NonEmptyPort Port with (isDefined(NonEmptyPort));
    typedef IipVersion NonEmptyString with (matches(IipVersion, "^\\d+(\\.\\d+)*$"));
    typedef Id NonEmptyString with (matches(Id, "^\\S+$")); // non whitespace
    
    abstract compound DataType {
        NonEmptyString name;
    }

    // primitive data types in the sense of not refinable (via records)
    // name is used as fallback, new types shall override toTypeName(.) or cast(.) - if needed - in JavaBasics, 
    // toTypeName(.) in PythonBasics, convName(.) and convParam(.) in DataOperationBasics    
    compound PrimitiveType refines DataType {
    }
    
    compound ArrayType refines PrimitiveType {
        refTo(DataType) type;
    }
    
    compound EnumLiteral {
        NonEmptyString name;
        Integer ordinal;
        String description = "";
    }
    
    compound EnumType refines PrimitiveType {
        sequenceOf(EnumLiteral) literals;
        Constraint enumLiteralNamesUnique = literals->isUnique(l|l.name);
        Constraint enumLiteralOrdinalsUnique = literals->isUnique(l|l.ordinal);
    }

    compound ListType refines PrimitiveType {
        refTo(DataType) type;
    }
    
    compound RecordType refines CDataProperty, DataType {
        String path = "";
        Fields fields;
    }
    
    const Integer CACHE_ALWAYS = -1;
    const Integer CACHE_NONE = 0;
    
    compound Field {
        assign(bindingTime = BindingTime::specify) to { // may require staged freezing
            NonEmptyString name;
            refTo(DataType) type;
            String description = "";
            Boolean optional = false;
        }
        Integer cachingTime = CACHE_ALWAYS; 
    }

    typedef Fields sequenceOf(Field) with (Fields->collect(f|f.name).hasDuplicates() == false);

    // defining the basic type; if further ones are added, adjust the basic vtls in the generation
    // do not change the names!
    compound IntegerTypeType refines PrimitiveType {
    }
    IntegerTypeType IntegerType = {
        name = "Integer"
    };

    compound ShortTypeType refines PrimitiveType {
    }
    ShortTypeType ShortType = {
        name = "Short"
    };

    compound UInt16TypeType refines PrimitiveType {
    }
    UInt16TypeType UInt16Type = {
        name = "UInt16"
    };

    compound LongTypeType refines PrimitiveType {
    }
    LongTypeType LongType = {
        name = "Long"
    };

    compound StringTypeType refines PrimitiveType {
    }
    StringTypeType StringType = {
        name = "String"
    };

    compound StringBase64TypeType refines StringTypeType {
    }
    StringBase64TypeType StringBase64Type = {
        name = "String Base64"
    };

    compound BooleanTypeType refines PrimitiveType {
    }
    BooleanTypeType BooleanType = {
        name = "Boolean"
    };

    compound FloatTypeType refines PrimitiveType {
    }
    FloatTypeType FloatType = {
        name = "Float"
    };

    compound DoubleTypeType refines PrimitiveType {
    }
    DoubleTypeType DoubleType = {
        name = "Double"
    };
    compound ByteTypeType refines PrimitiveType {
    }
    ByteTypeType ByteType = {
        name = "Byte"
    };

    compound ObjectTypeType refines PrimitiveType {
    }
    ObjectTypeType ObjectType = {
        name = "Object"
    };

    compound ByteArrayTypeType refines ArrayType {
    }
    ByteArrayTypeType ByteArrayType = {
        name = "byte[]",
        type = refBy(ByteType)
    };    

    compound IntegerArrayTypeType refines ArrayType {
    }
    IntegerArrayTypeType IntegerArrayType = {
        name = "int[]",
        type = refBy(IntegerType)
    };    

    compound DoubleArrayTypeType refines ArrayType {
    }
    DoubleArrayTypeType DoubleArrayType = {
        name = "double[]",
        type = refBy(DoubleType)
    };
    
    compound IEC61131_3DateTimeTypeType refines PrimitiveType {
    }
    IEC61131_3DateTimeTypeType IEC61131_3DateTimeType = {
        name = "IEC 61131-3 DateTime"
    };
    
    // actions for new types, see above!

    // ------------------------------------- type operations --------------------------------------
    
    // Helper that turns everything into a "constraint"; helpful for developing complex expressions
    def Boolean constraint(Any any) = 
        true;

    // field access operations to compose statements like fields(field(field(myType, "field1"), 0))->forAll(Field f|f.cachingTime=500);    

    // dispatch basis, access field in type by name
    def Field field(DataType type, String fieldName) = 
        null;

    def Field field(RecordType type, String fieldName) = 
        type.fields->select(Field f|f.name == fieldName).first();

    // dispatch basis, access field in type by index
    def Field field(DataType type, Integer index) = 
        null;

    def Field field(RecordType type, Integer index) = 
        type.fields[index];

    // dispatch basis, access fields in type
    def Fields fields(DataType type) = 
        null;
    
    def Fields fields(RecordType type) = 
        type.fields;

    // return type of specified field via dynamic dispatch access
    def refTo(DataType) type(DataType type, String fieldName) = 
        field(type, fieldName).type;

    // return type of specified field via dynamic dispatch access
    def refTo(DataType) type(DataType type, Integer index) = 
        field(type, index).type;
        
    // ------------------------------ security (preliminary) --------------------------------------

    // might be split up, with alternatives    
    compound SecuritySettings {
        NonEmptyString keystore; 
        NonEmptyString keyAlias; 
        NonEmptyString keystorePasswordKey; // key in identityStore
        NonEmptyString authenticationKey;
        Boolean hostNameVerification = false;        
    } 
    
    // -------------------------------- freeze fixed stuff ----------------------------------------
    
    // freeze all primitives
    freeze {
        IntegerType;
        LongType;
        StringType;
        BooleanType;
        FloatType;
        DoubleType;
        ObjectType;
        ByteArrayType;
        IntegerArrayType;
        DoubleArrayType;
        IEC61131_3DateTimeType;
        iipVer;
    };
    
}