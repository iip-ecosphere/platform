project DataTypes {

    import MetaConcepts;
    
    annotate BindingTime bindingTime = BindingTime::compile to .;
    
    NonEmptyString iipVer = "0.7.1-SNAPSHOT"; // Maven version of platform
    const String mvnIipGroup = "de.iip-ecosphere.platform";
    
    typedef EphemeralPort Integer with (EphemeralPort >= -1 and EphemeralPort <= 65535);
    typedef NonEmptyEphemeralPort EphemeralPort with (isDefined(NonEmptyEphemeralPort));
    typedef Port EphemeralPort with (Port >= 0);
    typedef NonEmptyPort Port with (isDefined(NonEmptyPort));
    typedef OktoVersion NonEmptyString with (matches(OktoVersion, "^\\d+(\\.\\d+)*$"));
    typedef Id NonEmptyString with (matches(Id, "^[^\\s*]+$")); // non whitespace
    typedef NonEmptyNameString NonEmptyString with (matches(NonEmptyNameString, "^[\\w \\[\\]\\-\\Q$_\\E]+$")); // non whitespace
    typedef ArtifactString String with (size(ArtifactString) == 0 or (size(ArtifactString) > 0 and matches(ArtifactString, ".+:.+:.+"))); 
    typedef PositiveInteger Integer with (PositiveInteger > 0);
    typedef Description String with (Description <> null);
    
    const String Eclass_Unit_MByte = "0173-1#05-AAA042#005";
    const String Eclass_Unit_ms = "0173-1#05-AAA114#003";
    const String Eclass_Property_swVersion = "0173-1#02-AAM737#002";
    const String Eclass_Property_swName = "0173-1#02-AAO247#002";
    
    const Integer UiInvisibleGroup = 0;
    const Integer UiMandatoryGroup1 = 100; // between = specific positions, 99 = first
    const Integer UiMandatoryGroup1First = 199;
    const Integer UiOptionalGroup1 = -100;
    const Integer UiMandatoryGroup2 = 200;
    const Integer UiOptionalGroup2 = -200;
    
    def String mvnVersion(OktoVersion ver, Boolean snapshot) = 
       if (snapshot) then ver + "-SNAPSHOT" else ver endif;
       
    compound VersionedElement {
        OktoVersion ver;
        Boolean snapshot = true;
    }
    
    def String mvnVersion(VersionedElement v) = 
       if (v.snapshot) then v.ver + "-SNAPSHOT" else v.ver endif;
    
    abstract compound DataType {
        NonEmptyString name;
        Constraint isNameOk = isNameOk(self);
    }
    
    @DispatchBasis
    def Boolean isNameOk(DataType t) = 
        matches(t.name, "^[\\w \\[\\]\\-\\Q$_\\E]+$");
    
    compound AliasType refines DataType {
        refTo(DataType) represents;
    }
    
    // allow for unique selection on UI, not necessarily needed for code generation
    Constraint dataTypeNamesUnique = allInstances(DataType)->isUnique(t|t.name); 

    // primitive data types in the sense of not refinable (via records)
    // name is used as fallback, new types shall override toTypeName(.) or cast(.) - if needed - in JavaBasics, 
    // toTypeName(.) in PythonBasics, convName(.) and convParam(.) in DataOperationBasics    
    abstract compound PrimitiveType refines DataType {
    }

    abstract compound NumericPrimitiveType refines PrimitiveType {
    }
    
    compound ArrayType refines PrimitiveType {
        refTo(DataType) type;
    }
    
    compound EnumLiteral {
        NonEmptyNameString name;
        Integer ordinal;
        String description = "";
    }
    
    compound EnumType refines PrimitiveType {
        sequenceOf(EnumLiteral) literals;
        Constraint enumLiteralNamesUnique = literals->isUnique(l|l.name);
        Constraint enumLiteralOrdinalsUnique = literals->isUnique(l|l.ordinal);
    }

    compound ListType refines PrimitiveType {
        refTo(DataType) type;
    }
    
    ListType IntegerListType = {
        name = "IntegerListType",
        type = refBy(IntegerType)
    };

    ListType BooleanListType = {
        name = "BooleanListType",
        type = refBy(BooleanType)
    };

    ListType StringListType = {
        name = "StringListType",
        type = refBy(StringType)
    };

    ListType DoubleListType = {
        name = "DoubleListType",
        type = refBy(DoubleType)
    };

    ListType FloatListType = {
        name = "FloatListType",
        type = refBy(FloatType)
    };
    
    compound RecordType refines CDataProperty, DataType {
        Fields fields;
        Constraint fieldNamesUnique = fields->select(f|isRelevant(f))->isUnique(l|l.name);
    }
    
    const Integer CACHE_ALWAYS = -1;
    const Integer CACHE_NONE = 0;
    
    compound Field {
        assign(bindingTime = BindingTime::specify) to { // may require staged freezing
            NonEmptyString name;
            refTo(DataType) type;
            String description = "";
            Boolean optional = false;
            Boolean readOnly = false;
            Boolean nullable = false;
        }
        Integer cachingTime = CACHE_ALWAYS;
        Constraint isNameOk = isNameOk(self);
    }
    
    @DispatchBasis
    def Boolean isRelevant(Field f) = 
        true;
        
    @DispatchBasis
    def Boolean isNameOk(Field f) = 
        matches(f.name, "^[\\w \\[\\]\\-\\Q$_\\E]+$");

    typedef Fields sequenceOf(Field) with (Fields->select(f|isRelevant(f))->collect(f|f.name).hasDuplicates() == false);

    def Boolean isFlatDataType(DataType type) = 
        true;

    def Boolean isFlatDataType(RecordType type) = 
        type.fields->forAll(Field f|not(f.isKindOf(RecordType)));


    // defining the basic type; if further ones are added, adjust the basic vtls in the generation
    // do not change the names!
    compound IntegerTypeType refines NumericPrimitiveType {
    }
    IntegerTypeType IntegerType = {
        name = "Integer"
    };

    compound ShortTypeType refines NumericPrimitiveType {
    }
    ShortTypeType ShortType = {
        name = "Short"
    };

    compound LongTypeType refines NumericPrimitiveType {
    }
    LongTypeType LongType = {
        name = "Long"
    };

    compound StringTypeType refines PrimitiveType {
    }
    StringTypeType StringType = {
        name = "String"
    };

    compound StringBase64TypeType refines StringTypeType {
    }
    StringBase64TypeType StringBase64Type = {
        name = "String Base64"
    };

    compound BooleanTypeType refines PrimitiveType {
    }
    BooleanTypeType BooleanType = {
        name = "Boolean"
    };

    compound FloatTypeType refines NumericPrimitiveType {
    }
    FloatTypeType FloatType = {
        name = "Float"
    };

    compound DoubleTypeType refines NumericPrimitiveType {
    }
    DoubleTypeType DoubleType = {
        name = "Double"
    };
    compound ByteTypeType refines NumericPrimitiveType {
    }
    ByteTypeType ByteType = {
        name = "Byte"
    };

    compound ObjectTypeType refines PrimitiveType {
    }
    ObjectTypeType ObjectType = {
        name = "Object"
    };

    compound Integer16TypeType refines NumericPrimitiveType {
    }
    Integer16TypeType Integer16Type = {
        name = "Int16"
    };
    
    compound Integer32TypeType refines NumericPrimitiveType {
    }
    Integer32TypeType Integer32Type = {
        name = "Int32"
    };
    
    compound Integer64TypeType refines NumericPrimitiveType {
    }
    Integer64TypeType Integer64Type = {
        name = "Int64"
    };
    
    compound SByteTypeType refines NumericPrimitiveType {
    }
    SByteTypeType SByteType = {
        name = "SByte"
    };
    
    compound UnsignedInteger16TypeType refines NumericPrimitiveType {
    }
    UnsignedInteger16TypeType UnsignedInteger16Type = {
        name = "UnsignedInt16"
    };
    
    compound UnsignedInteger32TypeType refines NumericPrimitiveType {
    }
    UnsignedInteger32TypeType UnsignedInteger32Type = {
       name = "UnsignedInt32"
    };
    
    compound UnsignedInteger64TypeType refines NumericPrimitiveType {
    }
    UnsignedInteger64TypeType UnsignedInteger64Type = {
        name = "UnsignedInt64"
    };
    
    compound ByteStringTypeType refines PrimitiveType {
    }
    ByteStringTypeType ByteStringType = {
        name = "ByteString"
    };
    
    compound DateTimeTypeType refines PrimitiveType {
    }
    DateTimeTypeType DateTimeType = {
        name = "DateTime"
    };
	
    compound ByteArrayTypeType refines ArrayType {
    }
    ByteArrayTypeType ByteArrayType = {
        name = "byte[]",
        type = refBy(ByteType)
    };    

    compound IntegerArrayTypeType refines ArrayType {
    }
    IntegerArrayTypeType IntegerArrayType = {
        name = "int[]",
        type = refBy(IntegerType)
    };    

    compound DoubleArrayTypeType refines ArrayType {
    }
    DoubleArrayTypeType DoubleArrayType = {
        name = "double[]",
        type = refBy(DoubleType)
    };

    compound StringArrayTypeType refines ArrayType {
    }
    StringArrayTypeType StringArrayType = {
        name = "String[]",
        type = refBy(StringType)
    };
    
    compound IEC61131_3DateTimeTypeType refines PrimitiveType {
    }
    IEC61131_3DateTimeTypeType IEC61131_3DateTimeType = {
        name = "IEC 61131-3 DateTime"
    };
    
    // actions for new types, see above!

    // ------------------------------------- type operations --------------------------------------
    
    // Helper that turns everything into a "constraint"; helpful for developing complex expressions
    def Boolean constraint(Any any) = 
        true;

    // field access operations to compose statements like fields(field(field(myType, "field1"), 0))->forAll(Field f|f.cachingTime=500);    

    // dispatch basis, access field in type by name
    def Field field(DataType type, String fieldName) = 
        null;

    def Field field(RecordType type, String fieldName) = 
        type.fields->select(Field f|f.name == fieldName).first();

    // dispatch basis, access field in type by index
    def Field field(DataType type, Integer index) = 
        null;

    def Field field(RecordType type, Integer index) = 
        type.fields[index];

    // dispatch basis, access fields in type
    def Fields fields(DataType type) = 
        null;
    
    def Fields fields(RecordType type) = 
        type.fields;

    // return type of specified field via dynamic dispatch access
    def refTo(DataType) type(DataType type, String fieldName) = 
        field(type, fieldName).type;

    // return type of specified field via dynamic dispatch access
    def refTo(DataType) type(DataType type, Integer index) = 
        field(type, index).type;
        
    // ------------------------------ security (preliminary) --------------------------------------

    compound AuthenticationSettings {
        NonEmptyString authenticationKey;
    }

    // might be split up, with alternatives    
    compound SecuritySettings refines AuthenticationSettings {
        String keystoreKey;         // -> keystore in identityStore        
        NonEmptyString keyAlias; 
        Boolean hostNameVerification = false;        
    } 
    
    abstract compound IdentityStore {
        NonEmptyString class;
        ArtifactString artifact = ""; // built in
    }
    
    compound YamlFileIdentityStore refines IdentityStore {
        NonEmptyString class = "de.iip_ecosphere.platform.support.identities.YamlIdentityStore$YamlIdentityStoreDescriptor";
    }
    
    IdentityStore identityStore = YamlFileIdentityStore{}; // default if null
    
    // ------------------------------- Platform Plugins -------------------------------------------

    enum PluginKind {AAS, OTHER};
    
    compound Plugin {
        NonEmptyString id;
        String description;
        ArtifactString artifact;
        PluginKind kind = PluginKind::OTHER;
    }
    
    Plugin BaSyx10Plugin = {
        id = "aas.basyx-1.0", // must be the same as in code
        description = "BySyx 1.0 retrofitting AAS plugin",
        artifact = mvnIipGroup + ":support.aas.basyx1_0:" + iipVer,
        kind = PluginKind::AAS
    };

    Plugin BaSyx15Plugin = {
        id = "aas.basyx-1.5", // must be the same as in code
        description = "BySyx 1.5.1 retrofitting AAS plugin",
        artifact = mvnIipGroup + ":support.aas.basyx1_5:" + iipVer,
        kind = PluginKind::AAS
    };
    
    // -------------------------------- freeze fixed stuff ----------------------------------------
    
    // freeze all primitives
    freeze {
        IntegerType;
        LongType;
        StringType;
        BooleanType;
        FloatType;
        DoubleType;
        ObjectType;
        Integer16Type;
        Integer32Type;
        Integer64Type;
        SByteType;
        UnsignedInteger16Type;
        UnsignedInteger32Type;
        UnsignedInteger64Type;
        ByteStringType;
        DateTimeType;
        ByteArrayType;
        IntegerArrayType;
        DoubleArrayType;
        StringArrayType;
        IEC61131_3DateTimeType;
        IntegerListType;
        BooleanListType;
        StringListType;
        DoubleListType;
        FloatListType;
        iipVer;
        BaSyx10Plugin;
        BaSyx15Plugin;
    };
    
}