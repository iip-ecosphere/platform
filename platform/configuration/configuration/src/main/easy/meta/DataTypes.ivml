project DataTypes {

    import MetaConcepts;
    
    annotate BindingTime bindingTime = BindingTime::compile to .;
    
    NonEmptyString iipVer = "0.3.0-SNAPSHOT"; // Maven version of platform
    
    typedef EphemeralPort Integer with (EphemeralPort >= -1 and EphemeralPort <= 65535);
    typedef NonEmptyEphemeralPort EphemeralPort with (isDefined(NonEmptyEphemeralPort));
    typedef Port EphemeralPort with (Port >= 0);
    typedef NonEmptyPort Port with (isDefined(NonEmptyPort));
    typedef IipVersion NonEmptyString with (matches(IipVersion, "^\\d+(\\.\\d+)*$"));
    typedef Id NonEmptyString with (matches(Id, "^\\S+$")); // non whitespace
    
    abstract compound DataType {
        NonEmptyString name;
    }

    // primitive data types in the sense of not refinable (via records)
    // name is used as fallback, new types shall override toTypeName(.) and cast(.) in JavaBasics, 
    // toTypeName(.) in PythonBasics, convName(.) and convParam(.) in DataOperationBasics    
    compound PrimitiveType refines DataType {
    }
    
    compound ArrayType refines PrimitiveType {
        refTo(DataType) type;
    }

    compound ListType refines PrimitiveType {
        refTo(DataType) type;
    }
    
    compound RecordType refines CDataProperty, DataType {
        String path = "";
        Fields fields;
    }
    
    compound Field {
        NonEmptyString name;
        refTo(DataType) type;
    }

    typedef Fields sequenceOf(Field) with (Fields->collect(f|f.name).hasDuplicates() == false);

    // defining the basic type; if further ones are added, adjust the basic vtls in the generation
    // do not change the names!
    compound IntegerTypeType refines PrimitiveType {
    }
    IntegerTypeType IntegerType = {
        name = "Integer"
    };

    compound LongTypeType refines PrimitiveType {
    }
    LongTypeType LongType = {
        name = "Long"
    };

    compound StringTypeType refines PrimitiveType {
    }
    StringTypeType StringType = {
        name = "String"
    };

    compound BooleanTypeType refines PrimitiveType {
    }
    BooleanTypeType BooleanType = {
        name = "Boolean"
    };

    compound FloatTypeType refines PrimitiveType {
    }
    FloatTypeType FloatType = {
        name = "Float"
    };

    compound DoubleTypeType refines PrimitiveType {
    }
    DoubleTypeType DoubleType = {
        name = "Double"
    };
    compound ByteTypeType refines PrimitiveType {
    }
    DoubleTypeType ByteType = {
        name = "Byte"
    };

    compound ObjectTypeType refines PrimitiveType {
    }
    ObjectTypeType ObjectType = {
        name = "Object"
    };

    compound ByteArrayTypeType refines ArrayType {
    }
    ByteArrayTypeType ByteArrayType = {
        name = "byte[]",
        type = refBy(ByteType)
    };    

    compound IntegerArrayTypeType refines ArrayType {
    }
    IntegerArrayTypeType IntegerArrayType = {
        name = "int[]",
        type = refBy(IntegerType)
    };    

    compound DoubleArrayTypeType refines ArrayType {
    }
    DoubleArrayTypeType DoubleArrayType = {
        name = "double[]",
        type = refBy(DoubleType)
    };
    
    compound IEC61131_3DateTimeTypeType refines PrimitiveType {
    }
    IEC61131_3DateTimeTypeType IEC61131_3DateTimeType = {
        name = "IEC 61131-3 DateTime"
    };
    
    // actions for new types, see above!
    
    // freeze all primitives
    freeze {
        IntegerType;
        LongType;
        StringType;
        BooleanType;
        FloatType;
        DoubleType;
        ObjectType;
        ByteArrayType;
        IntegerArrayType;
        DoubleArrayType;
        IEC61131_3DateTimeType;
        iipVer;
    };
    
}