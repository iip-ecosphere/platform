import JavaBasics;
import JavaMapping;
import Basics;
import MeshBasics;
import IIPEcosphereBase;
insert IIPEcospherePart*;

@advice(IIPEcosphere)
vilScript IIPEcosphere (Project source, Configuration config, Project target) extends IIPEcosphereBase {

    // Paths now in IIPEcosphereBase
    
    Boolean tests = true;
    setOf(String) usedServiceTypes = {};
    
    main(Project source, Configuration config, Project target) = {
        generatePlatform(source, config, target); // first for container
        generateApps(source, config, target);
    }
    
    // called from Platform Instantiator, don't change signature
    mainCli(Project source, Configuration config, Project target) = {
        tests = false;
        generatePlatform(source, config, target); // first for container
        generateApps(source, config, target);
    }

    // ------------------------------------------ generating apps ----------------------------------------

    // called from tests/platform instantiator, don't change signature
    generateInterfaces(Project source, Configuration config, Project target) = {
        generateApps(source, config, target, false, false);
    }

    // called from tests/platform instantiator, don't change signature
    generateApps(Project source, Configuration config, Project target) = {
        generateApps(source, config, target, true, false);
    }

    // called from tests/platform instantiator, don't change signature
    generateAppsNoDeps(Project source, Configuration config, Project target) = {
        generateApps(source, config, target, true, true);
    }
    
    protected generateApps(Project source, Configuration config, Project target, Boolean apps, Boolean noDeps) = {
        IIPEcosphere cfg = config;
        setOf(RecordType) recordTypes = RecordType.allInstances();
        setOf(Application) applications = getApplications();
        sequenceOf(MeshElement) allElements = {};
        sequenceOf(MeshElement) allAppsContainersElements = {};
        initUsedServiceTypes(applications);
        
        setOf(String) javaSerializersShared = {};
        setOf(String) artifactsShared = {};
        if (cfg.sharedInterfaces) {
            generateSharedInterfaces(config, target, javaSerializersShared, artifactsShared);
        }
        
        for (Application a : applications->sortedBy(a|a.id)) { // sortedBy for testing
            // shared serializers/artifacts shall remain "immutable"
            setOf(String) javaSerializers = {};
            javaSerializers = javaSerializers.union(javaSerializersShared);
            setOf(String) artifacts = {};
            artifacts = artifacts.union(artifactsShared);
        
            String appName = getAppMvnName(a);
            Path appRoot = "${target}/${appName}";
            appRoot.mkdir();
            Path javaSrc = "${appRoot}/src/main/java";
            Path javaTestSrc = "${appRoot}/src/test/java";
            Path pySrc = "${appRoot}/src/main/python";
            Path resourcesSrc = "${appRoot}/src/main/resources";
            Path assemblySrc = "${appRoot}/${assemblyRel}";
            Path javaDatatypesSrc = "${javaSrc}/${toPath(javaDatatypesPackage)}";
            Path javaSerializersSrc = "${javaSrc}/${toPath(javaSerializersPackage)}";
            Path javaInterfacesSrc = "${javaSrc}/${toPath(javaInterfacesPackage)}";
            Path javaStubsSrc = "${javaSrc}/${toPath(javaStubsPackage)}";
            Path javaNodesSrc = "${javaSrc}/${toPath(javaNodesPackage)}";
            Path javaNodesTestSrc = "${javaTestSrc}/${toPath(javaNodesPackage)}";

            assemblySrc.mkdir();
            // generate data classes and serializers
            if (not(cfg.sharedInterfaces)) {
                javaDatatypesSrc.mkdir();
                javaSerializersSrc.mkdir();
                generateEnums(javaDatatypesSrc, pySrc);    
                for (RecordType r : recordTypes) {
                    // generate for all languages and according to serializer settings
                    String clsName = asTypeName(r.name);
                    vilTemplateProcessor("JavaType", config, "${javaDatatypesSrc}/${clsName}.java", type=r, 
                        pkg=javaDatatypesPackage, interface=false, sharedInterfaces=false, impl=true);
                    vilTemplateProcessor("JavaJsonSerializer", config, "${javaSerializersSrc}/${clsName}Serializer.java", 
                        type=r, pkg=javaSerializersPackage, typePkg=javaDatatypesPackage, sharedInterfaces=false);
                    javaSerializers.add("${javaSerializersPackage}.${clsName}Serializer");
                    if (isPythonUsed(usedServiceTypes)) {
                        vilTemplateProcessor("PythonType", config, "${pySrc}/datatypes/${clsName}.py", type=r, interface=false, 
                            sharedInterfaces=false);
                        vilTemplateProcessor("PythonJsonSerializer", config, "${pySrc}/serializers/${clsName}Serializer.py", 
                            type=r, sharedInterfaces=false);
                    }
                };
            }

            if (apps) {
                // generate service classes and service integration
                setOf(String) bins = {}; 
                setOf(String) assemblies = {}; 
                setOf(String) resources = {}; 
                sequenceOf(MeshElement) elements = {};
                artifacts.add(a.artifact);
                mapOf(MeshElement, setOf(MeshConnector)) mappedMesh = {};
                // TODO filter according to assigned resources, allow for later instantiation
                for (ServiceMesh n : a.services) {
                    setOf(MeshElement) nodes = n.sources->closure(MeshElement e|nextMeshNodes(e, mappedMesh));
                    setOf(MeshElement) nodes2 = {}; // just a copy, it seems that using the iterable below fails
                    nodes2 = nodes2.including(nodes);
                    for (MeshElement no : nodes) {
                        String clsName = asTypeName(no.name);
                        generateServiceElements(appRoot, config, artifacts, no, no.impl);
                        // connector gen references connector impl, in case of non-specific connector may not yet be there
                        Boolean genElt = not(noDeps) or (noDeps and not(no.impl.isTypeOf(Connector)));
                        if (genElt) {
                            vilTemplateProcessor("JavaSpringCloudStreamMeshElement", config, 
                                "${javaNodesSrc}/${clsName}.java", 
                                elt=no, pkg=javaNodesPackage, app=a, sharedInterfaces=cfg.sharedInterfaces, 
                                familyInterface="", familyMember=no.impl, nodes=nodes2);
                        }
                        if (not(noDeps)) {
                            vilTemplateProcessor("JavaSpringCloudStreamMeshElementTest", config, 
                                "${javaNodesTestSrc}/${clsName}Test.java", 
                                elt=no, pkg=javaNodesPackage, app=a, sharedInterfaces=cfg.sharedInterfaces, 
                                familyInterface="", familyMember=no.impl, nodes=nodes2, serializers=javaSerializers);
                        }
                        setOf(Service) mbs = {};
                        generateNestedServices(no, no.impl, javaNodesSrc, javaNodesTestSrc, clsName, javaNodesPackage, 
                            a, artifacts, noDeps, mbs, nodes2, javaSerializers);
                        elements.add(no);
                        generateServiceResources(no, no.impl, appRoot, bins, assemblies, resources, artifacts, noDeps);
                        for (Service m: mbs) {
                            generateServiceResources(no, m, appRoot, bins, assemblies, resources, artifacts, noDeps);
                        }
                    };
                    
                    for (Server ser: a.servers) {
                        generateServer(config, ser, appRoot, noDeps, assemblies, artifacts);
                    }
                };
                elements = elements->sortedBy(n|n.name).toSequence(); // for testing
                
                vilTemplateProcessor("JavaSpringCloudStreamStarter", config, "${javaSrc}/iip/Starter.java", pkg="iip", serializers=javaSerializers);
    
                vilTemplateProcessor("JavaSpringCloudStreamYaml", config, "${resourcesSrc}/application.yml", mappedMesh=mappedMesh, nodes=elements, app=a);
                vilTemplateProcessor("SpringCloudStreamDeploymentDescriptor", config, "${resourcesSrc}/deployment.yml", app=a, elements=elements);
                vilTemplateProcessor("JavaSpringCloudStreamAssembly", config, "${assemblySrc}/spring.xml");
                //assemblies.add("spring|${assemblyRel}/spring.xml|package|${mvnProjectBuildDir}");
                vilTemplateProcessor("JavaLogbackXml", config, "${resourcesSrc}/logback.xml");
                identityStoreJsl(resourcesSrc, cfg);
                deviceIdProviderJsl(resourcesSrc, cfg);
    
                if (not(cfg.sharedInterfaces)) {
                    vilTemplateProcessor("JavaInterfaceAssembly", config, "${assemblySrc}/javaInterfaces.xml");
                    assemblies.add("interfaces|${assemblyRel}/javaInterfaces.xml|package|${mvnProjectBuildDir}");
                    if (isPythonUsed(usedServiceTypes)) {
                        vilTemplateProcessor("PythonAssembly", config, "${assemblySrc}/pythonInterfaces.xml", withServices=false, dependency="");
                        assemblies.add("python|${assemblyRel}/pythonInterfaces.xml|package|${mvnProjectBuildDir}");
                    }
                }
                
                // partition according to container strategy
                String appVersion = getAppMvnVersion(a);
                vilTemplateProcessor("AppMvn", config, "${appRoot}/pom.xml", usedServiceTypes=usedServiceTypes, artifacts=artifacts, bins=bins, assemblies=assemblies, resources=resources, starterCls="iip.Starter", appName=appName, appVersion=appVersion, appDescription=a.description, tests=tests);
                vilTemplateProcessor("AppAnt", config, "${appRoot}/build-jk.xml", artifactPrefix=appName, srvFolderName="IIP-apps-${appName}");
                
                mvn(appRoot);

                String appArtifact = generateServiceContainer(appRoot, cfg, a, elements);
                if (appArtifact == null or appArtifact.length() == 0) {
                    appArtifact = appName + "-" + appVersion + "-bin.jar"; // currently not other packaging
                }
                generateDeploymentPlans(appRoot, cfg, a, elements, appArtifact);
                allElements = allElements.union(elements);
                
                if (a.createContainer) {
                    allAppsContainersElements = allAppsContainersElements.union(elements);
                }
            }
            
            Boolean withTemplate = true; // preliminary
            if (withTemplate) {
                appRoot = "${target}/templates/eclipse/impl.${appName}";
                appRoot.mkdir();
                javaSrc = "${appRoot}/src/main/java";
                javaSrc.mkdir();
                javaTestSrc = "${appRoot}/src/test/java";
                javaTestSrc.mkdir();
                pySrc = "${appRoot}/src/main/python";
                resourcesSrc = "${appRoot}/src/main/resources";
                resourcesSrc.mkdir();
                Path testResourcesSrc = "${appRoot}/src/test/resources";
                testResourcesSrc.mkdir();
                
                vilTemplateProcessor("TemplatesEclipseProject", config, "${appRoot}/.project", appName="impl." + appName);
                vilTemplateProcessor("TemplatesEclipseClasspath", config, "${appRoot}/.classpath", appName="impl." + appName);
                vilTemplateProcessor("TemplatesEclipsePyDevProject", config, "${appRoot}/.pydevproject", appName=appName);
                vilTemplateProcessor("TemplatesEclipseGitignore", config, "${appRoot}/.gitignore", appName=appName);
                vilTemplateProcessor("TemplatesEasyProducer", config, "${appRoot}/.EASyProducer", appName=appName);

                setOf(String) assemblies = {}; 
                mapOf(MeshElement, setOf(MeshConnector)) mappedMesh = {};
                sequenceOf(MeshElement) elements = {};
                setOf(String) javaTests = {};
                for (ServiceMesh n : a.services) {
                    setOf(MeshElement) nodes = n.sources->closure(MeshElement e|nextMeshNodes(e, mappedMesh));
                    for (MeshElement no : nodes) {
                        generateTemplateElements(appRoot, config, no, no.impl, assemblies, javaTests);
                        elements.add(no);
                    }
                }
                
                for(Server s : a.servers) {
                    generateTemplateElements(appRoot, config, s, assemblies);
                }
                
                elements = elements->sortedBy(n|n.name).toSequence(); // for testing
                sequenceOf(MeshElement) pythonElements = elements->select(e|e.impl.isKindOf(PythonService));

                if (javaTests.size() > 0) {
                    vilTemplateProcessor("JavaAllTestsTemplate", config, "${appRoot}/src/test/java/AllTests.java", javaTests=javaTests, pkg="");
                }
                
                vilTemplateProcessor("TemplatesEclipseReadme", config, "${appRoot}/README.md", appName="impl." + appName, nodes=elements);

                String appVersion = getAppMvnVersion(a);
                vilTemplateProcessor("AppMvnTest", config, "${appRoot}/pom.xml", usedServiceTypes=usedServiceTypes, assemblies=assemblies, nodes=elements, appName=appName, appVersion=appVersion, appDescription="Implementation of ${a.name}", tests=tests);
                vilTemplateProcessor("TemplatesIdentityStoreYaml", config, "${resourcesSrc}/identityStore.yml", appName=appName);
                vilTemplateProcessor("TemplatesTestLogbackXml", config, "${testResourcesSrc}/logback.xml");
                identityStoreJsl(testResourcesSrc, cfg);
                
                zip(appRoot, appRoot, "${target}/templates/eclipse/impl.${appName}.zip");
            }
        };
        generateAllAppsContainers(config, target, allAppsContainersElements);
    }
    
    // dispatch basis
    generateServer(Configuration config, Server server, Path appRoot, Boolean noDeps, setOf(String) assemblies, setOf(String) artifacts) = {
        if (isDefined(server.artifact) and server.artifact.length() > 0) {
            artifacts.add(server.artifact);
        }
    }
    
    generateServer(Configuration config, PythonServer server, Path appRoot, Boolean noDeps, setOf(String) assemblies, setOf(String) artifacts) = {
        IIPEcosphere cfg = config; // from global
        String serverFolderName = toFolderName(server.id);
        Path javaSrc = "${appRoot}/src/main/java";
        Path javaServerSrc = "${javaSrc}/${toPath(javaServerPackage)}";
        String clsName = asTypeName(server.id);
        Path assemblySrc = "${appRoot}/${assemblyRel}";
        
        vilTemplateProcessor("JavaServer", config, "${javaServerSrc}/${clsName}Server.java", server=server, pkg=javaServerPackage);
        //vilTemplateProcessor("PythonServer", config, "${appRoot}/src/main/python/services/${clsName}Server.py", server=server, pkg="services");
        vilTemplateProcessor("PythonServerInterface", config, "${appRoot}/src/main/python/interfaces/${clsName}ServerInterface.py", server=server, pkg="interfaces");
        if (not(noDeps)) {
            /*if (cfg.sharedInterfaces) {
                bins.add(cfg.sharedArtifact+"|python|${mvnProjectPySrcDir}|python.zip|zip|unpack");
                bins.add(tmp[0]+":"+tmp[1]+":"+tmp[2]+"|python|${mvnProjectPySrcDir}|python.zip|zip|unpack");
            }*/
            if (isDefined(server.artifact) and server.artifact.length() > 0) {
                artifacts.add(server.artifact);
                sequenceOf(String) tmp = server.artifact.split(":");
                String artifact = tmp[0]+":"+tmp[1]+":zip:python:"+tmp[2];
                vilTemplateProcessor("PythonAssembly", config, "${assemblySrc}/python_${serverFolderName}.xml", withServices=true, dependency=artifact);
                assemblies.add("python_${serverFolderName}|${assemblyRel}/python_${serverFolderName}.xml|prepare-package|${mvnProjectBuildDir}/classes|python_${serverFolderName}");
            }
        }
    }

    // dispatch basis
    generateServerInterface(Configuration config, Server server, Path appRoot) = {
    }
    
    generateServerInterface(Configuration config, PythonServer server, Path appRoot) = {
    	String clsName = asTypeName(server.id);
	    vilTemplateProcessor("PythonServerInterface", config, "${appRoot}/src/main/python/interfaces/${clsName}ServerInterface.py", server=server, pkg="interfaces");	
    }
    
    /*
    * Collects all IVML types of services used in all applications and stores them globally to usedServiceTypes.
    * usedServiceTypes.includes(PythonService) tells you whether the application employs Python services.
    */    
    initUsedServiceTypes(setOf(Application) applications) = {
        for (Application a: applications) {
            for (ServiceMesh n : a.services) {
                mapOf(MeshElement, setOf(MeshConnector)) mappedMesh = {};
                setOf(MeshElement) nodes = n.sources->closure(MeshElement e|nextMeshNodes(e, mappedMesh));
                for (MeshElement elt: nodes) {
                    initUsedServiceType(elt.impl);
                }        
            }
        }
    }
    
    // dispatch basis, default
    initUsedServiceType(ServiceBase service) = {
        initUsedServiceTypeImpl(service);
    }

    initUsedServiceTypeImpl(ServiceBase service) = {
        String name = service.getType(); // converts to strings, VIL/VTL types are not hash-compatible 
        usedServiceTypes.add(name);
        if (service.isKindOf(JavaService)) { // keep basic types
            usedServiceTypes.add("JavaService");
        } else if (service.isKindOf(PythonService)) { // keep basic types
            usedServiceTypes.add("PythonService");
        }
    }

    initUsedServiceType(ServiceFamily family) = {
        initUsedServiceTypeImpl(family);
        for (Service m: family.members) {
            initUsedServiceType(m); // recurse
        }
    }

    // ------------------------------------------ generating apps: generating template code -----------------------------------
    
    generateTemplateElements(Path appRoot, Configuration config, MeshElement no, ServiceBase service, setOf(String) assemblies, setOf(String) javaTests) = {
    }

    generateTemplateElements(Path appRoot, Configuration config, MeshElement no, CompleteService service, setOf(String) assemblies, setOf(String) javaTests) = {
        // do nothing, everything is here already generically in place
    }

    generateTemplateElements(Path appRoot, Configuration config, Server server, setOf(String) assemblies) = {
        // do nothing, everything is here already generically in place
    }
    
    generateTemplateElements(Path appRoot, Configuration config, PythonServer server, setOf(String) assemblies) = {
        // do nothing, everything is here already generically in place
    }

    generateTemplateElements(Path appRoot, Configuration config, MeshElement no, JavaService service, setOf(String) assemblies, setOf(String) javaTests) = {
        if (service.class <> "") {
            String clsName = asTypeName(service.name);
            JavaPath jp = service.class;
            Path p = appRoot + "/src/main/java/" + jp.getPathSegments().toPath();
            p.mkdir();
            vilTemplateProcessor("JavaMeshElementTemplate", config, "${p}/${jp.getName()}.java", elt=no, pkg=jp.getPathSegments(), name=jp.getName());
            if (needsDataUnitJson(service)) {
                Path testResourcesSrc = "${appRoot}/src/test/resources";
                vilTemplateProcessor("TemplatesTestDataJson", config, "${testResourcesSrc}/testData-${clsName}.json.tmpl", elt=no);
            }
            p = appRoot + "/src/test/java/" + jp.getPathSegments().toPath();
            vilTemplateProcessor("JavaServiceTestTemplate", config, "${p}/${jp.getName()}Test.java", service=service, pkg=jp.getPathSegments());
            javaTests.add(service.class + "Test");
        }
    }

    generateTemplateElements(Path appRoot, Configuration config, MeshElement no, PythonService service, setOf(String) assemblies, setOf(String) javaTests) = {
        String clsName = asTypeName(service.name);
        vilTemplateProcessor("PythonMeshElementTemplate", config, "${appRoot}/src/main/python/services/${clsName}.py", elt=no, pkg="services", service=service);
        Path assemblyPath = "${appRoot}/src/main/assembly";
        assemblyPath.mkdir();
        vilTemplateProcessor("PythonAssemblyTemplate", config, "${assemblyPath}/python.xml");
        assemblies.add("python|${mvnProjectBaseDir}/${assemblyRel}/python.xml|package|${mvnProjectBuildDir}/classes|");
        if (needsDataUnitJson(service)) {
            Path testResourcesSrc = "${appRoot}/src/test/resources";
            vilTemplateProcessor("TemplatesTestDataJson", config, "${testResourcesSrc}/testData-${clsName}.json.tmpl", elt=no);
        }
        //Path p = appRoot + "/src/test/python/";
        vilTemplateProcessor("PythonTestTemplate", config, "${appRoot}/src/test/python/${clsName}Test.py", pythonElements=service);
        //javaTests.add(service.class + "Test");
    }
    
    generateTemplateElements(Path appRoot, Configuration config, MeshElement no, ServiceFamily family, setOf(String) assemblies, setOf(String) javaTests) = {
        for (Service m: family.members) {
            generateTemplateElements(appRoot, config, no, m, assemblies, javaTests);
        }
    }
    
    // ------------------------------------------ generating apps: generating service-specific code artifacts -----------------------------------
    
    // dispatch basis
    generateServiceElements(Path appRoot, Configuration config, setOf(String) artifacts, MeshElement no, ServiceBase service) = {
        generateJavaServiceElements(appRoot, config, artifacts, no, service);
    }
    
    generateJavaServiceElements(Path appRoot, Configuration config, setOf(String) artifacts, MeshElement no, ServiceBase service) = {
        IIPEcosphere cfg = config;
        String clsName = asTypeName(no.name);
        Path javaSrc = "${appRoot}/src/main/java";
        Path javaInterfacesSrc = "${javaSrc}/${toPath(javaInterfacesPackage)}";
        Path javaStubsSrc = "${javaSrc}/${toPath(javaStubsPackage)}";
        if (not(cfg.sharedInterfaces)) {
            vilTemplateProcessor("JavaMeshElementInterface", config, "${javaInterfacesSrc}/${clsName}Service.java", elt=no, 
                pkg=javaInterfacesPackage);
            //vilTemplateProcessor("JavaMeshElementStub", config, "${javaStubsSrc}/${clsName}Stub.java", elt=no, 
            //    pkg=javaStubsPackage);
        } /*else {
            vilTemplateProcessor("JavaServiceStub", config, "${javaStubsSrc}/${clsName}Stub.java", service=service, 
                pkg=javaStubsPackage);
        }*/
    }
    
    generateServiceElements(Path appRoot, Configuration config, setOf(String) artifacts, MeshElement no, CompleteService service) = {
        // do nothing, everything is here already generically in place
    }
    
    // Python (preliminary in here)
    generateServiceElements(Path appRoot, Configuration config, setOf(String) artifacts, MeshElement no, PythonService service) = {
        IIPEcosphere cfg = config;
        String clsName = asTypeName(no.name);
        Path pySrc = "${appRoot}/src/main/python";
        Path pyInterfacesSrc = "${pySrc}/interfaces"; // default name of ServiceEnvironment.py
        if (not(cfg.sharedInterfaces)) {
            vilTemplateProcessor("PythonMeshElementInterface", config, "${pyInterfacesSrc}/${clsName}Interface.py", 
                elt=no, pkg="interfaces");
        }
    }

    generateServiceElements(Path appRoot, Configuration config, setOf(String) artifacts, MeshElement no, Connector conn) = {
        //generateJavaServiceElements(appRoot, config, artifacts, no, conn);
    }

    generateServiceElements(Path appRoot, Configuration config, setOf(String) artifacts, MeshElement no, ChannelConnector conn) = {
        //generateJavaServiceElements(appRoot, config, artifacts, no, conn);
        IIPEcosphere cfg = config;
        Path javaSrc = "${appRoot}/src/main/java";
        Path javaNodesSrc = "${javaSrc}/${toPath(javaNodesPackage)}";
        IOTypeWithPath machineInIf = conn.inInterface;
        IOTypeWithPath machineOutIf = conn.outInterface;
        DataType platfIn = firstType(conn.output);
        DataType platfOut = firstType(conn.input);
        Boolean sharedIf = cfg.sharedInterfaces;
        String connName = asTypeName(conn.name);
        
        if (isConfigured(conn.machineParser) and conn.machineParser <> null) {
            String parserName = connName + "ParserSerializer";
            vilTemplateProcessor("JavaConnectorSerializer", config, "${javaNodesSrc}/${parserName}.java", imType=machineOutIf.type,
                path=getPath(machineOutIf), pltfType=platfIn, pkg=javaNodesPackage, typePkg=javaDatatypesPackage, 
                sharedInterfaces=sharedIf, impl=false, formatter=null, parser=conn.machineParser, className=parserName, 
                assng=conn.operations);
            determineArtifacts(artifacts, conn.machineParser);
        }

        if (isConfigured(conn.machineFormatter) and conn.machineFormatter <> null) {
            String formatterName = connName + "FormatterSerializer";
            vilTemplateProcessor("JavaConnectorSerializer", config, "${javaNodesSrc}/${formatterName}.java", imType=machineInIf.type,
                path=getPath(machineInIf), pltfType=platfOut, pkg=javaNodesPackage, typePkg=javaDatatypesPackage, 
                sharedInterfaces=sharedIf, impl=false, formatter=conn.machineFormatter, parser=null, className=formatterName, 
                assng=conn.operations);
            determineArtifacts(artifacts, conn.machineFormatter);
        }
    }
    
    determineArtifacts(setOf(String) artifacts, MachineFormatter formatter) = {
    }

    determineArtifacts(setOf(String) artifacts, JavaMachineFormatter formatter) = {
        if (isDefined(formatter.artifact) and formatter.artifact.length() > 0) {
            artifacts.add(formatter.artifact);
        }
    }

    determineArtifacts(setOf(String) artifacts, MachineParser parser) = {
    }

    determineArtifacts(setOf(String) artifacts, JavaMachineParser parser) = {
        if (isDefined(parser.artifact) and parser.artifact.length() > 0) {
            artifacts.add(parser.artifact);
        }
    }
    
    // ------------------------------------------ generating apps: generating app-specific containers --------------------------------------------

    String getArtifactsFolder(Path appRoot, IIPEcosphere config) = {
        String artifactsFolder = config.artifactsFolder;
        if (artifactsFolder == config.artifactsFolderDflt) { // default is in appRoot
            artifactsFolder = "${appRoot}/../${artifactsFolder}";
        }
        artifactsFolder;
    }

    generateDeploymentPlans(Path appRoot, IIPEcosphere config, Application a, sequenceOf(MeshElement) elements, String artifact) = {
        String artifactsFolder = getArtifactsFolder(appRoot, config);
        setOf(DeploymentPlan) plans = DeploymentPlan.allInstances();
        for (DeploymentPlan p: plans) {
            String fileName = toIdentifier(a.id + "_" + p.id);
            vilTemplateProcessor("DeploymentPlan", config, "${artifactsFolder}/${fileName}.yml", plan=p, app=a, artifact=artifact);
        }
    }
    
    // creates containers depending on container strategies
    setOf(EcsDevice) ecsDeviceGenerated = {};
    Integer jarsCollecting = 0;
    Integer brokerCollecting = 0;
    String generateServiceContainer(Path appRoot, IIPEcosphere config, Application a, sequenceOf(MeshElement) elements) = {
        String appImageId = "";
        String artifactsFolder = getArtifactsFolder(appRoot, config);
        Integer baseImageCreated = 0; // 0 - Not base images, 1 - All dependencies base image, 2 - All and commen dependencies base images 
        Boolean baseImageMethod = getContainerBaseImageMethodSafe(config.containerBaseImageMethod); 
        Boolean newChangeOnContainerFiles = false;
        Boolean newChangeJarFiles = false;
        String dfName;

        ContainerManager mgr = config.containerManager;
        if (a.createContainer and getContainerGenerationSafe(config.containerGeneration)) {
            String regUser = getProperty("iip.container.user." + mgr.authenticationKey, "");
            String regPwd = getProperty("iip.container.password." + mgr.authenticationKey, "");
            Boolean authenticate = regUser <> "" and regPwd <> "";
            if (authenticate) {
                loginContainerRegistry(mgr, regUser, regPwd);
            }
            
            // Checking if there is any PythonService in app
            Integer isPythonService = 0;        // 0 - false, 1 - true, -1 below ECS only (containerType == C1Ecs_C2Svc_App)
            for (MeshElement elem : elements) {
                Service service = elem.impl;
                if (service.isTypeOf(PythonService)) {
                    isPythonService = 1;
                }
            }

            String appName = a.name.toIdentifier();
            setOf(EcsDevice) devices = EcsDevice.allInstances();

            setOf(Dependency) dependencies = {};
            Boolean isContainerForOneApp = false;
            for (EcsDevice device : devices->sortedBy(d|d.id)) {
                setOf(Dependency) deviceDependencies = device.provides -> selectByType(PythonDependency);
                ContainerType cntType = device.containerType;
                for (PythonDependency dependency : deviceDependencies) {
                    dependencies.add(dependency);
                }

                if (not(isAllAppsContainer(cntType))){
                    isContainerForOneApp = true;
                }
            }

            if ((isContainerForOneApp) and (baseImageMethod)){
                Boolean justCommenDep = true;
                newChangeOnContainerFiles = false;
                Path deviceBaseDf = "${artifactsFolder}/DeviceDockerfiles/${appName}/DeviceDockerfile_CommenDepBase";

                if (isPythonService == 1) {
                    Path req = "${appRoot}/../requirements.txt";
                    // TODO #130 consider server dependencies here
                    vilTemplateProcessor("PythonBaseReq", config, req, elements=elements, dependencies=dependencies, justCommenDep=justCommenDep);
                    Path lastReq = "${deviceBaseDf}/requirements.txt";
                    if (not(sameMd5HashFiles(req, lastReq))){
                        copy(req, deviceBaseDf);
                        newChangeOnContainerFiles = true;
                    }
                    
                }

                Path instDep = "${appRoot}/../installedDependencies.yml";
                vilTemplateProcessor("InstalledDependencies", config, instDep, elements=elements, isPython=isPythonService);
                Path lastInstDep = "${deviceBaseDf}/installedDependencies.yml";
                if (not(sameMd5HashFiles(instDep, lastInstDep))){
                    copy(instDep, deviceBaseDf);
                    newChangeOnContainerFiles = true;
                }
            
                Path devicesPath = getResourcesFolder() + "/devices";
                Path devicesGenPath = "${appRoot}/../resources/devices";
                copy(devicesPath, devicesGenPath);
                Path lastDevicesPath = "${deviceBaseDf}/resources/devices";
                if (not(sameMd5HashFolders(devicesPath, lastDevicesPath))){
                    copy(devicesPath, lastDevicesPath);
                    newChangeOnContainerFiles = true;
                }
                
                Path identityStorePath = getResourcesFolder() + "/platform/identityStore.yml";
                if (not(identityStorePath.exists())) {
                    identityStorePath = getResourcesFolder() + "/software/identityStore.yml";
                }
                Path identityStoreGenPath = "${appRoot}/../resources";
                copy(identityStorePath, identityStoreGenPath);
                Path lastIdentityStoreFilePath = "${deviceBaseDf}/resources/identityStore.yml";
                if (not(sameMd5HashFiles(identityStorePath, lastIdentityStoreFilePath))){
                    Path lastIdentityStorePath = "${deviceBaseDf}/resources";
                    copy(identityStorePath, lastIdentityStorePath);
                    newChangeOnContainerFiles = true;
                }
                
                dfName = createContainerBuildBaseScript(mgr, a, elements, appRoot, isPythonService, justCommenDep);

                // Create image 
                Path b = "${appRoot}/../";
                Path d = "${appRoot}/../" + dfName;
                Path lastDockerfile = "${deviceBaseDf}/${dfName}";
                if (not(sameMd5HashFiles(d, lastDockerfile))){
                    copy(d, deviceBaseDf);
                    newChangeOnContainerFiles = true;
                }
                
                if (newChangeOnContainerFiles) {
                    appImageId = createContainerImage(mgr, b, d, appName, "appCommenDepBaseImage", "0.1.0");
                }

                justCommenDep = false;
                if (isPythonService == 1) {
                    Path req = "${appRoot}/../requirements.txt";
                    // TODO #130 consider server dependencies here
                    vilTemplateProcessor("PythonBaseReq", config, req, elements=elements, dependencies=dependencies, justCommenDep=justCommenDep);
                }

                Path commenDepRequirements = "${deviceBaseDf}/requirements.txt";
                Path allDepRequirements = "${appRoot}/../requirements.txt";
                Boolean checkDepRequirements = checkFilesEquality(allDepRequirements, commenDepRequirements);
                baseImageCreated = 1;

                if (not(checkDepRequirements)){
                    newChangeOnContainerFiles = false;
                    deviceBaseDf = "${artifactsFolder}/DeviceDockerfiles/${appName}/DeviceDockerfile_AllDepBase";
                    dfName = createContainerBuildBaseScript(mgr, a, elements, appRoot, isPythonService, justCommenDep);
                    Path lastAllDepRequirements = "${deviceBaseDf}/requirements.txt";
                    if (not(sameMd5HashFiles(allDepRequirements, lastAllDepRequirements))){
                        copy(allDepRequirements, deviceBaseDf);
                        newChangeOnContainerFiles = true;
                    }
                    
                    Path b = "${appRoot}/../";
                    Path d = "${appRoot}/../" + dfName;
                    Path lastDockerfile = "${deviceBaseDf}/${dfName}";
                    if (not(sameMd5HashFiles(d, lastDockerfile))){
                        copy(d, deviceBaseDf);
                        newChangeOnContainerFiles = true;
                    }
                    
                    if (newChangeOnContainerFiles) {
                        appImageId = createContainerImage(mgr, b, d, appName, "appAllDepBaseImage", "0.1.0");
                    }
                    
                    baseImageCreated = 2;
                }
            }

            for (EcsDevice device : devices->sortedBy(d|d.id)) {
                ContainerType cntType = device.containerType;
                String deviceName = getContainerNameDflt(device).toIdentifier();
                String filePrefix = "${appName}_${deviceName}_";
                Path deviceDf = "${artifactsFolder}/DeviceDockerfiles/${appName}/DeviceDockerfile_${deviceName}";

                if (not(isAllAppsContainer(cntType))) {

                    setOf(Dependency) deviceDependencies = device.provides -> selectByType(PythonDependency);
                    String dfName;

                    if (jarsCollecting < device.size()) {
                        String deviceSpec = device.containerName;
                        String tmpFolderName = "";
                        if (deviceSpec.length() > 0) {
                            deviceSpec = "-" + deviceSpec;
                        } 
                        if (deviceSpec.length() == 0) {
                            tmpFolderName = "-dflt";
                        }
				    
                        setOf(String) srcJarsPaths = {"ecsRuntime", "serviceMgr", "ecsServiceMgr", "ecsJars", "ecsSvcJars", "svcJars"};
				        
                        for (String srcJarsPath : srcJarsPaths) {
                            Path newDevicePath = "";
                            Path lastDevicePath = "";
                            
                            if (srcJarsPath.endsWith("Jars")) {
                                Path deviceSourcesDf = "${artifactsFolder}/DeviceDockerfiles/Jars/DeviceDockerfile_${deviceName}";
                                newDevicePath= "${appRoot}/../${srcJarsPath}${deviceSpec}";
                                lastDevicePath = "${deviceSourcesDf}/${srcJarsPath}${deviceSpec}";
                                if (newDevicePath.exists()) {
                                    if (not(sameMd5HashJarsFolders(newDevicePath, lastDevicePath))){
                                        newDevicePath.rename("${srcJarsPath}${deviceSpec}${tmpFolderName}");
                                        copy(newDevicePath, lastDevicePath);
                                        newDevicePath.rename("${srcJarsPath}${deviceSpec}");
                                        newChangeJarFiles = true;
                                    }
                                }
                            } else {
                                Path deviceSourcesDf = "${artifactsFolder}/DeviceDockerfiles/sources/DeviceDockerfile_${deviceName}";
                                newDevicePath= "${appRoot}/../${srcJarsPath}${deviceSpec}/src";
                                lastDevicePath = "${deviceSourcesDf}/${srcJarsPath}${deviceSpec}/src";     
                                
                                if (newDevicePath.exists()) {
                                    if (not(sameMd5HashFolders(newDevicePath, lastDevicePath))){
                                        copy(newDevicePath, lastDevicePath);
                                        if ((cntType == ContainerType::EcsSvc_App) and (srcJarsPath == "ecsServiceMgr")) {
                                            newChangeJarFiles = true;
                                        } else if ((cntType == ContainerType::Ecs_Svc_App) and ((srcJarsPath == "ecsRuntime") or (srcJarsPath == "serviceMgr"))) {
                                            newChangeJarFiles = true;
                                        } else if ((cntType == ContainerType::C1Ecs_C2Svc_App) and ((srcJarsPath == "ecsRuntime") or (srcJarsPath == "serviceMgr"))) {
                                            newChangeJarFiles = true;
                                        }
                                    }

                                    Path pomFileDf = "${deviceSourcesDf}/${srcJarsPath}${deviceSpec}/";
                                    Path pomFile = "${appRoot}/../${srcJarsPath}${deviceSpec}/pom.xml";
                                    Path lastPomFile = "${pomFileDf}/pom.xml";
                                    if (not(sameMd5HashFiles(pomFile, lastPomFile))){
                                        copy(pomFile, pomFileDf);
                                        newChangeJarFiles = true;
                                    }
                                }
                            }
				        }
                        
                        jarsCollecting = jarsCollecting + 1;
                    }
				    
                    if (brokerCollecting == 0) {
                        Path brokerDf = "${artifactsFolder}/DeviceDockerfiles/broker/src";
                        Path brokerPath = "${appRoot}/../broker/src";
                        if (not(sameMd5HashFolders(brokerPath, brokerDf))){
                            copy(brokerPath, brokerDf);
                            newChangeJarFiles = true;
                        }

						setOf(String) brokerFiles = {"broker.bat", "broker.sh", "iip-broker.service", "pom.xml"};

						for (String brokerFile : brokerFiles) {
                            Path brokerFilesDf = "${artifactsFolder}/DeviceDockerfiles/broker/";
                            Path newBrokerFile = "${appRoot}/../broker/${brokerFile}";
                            Path lastBrokerFile = "${brokerFilesDf}/${brokerFile}";
                            if (not(sameMd5HashFiles(newBrokerFile, lastBrokerFile))){
                                copy(newBrokerFile, brokerFilesDf);
                                newChangeJarFiles = true;
                            }
                        }

                        Path lastBrokerJars = "${artifactsFolder}/DeviceDockerfiles/broker/brokerJars";
                        Path newBrokerJars = "${target}/broker/brokerJars";
                        if (not(sameMd5HashJarsFolders(newBrokerJars, lastBrokerJars))){
                            copy(newBrokerJars, lastBrokerJars);
                            newChangeJarFiles = true;
                        }
                        
                        brokerCollecting = brokerCollecting + 1;
                    }

                    newChangeOnContainerFiles = false;
                    if (baseImageCreated <> 0){
                        if (deviceDependencies.size() > 0) {
                            if (isPythonService == 1) {
                                Path req = "${appRoot}/../requirements.txt";
                                // TODO #130 consider server dependencies here
                                vilTemplateProcessor("PythonReq", config, req, elements=elements, device=device);
                                Path lastReq = "${deviceDf}/requirements.txt";
                                if (not(sameMd5HashFiles(req, lastReq))){
                                    copy(req, deviceDf);
                                    newChangeOnContainerFiles = true;
                                }
                            }
                        }

                        dfName = createContainerBuildScript(mgr, a, elements, appRoot, cntType, isPythonService, device, baseImageCreated);
                    } else {
                        if (isPythonService == 1) {
                            Path req = "${appRoot}/../requirements.txt";
                            // TODO #130 consider server dependencies here
                            vilTemplateProcessor("PythonReq", config, req, elements=elements, device=device);
                            Path lastReq = "${deviceDf}/requirements.txt";
                            if (not(sameMd5HashFiles(req, lastReq))){
                                copy(req, deviceDf);
                                newChangeOnContainerFiles = true;
                            }
                        }

                        Path instDep = "${appRoot}/../installedDependencies.yml";
                        vilTemplateProcessor("InstalledDependencies", config, instDep, elements=elements, isPython=isPythonService, baseImageExist=baseImageCreated);
                        Path lastInstDep = "${deviceDf}/installedDependencies.yml";
                        if (not(sameMd5HashFiles(instDep, lastInstDep))){
                            copy(instDep, deviceDf);
                            newChangeOnContainerFiles = true;
                        }
                
                        Path devicesPath = getResourcesFolder() + "/devices";
                        Path devicesGenPath = "${appRoot}/../resources/devices";
                        copy(devicesPath, devicesGenPath);
                        Path lastDevicesPath = "${deviceDf}/resources/devices";
                        if (not(sameMd5HashFolders(devicesPath, lastDevicesPath))){
                            copy(devicesPath, lastDevicesPath);
                            newChangeOnContainerFiles = true;
                        }

                        Path identityStorePath = getResourcesFolder() + "/platform/identityStore.yml";
                        if (not(identityStorePath.exists())) {
                            identityStorePath = getResourcesFolder() + "/software/identityStore.yml";
                        }
                        Path identityStoreGenPath = "${appRoot}/../resources";
                        copy(identityStorePath, identityStoreGenPath);
                        Path lastIdentityStoreFilePath = "${deviceDf}/resources/identityStore.yml";
                        if (not(sameMd5HashFiles(identityStorePath, lastIdentityStoreFilePath))){
                            Path lastIdentityStorePath = "${deviceDf}/resources";
                            copy(identityStorePath, lastIdentityStorePath);
                            newChangeOnContainerFiles = true;
                        }

                        dfName = createContainerBuildScript(mgr, a, elements, appRoot, cntType, isPythonService, device, baseImageCreated);
                    }

                    // Wrapper-Skript 
                    Path ws = "${appRoot}/../wrapper_script.sh";
                    vilTemplateProcessor("WrapperScript", config, ws, containerType=cntType); 
                    Path lastWs = "${deviceDf}/wrapper_script.sh";
                    if (not(sameMd5HashFiles(ws, lastWs))){
                        copy(ws, deviceDf);
                        newChangeOnContainerFiles = true;
                    }
                      
                    // Create image 
                    Path b = "${appRoot}/../";
                    Path d = "${appRoot}/../" + dfName;
                    Path lastDockerfile = "${deviceDf}/${dfName}";
                    if (not(sameMd5HashFiles(d, lastDockerfile))){
                        copy(d, deviceDf);
                        newChangeOnContainerFiles = true;
                    }
                  
                    if ((newChangeOnContainerFiles) or (newChangeJarFiles)) {
                        appImageId = createContainerImage(mgr, b, d, a.name.toIdentifier(), deviceName, a.ver);
                    }
                      
                    // Mesh-Info, Container-Descriptor
                    Path meshInfo = "${artifactsFolder}/${filePrefix}mesh-info.yml";
                    vilTemplateProcessor("MeshInfo", config, meshInfo, app=a, containerType=cntType, device=device);
                
                    if (cntType == ContainerType::C1Ecs_C2Svc_App) {
                        // Container with ECS
                        Integer isEcs = 0;        // Is a "Ecs" image already generated?: 0 - false, 1 - true
                        for (EcsDevice generatedDevice : ecsDeviceGenerated->sortedBy(d|d.id)) {
                            if (device.id == generatedDevice.id) {
                                isEcs = 1;
                            }
                        }
                        if (isEcs == 0) {
                            String ecsDfName = createContainerBuildScript(mgr, a, elements, appRoot, cntType, -1, device, baseImageCreated);
                            newChangeOnContainerFiles = false;
                            
                            Path ecs_ws = "${appRoot}/../ecs.wrapper_script.sh";
                            vilTemplateProcessor("WrapperScript", config, ecs_ws, containerType=ContainerType::Ecs);
                            Path lastEcs_Ws = "${deviceDf}/wrapper_script.sh";
                            if (not(sameMd5HashFiles(ecs_ws, lastEcs_Ws))){
                                copy(ecs_ws, deviceDf);
                                newChangeOnContainerFiles = true;
                            }                            
                     
                            Path ecsB = "${appRoot}/../";
                            Path ecsD = "${appRoot}/../" + ecsDfName;
                            Path lastDockerEcsfile = "${deviceDf}/${ecsDfName}";
                            if (not(sameMd5HashFiles(ecsD, lastDockerEcsfile))){
                                copy(ecsD, deviceDf);
                                newChangeOnContainerFiles = true;
                            }
                            
                            if ((newChangeOnContainerFiles) or (newChangeJarFiles)) {
                                String ecs_imageId = createContainerImage(mgr, ecsB, ecsD, a.name.toIdentifier(), "ecs", a.ver);
                            }
                            
                            // Mesh-Info, Container-Descriptor
                            Path meshInfoEcs = "${artifactsFolder}/${filePrefix}mesh-info-ecs.yml";
                            vilTemplateProcessor("MeshInfo", config, meshInfoEcs, app=a, containerType=ContainerType::Ecs, device=device);

                            isEcs = isEcs + 1;
                            ecsDeviceGenerated.add(device);               
                        } 
                    
                    }

                }
            }
            if (authenticate) {
                logoutContainerRegistry(mgr);
            }
        }
        appImageId;
    }

    generateAllAppsContainers(IIPEcosphere config, Project target, sequenceOf(MeshElement) allElements) = {
        String artifactsFolder = getArtifactsFolder(target.getPath(), config);
        ContainerManager mgr = config.containerManager;
        setOf(EcsDevice) devices = EcsDevice.allInstances();
        int count = 1;
        String dfName;
        Integer baseImageCreated = 0; // 0 - Not base images, 1 - All dependencies base image, 2 - All and commen dependencies base images 
        Boolean baseImageMethod = getContainerBaseImageMethodSafe(config.containerBaseImageMethod);
        Boolean newChangeOnContainerFiles = false;
        Boolean newChangeJarFiles = false;
        
        if (allElements.size() > 1 and getContainerGenerationSafe(config.containerGeneration)) {

            // Checking if there is any PythonService in app
            Integer isPythonService = 0;        // 0 - false, 1 - true, -1 below ECS only (containerType == C1Ecs_C2Svc_App)
            for (MeshElement elem : allElements) {
                Service service = elem.impl;
                if (service.isTypeOf(PythonService)) {
                    isPythonService = 1;
                }
            }

            setOf(Application) applications = getApplications();

            setOf(Dependency) dependencies = {};
            Boolean isContainerForAllApps = false;
            for (EcsDevice device : devices->sortedBy(d|d.id)) {
                setOf(Dependency) deviceDependencies = device.provides -> selectByType(PythonDependency);
                ContainerType cntType = device.containerType;
                for (PythonDependency dependency : deviceDependencies) {
                    dependencies.add(dependency);
                }

                if (isAllAppsContainer(cntType)){
                    isContainerForAllApps = true;
                }
            }

            if ((isContainerForAllApps) and (baseImageMethod)){
                String appImageId;
                Boolean justCommenDep = true;
                String appName = "allApps";
                Path deviceBaseDf = "${artifactsFolder}/DeviceDockerfiles/${appName}/DeviceDockerfile_CommenDepBase";

                if (isPythonService == 1) {
                    Path req = "${target}/requirements.txt";
                    // TODO #130 consider server dependencies here
                    vilTemplateProcessor("PythonBaseReq", config, req, elements=allElements, dependencies=dependencies, justCommenDep=justCommenDep);
                    Path lastReq = "${deviceBaseDf}/requirements.txt";
                    if (not(sameMd5HashFiles(req, lastReq))){
                        copy(req, deviceBaseDf);
                        newChangeOnContainerFiles = true;
                    }
                }

                Path instDep = "${target}/installedDependencies.yml";
                vilTemplateProcessor("InstalledDependencies", config, instDep, elements=allElements, isPython=isPythonService);
                Path lastInstDep = "${deviceBaseDf}/installedDependencies.yml";
                if (not(sameMd5HashFiles(instDep, lastInstDep))){
                    copy(instDep, deviceBaseDf);
                    newChangeOnContainerFiles = true;
                }
            
                Path devicesPath = getResourcesFolder() + "/devices";
                Path devicesGenPath = "${target}/resources/devices";
                copy(devicesPath, devicesGenPath);
                Path lastDevicesPath = "${deviceBaseDf}/resources/devices";
                if (not(sameMd5HashFolders(devicesPath, lastDevicesPath))){
                    copy(devicesPath, lastDevicesPath);
                    newChangeOnContainerFiles = true;
                }

                Path identityStorePath = getResourcesFolder() + "/platform/identityStore.yml";
                if (not(identityStorePath.exists())) {
                    identityStorePath = getResourcesFolder() + "/software/identityStore.yml";
                }
                Path identityStoreGenPath = "${target}/resources";
                copy(identityStorePath, identityStoreGenPath);
                Path lastIdentityStoreFilePath = "${deviceBaseDf}/resources/identityStore.yml";
                if (not(sameMd5HashFiles(identityStorePath, lastIdentityStoreFilePath))){
                    Path lastIdentityStorePath = "${deviceBaseDf}/resources";
                    copy(identityStorePath, lastIdentityStorePath);
                    newChangeOnContainerFiles = true;
                }
                
                dfName = createContainerBuildBaseScriptAllApps(mgr, applications, allElements, target, isPythonService, justCommenDep);

                // Create image 
                Path b = "${target}/";
                Path d = "${target}/" + dfName;
                Path lastDockerfile = "${deviceBaseDf}/${dfName}";
                if (not(sameMd5HashFiles(d, lastDockerfile))){
                    copy(d, deviceBaseDf);
                    newChangeOnContainerFiles = true;
                }

                if (newChangeOnContainerFiles) {
                    appImageId = createContainerImage(mgr, b, d, "allapps", "appCommenDepBaseImage", "0.1.0");
                }
                
                justCommenDep = false;
                if (isPythonService == 1) {
                    Path req = "${target}/requirements.txt";
                    // TODO #130 consider server dependencies here
                    vilTemplateProcessor("PythonBaseReq", config, req, elements=allElements, dependencies=dependencies, justCommenDep=justCommenDep);
                }

                Path commenDepRequirements = "${deviceBaseDf}/requirements.txt";
                Path allDepRequirements = "${target}/requirements.txt";
                Boolean checkDepRequirements = checkFilesEquality(allDepRequirements, commenDepRequirements);
                baseImageCreated = 1;

                if (not(checkDepRequirements)){
                    deviceBaseDf = "${artifactsFolder}/DeviceDockerfiles/${appName}/DeviceDockerfile_AllDepBase";
                    dfName = createContainerBuildBaseScriptAllApps(mgr, applications, allElements, target, isPythonService, justCommenDep);
                    Path lastAllDepRequirements = "${deviceBaseDf}/requirements.txt";
                    if (not(sameMd5HashFiles(allDepRequirements, lastAllDepRequirements))){
                        copy(allDepRequirements, deviceBaseDf);
                        newChangeOnContainerFiles = true;
                    }
                    
                    Path b = "${target}/";
                    Path d = "${target}/" + dfName;
                    Path lastDockerfile = "${deviceBaseDf}/${dfName}";
                    if (not(sameMd5HashFiles(d, lastDockerfile))){
                        copy(d, deviceBaseDf);
                        newChangeOnContainerFiles = true;
                    }
                    
                    if (newChangeOnContainerFiles) {
                        appImageId = createContainerImage(mgr, b, d, "allapps", "appAllDepBaseImage", "0.1.0");
                    }
                    
                    baseImageCreated = 2;
                }
                
            }

            if (isContainerForAllApps) {
                String appName = "allApps";
                Path brokerDf = "${artifactsFolder}/DeviceDockerfiles/broker/src";
                Path brokerPath = "${target}/broker/src";
                if (not(sameMd5HashFolders(brokerPath, brokerDf))){
                    copy(brokerPath, brokerDf);
                    newChangeJarFiles = true;
                }
                        
                setOf(String) brokerFiles = {"broker.bat", "broker.sh", "iip-broker.service", "pom.xml"};

                for (String brokerFile : brokerFiles) {
                    Path brokerFilesDf = "${artifactsFolder}/DeviceDockerfiles/broker/";
                    Path newBrokerFile = "${target}broker/${brokerFile}";
                    Path lastBrokerFile = "${brokerFilesDf}/${brokerFile}";
                    if (not(sameMd5HashFiles(newBrokerFile, lastBrokerFile))){
                        copy(newBrokerFile, brokerFilesDf);
                        newChangeJarFiles = true;
                    }
                }

                Path lastBrokerJars = "${artifactsFolder}/DeviceDockerfiles/broker/brokerJars";
                Path newBrokerJars = "${target}/broker/brokerJars";
                if (not(sameMd5HashJarsFolders(newBrokerJars, lastBrokerJars))){
                    copy(newBrokerJars, lastBrokerJars);
                    newChangeJarFiles = true;
                }
            }
            
            for (EcsDevice device : devices->sortedBy(d|d.id)) {
                if (!inTesting or (inTesting and count < 2)) { // inTesting, just produce the first one -> CI roundtrip time
                    ContainerType cntType = device.containerType;
                    String deviceName = getContainerNameDflt(device).toIdentifier();
                    String appName = "allApps";
                    String filePrefix = "${appName}_${deviceName}_";
                    Path deviceDf = "${artifactsFolder}/DeviceDockerfiles/${appName}/DeviceDockerfile_${deviceName}";

                    if (isAllAppsContainer(cntType)){
                        String regUser = getProperty("iip.container.user." + mgr.authenticationKey, "");
                        String regPwd = getProperty("iip.container.password." + mgr.authenticationKey, "");
                        Boolean authenticate = regUser <> "" and regPwd <> "";
                        if (authenticate) {
                            loginContainerRegistry(mgr, regUser, regPwd);
                        }
                        
                        setOf(Dependency) deviceDependencies = device.provides -> selectByType(PythonDependency);
						
						String deviceSpec = device.containerName;
                        String tmpFolderName = "";
                        if (deviceSpec.length() > 0) {
                            deviceSpec = "-" + deviceSpec;
                        } 
                        if (deviceSpec.length() == 0) {
                            tmpFolderName = "-dflt";
                        }
                        
                        setOf(String) srcJarsPaths = {"ecsRuntime", "serviceMgr", "ecsServiceMgr", "ecsJars", "ecsSvcJars", "svcJars"};
				        
                        for (String srcJarsPath : srcJarsPaths) {
                            Path newDevicePath = "";
                            Path lastDevicePath = "";
                            
                            if (srcJarsPath.endsWith("Jars")) {
                                Path deviceSourcesDf = "${artifactsFolder}/DeviceDockerfiles/Jars/DeviceDockerfile_${deviceName}";
                                newDevicePath= "${target}/${srcJarsPath}${deviceSpec}";
                                lastDevicePath = "${deviceSourcesDf}/${srcJarsPath}${deviceSpec}";
                                if (newDevicePath.exists()) {
                                    if (not(sameMd5HashJarsFolders(newDevicePath, lastDevicePath))){
                                        newDevicePath.rename("${srcJarsPath}${deviceSpec}${tmpFolderName}");
                                        copy(newDevicePath, lastDevicePath);
                                        newDevicePath.rename("${srcJarsPath}${deviceSpec}");
                                        newChangeJarFiles = true;
                                    }
                                }
                            } else {
                                Path deviceSourcesDf = "${artifactsFolder}/DeviceDockerfiles/sources/DeviceDockerfile_${deviceName}";
                                newDevicePath= "${target}/${srcJarsPath}${deviceSpec}/src";
                                lastDevicePath = "${deviceSourcesDf}/${srcJarsPath}${deviceSpec}/src";     
                                
                                if (newDevicePath.exists()) {
                                    if (not(sameMd5HashFolders(newDevicePath, lastDevicePath))){
                                        copy(newDevicePath, lastDevicePath);
                                        if ((cntType == ContainerType::EcsSvc_App) and (srcJarsPath == "ecsServiceMgr")) {
                                            newChangeJarFiles = true;
                                        } else if ((cntType == ContainerType::Ecs_Svc_App) and ((srcJarsPath == "ecsRuntime") or (srcJarsPath == "serviceMgr"))) {
                                            newChangeJarFiles = true;
                                        } else if ((cntType == ContainerType::C1Ecs_C2Svc_App) and ((srcJarsPath == "ecsRuntime") or (srcJarsPath == "serviceMgr"))) {
                                            newChangeJarFiles = true;
                                        }
                                    }

                                    Path pomFileDf = "${deviceSourcesDf}/${srcJarsPath}${deviceSpec}/";
                                    Path pomFile = "${target}/${srcJarsPath}${deviceSpec}/pom.xml";
                                    Path lastPomFile = "${pomFileDf}/pom.xml";
                                    if (not(sameMd5HashFiles(pomFile, lastPomFile))){
                                        copy(pomFile, pomFileDf);
                                        newChangeJarFiles = true;
                                    }
                                }
                            }						
						}
						
						newChangeOnContainerFiles = false;
                        if (baseImageCreated <> 0){
                            if (deviceDependencies.size() > 0) {
                                if (isPythonService == 1) {
                                    Path req = "${target}/requirements.txt";
                                    // TODO #130 consider server dependencies here
                                    vilTemplateProcessor("PythonReq", config, req, elements=allElements, device=device);
                                    Path lastReq = "${deviceDf}/requirements.txt";
                                    if (not(sameMd5HashFiles(req, lastReq))){
                                        copy(req, deviceDf);
                                        newChangeOnContainerFiles = true;
                                    }
                                }
                            }

                            dfName = createContainerBuildScriptAllApps(mgr, applications, allElements, target, cntType, isPythonService, device, baseImageCreated);
                        } else {

                            if (isPythonService == 1) {
                                Path req = "${target}/requirements.txt";
                                // TODO #130 consider server dependencies here
                                vilTemplateProcessor("PythonReq", config, req, elements=allElements, device=device);
                                Path lastReq = "${deviceDf}/requirements.txt";
                                if (not(sameMd5HashFiles(req, lastReq))){
                                    copy(req, deviceDf);
                                    newChangeOnContainerFiles = true;
                                }
                            }
        
                            Path instDep = "${target}/installedDependencies.yml";
                            vilTemplateProcessor("InstalledDependencies", config, instDep, elements=allElements, isPython=isPythonService);
                            Path lastInstDep = "${deviceDf}/installedDependencies.yml";
                            if (not(sameMd5HashFiles(instDep, lastInstDep))){
                                copy(instDep, deviceDf);
                                newChangeOnContainerFiles = true;
                            }

                            Path devicesPath = getResourcesFolder() + "/devices";
                            Path devicesGenPath = "${target}/resources/devices";
                            copy(devicesPath, devicesGenPath);
                            Path lastDevicesPath = "${deviceDf}/resources/devices";
                            if (not(sameMd5HashFolders(devicesPath, lastDevicesPath))){
                                copy(devicesPath, lastDevicesPath);
                                newChangeOnContainerFiles = true;
                            }                            
	                    
                            Path identityStorePath = getResourcesFolder() + "/platform/identityStore.yml";
                            if (not(identityStorePath.exists())) {
                                identityStorePath = getResourcesFolder() + "/software/identityStore.yml";
                            }
                            Path identityStoreGenPath = "${target}/resources";
                            copy(identityStorePath, identityStoreGenPath);
                            Path lastIdentityStoreFilePath = "${deviceDf}/resources/identityStore.yml";
                            if (not(sameMd5HashFiles(identityStorePath, lastIdentityStoreFilePath))){
                                Path lastIdentityStorePath = "${deviceDf}/resources";
                                copy(identityStorePath, lastIdentityStorePath);
                                newChangeOnContainerFiles = true;
                            }

                            dfName = createContainerBuildScriptAllApps(mgr, applications, allElements, target, cntType, isPythonService, device, baseImageCreated);
                        }

                        // Wrapper-Skript 
                        Path ws = "${target}/wrapper_script.sh";
                        vilTemplateProcessor("WrapperScript", config, ws, containerType=cntType); 
                        Path lastWs = "${deviceDf}/wrapper_script.sh";
                        if (not(sameMd5HashFiles(ws, lastWs))){
                            copy(ws, deviceDf);
                            newChangeOnContainerFiles = true;
                        }
                        
                        // Create image 
                        Path b = "${target}/";
                        Path d = "${target}/" + dfName;
                        Path lastDockerfile = "${deviceDf}/${dfName}";
                        if (not(sameMd5HashFiles(d, lastDockerfile))){
                            copy(d, deviceDf);
                            newChangeOnContainerFiles = true;
                        }
                        
                        if ((newChangeOnContainerFiles) or (newChangeJarFiles)) {
                            String appImageId = createContainerImage(mgr, b, d, "allapps", deviceName, "0.1.0");
                        }
                    
                        // Mesh-Info, Container-Descriptor
                        Path meshInfo = "${artifactsFolder}/${filePrefix}mesh-info.yml";
                        vilTemplateProcessor("MeshInfoAllApps", config, meshInfo, containerType=cntType, device=device);

                        if (cntType == ContainerType::C1Ecs_C2Svc_AllApps) {
                            String ecsDfName = createContainerBuildScriptAllApps(mgr, applications, allElements, target, cntType, -1, device, baseImageCreated);
                            newChangeOnContainerFiles = false;
                            
                            Path ecs_ws = "${target}/ecs.wrapper_script.sh";
                            vilTemplateProcessor("WrapperScript", config, ecs_ws, containerType=ContainerType::Ecs);
                            Path lastEcs_Ws = "${deviceDf}/wrapper_script.sh";
                            if (not(sameMd5HashFiles(ecs_ws, lastEcs_Ws))){
                                copy(ecs_ws, deviceDf);
                                newChangeOnContainerFiles = true;
                            }    

                            Path ecsB = "${target}/";
                            Path ecsD = "${target}/" + ecsDfName;
                            Path lastDockerEcsfile = "${deviceDf}/${ecsDfName}";
                            if (not(sameMd5HashFiles(ecsD, lastDockerEcsfile))){
                                copy(ecsD, deviceDf);
                                newChangeOnContainerFiles = true;
                            }
                            
                            if ((newChangeOnContainerFiles) or (newChangeJarFiles)) {
                                String ecs_imageId = createContainerImage(mgr, ecsB, ecsD, "allapps", deviceName + "_" + "ecs", "0.1.0");
                            }
                    
                            // Mesh-Info, Container-Descriptor
                            Path meshInfoEcs = "${artifactsFolder}/${filePrefix}mesh-info-ecs.yml";
                            vilTemplateProcessor("MeshInfoAllApps", config, meshInfoEcs, containerType=ContainerType::Ecs, device=device);
                        } 
        
                        if (authenticate) {
                            logoutContainerRegistry(mgr);
                        }
                        count = count + 1;
					    
                    }
                }
            }
        }
    }

    Boolean checkFilesEquality(Path pathFile1, Path pathFile2) = { 
        FileArtifact pathFile1Artifact = pathFile1;
        FileArtifact pathFile2Artifact = pathFile2;
        pathFile1Artifact.hasSameContent(pathFile2Artifact);
    }

    Boolean sameMd5HashFiles(Path newFilePath, Path lastFilePath) = { 
        FileArtifact newFilePathArtifact = newFilePath;
        FileArtifact lastFilePathArtifact = lastFilePath;
        Boolean result = true;
        
        if (not(lastFilePath.exists())){
            result = false;
        } else if (not(newFilePathArtifact.getMd5Hash() == lastFilePathArtifact.getMd5Hash())){
            result = false;
        }
        
        result;
    }
    
    Boolean sameMd5HashJarsFolders(Path newFilePath, Path lastFilePath) = { 
        setOf(FileArtifact) newPathArtifactsSet = newFilePath.selectAll();
        setOf(FileArtifact) lastPathArtifactsSet = lastFilePath.selectAll();

        Boolean result = true;
        
        for (FileArtifact file : newPathArtifactsSet){
            if (not(file.getName().startsWith("de.iip-ecosphere.platform"))) {
                FileArtifact findFile;
                String fileExist = "No";
            
                for (FileArtifact newFile : lastPathArtifactsSet){
                    if (file.getName() == newFile.getName()){
                        findFile = newFile;
                        fileExist = "Yes";
                    }
                }
            
                if (fileExist == "No"){
                    result = false;
                } else if (not(file.getMd5Hash() == findFile.getMd5Hash())){
                    result = false;
                }
            }
        }
        
        result;
    }
    
    Boolean sameMd5HashFolders(Path newFilePath, Path lastFilePath) = { 
        setOf(FileArtifact) newPathArtifactsSet = newFilePath.selectAll();
        setOf(FileArtifact) lastPathArtifactsSet = lastFilePath.selectAll();

        Boolean result = true;
        
        for (FileArtifact file : newPathArtifactsSet){
            FileArtifact findFile;
            String fileExist = "No";
            
            for (FileArtifact newFile : lastPathArtifactsSet){
                if (file.getName() == newFile.getName()){
                    findFile = newFile;
                    fileExist = "Yes";
                }
            }
            
            if (fileExist == "No"){
                result = false;
            } else if (not(file.getMd5Hash() == findFile.getMd5Hash())){
                result = false;
            }
        }
        
        result;
    }

    Boolean isAllAppsContainer(ContainerType cntType) = { 
	Boolean isAllApps=false;
        if (cntType == ContainerType::Ecs_Svc_AllApps){
            isAllApps=true;
        }   
        if (cntType == ContainerType::EcsSvc_AllApps){
            isAllApps=true;
        } 
        if (cntType == ContainerType::C1Ecs_C2Svc_AllApps){
            isAllApps=true;
        } 
        isAllApps;
    }

    generatePlatformContainers(IIPEcosphere config, Project target) = {
        String artifactsFolder = getArtifactsFolder(target.getPath(), config);
        ContainerManager mgr = config.containerManager;
        String deviceName = "platform";
        String appName = "platform";
        String filePrefix = "${appName}_${deviceName}_";
        String regUser = getProperty("iip.container.user." + mgr.authenticationKey, "");
        String regPwd = getProperty("iip.container.password." + mgr.authenticationKey, "");
        Path deviceDf = "${artifactsFolder}/DeviceDockerfiles/${appName}/DeviceDockerfile_${deviceName}";

        Boolean authenticate = regUser <> "" and regPwd <> "";
        if (authenticate) {
            loginContainerRegistry(mgr, regUser, regPwd);
        }
        Path req = "${target}/requirements.txt";
        // reading from requirements.txt is not bad but assumes usage of install package
        // better to have them in a list in the model similar to #143
        Path requirements = "${target}/../platformDependencies/requirements.txt";
        FileArtifact requirementsArtifact = requirements;
        Text requirementsText = requirementsArtifact.getText();

        vilTemplateProcessor("PythonReqPlatform", config, req, text=requirementsText );
        copy(req, deviceDf);

        Integer isPythonService = 1;
        sequenceOf(MeshElement) allElements = {};

        Path instDep = "${target}/installedDependencies.yml";
        vilTemplateProcessor("InstalledDependencies", config, instDep, elements=allElements, isPython=isPythonService);
        copy(instDep, deviceDf);

        String dfName = createContainerBuildScriptPlatform(mgr, target);

        // Wrapper-Skript 
        Path ws = "${target}/wrapper_script_platform.sh";
        vilTemplateProcessor("WrapperScriptPlatform", config, ws); 
        copy(ws, deviceDf);

        // Create image 
        Path b = "${target}/";
        Path d = "${target}/" + dfName;
        copy(d, deviceDf);

        String appImageId = createContainerImage(mgr, b, d, "Platform", deviceName, "0.1.0");

        // Mesh-Info, Container-Descriptor
        //Path meshInfo = "${artifactsFolder}/${filePrefix}mesh-info.yml";
        //vilTemplateProcessor("MeshInfoPlatform", config, meshInfo);

        if (authenticate) {
            logoutContainerRegistry(mgr);
        }

    }
        
    // ------------------------------------------ generating apps: nested, e.g., family ----------------------------------------------------------

    // dispatch basis
    generateNestedServices(MeshElement no, ServiceBase family, Path javaNodesSrc, Path javaNodesTestSrc, String clsName, 
        String javaNodesPackage, Application a, setOf(String) artifacts, Boolean noDeps, setOf(Service) mbs, 
        setOf(MeshElement) nodes, setOf(String) javaSerializers) = {
    }

    generateNestedServices(MeshElement no, ServiceFamily family, Path javaNodesSrc, Path javaNodesTestSrc, String clsName, 
        String javaNodesPackage, Application a, setOf(String) artifacts, Boolean noDeps, setOf(Service) mbs, 
        setOf(MeshElement) nodes, setOf(String) javaSerializers) = {
        
        IIPEcosphere cfg = config;
        String familyInterface = familyInterfaceName(clsName);
        vilTemplateProcessor("JavaSpringCloudFamilyInterface", config, "${javaNodesSrc}/${familyInterface}.java", 
            elt=no, pkg=javaNodesPackage, app=a);
        Boolean sharedIf = cfg.sharedInterfaces;
        for (Service m: family.members) {
            String memberClsName = familyMemberName(asTypeName(m.name), familyInterface);
            vilTemplateProcessor("JavaSpringCloudStreamMeshElement", config, "${javaNodesSrc}/${memberClsName}.java", 
                 elt=no, pkg=javaNodesPackage, app=a, sharedInterfaces=sharedIf, familyInterface=familyInterface, familyMember=m, nodes=nodes);
            /*if (not(noDeps)) {
                vilTemplateProcessor("JavaSpringCloudStreamMeshElementTest", config, "${javaNodesTestSrc}/${memberClsName}Test.java", 
                     elt=no, pkg=javaNodesPackage, app=a, sharedInterfaces=sharedIf, familyInterface=familyInterface, familyMember=m, 
                     nodes=nodes, serializers=javaSerializers);
            }*/
            mbs.add(m);
        }
        if (not(noDeps) and isDefined(family.selector) and family.selector <> null) {
            artifacts.add(getSelectorArtifact(family.selector));
        }
    }

    // ------------------------------------------ generating apps: generating/handling services resources ----------------------------------------

    // dispatch basis    
    generateServiceResources(MeshElement no, ServiceBase base, Path appRoot, setOf(String) bins, setOf(String) assemblies, setOf(String) resources, setOf(String) artifacts, Boolean noDeps) = {
        if (not(noDeps)) {
            artifacts.add(getArtifact(no));
        }
    }

    generateServiceResources(MeshElement no, Connector base, Path appRoot, setOf(String) bins, setOf(String) assemblies, setOf(String) resources, setOf(String) artifacts, Boolean noDeps) = {
        artifacts.add(getArtifact(base)); // connectors are (currently) platform-supplied
    }

    generateServiceResources(MeshElement no, PythonService service, Path appRoot, setOf(String) bins, setOf(String) assemblies, setOf(String) resources, setOf(String) artifacts, Boolean noDeps) = {
        IIPEcosphere cfg = config; // from global
        String serviceFolderName = toFolderName(service.id);
        Path assemblySrc = "${appRoot}/${assemblyRel}";
        sequenceOf(String) tmp = service.artifact.split(":");
        String artifact = tmp[0]+":"+tmp[1]+":zip:python:"+tmp[2];
        if (not(noDeps)) {
            if (cfg.sharedInterfaces) {
                bins.add(cfg.sharedArtifact+"|python|${mvnProjectPySrcDir}|python.zip|zip|unpack");
                bins.add(tmp[0]+":"+tmp[1]+":"+tmp[2]+"|python|${mvnProjectPySrcDir}|python.zip|zip|unpack");
            }
            vilTemplateProcessor("PythonAssembly", config, "${assemblySrc}/python_${serviceFolderName}.xml", withServices=true, dependency=artifact);
            assemblies.add("python_${serviceFolderName}|${assemblyRel}/python_${serviceFolderName}.xml|prepare-package|${mvnProjectBuildDir}/classes|python_${serviceFolderName}");
            artifacts.add(getArtifact(service));
        }
    }
    
    // ------------------------------------------- generating shared interfaces/classes ------------------------------------------------------------
    
    generateSharedInterfaces(Configuration config, Project target, setOf(String) javaSerializers, setOf(String) artifacts) = {
        IIPEcosphere cfg = config;
        setOf(Application) applications = Application.allInstances(); // do not prune here, keep interfaces stable
        initUsedServiceTypes(applications);        
        Path appRoot = "${target}/ApplicationInterfaces";
        appRoot.mkdir();

        setOf(RecordType) recordTypes = RecordType.allInstances();
        setOf(ServiceBase) serviceTypes = ServiceBase.allInstances();
        setOf(Server) serverTypes = Server.allInstances();
        Path javaSrc = "${appRoot}/src/main/java";
        Path pySrc = "${appRoot}/src/main/python";
        Path resourcesSrc = "${appRoot}/src/main/resources";
        Path assemblySrc = "${appRoot}/${assemblyRel}";
        Path javaDatatypesSrc = "${javaSrc}/${toPath(javaDatatypesPackage)}";
        Path javaSerializersSrc = "${javaSrc}/${toPath(javaSerializersPackage)}";
        Path javaInterfacesSrc = "${javaSrc}/${toPath(javaInterfacesPackage)}";

        javaDatatypesSrc.mkdir();
        javaSerializersSrc.mkdir();
        assemblySrc.mkdir();
        
        setOf(String) bins = {}; 
        setOf(String) assemblies = {}; 
        setOf(String) resources = {}; 
        sequenceOf(MeshElement) elements = {};
        generateEnums(javaDatatypesSrc, pySrc);    
        for (RecordType r : recordTypes) {
            // generate for all languages and according to serializer settings
            String clsName = asTypeName(r.name);
            vilTemplateProcessor("JavaType", config, "${javaDatatypesSrc}/${clsName}.java", type=r, 
                pkg=javaDatatypesPackage, interface=true, sharedInterfaces=true, impl=true);
            vilTemplateProcessor("JavaType", config, "${javaDatatypesSrc}/${clsName}Impl.java", type=r, 
                pkg=javaDatatypesPackage, interface=false, sharedInterfaces=true, impl=true);
            vilTemplateProcessor("JavaJsonSerializer", config, "${javaSerializersSrc}/${clsName}Serializer.java", type=r, 
                pkg=javaSerializersPackage, typePkg=javaDatatypesPackage, sharedInterfaces=true, impl=false);
            javaSerializers.add("${javaSerializersPackage}.${clsName}Serializer");
            vilTemplateProcessor("JavaJsonSerializer", config, "${javaSerializersSrc}/${clsName}ImplSerializer.java", 
                type=r, pkg=javaSerializersPackage, typePkg=javaDatatypesPackage, sharedInterfaces=true, impl=true);
            javaSerializers.add("${javaSerializersPackage}.${clsName}ImplSerializer");
            if (isPythonUsed(usedServiceTypes)) {
                vilTemplateProcessor("PythonType", config, "${pySrc}/datatypes/${clsName}.py", type=r, interface=true, 
                    sharedInterfaces=true);
                vilTemplateProcessor("PythonType", config, "${pySrc}/datatypes/${clsName}Impl.py", type=r, interface=false, 
                    sharedInterfaces=true);
                vilTemplateProcessor("PythonJsonSerializer", config, "${pySrc}/serializers/${clsName}Serializer.py", type=r, 
                    sharedInterfaces=true);
            }
        };
        
        for (ServiceBase s : serviceTypes) {
            generateServiceInterfaces(appRoot, config, s);
        }
		
		for (Server s : serverTypes) {
			generateServerInterface(config, s, appRoot);
		}

        
        //vilTemplateProcessor("JavaInterfaceAssembly", config, "${assemblySrc}/javaInterfaces.xml");
        //assemblies.add("interfaces|${assemblyRel}/javaInterfaces.xml|package|${mvnProjectBuildDir}");
        if (isPythonUsed(usedServiceTypes)) {
            vilTemplateProcessor("PythonAssembly", config, "${assemblySrc}/pythonInterfaces.xml", withServices=false, dependency="");
            assemblies.add("python|${assemblyRel}/pythonInterfaces.xml|package|${mvnProjectBuildDir}");
        }
        
        // partition according to container strategy
        
        sequenceOf(String) artList = cfg.sharedArtifact.split(":");
        vilTemplateProcessor("AppMvn", config, "${appRoot}/pom.xml", usedServiceTypes=usedServiceTypes, artifacts=artifacts, bins=bins, assemblies=assemblies, resources=resources, starterCls="iip.Starter", 
            appName=artList[1], appVersion=artList[2], appDescription="Shared application interfaces", tests=tests, springPackaging=false, groupId=artList[0], ifArtifact=true);
        vilTemplateProcessor("AppAnt", config, "${appRoot}/build-jk.xml", artifactPrefix=artList[1], srvFolderName="IIP-apps-${artList[1]}");
            
        mvn(appRoot);

        artifacts.add(cfg.sharedArtifact);
    }
    
    generateEnums(Path javaDatatypesSrc, Path pySrc) = {
        setOf(EnumType) enumTypes = EnumType.allInstances();
        for (EnumType e: enumTypes) {
            String clsName = asTypeName(e.name);
            vilTemplateProcessor("JavaEnum", config, "${javaDatatypesSrc}/${clsName}.java", type=e, 
                pkg=javaDatatypesPackage);
            if (isPythonUsed(usedServiceTypes)) {
                vilTemplateProcessor("PythonEnum", config, "${pySrc}/datatypes/${clsName}.py", type=e);
            }
        }
    }
    
    // ------------------------------------------ gen interfaces: service interfaces ---------------------------------------------------------

    // dispatch basis
    generateServiceInterfaces(Path appRoot, Configuration config, ServiceBase service) = {
        String clsName = asTypeName(service.name);
        Path javaSrc = "${appRoot}/src/main/java";
        Path javaInterfacesSrc = "${javaSrc}/${toPath(javaInterfacesPackage)}";
        Path javaServiceImplSrc = "${javaSrc}/${toPath(javaImplPackage)}";
        vilTemplateProcessor("JavaServiceInterface", config, "${javaInterfacesSrc}/${clsName}Interface.java", service=service, pkg=javaInterfacesPackage);
        vilTemplateProcessor("JavaServiceBaseImpl", config, "${javaServiceImplSrc}/${clsName}Impl.java", service=service, pkg=javaImplPackage);
    }

    generateServiceInterfaces(Path appRoot, Configuration config, Connector connector) = {
        // do nothing, connectors have different interfaces
    }
    
    generateServiceInterfaces(Path appRoot, Configuration config, CompleteService service) = {
        // do nothing, everything is here already generically in place
    }
    
    // Python (preliminary in here)
    generateServiceInterfaces(Path appRoot, Configuration config, PythonService service) = {
        String clsName = asTypeName(service.name);
        Path pySrc = "${appRoot}/src/main/python";
        Path pyInterfacesSrc = "${pySrc}/interfaces"; // default name of ServiceEnvironment.py
        vilTemplateProcessor("PythonServiceInterface", config, "${pyInterfacesSrc}/${clsName}Interface.py", service=service, pkg="interfaces");
    }
    
    // ------------------------------------------ generating instantiated platform artifacts -------------------------------------------------------

    generateBroker(Project source, Configuration config, Project target) = {
        IIPEcosphere cfg = config;

        brokerRoot.mkdir();
        generateBrokerScripts(cfg, cfg.transportProtocol);
    }
    
    generateEcsRuntime(Path path, Configuration config, EcsDevice deviceType) = {
        IIPEcosphere cfg = config;
        path.mkdir();
        Path p = "${path}/src/main/resources";
        p.mkdir();
        vilTemplateProcessor("EcsRuntimeDockerContainerManagerYaml", config, "${p}/iipecosphere.yml", deviceType=deviceType);
        vilTemplateProcessor("JavaYamlTest", config, "${path}/src/test/java/test/iip/AllTests.java", pkg="test.iip", fqnCls=containerManagerCfgClass(config), cfgFile="src/main/resources/iipecosphere.yml");
        vilTemplateProcessor("JavaLogbackXml", config, "${p}/logback.xml");
        vilTemplateProcessor("JavaServices", config, "${p}/META-INF/services/de.iip_ecosphere.platform.support.net.NetworkManagerDescriptor", descriptor="de.iip_ecosphere.platform.support.iip_aas.LocalNetworkManagerWithParentAas");
        vilTemplateProcessor("JavaServices", config, "${p}/META-INF/services/de.iip_ecosphere.platform.support.LifecycleDescriptor", descriptor="de.iip_ecosphere.platform.ecsRuntime.EcsCmdLineLifecycleDescriptor");
        deviceIdProviderJsl(p, cfg);
        identityStoreJsl(p, cfg);
        aasSemanticIdResolverJsl(p, cfg);
        String cInfix = getContainerNameInfix(deviceType);
        vilTemplateProcessor("EcsRuntimeMvn", config, "${path}/pom.xml", dir="ecsJars${cInfix}", main=dfltMain, tests=tests, deviceType=deviceType);
        mvn(path);
        if (deviceType == defaultDeviceType) {
            Integer svcMemLimit = getIntegerValueSafe(cfg.serviceManager.memLimit, 0);
            Integer cntMgmLimit = getIntegerValueSafe(cfg.containerManager.memLimit, 0);
            generateOsScripts(config, "${target}/ecs", "ecsJars", dfltMain, "IIP-Ecosphere ECSRuntime", "iip-ecsRuntime", "iip-platform.service", addJavaOpts=toJvmMemLimitOpt(max(svcMemLimit, cntMgmLimit)), sysd="${target}/iip-ecs");
        }
    }
    
    generateEcsSvcMgr(Path path, Configuration config, EcsDevice deviceType) = {
        IIPEcosphere cfg = config;
        path.mkdir();
        Path p = "${path}/src/main/resources";
        p.mkdir();
        vilTemplateProcessor("EcsServiceControlSpringCloudStreamYaml", config, "${p}/iipecosphere.yml", deviceType=deviceType);
        // cfg test requires spring
        vilTemplateProcessor("JavaLogbackXml", config, "${p}/logback.xml");
        vilTemplateProcessor("JavaServices", config, "${p}/META-INF/services/de.iip_ecosphere.platform.support.net.NetworkManagerDescriptor", descriptor="de.iip_ecosphere.platform.support.iip_aas.LocalNetworkManagerWithParentAas");
        vilTemplateProcessor("JavaServices", config, "${p}/META-INF/services/de.iip_ecosphere.platform.support.LifecycleDescriptor", descriptor="de.iip_ecosphere.platform.ecsRuntime.EcsCmdLineLifecycleDescriptor");
        deviceIdProviderJsl(p, cfg);
        identityStoreJsl(p, cfg);
        aasSemanticIdResolverJsl(p, cfg);
        String cInfix = getContainerNameInfix(deviceType);
        vilTemplateProcessor("EcsServiceControlMvn", config, "${path}/pom.xml", dir="ecsSvcJars${cInfix}", main=dfltMain, tests=tests, deviceType=deviceType);
        mvn(path);
        if (deviceType == defaultDeviceType) {
          generateOsScripts(config, "${target}/ecsServiceMgr", "ecsSvcJars", dfltMain, "IIP-Ecosphere Ecs Runtime/Service Manager", "iip-ecsServiceMgr", "", 
            addJavaOpts=toJvmMemLimitOpt(cfg.serviceManager.memLimit), sysd="${target}/iip-ecsServiceMgr");
        }
    }
    
    // called from tests, don't change signature
    generatePlatform(Project source, Configuration config, Project target) = {
        IIPEcosphere cfg = config;
        generateBroker(source, config, target);
        
        generateEcsRuntime(ecsRuntimeRoot, config, defaultDeviceType);
        generateEcsSvcMgr(ecsServiceMgrRoot, config, defaultDeviceType);
        setOf(EcsDevice) ecsDevices = EcsDevice.allInstances();
        for (EcsDevice dev: ecsDevices->reject(d|d==defaultDeviceType)->sortedBy(d|d.id)) {
            String fileInfix = getContainerNameDflt(dev);
            generateEcsRuntime("${ecsRuntimeRoot}-${fileInfix}", config, dev);
            generateEcsSvcMgr("${ecsServiceMgrRoot}-${fileInfix}", config, dev);
        }
        
        serviceMgrRoot.mkdir();
        Path p = "${serviceMgrRoot}/src/main/resources";
        p.mkdir();
        vilTemplateProcessor("ServiceControlSpringCloudStreamYaml", config, "${p}/iipecosphere.yml");
        // cfg test requires spring
        vilTemplateProcessor("JavaLogbackXml", config, "${p}/logback.xml");
        vilTemplateProcessor("JavaServices", config, "${p}/META-INF/services/de.iip_ecosphere.platform.support.net.NetworkManagerDescriptor", descriptor="de.iip_ecosphere.platform.support.iip_aas.LocalNetworkManagerWithParentAas");
        deviceIdProviderJsl(p, cfg);
        identityStoreJsl(p, cfg);
        aasSemanticIdResolverJsl(p, cfg);
        vilTemplateProcessor("ServiceControlMvn", config, "${serviceMgrRoot}/pom.xml", dir="svcJars", main=dfltMain, tests=tests);
        mvn(serviceMgrRoot);
        generateOsScripts(config, "${target}/serviceMgr", "svcJars", dfltMain, "IIP-Ecosphere Service Manager", "iip-serviceMgr", "iip-ecs.service", 
            addJavaOpts=toJvmMemLimitOpt(cfg.serviceManager.memLimit), sysd="${target}/iip-serviceMgr");
        
        platformRoot.mkdir();
        p = "${platformRoot}/src/main/resources";
        p.mkdir();
        vilTemplateProcessor("PlatformYaml", config, "${p}/iipecosphere.yml", modelName=getName(config));
        vilTemplateProcessor("JavaYamlTest", config, "${platformRoot}/src/test/java/test/iip/AllTests.java", pkg="test.iip", fqnCls="de.iip_ecosphere.platform.platform.PlatformSetup", cfgFile="src/main/resources/iipecosphere.yml");
        vilTemplateProcessor("JavaLogbackXml", config, "${p}/logback.xml");
        vilTemplateProcessor("ServicesYaml", config, "${p}/services.yml");
        vilTemplateProcessor("JavaServices", config, "${p}/META-INF/services/de.iip_ecosphere.platform.support.net.NetworkManagerDescriptor", descriptor="de.iip_ecosphere.platform.support.net.LocalNetworkManagerImpl$"+"Descriptor");
        deviceIdProviderJsl(p, cfg);
        identityStoreJsl(p, cfg);
        aasSemanticIdResolverJsl(p, cfg);
        vilTemplateProcessor("PlatformMvn", config, "${platformRoot}/pom.xml", dir="plJars", main=dfltMain, tests=tests, monitoring=false);
        mvn(platformRoot);
        generateOsScripts(config, "${target}/platform", "plJars", dfltMain, "IIP-Ecosphere Platform Services", "iip-platform", "iip-broker.service", 
            sysd="${target}/iip-platform", addJavaOpts=toJvmMemLimitOpt(cfg.centralMemLimit));
        generateOsScripts(config, "${target}/cli", "plJars", "de.iip_ecosphere.platform.platform.Cli", "", "", "");

        // preliminary, as long as BaSyx conflicts with Tomcat
        monitoringRoot.mkdir();
        p = "${monitoringRoot}/src/main/resources";
        p.mkdir();
        vilTemplateProcessor("PlatformYaml", config, "${p}/iipecosphere.yml");
        vilTemplateProcessor("JavaYamlTest", config, "${monitoringRoot}/src/test/java/test/iip/AllTests.java", pkg="test.iip", fqnCls="de.iip_ecosphere.platform.monitoring.MonitoringSetup", cfgFile="src/main/resources/iipecosphere.yml");
        vilTemplateProcessor("JavaLogbackXml", config, "${p}/logback.xml");
        vilTemplateProcessor("JavaServices", config, "${p}/META-INF/services/de.iip_ecosphere.platform.support.net.NetworkManagerDescriptor", descriptor="de.iip_ecosphere.platform.support.net.LocalNetworkManagerImpl$"+"Descriptor");
        deviceIdProviderJsl(p, cfg);
        identityStoreJsl(p, cfg);
        aasSemanticIdResolverJsl(p, cfg);
        vilTemplateProcessor("PlatformMvn", config, "${monitoringRoot}/pom.xml", dir="monJars", main=dfltMain, tests=tests, monitoring=true);
        mvn(monitoringRoot);
        generateOsScripts(config, "${target}/monitoring", "monJars", dfltMain, "IIP-Ecosphere Platform Monitoring Services", "iip-monitoring", "iip-platform.service", 
            sysd="${target}/iip-monitoring", addJavaOpts=toJvmMemLimitOpt(cfg.monitoringMemLimit));
 
        artifactsRoot.mkdir();
        commonRoot.mkdir();

        mgtUiRoot.mkdir();
        vilTemplateProcessor("UiAngularWin", config, "${target}/mgtUi.bat");
        vilTemplateProcessor("UiAngularLinuxSysd", config, "${target}/iip-mgtUi.service", 
            requires="iip-platform.service", after="iip-platform.service");
        vilTemplateProcessor("UiAngularLinux", config, "${target}/mgtUi.sh");
        FileArtifact f = "${target}/mgtUi.sh";
        f.setExecutable(false);
        vilTemplateProcessor("UiAngularExpress", config, "${mgtUiRoot}/server.js");
        vilTemplateProcessor("UiAngularPom", config, "${mgtUiRoot}/pom.xml");
        mvn(mgtUiRoot);
        p = "${mgtUiRoot}/dist/iipes-web/assets/config";
        p.mkdir();
        vilTemplateProcessor("UiAngularConfig", config, "${p}/config.json");
        
        vilTemplateProcessor("Readme", config, "${target}/README.txt");
        if ((getContainerGenerationSafe(cfg.containerGeneration)) and getPlatformContainerGenerationSafe(cfg.platformContainerGeneration)){
            generatePlatformContainers(config, target);
        }
    }
    
    generateBrokerScripts(Configuration config, TransportProtocol protocol) = {
        vilTemplateProcessor("NoBroker", config, "${brokerRoot}/README.txt");
    }
    
    generateBrokerScripts(Configuration config, TransportProtocolAMQP protocol) = {
        String addJavaOpts = toJvmMemLimitOpt(protocol.memLimit);
        vilTemplateProcessor("AmqpPom", config, "${brokerRoot}/pom.xml", ver=getStringValueSafe(protocol.brokerVer, "8.0.2"));
        vilTemplateProcessor("AmqpLinuxSysd", config, "${brokerRoot}/iip-broker.service", addJavaOpts=addJavaOpts);
        vilTemplateProcessor("AmqpLinux", config, "${brokerRoot}/broker.sh", addJavaOpts=addJavaOpts);
        FileArtifact f = "${brokerRoot}/broker.sh";
        f.setExecutable(false);
        vilTemplateProcessor("AmqpWin", config, "${brokerRoot}/broker.bat", addJavaOpts=addJavaOpts);
        Path c = "${brokerRoot}/src/test";
        c.mkdir();
        vilTemplateProcessor("AmqpConf", config, "${c}/config.json");
        mvn(brokerRoot);
    }

    generateBrokerScripts(Configuration config, TransportProtocolMQTTv3 protocol) = {
        generateBrokerScriptsHiveMq(config, getStringValueSafe(protocol.brokerVer, "2020.4"), protocol);
    }

    generateBrokerScripts(Configuration config, TransportProtocolMQTTv5 protocol) = {
        generateBrokerScriptsHiveMq(config, getStringValueSafe(protocol.brokerVer, "2020.4"), protocol);
    }
    
    generateBrokerScriptsHiveMq(Configuration config, String brokerVer, TransportProtocol protocol) = {
        String addJavaOpts = toJvmMemLimitOpt(protocol.memLimit);
        vilTemplateProcessor("MqttPom", config, "${brokerRoot}/pom.xml", ver=brokerVer);
        vilTemplateProcessor("MqttLinuxSysd", config, "${brokerRoot}/iip-broker.service", addJavaOpts=addJavaOpts);
        vilTemplateProcessor("MqttLinux", config, "${brokerRoot}/broker.sh", addJavaOpts=addJavaOpts);
        FileArtifact f = "${brokerRoot}/broker.sh";
        f.setExecutable(false);
        vilTemplateProcessor("MqttWin", config, "${brokerRoot}/broker.bat", addJavaOpts=addJavaOpts);
        Path c = "${brokerRoot}/src/test";
        c.mkdir();
        vilTemplateProcessor("MqttConf", config, "${c}/config.xml");
        c = "${c}/extensions";
        c.mkdir();
        mvn(brokerRoot);
    }

}
