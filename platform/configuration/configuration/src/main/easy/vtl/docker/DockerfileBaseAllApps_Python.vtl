import Basics;
import JavaBasics;
import DockerBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template DockerfileBaseAllApps_Python(IIPEcosphere config, FileArtifact target, sequenceOf(MeshElement) elements, setOf(Application) apps, Boolean justCommenDep) {
	
    def main(IIPEcosphere config, FileArtifact target, sequenceOf(MeshElement) elements, setOf(Application) apps, Boolean justCommenDep) {
        
        
        Integer IsPythonInstalled = 0;
        String pythonPipInstalled = "";
        DockerContainerManager mgr = config.containerManager;

        if (not(justCommenDep)) {

            'FROM ${mgr.registry}/allapps/appcommendepbaseimage:0.1.0'

            sequenceOf(PythonService) services = elements -> collect(e|e.impl) -> selectByType(PythonService);
            for (PythonService pyService : services) {
                setOf(Dependency) deps = pyService.dependencies;
                for (Dependency s : deps) {
                    if (genDependency(s) == 'PYTHON2') {
                        if (IsPythonInstalled == 0) {
                            IsPythonInstalled = 1;
                            pythonPipInstalled = 'RUN python2 -m pip install -r requirements.txt';
                        }
                    } else if (genDependency(s) == 'PYTHON38') {
                        if (IsPythonInstalled == 0) {
                            IsPythonInstalled = 1;
                            pythonPipInstalled = 'RUN python3 -m pip install -r requirements.txt';
                        }
                    } else if (genDependency(s) == 'PYTHON39') {
                        if (IsPythonInstalled == 0) {
                            IsPythonInstalled = 1;
                            pythonPipInstalled = 'RUN python3 -m pip install -r requirements.txt';
                        }
                    } 
                }
            }

            if (IsPythonInstalled == 1) {
                'COPY requirements.txt requirements.txt'
                '${pythonPipInstalled}'
            }
        } else {
            setOf(Dependency) allDependencies = collectDependencies(elements);
            sequenceOf(String) tmp = {};
            for (Dependency d: allDependencies) {
                installBeforePip(d, tmp);
            }
            sequenceOf(PythonService) services = elements -> collect(e|e.impl) -> selectByType(PythonService);
    
            Integer IsPythonInstalled = 0;
            String pythonPipInstalled = "";
            for (PythonService pyService : services) {
                setOf(Dependency) deps = pyService.dependencies;
    
                for (Dependency s : deps) {
                    if (genDependency(s) == 'PYTHON2') {
                        if (IsPythonInstalled == 0) {
                            'FROM python:2.7.10 '
                            IsPythonInstalled = 1;
                            pythonPipInstalled = 'RUN python2 -m pip install -r requirements.txt';
                        }
                        for (String s: tmp) {
                            '${s}'
                        }
                    } else if (genDependency(s) == 'PYTHON38') {
                        if (IsPythonInstalled == 0) {
                            'FROM python:3.8-slim-buster'
                            IsPythonInstalled = 1;
                            pythonPipInstalled = 'RUN python3 -m pip install -r requirements.txt';
                        }
                        for (String s: tmp) {
                                '${s}'
                        }
                    } else if (genDependency(s) == 'PYTHON39') {
                        if (IsPythonInstalled == 0) {
                            'FROM python:3.9-slim'
                            IsPythonInstalled = 1;
                            pythonPipInstalled = 'RUN python3 -m pip install -r requirements.txt';
                        }
                        for (String s: tmp) {
                            '${s}'
                        }
                    } 
                }
            }

            if (IsPythonInstalled == 1) {
                'COPY requirements.txt requirements.txt'
                '${pythonPipInstalled}'
            }
        
            ''
            'RUN apt-get update'
            'RUN apt-get install -y openjdk-11-jre'
            ''
            if (not(collectDependencies(elements)->selectByKind(SystemDependency)->select(d|d.key=='JAVA8').isEmpty())) {
                'RUN apt-get install software-properties-common -y'
                'RUN apt-add-repository "deb http://archive.debian.org/debian-security stretch/updates main"'
                'RUN apt-get update'
                'RUN apt-get install -y openjdk-8-jdk'
            }
            ''
            //'${containerSettings(config, containerType, device)}'
            ''
            '# Installed dependencies (shall be in /)'
            'COPY installedDependencies.yml installedDependencies.yml'
            ''
            '${genTestingMode(config, "Python")}'
            ''
            for (Application app : apps->sortedBy(a|a.id)) {
                '${genServersExpose(app)|e}'
            }
            ''
            'WORKDIR /app'
            ''
            '# resources/devices'
            'COPY resources/ resources'
            ''
            '# Broker'
            'COPY broker/brokerJars/ brokerJars'
            'COPY broker/src/ src'
            'COPY broker/broker.sh broker.sh'
            ''
        }
    }

    def genDependency(Dependency d) {
        '';
    }
    
    def genDependency(SystemDependency d) {
        '${d.key}';
    }
    
    def installBeforePip(Dependency d, sequenceOf(String) result) {
    }

    def installBeforePip(LinuxSystemDependency d, sequenceOf(String) result) {
        result.add('RUN apk add ${d.name}');
    }
    
    def installBeforePip(LinuxCommandBasedSystemDependency d, sequenceOf(String) result) {
         // TODO downloads
         // TODO bashSetups
        for (String c: d.installCommands) {
            result.add('RUN ${c}');
        }
    }
    
}
