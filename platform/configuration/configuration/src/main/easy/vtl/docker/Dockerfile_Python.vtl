import Basics;
import JavaBasics;
import DockerBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template Dockerfile_Python(IIPEcosphere config, FileArtifact target, sequenceOf(MeshElement) elements, Application app, ContainerType containerType, EcsDevice device, Integer baseImageExist) {
	
    def main(IIPEcosphere config, FileArtifact target, sequenceOf(MeshElement) elements, Application app, ContainerType containerType, EcsDevice device, Integer baseImageExist) {
        
        Integer IsPythonInstalled = 0;
        String pythonPipInstalled = "";
        DockerContainerManager mgr = config.containerManager;
        String appName = app.name.toIdentifier().toLower();
        if (baseImageExist <> 0) {
            setOf(Dependency) deviceDependencies = device.provides -> selectByType(PythonDependency);

            if (deviceDependencies.size() > 0) {
                'FROM ${mgr.registry}/${appName}/appcommendepbaseimage:0.1.0'
                '${containerSettings(config, containerType, device)}'
                'ENV IIP_INCONTAINER=true'

                sequenceOf(PythonService) services = elements -> collect(e|e.impl) -> selectByKind(PythonService);
                sequenceOf(ServiceFamily) families = elements -> collect(e|e.impl) -> selectByKind(ServiceFamily);
                for (ServiceFamily family : families) {
                    for (PythonService serviceMember : family.members -> selectByKind(PythonService)) {
                        services.add(serviceMember);
                    }
                }
                
                for (PythonService pyService : services) {
                    setOf(Dependency) deps = pyService.dependencies;
                    for (Dependency s : deps) {
                        if (genDependency(s) == 'PYTHON2') {
                            if (IsPythonInstalled == 0) {
                                IsPythonInstalled = 1;
                                pythonPipInstalled = 'RUN python2 -m pip install -r requirements.txt';
                            }
                        } else if (genDependency(s) == 'PYTHON38') {
                            if (IsPythonInstalled == 0) {
                                IsPythonInstalled = 1;
                                pythonPipInstalled = 'RUN python3 -m pip install -r requirements.txt';
                            }
                        } else if (genDependency(s) == 'PYTHON39') {
                            if (IsPythonInstalled == 0) {
                                IsPythonInstalled = 1;
                                pythonPipInstalled = 'RUN python3 -m pip install -r requirements.txt';
                            }
                        } 
                    }
                }

                if (IsPythonInstalled == 1) {
                    '# Install python dependencies'
                    'COPY requirements.txt requirements.txt'
                    '${pythonPipInstalled}'
                }
            } else {
                if (baseImageExist == 1) {
                    'FROM ${mgr.registry}/${appName}/appcommendepbaseimage:0.1.0'
                    '${containerSettings(config, containerType, device)}'
                    'ENV IIP_INCONTAINER=true'
                } else if (baseImageExist == 2) {
                    'FROM ${mgr.registry}/${appName}/appalldepbaseimage:0.1.0'
                    '${containerSettings(config, containerType, device)}'
                    'ENV IIP_INCONTAINER=true'
                }
            }
        } else {        
            setOf(Dependency) allDependencies = collectDependencies(elements);
            sequenceOf(String) tmp = {};
            for (Dependency d: allDependencies) {
                installBeforePip(d, tmp);
            }
            sequenceOf(PythonService) services = elements -> collect(e|e.impl) -> selectByKind(PythonService);
            sequenceOf(ServiceFamily) families = elements -> collect(e|e.impl) -> selectByKind(ServiceFamily);
            for (ServiceFamily family : families) {
                for (PythonService serviceMember : family.members -> selectByKind(PythonService)) {
                    services.add(serviceMember);
                }
            }

                
            for (PythonService pyService : services) {
                setOf(Dependency) deps = pyService.dependencies;

                for (Dependency s : deps) {
                    if (genDependency(s) == 'PYTHON2') {
                        if (IsPythonInstalled == 0) {
                            'FROM python:2.7.10 '
                            'RUN apt-get update'
                            IsPythonInstalled = 1;
                            pythonPipInstalled = 'RUN python2 -m pip install -r requirements.txt';
                        }
                        for (String s: tmp) {
                            '${s}'
                        }
                    } else if (genDependency(s) == 'PYTHON38') {
                        if (IsPythonInstalled == 0) {
                            'FROM python:3.8-slim-buster'
                            'RUN apt-get update'
                            IsPythonInstalled = 1;
                            pythonPipInstalled = 'RUN python3 -m pip install -r requirements.txt';
                        }
                        for (String s: tmp) {
                            '${s}'
                        }
                    } else if (genDependency(s) == 'PYTHON39') {
                        if (IsPythonInstalled == 0) {
                            'FROM python:3.9-slim'
                            'RUN apt-get update'
                            IsPythonInstalled = 1;
                            pythonPipInstalled = 'RUN python3 -m pip install -r requirements.txt';
                        }
                        for (String s: tmp) {
                            '${s}'
                        }
                    } 
                }
            }

            ''
            'RUN apt-get install -y openjdk-11-jre'
            ''
            if (not(collectDependencies(elements)->selectByKind(SystemDependency)->select(d|d.key=='JAVA8').isEmpty())) {
                'RUN apt-get install software-properties-common -y'
                'RUN apt-add-repository "deb http://archive.debian.org/debian-security stretch/updates main"'
                'RUN apt-get update'
                'RUN apt-get install -y openjdk-8-jdk'
            }
            ''
            '${containerSettings(config, containerType, device)}'
            'ENV IIP_INCONTAINER=true'
            ''
            '# Installed dependencies (shall be in /)'
            'COPY installedDependencies.yml installedDependencies.yml'
            ''
            '${genServersExpose(app)|e}'
            'WORKDIR /app'
            ''
            '# resources/devices'
            'COPY resources/ resources'
            ''
            '# Broker'
            'COPY broker/brokerJars/ brokerJars'
            'COPY broker/src/ src'
            'COPY broker/broker.sh broker.sh'
            ''
            '# Running the script'
            'COPY wrapper_script.sh wrapper_script.sh'
            'RUN chmod 777 wrapper_script.sh'
            ''
            if (IsPythonInstalled == 1) {
                '# Install python dependencies'
                'COPY requirements.txt requirements.txt'
                '${pythonPipInstalled}'
            }
            ''
            '${genTestingMode(config, "Python")}'
            ''
            // '# App'
            // 'COPY ${getAppMvnName(app)}/target/${getAppMvnName(app)}-${getAppMvnVersion(app)}-bin.jar ${getAppMvnName(app)}-${getAppMvnVersion(app)}-bin.jar'
            // ''
        }

        String deviceSpec = device.containerName;
        if (deviceSpec.length() > 0) {
            deviceSpec = "-" + deviceSpec;
        }

        if (containerType == ContainerType::EcsSvc_App) {
            '# ECS and Service Manager'
            'COPY ecsSvcJars${deviceSpec}/ ecsSvcJars'
            'COPY common/ common'
            'COPY ecsServiceMgr.sh ecsServiceMgr.sh'
        
        } else if (containerType == ContainerType::Ecs_Svc_App) {
            '# Service Manager'
            'COPY svcJars/ svcJars'
            'COPY common/ common'
            'COPY serviceMgr.sh serviceMgr.sh'
            ''
            '# ECS'
            'COPY ecsJars${deviceSpec}/ ecsJars'
            'COPY ecs.sh ecs.sh'
        } else if (containerType == ContainerType::C1Ecs_C2Svc_App) {
            '# Service Manager'
            'COPY svcJars/ svcJars'
            'COPY common/ common'
            'COPY serviceMgr.sh serviceMgr.sh'
        }
        ''		
        'ENTRYPOINT ["./wrapper_script.sh"]'
    }
    
    def genDependency(Dependency d) {
        '';
    }
    
    def genDependency(SystemDependency d) {
        '${d.key}';
    }
    
    def installBeforePip(Dependency d, sequenceOf(String) result) {
    }

    def installBeforePip(LinuxSystemDependency d, sequenceOf(String) result) {
        result.add('RUN apt-get install -y ${d.name}');
    }
    
    def installBeforePip(LinuxCommandBasedSystemDependency d, sequenceOf(String) result) {
         // TODO downloads
         // TODO bashSetups
        for (String c: d.installCommands) {
            result.add('RUN ${c}');
        }
    }
    
}
