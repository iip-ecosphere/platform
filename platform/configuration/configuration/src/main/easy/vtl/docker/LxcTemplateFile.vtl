import Basics;
import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 3)
template LxcTemplateFile(IIPEcosphere config, FileArtifact target, sequenceOf(MeshElement) elements, Application app, ContainerType containerType, EcsDevice device) {
	
    def main(IIPEcosphere config, FileArtifact target, sequenceOf(MeshElement) elements, Application app, ContainerType containerType, EcsDevice device) {

        'image:'
  		'  description: LxcTemplate-IIPEcosphere'
  		'  distribution: "ubuntu"'
  		'  architecture: "amd64"'
  		'  release: "jammy"'
  		''
        'source:'
  		'  downloader: debootstrap'
  		'  same_as: gutsy'
  		'  url: http://archive.ubuntu.com/ubuntu'
  		'  keys:'
  		'  # 0x790BC7277767219C42C86F933B4FE6ACC0B21F32'
  		'  keyserver: keyserver.ubuntu.com'
        ''
        'files:'
		'- path: /etc/netplan/10-lxc.yaml'
  		'  generator: dump'
  		'  content: |-'
    	'    network:'
      	'      version: 2'
      	'      ethernets:'
		'        eth0:'
		'          dhcp4: true'
		'          dhcp-identifier: mac'
        ''
		'- path: /'
  		'  generator: copy'
  		'  source: installedDependencies.yml'
		''
		'- path: /app/'
  		'  generator: copy'
  		'  source: wrapper_script.sh'
  		''
		'# App'
		'- path: /app/'
  		'  generator: copy'
  		'  source: ${getAppMvnName(app)}/target/${getAppMvnName(app)}-${getAppMvnVersion(app)}-bin.jar'
		''
		'# Broker'  
		'- path: /app/brokerJars/'
  		'  generator: copy'
  		'  source: broker/brokerJars/'
		''
		'- path: /app/src/'
  		'  generator: copy'
  		'  source: broker/src/'
        ''  
		'- path: /app/'
  		'  generator: copy'
  		'  source: broker/broker.sh'
        if (containerType == ContainerType::Ecs_Svc_App) {
            '# ECS and Service Manager'  
			'- path: /app/ecsSvcJars/'
  			'  generator: copy'
  			'  source: ecsSvcJars/'
			''
			'- path: /app/common/'
  			'  generator: copy'
  			'  source: common/'
			''  
			'- path: /app/'
  			'  generator: copy'
  			'  source: ecsServiceMgr.sh'
  			''
  		} else if (containerType == ContainerType::EcsSvc_App) {
			'# Service Manager'
			'- path: /app/svcJars/'
			'  generator: copy'
			'  source: common/svcJars/'
			''  
			'- path: /app/common/'
			'  generator: copy'
			'  source: common/'
			''  
			'- path: /app/'
			'  generator: copy'
			'  source: serviceMgr.sh'
			''
			'# ECS'  
			'- path: /app/ecsJars/'
			'  generator: copy'
			'  source: ecsJars/'
			''  
			'- path: /app/'
			'  generator: copy'
			'  source: ecs.sh'
            ''
        } else if (containerType == ContainerType::C1Ecs_C2Svc_App) {
			'# Service Manager' 
			'- path: /app/svcJars/'
			'  generator: copy'
			'  source: svcJars/'
			''  
			'- path: /app/common/'
			'  generator: copy'
			'  source: common/'
			''  
			'- path: /app/'
			'  generator: copy'
			'  source: serviceMgr.sh'
			''
        }
        'packages:' 
		'  manager: apt'
		'  update: true'
		'  cleanup: true' 
		'  sets:'
		'  - packages:' 
		'    - openssh-client' 
		'    - openssh-server'
		'    - sudo' 
		'    - nano' 
		'    - openjdk-8-jdk'
		'    action: install'
		''
		'  repositories:'
		'  - name: sources.list'
		'    url: |-'
		'      deb http://archive.ubuntu.com/ubuntu {{ image.release }} main restricted universe multiverse'
		'    architectures:'
		'    - amd64'
		'    - i386'
		''
		'  - name: sources.list'
		'    url: |-'
		'      deb http://ports.ubuntu.com/ubuntu-ports {{ image.release }} main restricted universe multiverse'
		'    architectures:'
		'    - armhf'
		'    - arm64'
		'    - powerpc'
		'    - powerpc64'
		'    - ppc64el'
		'    - riscv64'
		''
		'actions:'
		'- trigger: post-packages'
		'  action: |-'
		'    #!/bin/sh'
		'    set -eux'
		''
		'    # Enable systemd-networkd'
		'    systemctl enable systemd-networkd'
		''    
		'- trigger: post-packages'
		'  action: |-'
		'    #!/bin/sh'
		'    set -eux'
		''
		'    # Cleanup underlying /run'
		'    mount -o bind / /mnt'
		'    rm -rf /mnt/run/*'
		'    umount /mnt'
		''
		'    # Cleanup temporary shadow paths'
		'    rm /etc/*-'
		'    # Create /app directory'
		'    mkdir /app/'
		''
		'- trigger: post-files'
		'  action: |-'
		'    #!/bin/sh'
		''    
		'    #Run wrapper_script.sh on startup of container'
		'    (crontab -l ; echo "@reboot bash /app/wrapper_script.sh")| crontab -'
		'    chmod 777 /app/wrapper_script.sh'	
    }
}
