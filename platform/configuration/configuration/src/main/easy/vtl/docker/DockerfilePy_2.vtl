import Basics;
import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template DockerfilePy_2(IIPEcosphere config, FileArtifact target, sequenceOf(MeshElement) elements, Application app) {
	
    def main(IIPEcosphere config, FileArtifact target, sequenceOf(MeshElement) elements, Application app) {
    	
    	'FROM openjdk:16-alpine3.13'  // TODO Java-Version & CPU
    	/*
    	sequenceOf(PythonService) services = elements -> collect(e|e.impl) -> selectByType(PythonService);
    	for (PythonService pyService : services) {          	
        	setOf(Dependency) deps = pyService.dependencies;
        	for (Dependency s : deps) {
        		if (s.isTypeOf(SystemDependency)) {
        		
        		}
        		'system dep: ${s}'
        	}
        }
    	*/
    	
    	'COPY --from=python:3.8-slim-buster / /'
    	'WORKDIR /app'
    	''
    	'# App'
    	'COPY ${getAppMvnName(app)}/target/${getAppMvnName(app)}-${getAppMvnVersion(app)}-bin.jar ${getAppMvnName(app)}-${getAppMvnVersion(app)}-bin.jar'
    	''
    	'# ECS and Service Manager'
    	'COPY ecsSvcJars/ ecsSvcJars'
    	'COPY common/ common'
    	'COPY ecsServiceMgr.sh ecsServiceMgr.sh'
    	''	
    	'# Broker'
    	'COPY broker/brokerJars/ brokerJars'
    	'COPY broker/src/ src'
    	'COPY broker/broker.sh broker.sh'
    	''
		'# Python Dependecies'
    	'COPY requirements.txt requirements.txt'
    	'RUN python3 -m pip install -r requirements.txt'
    	''
    	'# Running ECS and Service Manager'
		'CMD ./ecsServiceMgr.sh'
          
    }	
}
