import Basics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template PythonReq(IIPEcosphere config, FileArtifact target, sequenceOf(MeshElement) elements, EcsDevice device) {
	
    def main(IIPEcosphere config, FileArtifact target, sequenceOf(MeshElement) elements, EcsDevice device) {
        sequenceOf(PythonService) services = elements -> collect(e|e.impl) -> selectByKind(PythonService);
        sequenceOf(ServiceFamily) families = elements -> collect(e|e.impl) -> selectByKind(ServiceFamily);
        for (ServiceFamily family : families) {
            for (PythonService serviceMember : family.members -> selectByKind(PythonService)) {
                services.add(serviceMember);
            }
        }

        // preliminary fix, just very basic ones, shall also include the remaining -> check versions here
        //'pyyaml
        //pyflakes
        //websockets'
        
        setOf(Dependency) existDeps = {};
        for (PythonService pyService : services) {              
            //setOf(Dependency) deps = pyService.dependencies;
            setOf(Dependency) deps = pyService.dependencies -> selectByType(PythonDependency);
            setOf(Dependency) serverDeps = pyService.server.dependencies -> selectByType(PythonDependency);
            setOf(Dependency) platformDeps = config.basicPlatformDependencies -> selectByType(PythonDependency);
            for (PythonDependency d : serverDeps) {
               deps.add(d);
            }
            
            for (PythonDependency d : platformDeps) {
               deps.add(d);
            }

            for (PythonDependency d : deps) {
               Integer exists = 0;
               for (PythonDependency existD : existDeps) {
                   if ((existD.name == d.name) and (existD.version == d.version)) {
                       exists = 1;
                   }
               }
               setOf(Dependency) dependencies = device.provides -> selectByType(PythonDependency);
               for (PythonDependency dependency : dependencies) {
                   if ((dependency.name == d.name) and ((dependency.version == null) or (dependency.version.length() == 0))) {
                       exists = 1;
                   }

                   if ((dependency.name == d.name) and (dependency.version == d.version)) {
                       exists = 1;
                   }
               }
               if (exists == 0) {
                   if (d.version == ""){
                       '${d.name}'
                   } else {
                       '${d.name} == ${d.version}'
                   }
                   existDeps.add(d);
               }
            }
            if (deps.size() == 0) {
                   ' '
            }
        }
    }	
}
