import Basics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template PythonReq(IIPEcosphere config, FileArtifact target, sequenceOf(MeshElement) elements, EcsDevice device, String envName) {

    def main(IIPEcosphere config, FileArtifact target, sequenceOf(MeshElement) elements, EcsDevice device, String envName) {
        sequenceOf(PythonService) services = elements -> collect(e|e.impl) -> selectByKind(PythonService);
        sequenceOf(ServiceFamily) families = elements -> collect(e|e.impl) -> selectByKind(ServiceFamily);
        for (ServiceFamily family : families) {
            for (PythonService serviceMember : family.members -> selectByKind(PythonService)) {
                services.add(serviceMember);
            }
        }

        setOf(Dependency) deps = {};

        for (PythonService pyService : services) {
            String condaEnv = getStringValueSafe(pyService.condaEnv, "");
            String venvName = getStringValueSafe(pyService.venvName, "");
            String reqEnv = "";
            
            if (envName.trim().length() == 0) {
                reqEnv = "";
            } else if (condaEnv.trim().length() > 0) {
                reqEnv = condaEnv;
            } else if (venvName.trim().length() > 0) {
                reqEnv = venvName;
            }
            
            if (envName == reqEnv) {
                setOf(Dependency) systemDeps = pyService.dependencies -> selectByType(SystemDependency);
                for (SystemDependency systemDep : systemDeps) {
                   for (PythonDependency d : systemDep.dependencies) {
                      deps.add(d);
                   }
                }
                
                setOf(Dependency) pyDeps = pyService.dependencies -> selectByType(PythonDependency);
                setOf(Dependency) serverDeps = pyService.server.dependencies -> selectByType(PythonDependency);
                for (PythonDependency d : pyDeps) {
                   deps.add(d);
                }
                
                for (PythonDependency d : serverDeps) {
                   deps.add(d);
                }
            }
        }

        setOf(Dependency) existDeps = {};
        for (PythonDependency d : deps) {
           Integer exists = 0;
           for (PythonDependency existD : existDeps) {
               if ((existD.name == d.name) and (existD.version == d.version)) {
                   exists = 1;
               }
           }
           
           setOf(Dependency) dependencies = device.provides -> selectByType(PythonDependency);
           for (PythonDependency dependency : dependencies) {
               if ((dependency.name == d.name) and ((dependency.version == null) or (dependency.version.length() == 0))) {
                   exists = 1;
               }

               if ((dependency.name == d.name) and (dependency.version == d.version)) {
                   exists = 1;
               }
           }

           if (exists == 0) {
               if (d.version == "") {
                   '${d.name}'
               } else {
                   '${d.name} == ${d.version}'
               }
               existDeps.add(d);
           }
        }

    }
}
