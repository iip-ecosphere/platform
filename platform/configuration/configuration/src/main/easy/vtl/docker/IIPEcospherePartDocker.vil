import JavaBasics;
import JavaMapping;
import Basics;
import MeshBasics;
import IIPEcosphereBase;

@advice(IIPEcosphere)
vilScript IIPEcospherePartDocker (Project source, Configuration config, Project target) {

    String createContainerBuildScript(DockerContainerManager mgr, Application a, sequenceOf(MeshElement) elements, 
        Path appRoot, Integer contType, Integer isPythonService) = {
        String vtlFile;
        String targetFile;
        if (contType == CONTAINER_Ecs_Svc_App) {
            if (isPythonService == 0) {
                // JAVA         
                vtlFile = "Dockerfile";
                targetFile = "Dockerfile";   
            } else {
                // JAVA & PYTHON
                vtlFile = "Dockerfile_Python";
                targetFile = "Dockerfile";   
            }
        }
                
        if (contType == CONTAINER_EcsSvc_App) {
             if (isPythonService == 0) {
                // JAVA         
                vtlFile = "Dockerfile";
                targetFile = "Dockerfile";   
             } else {
                // JAVA & PYTHON
                vtlFile = "Dockerfile";
                targetFile = "Dockerfile_Python";   
            }
        }   

        if (contType == CONTAINER_C1Ecs_C2Svc_App) {
            if (isPythonService == -1) { // Container with ECS
                vtlFile = "Dockerfile_3_ecs";
                targetFile = "ecs.Dockerfile";   
            } else if (isPythonService == 0) { // Container with ServiceMgr and App
                // JAVA         
                vtlFile = "Dockerfile";
                targetFile = "app.Dockerfile";   
            } else { // Container with ServiceMgr and App
                // JAVA & PYTHON
                vtlFile = "Dockerfile_Python";
                targetFile = "app.Dockerfile";   
            }
        }
                
        Path df = "${appRoot}/../app.Dockerfile.txt";
        vilTemplateProcessor(vtlFile, config, df, elements=elements, app=a, containerType=contType);
        df.rename(targetFile);
        targetFile;
    }
    
    String createContainerImage(DockerContainerManager mgr, Path base, Path buildFile, String registry, String repository, String tag) = {
        dockerBuildImage(base, buildFile, registry + "/" + repository + ":" + tag);
    }

}
