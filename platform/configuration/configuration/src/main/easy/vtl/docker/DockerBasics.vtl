import JavaBasics;
import Basics;

@advice(IIPEcosphere)
template DockerBasics(Configuration config, FileArtifact target) {

    def brokerSettings(TransportProtocol protocol) {
        ''
    }

    def brokerSettings(TransportProtocolAMQP protocol) {
        'ENV QPID_WORK=/tmp/qpidwork'
    }

    def containerSettings(IIPEcosphere cfg, ContainerType containerType, EcsDevice device) {
        '${brokerSettings(cfg.transportProtocol)|e}'   
        if (useFixedPort(cfg, device)) {
            Integer port;
            if (isDefined(device.aasImplPort) and device.aasImplPort <> null) {
                port = device.aasImplPort;
            } else {
                port = cfg.aasImplServer.port;
            }
            ''
            'ENV iip.port=${port}'
            if (containerType == ContainerType::Ecs_Svc_App) {
                'ENV iip.port.svgMgr=${port + 1}'
            }
            'EXPOSE ${port}'
            if (containerType == ContainerType::Ecs_Svc_App) {
                'EXPOSE ${port + 1}'
            }
        } else {
            ''
        }
    }
    
    def Boolean useFixedPort(IIPEcosphere cfg, EcsDevice device) {
        not(cfg.aasImplServer.devicesAsEphemeral);
    }
    
    def toDockerImageName(String repo, String registry, String tag) {
        toDockerImageName("${repo}/${registry}:${tag}");
    }
    
    def toDockerImageName(String name) {
        name.toLowerCase();
    }
    
    def setOf(Dependency) collectDependencies(sequenceOf(MeshElement) elements) {
        collectDependencies(elements->collect(e|e.impl));
    }

    def setOf(Dependency) collectDependencies(sequenceOf(ServiceBase) services) {
        setOf(Dependency) result = {};
        for (ServiceBase s: services) {
            result = collectDependenciesSvc(s, result);
        }
        result;
    }
    
    def setOf(Dependency) addDependenciesRec(setOf(Dependency) deps, setOf(Dependency) result) {
         for (Dependency d: deps) {
            result.add(d);
             result = collectDependenciesDep(d, result);
         }
         result;
    }

    // allow for dynamic dispatch override
    def setOf(Dependency) collectDependenciesSvc(ServiceBase service, setOf(Dependency) result) {
         addDependenciesRec(service.dependencies, result);
    }

    // dynamic dispatch base
    def setOf(Dependency) collectDependenciesDep(Dependency dep, setOf(Dependency) result) {
        result.add(dep);
        result;
    }

    // dynamic dispatch base
    def setOf(Dependency) collectDependenciesDep(PythonDependency dep, setOf(Dependency) result) {
        result.add(dep);
        addDependenciesRec(dep.dependencies, result);
    }

}
