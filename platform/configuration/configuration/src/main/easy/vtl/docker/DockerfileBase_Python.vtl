import Basics;
import JavaBasics;
import DockerBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template DockerfileBase_Python(IIPEcosphere config, FileArtifact target, sequenceOf(MeshElement) elements, Application app, Boolean justCommenDep) {
	
    def main(IIPEcosphere config, FileArtifact target, sequenceOf(MeshElement) elements, Application app, Boolean justCommenDep) {
        

        Integer IsPythonInstalled = 0;
        String pythonPipInstalled = "";
        DockerContainerManager mgr = config.containerManager;
        String appName = app.name.toIdentifier().toLower();

        sequenceOf(PythonService) services = elements -> collect(e|e.impl) -> selectByKind(PythonService);
        sequenceOf(ServiceFamily) families = elements -> collect(e|e.impl) -> selectByKind(ServiceFamily);
        for (ServiceFamily family : families) {
            for (PythonService serviceMember : family.members -> selectByKind(PythonService)) {
                services.add(serviceMember);
            }
        }
            
        if (not(justCommenDep)) {
            'FROM ${mgr.registry}/${appName}/appcommendepbaseimage:0.1.0'
            
            for (PythonService pyService : services) {
                Boolean isCondaService = false;
                if (isDefined(pyService.condaEnv) and pyService.condaEnv.length() > 0) {
                    isCondaService = true;
                } else {
                    isCondaService = false;
                }

                if (not(isCondaService)) {
                    setOf(Dependency) deps = pyService.dependencies;
                    for (Dependency s : deps) {
                        if (genDependency(s) == 'PYTHON2') {
                            if (IsPythonInstalled == 0) {
                                IsPythonInstalled = 1;
                                pythonPipInstalled = 'RUN python2 -m pip install -r requirements.txt';
                            }
                        } else if (genDependency(s) == 'PYTHON38') {
                            if (IsPythonInstalled == 0) {
                                IsPythonInstalled = 1;
                                pythonPipInstalled = 'RUN python3.8 -m pip install -r requirements.txt';
                            }
                        } else if (genDependency(s) == 'PYTHON39') {
                            if (IsPythonInstalled == 0) {
                                IsPythonInstalled = 1;
                                pythonPipInstalled = 'RUN python3.9 -m pip install -r requirements.txt';
                            }
                        } else if (genDependency(s) == 'PYTHON313') {
                            if (IsPythonInstalled == 0) {
                                IsPythonInstalled = 1;
                                pythonPipInstalled = 'RUN python3.13 -m pip install -r requirements.txt';
                            }
                        }
                    }
                }
            }

            if (IsPythonInstalled == 0) {
                pythonPipInstalled = 'RUN python3.9 -m pip install -r requirements.txt';
            } 
            
            '# Install python dependencies'
            'COPY requirements.txt requirements.txt'
            '${pythonPipInstalled}'
            '${genPythonEnvs(services, false, false)}'

        } else {
            setOf(Dependency) allDependencies = collectDependencies(elements);
            sequenceOf(String) tmp = {};
            for (Dependency d: allDependencies) {
                installBeforePip(d, tmp);
            }

            Integer IsPythonInstalled = 0;
            String pythonPipInstalled = "";
            for (PythonService pyService : services) {
                Boolean isCondaService = false;
                if (isDefined(pyService.condaEnv) and pyService.condaEnv.length() > 0) {
                    isCondaService = true;
                } else {
                    isCondaService = false;
                }

                if (not(isCondaService)) {
                    setOf(Dependency) deps = pyService.dependencies;
    
                    for (Dependency s : deps) {
                    	String genDependency = genDependency(s);
                        if (genDependency == 'PYTHON2') {
                            if (IsPythonInstalled == 0) {
                                'FROM python:2.7.10'
                                IsPythonInstalled = 1;
                                pythonPipInstalled = 'RUN python2 -m pip install -r requirements.txt';
                            }
                            for (String s: tmp) {
                                '${s}'
                            }
                        } else if (genDependency == 'PYTHON38') {
                            if (IsPythonInstalled == 0) {
                                '${getPythonBaseImage(genDependency)}'
                                'RUN apt-get update -y'
                                IsPythonInstalled = 1;
                                pythonPipInstalled = 'RUN python3.8 -m pip install -r requirements.txt';
                            }
                            for (String s: tmp) {
                                '${s}'
                            }
                        } else if (genDependency == 'PYTHON39') {
                            if (IsPythonInstalled == 0) {
                                '${getPythonBaseImage(genDependency)}'
                                'RUN apt-get update -y'
                                IsPythonInstalled = 1;
                                pythonPipInstalled = 'RUN python3.9 -m pip install -r requirements.txt';
                            }
                            for (String s: tmp) {
                                '${s}'
                            }
                        } else if (genDependency == 'PYTHON313') {
                            if (IsPythonInstalled == 0) {
                                '${getPythonBaseImage(genDependency)}'
                                'RUN apt-get update -y'
                                IsPythonInstalled = 1;
                                pythonPipInstalled = 'RUN python3.13 -m pip install -r requirements.txt';
                            }
                            for (String s: tmp) {
                                '${s}'
                            }
                        } 
                    }
                }
            }
            
            if (IsPythonInstalled == 0) {
                '${getPythonBaseImage("PYTHON39")}'
                'RUN apt-get update -y'
                IsPythonInstalled = 1;
                pythonPipInstalled = 'RUN python3.9 -m pip install -r requirements.txt';
                for (String s: tmp) {
                    '${s}'
                }
            }
            
            ''
            'RUN apt install wget -y && wget https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.deb && dpkg -i jdk-21_linux-x64_bin.deb'
            ''
            if (not(collectDependencies(elements)->selectByKind(SystemDependency)->select(d|d.key=='JAVA8').isEmpty())) {
                '# Installed Java 8'
                'RUN apt-get update && apt-get install -y --no-install-recommends temurin-8-jdk     && apt-get clean && rm -rf /var/lib/apt/lists/*'
                'RUN apt-get update && apt-get install -y --no-install-recommends         ca-certificates wget gnupg     && wget -qO - https://packages.adoptium.net/artifactory/api/gpg/key/public | apt-key add -     && echo "deb https://packages.adoptium.net/artifactory/deb bullseye main" > /etc/apt/sources.list.d/temurin.list'
                'RUN apt-get update -y && apt install wget -y && wget https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.deb && dpkg -i jdk-21_linux-x64_bin.deb'
            }
            ''
            //'${containerSettings(config, containerType, device)}'
            ''
            '# Installed dependencies (shall be in /)'
            'COPY installedDependencies.yml installedDependencies.yml'
            ''
            '${genServersExpose(app)|e}'
            'WORKDIR /app'
            ''
            '# resources/devices'
            'COPY resources/ resources'
            ''
            '# Broker'
            'COPY broker/brokerJars/ brokerJars'
            'COPY broker/src/ src'
            'COPY broker/broker.sh broker.sh'
            ''
            if (IsPythonInstalled == 1) {
                '# Install python dependencies'
                'COPY requirements.txt requirements.txt'
                '${pythonPipInstalled}'
                '${genPythonEnvs(services, true, true)}'
            }
            ''
            '${genTestingMode(config, "Python")}'
            ''
        }
    }
    
}
