@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template Basics(Configuration config, FileArtifact target) {

    // for now, here to ease dependencies. Shall go to MavenBasics
	
    compound AssemblyInfo {
        String id;
        String path;
        String phase;
        String outDir;
        String finalName = "";
        Boolean attach = true;
    }
    
    def addAssemblyInfo(setOf(AssemblyInfo) assemblies, String id, String path, String phase, String outDir, String finalName="", Boolean attach = true) {
        AssemblyInfo aInfo = new AssemblyInfo();
        aInfo.id = id;
        aInfo.path = path;
        aInfo.phase = phase;
        aInfo.outDir = outDir;
        aInfo.finalName = finalName;
        aInfo.attach = attach;
        assemblies.add(aInfo);
    }
    
    compound DependencyArtifact {
        String artifact;
        String classifier;
        String outputDir;
        String destFileName;
        String type;
        String goal;
    }

    def addDependencyArtifact(setOf(DependencyArtifact) artifacts, String artifact, String classifier, String outputDir, String destFileName, String type, String goal) {
        DependencyArtifact dInfo = new DependencyArtifact();
        dInfo.artifact = artifact;
        dInfo.classifier = classifier;
        dInfo.outputDir = outputDir;
        dInfo.destFileName = destFileName;
        dInfo.type = type;
        dInfo.goal = goal;
        artifacts.add(dInfo);
    }

    def addPythonDependencyArtifact(setOf(DependencyArtifact) artifacts, String artifact, String outputDir) {
        addDependencyArtifact(artifacts, artifact, "python", outputDir, "python.zip", "zip", "unpack");
    }
    
    compound ResourceInfo {
        String srcDir;
        String file;
    }

    def addResourceInfo(setOf(ResourceInfo) infos, String srcDir, String file) {
        ResourceInfo rInfo = new ResourceInfo();
        rInfo.srcDir = srcDir;
        rInfo.file = file;
        infos.add(rInfo);
    }
	
    def Boolean isUsedType(setOf(String) usedServiceTypes, Type type) {
        String name = type;
        usedServiceTypes.includes(name);
    }
    
    def Boolean isPythonUsed(setOf(String) usedServiceTypes) {
        isUsedType(usedServiceTypes, PythonService);
    }	
    
    def Boolean isRecordArray(Field field) {
        isRecordArray(field.type);
    }
    
    def Boolean isRecordArray(DataType type) {
        false;
    }

    def Boolean isRecordArray(ArrayType type) {
        type.type.isKindOf(RecordType);
    }
	
	/**
	* Generic function to substitute characters that are typically not allowed in programming 
	* language identifiers by respective character sequences.
	*
	* input: string
	* output: potentially modified string
	*/
	def String substNonIdCharacters(String s) {
	    // don't replace $ or "." here -> Java
	    String tmp = s.replace("<", "Lt").replace(">", "Rt");
	    tmp.toIdentifier("id");
	}
	
	/**
	* Turns the given string into HTML. Very basic version. May be, we need an EASy-Extension in PseudoString there.
	*
    * input: string
    * output: potentially modified string
	*/
	def String htmlize(String s) {
	    s.replace("<", "&lt;").replace(">", "&gt;").replace("@", "&commat;").replace("&", "&amp;");
	}
	
	/**
	* Strips off a potential language string postfix.
    *
    * input: string
    * output: potentially modified string
    */
    def String stripLang(String s) {
        Integer pos = s.rfind("@");
        if (pos >= s.length() - 4) { // probably the LangString notation
            s = s.substring(0, pos);
        }
        s;
    }

    /**
    * Turns a string into a folder name.
    *
    * input: string
    * output: potentially modified string
    */
	def String toFolderName(String s) {
	    // potentially incomplete, no substNoIdCharacters here for now
        s.firstToLowerCase().toIdentifier();
    }
    
    def String getResourcesFolder() {
        getProperty("iip.resources", "./resources");
    }
	
	def setOf(MeshElement) nextMeshNodes(MeshElement elt, mapOf(MeshElement, setOf(MeshConnector)) mappedMesh) {
	    getNextMeshNodes(elt, mappedMesh);
    }

    def setOf(MeshElement) getNextMeshNodes(MeshElement elt, mapOf(MeshElement, setOf(MeshConnector)) mappedMesh) {
        {};
    }
    
    def setOf(MeshElement) getNextMeshNodes(MeshSource source, mapOf(MeshElement, setOf(MeshConnector)) mappedMesh) {
        mapNext(source, source.next, mappedMesh);
    }

    def setOf(MeshElement) getNextMeshNodes(MeshInnerElement elt, mapOf(MeshElement, setOf(MeshConnector)) mappedMesh) {
        mapNext(elt, elt.next, mappedMesh);
    }
    
    def setOf(MeshElement) mapNext(MeshElement elt, setOf(MeshConnector) next, mapOf(MeshElement, setOf(MeshConnector)) mappedMesh) {
        for (MeshConnector c: next) {
            setOf(MeshConnector) connectors;
            if (mappedMesh.containsKey(elt)) {
                connectors = mappedMesh.get(elt);
            } else {
                connectors = {};
                mappedMesh.add(elt, connectors);
            }
            connectors.add(c);
        }
        next->collect(MeshConnector c|c.next);
    }
    
    def mapOf(IOType, IOType) ioPairs(sequenceOf(IOType) input, sequenceOf(IOType) output) {
        mapOf(IOType, IOType) result = {};
        sequenceOf(Integer) indexes = createIntegerSequence(0, min(input.size(), output.size()));
        for (Integer i : indexes) {
            result.add(input.get(i), output.get(i));
        }
        result;
    }

    def DataType firstType(sequenceOf(IOType) types) {
        IOType f = types.first();
        f.type;
    }
    
    def String prependIfNotEmpty(String prefix, String text) {
        if (text.length() > 0) {
            prefix + text;
        } else {
            "";
        }
    }

    def String appendIfNotEmpty(String text, String postfix) {
        if (text.length() > 0) {
            text + postfix;
        } else {
            "";
        }
    }

    def String appendWithNewline(String text1, String text2) {
        appendWithSeparator(text1, "\n", text2);
    }

    def String appendWithSemicolon(String text1, String text2) {
        appendWithSeparator(text1, ";", text2);
    }

    def String appendWithSeparator(String text1, String sep, String text2) {
        if (text1.length() > 0) {
            text1 + sep + text2;
        } else {
            text2;
        }
    }
    
    /*
    * Returns the protocol (broker) port, which may be the global port (if requested)/no local port is defined
    * or the local port defined in protocol.
    */
    def protocolPort(TransportProtocol protocol, Boolean global) {
        if (global or not(isDefined(protocol.localPort))) {
            protocol.port;
        } else {
            protocol.localPort;
        }
    }
    
    // what is the protocol host, if not global -> "localhost", else initially the global protocol host in the cfg
    def protocolHost(TransportProtocol protocol, Boolean global) {
        if (global and isDefined(protocol.globalHost)) {
            protocol.globalHost;
        } else {
            "localhost";
        }
    } 
    
    def String getStringValueSafe(DecisionVariable var, String dflt) {
        String res;
        if (isDefined(var) and var <> null) {
            res = var;
        } else {
            res = dflt;
        }
        res;
    }

    def Integer getIntegerValueSafe(DecisionVariable var, Integer dflt) {
        Integer res;
        if (isDefined(var) and var <> null) {
            res = var;
        } else {
            res = dflt;
        }
        res;
    }

    def getBooleanValueSafe(DecisionVariable var, Boolean dflt) {
        Boolean res;
        if (isDefined(var) and var <> null) {
            res = var;
        } else {
            res = dflt;
        }
        res;
    }
    
    def String getContainerNameDflt(EcsDevice device) {
        String containerName = device.containerName;
        if (containerName.length() == 0) {
            containerName = "dflt"; // -> default device empty container name
        }
        containerName;
    }
    
    def getContainerGenerationSafe(DecisionVariable var) {
        getBooleanValueSafe(var, true);
    }

    def getPlatformContainerGenerationSafe(DecisionVariable var) {
        getBooleanValueSafe(var, true);
    }

    def getContainerBaseImageMethodSafe(DecisionVariable var) {
        getBooleanValueSafe(var, false);
    }

    def getContainerTestingModeSafe(DecisionVariable var) {
        getBooleanValueSafe(var, false);
    }

    def getForceContainersCreationSafe(DecisionVariable var) {
        getBooleanValueSafe(var, false);
    }
    
    def hasMonitoring(IIPEcosphere config) {
        isDefined(config.platformMonitoring) and config.platformMonitoring <> null and not(config.platformMonitoring.isTypeOf(NoPlatformMonitoring));
    }
    
    def hasUI(IIPEcosphere config) {
        isDefined(config.managementUi) and config.managementUi <> null and not(config.managementUi.isTypeOf(NoManagementUI));
    }
        
}