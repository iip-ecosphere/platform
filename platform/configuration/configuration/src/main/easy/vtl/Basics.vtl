@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template Basics(Configuration config, FileArtifact target) {
	
	/**
	* Generic function to substitute characters that are typically not allowed in programming 
	* language identifiers by respective character sequences.
	*
	* input: string
	* output: potentially modified string
	*/
	def String substNonIdCharacters(String s) {
	    // don't replace $ or "." here -> Java
	    String tmp = s.replace("<", "Lt").replace(">", "Rt");
	    tmp.toIdentifier();
	}

    /**
    * Turns a string into a folder name.
    *
    * input: string
    * output: potentially modified string
    */
	def String toFolderName(String s) {
	    // potentially incomplete, no substNoIdCharacters here for now
        s.firstToLowerCase().toIdentifier();
    }
    
    def String getResourcesFolder() {
        getProperty("iip.resources", "./resources");
    }
	
	def setOf(MeshElement) nextMeshNodes(MeshElement elt, mapOf(MeshElement, setOf(MeshConnector)) mappedMesh) {
	    getNextMeshNodes(elt, mappedMesh);
    }

    def setOf(MeshElement) getNextMeshNodes(MeshElement elt, mapOf(MeshElement, setOf(MeshConnector)) mappedMesh) {
        {};
    }
    
    def setOf(MeshElement) getNextMeshNodes(MeshSource source, mapOf(MeshElement, setOf(MeshConnector)) mappedMesh) {
        mapNext(source, source.next, mappedMesh);
    }

    def setOf(MeshElement) getNextMeshNodes(MeshInnerElement elt, mapOf(MeshElement, setOf(MeshConnector)) mappedMesh) {
        mapNext(elt, elt.next, mappedMesh);
    }
    
    def setOf(MeshElement) mapNext(MeshElement elt, setOf(MeshConnector) next, mapOf(MeshElement, setOf(MeshConnector)) mappedMesh) {
        for (MeshConnector c: next) {
            setOf(MeshConnector) connectors;
            if (mappedMesh.containsKey(elt)) {
                connectors = mappedMesh.get(elt);
            } else {
                connectors = {};
                mappedMesh.add(elt, connectors);
            }
            connectors.add(c);
        }
        next->collect(MeshConnector c|c.next);
    }
    
    def mapOf(IOType, IOType) ioPairs(sequenceOf(IOType) input, sequenceOf(IOType) output) {
        mapOf(IOType, IOType) result = {};
        sequenceOf(Integer) indexes = createIntegerSequence(0, min(input.size(), output.size()));
        for (Integer i : indexes) {
            result.add(input.get(i), output.get(i));
        }
        result;
    }

    def DataType firstType(sequenceOf(IOType) types) {
        IOType f = types.first();
        f.type;
    }
    
    def String prependIfNotEmpty(String prefix, String text) {
        if (text.length() > 0) {
            prefix + text;
        } else {
            "";
        }
    }

    def String appendWithNewline(String text1, String text2) {
        appendWithSeparator(text1, "\n", text2);
    }

    def String appendWithSemicolon(String text1, String text2) {
        appendWithSeparator(text1, ";", text2);
    }

    def String appendWithSeparator(String text1, String sep, String text2) {
        if (text1.length() > 0) {
            text1 + sep + text2;
        } else {
            text2;
        }
    }
	
}