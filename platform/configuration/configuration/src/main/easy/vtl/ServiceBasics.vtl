import Basics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template ServiceBasics(Configuration config, FileArtifact target) {
    
    def sequenceOf(IOType) forward(sequenceOf(IOType) types) {
        types->select(t|t.forward);
    }
    
    def sequenceOf(IOType) filterBackward(sequenceOf(IOType) types, Boolean filter) {
        sequenceOf(IOType) result;
        if (filter) {
            result = backward(types);
        } else {
            result = types;
        }
        result;
    }

    def sequenceOf(IOType) backward(sequenceOf(IOType) types) {
        types->select(t|not(t.forward));
    }
    
    def mapOf(IOType, IOType) ioPairs(ServiceBase service) {
        ioPairs(forward(service.input), forward(service.output));
    }
    
    def produceForInputTypes(ServiceBase service) {
        if (service.asynchronous) {
            for (IOType in : service.input) {
                '${produceAsyncProcessorBody(in)}'
            }
        } else {
            mapOf(IOType, IOType) pairs = ioPairs(service);
            for (IOType in : pairs.keys()) {
                IOType out = pairs.get(in);
                '${produceSyncProcessorBody(out, in)}'
            }
            sequenceOf(IOType) rcv = backward(service.input);
            if (rcv.size() > 0) { // EASY bug
                for (IOType in : rcv) {
                    '${produceAsyncProcessorBody(in)}'
                }
            }
        }
    }
    
    def produceForOutputTypes(ServiceBase service) {
        if (service.asynchronous) {
            for (IOType out : service.output) {
                '${produceIngestorBody(out)}'
            }
        } else {
            for (IOType out : backward(service.output)) {
                '${produceIngestorBody(out)}'
            }
            
            mapOf(IOType, IOType) pairs = ioPairs(service);
            //setOf(IOType) mappedOut = values(pairs); // easy bug
            setOf(IOType) mappedOut = {};
            for (IOType in : pairs.keys()) {
                mappedOut.add(pairs.get(in));
            }
            for (IOType out : forward(service.output)) {
                if (mappedOut.excludes(out)) {
                    '${produceProducerBody(out)}'
                }
            }
        }
    }

    def produceAsyncProcessorBody(IOType type) {
    }
    
    def produceSyncProcessorBody(IOType returnType, IOType dataType) {
    }
    
    def produceIngestorBody(IOType type) {
    }
    
    def produceProducerBody(IOType type) {
    }
    
    // ----------------------------- parameters -------------------------------

    def produceForParameterAttributes(ServiceBase service) {
        for (Parameter p: service.parameter) {
            '${produceParameterAttribute(p)}'
        }
    }
    
    def produceParameterAttribute(Parameter p) {
    }
    
    def produceForParameter(ServiceBase service) {
        for (Parameter p: service.parameter) {
            '${produceParameterBody(p)}'
        }
    }
    
    def produceParameterBody(Parameter p) {
    }
    
    // -------------------------- collecting types ----------------------------
    
    def setOf(RecordType) collectRecordTypes(ServiceBase service) {
        setOf(RecordType) types = {};
        collectRecordTypesFromSet(service.input, types);
        collectRecordTypesFromSet(service.output, types);
        types;
    }
    
    def collectRecordTypesFromSet(sequenceOf(IOType) types, setOf(RecordType) result) {
       for (IOType t: types) {
           collectRecordType(t.type, result);
       }
    }
    
    def collectRecordType(DataType type, setOf(RecordType) result) {
        // nothing, dispatch base
    }

    def collectRecordType(RecordType type, setOf(RecordType) result) {
        result.add(type);
    }    
	
}