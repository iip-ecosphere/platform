import Basics;
import JavaBasics;
import SpringBasics;
import SpringCloudStreamBasics;
import MeshBasics;
import JavaConnector;
import ServiceBasics;
import JavaSpringCloudStreamMeshElementBase;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaSpringCloudStreamMeshElementPartKodex(Configuration config, FileArtifact target, MeshElement elt, String pkg, 
    Application app, Boolean sharedInterfaces, String familyInterface, ServiceBase familyMember, setOf(MeshElement) nodes) {
    
    def String kodexServiceName(IOType in, IOType out) {
        "service${toTypeName(in.type)}${toTypeName(out.type)}";
    }
    
    def getServiceType(MeshElement elt, KodexService service) {
        "de.iip_ecosphere.platform.security.services.kodex.KodexService";
    }
    
    def generateReceptionCallback(MeshProcessor elt, KodexService service, JavaCodeClass c) {
        generateTypeTranslators(elt, service, "_" + toIdentifier(service.id), c);
    }

    def genIngestor(KodexService service, String methodSuffix, String conn, String type, String dir, ServiceBase target, String connPlaceHolder, JavaCodeBlockInterface block) {
        mapOf(IOType, IOType) pairs = ioPairs(service.input, service.output);
        for (IOType in : pairs.keys()) {
            IOType out = pairs.get(in);
            JavaCodeExpression expr = generateTransportSend(service, type, springConnId(service, conn, target, app), connPlaceHolder);
            if (getTypeAdd() <> "") {
                block.addCall("attachIngestor").qualifiedBy(kodexServiceName(in, out)).addClassArgument(type + getTypeAdd()).addLambdaArgument("data").addAsExpression(genSentProbe(service, expr, false, type, "data"));
            }
            block.addCall("attachIngestor").qualifiedBy(kodexServiceName(in, out)).addClassArgument(type).addLambdaArgument("data").addAsExpression(genSentProbe(service, expr, false, type, "data"));
        }
    }
    
    def generateServiceAttribute(MeshProcessor elt, KodexService service, JavaCodeClass c) {
        mapOf(IOType, IOType) pairs = ioPairs(elt);
        String serviceType = getServiceType(elt, service);
        for (IOType in : pairs.keys()) {
            String inType = toQualifiedTypeName(in.type);
            IOType out = pairs.get(in);
            String outType = toQualifiedTypeName(out.type);
            c.addAttribute("${serviceType}<${inType},${outType}>", kodexServiceName(in, out));
        }
    }
    
    def generateAsyncProcessorBody(MeshElement proc, KodexService kodex, String methodSuffix, String methodSuffixWithServiceId, String type, JavaCodeMethod m) {
        mapOf(IOType, IOType) pairs = ioPairs(proc);
        String simpleType = toSimpleName(type);
        setOf(IOType) ins = pairs.keys()->select(t|toTypeName(t.type)==simpleType);
        if (ins.size() > 0) {
            IOType in = ins.toSequence().first();
            if (pairs.containsKey(in)) {
                IOType out = pairs.get(in);
                String procExpr = "${kodexServiceName(in, out)}.processQuiet(data)";
                m.addReturn(new JavaCodeLambdaExpression("data").addAsExpression(genRcvProbe(kodex, procExpr, type, "data")));
            } else {
                m.addReturn("null");
            }
        } else {
            m.addReturn("null");
        }
    }

    def initialService(MeshProcessor elt, KodexService service, setOf(String) serviceVars, JavaCodeMethod m) {
        String clsName = getClsName(elt);
        getYamlServiceFragment("serviceData", clsName, "${service.id}", m);
        mapOf(IOType, IOType) pairs = ioPairs(elt);
        for (IOType in : pairs.keys()) {
            String inType = toTypeName(in.type);
            IOType out = pairs.get(in);
            String outType = toTypeName(out.type);
            serviceVars.add(kodexServiceName(in, out));
            JavaCodeMethodCall init = new JavaCodeConstructorCall(getServiceType(elt, elt.impl)).addArgument(new JavaCodeConstructorCall(inType + "InputTranslator"))
                .addArgument(new JavaCodeConstructorCall(outType + "OutputTranslator")).addNullArgument().addArgument("serviceData");
            m.addAssignment(kodexServiceName(in, out), init);
        }
    }
    
}
