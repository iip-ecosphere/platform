import Basics;
import JavaBasics;
import MavenBasics;
import JavaMapping;
import MeshBasics;
import SpringCloudStreamDeploymentDescriptorBase;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template SpringCloudStreamDeploymentDescriptorPartFlowerAI(Configuration config, FileArtifact target, Application app, sequenceOf(MeshElement) elements) {

    def generateServer(FlowerFederatedAiServer server, YamlNode node) {
        String clsName = asTypeName(server.id);
        String id = toFolderName(server.id);
        sequenceOf(String) artifacts = createArtifacts("/python_${id}.zip");
        sequenceOf(String) cmdArg = createPythonCmdArg(server.id, pythonServicesPackageName(server), "\\${tmp}/flowerAi_${id}");
        addProcess(node, "\\${tmp}/flowerAi_${id}", "", artifacts=artifacts, cmdArg=cmdArg, addTopNode=false);
    }
    
    def generateService(FlowerFederatedAiService service, YamlNode node) {
        if (isDefined(service.server)) {
            node.addValue("netMgtKey", service.server.id);
            node.addValue("transportChannel", getStringValueSafe(service.server.transportChannel, ""));
        }
    }
    
}
