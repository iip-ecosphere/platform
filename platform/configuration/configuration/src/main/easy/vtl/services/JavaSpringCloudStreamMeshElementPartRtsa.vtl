import Basics;
import JavaBasics;
import SpringBasics;
import SpringCloudStreamBasics;
import MeshBasics;
import JavaConnector;
import ServiceBasics;
import JavaSpringCloudStreamMeshElementBase;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaSpringCloudStreamMeshElementPartRtsa(Configuration config, FileArtifact target, MeshElement elt, String pkg, 
    Application app, Boolean sharedInterfaces, String familyInterface, ServiceBase familyMember, setOf(MeshElement) nodes) {
    
    mapOf(String, String) inFieldNames = {};
    mapOf(String, String) outFieldNames = {};
    
    def initialService(MeshElement elt, RtsaService service, setOf(String) serviceVars, JavaCodeMethod m) {
        String clsName = "RtsaRestService";
        getYamlServiceFragment("serviceData", clsName, "${service.id}", m);
        serviceVars.add("service");
        m.addAssignment("service", new JavaCodeConstructorCall("de.iip_ecosphere.platform.kiServices.rapidminer.rtsa.MultiRtsaRestService").addArgument("serviceData"));
        for (IOType in: service.input) {
            String inType = toTypeName(in.type);
            String field = getRtsaFieldName(in);
            inFieldNames.add(inType, field);
            m.addCall("service.registerInputTypeTranslator").addClassArgument(inType).addStringArgument(field).addArgument(new JavaCodeConstructorCall(inType + "InputTranslator"));
        }
        for (IOType out: service.output) {
            String outType = toTypeName(out.type);
            String field = getRtsaFieldName(out);
            outFieldNames.add(outType, field);
            m.addCall("service.registerOutputTypeTranslator").addClassArgument(outType).addStringArgument(field).addArgument(new JavaCodeConstructorCall(outType + "OutputTranslator"));
        }
    }

    @DispatchBasis   
    def getRtsaFieldName(IOType type) {
        type.type.name;
    }

    @DispatchCase
    def getRtsaFieldName(RtsaIOType type) {
        if (isDefined(type.rtsaField) and type.rtsaField <> null) {
            type.rtsaField;
        } else {
            type.type.name;
        }
    }
    
    def generateServiceAttribute(MeshElement elt, RtsaService service, JavaCodeClass c) {
        c.addAttribute("de.iip_ecosphere.platform.kiServices.rapidminer.rtsa.MultiRtsaRestService", "service");
    }

    def genIngestor(RtsaService service, String methodSuffix, String conn, String type, String dir, ServiceBase target, String connPlaceHolder, JavaCodeBlockInterface block) {
        String field = outFieldNames.get(type);
        JavaCodeExpression expr = generateTransportSend(service, type, springConnId(service, conn, target, app), connPlaceHolder);
        if (getTypeAdd() <> "") {
            block.addCall("service.attachIngestor").addClassArgument(type + getTypeAdd()).addStringArgument(field).addLambdaArgument("data").addAsExpression(genSentProbe(service, expr, false, type, "data"));
        }
        block.addCall("service.attachIngestor").addClassArgument(type).addStringArgument(field).addLambdaArgument("data").addAsExpression(genSentProbe(service, expr, false, type, "data"));
    }
    
    def getServiceType(MeshElement elt, RtsaService service) {
        "de.iip_ecosphere.platform.kiServices.rapidminer.rtsa.MultiRtsaRestService";
    }

    def isBackward(sequenceOf(IOType) types, String type) {
        Boolean bwd = false;
        for (IOType t : types) {
            if (t.type.name == type) {
                bwd = not(t.forward);
            }
        }
        bwd;
    }

    def generateAsyncProcessorBody(MeshElement proc, RtsaService service, String methodSuffix, String methodSuffixWithServiceId, String type, JavaCodeMethod m) {
        String simpleTypeName = toSimpleName(type);
        String field = inFieldNames.get(simpleTypeName);
        String expr;
        if (not(isBackward(service.input, simpleTypeName))) { // service is not prepared for this
            expr = 'service.processQuiet("${field}", data)';
        } else {
            expr = '';
        }
        m.addReturn(new JavaCodeLambdaExpression("data").addAsExpression(genRcvProbe(service, expr, type, "data")));
    }
    
    // shall not be called, RTSA is so far always asynchronous
    def generateSyncProcessorBody(MeshProcessor proc, RtsaService service, String methodSuffix, String inType, String outType, JavaCodeMethod m) {
        String field = inFieldNames.get(inType);
        JavaCodeExpression expr = new JavaCodeMethodCall("service.processQuiet").addStringArgument(field).addArgument("data");
        m.addReturn(new JavaCodeLambdaExpression("data").addAsExpression(genSentProbe(service, expr, true, outType, "data")));
    }

    // shall not be called, RTSA is so far always asynchronous
    def generateSyncProcessorBody(MeshProcessor proc, RtsaService service, String methodSuffix, String methodSuffixWithServiceId, String inType, String outType, JavaCodeMethod m) {
        String inField = inFieldNames.get(inType);
        String outField = outFieldNames.get(outType);
        JavaCodeExpression expr = new JavaCodeMethodCall("service.processSyncQuiet").addStringArgument(inField).addArgument("data").addStringArgument(outField);
        m.addReturn(new JavaCodeLambdaExpression("data").addAsExpression(genSentProbe(service, expr, true, outType, "data")));
    }    

    def generateReceptionCallback(MeshProcessor elt, RtsaService service, JavaCodeClass c) {
        generateTypeTranslators(elt, service, "_" + toIdentifier(service.id), c);
    }
    
}
