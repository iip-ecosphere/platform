import Basics;
import JavaBasics;
import SpringBasics;
import SpringCloudStreamBasics;
import MeshBasics;
import JavaConnector;
import ServiceBasics;
import JavaSpringCloudStreamMeshElementBase;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaSpringCloudStreamMeshElementPartRtsa(Configuration config, FileArtifact target, MeshElement elt, String pkg, 
    Application app, Boolean sharedInterfaces, String familyInterface, ServiceBase familyMember, setOf(MeshElement) nodes) {
    
    mapOf(String, String) inFieldNames = {};
    mapOf(String, String) outFieldNames = {};
    
    def initialService(MeshElement elt, RtsaService service, setOf(String) serviceVars) {
        String clsName = "RtsaRestService";
        '${getYamlServiceFragment("serviceData", clsName, "${service.id}")};\n'
        serviceVars.add("service");
        'service = new MultiRtsaRestService(serviceData);\n'
        for (IOType in: service.input) {
            String inType = toTypeName(in.type);
            String field = getRtsaFieldName(in);
            inFieldNames.add(inType, field);
            'service.registerInputTypeTranslator(${inType}.class, "${field}", new ${inType}InputTranslator());\n'
        }
        for (IOType out: service.output) {
            String outType = toTypeName(out.type);
            String field = getRtsaFieldName(out);
            outFieldNames.add(outType, field);
            'service.registerOutputTypeTranslator(${outType}.class, "${field}", new ${outType}OutputTranslator());\n'
        }
    }

    @DispatchBasis   
    def getRtsaFieldName(IOType type) {
        type.type.name;
    }

    @DispatchCase
    def getRtsaFieldName(RtsaIOType type) {
        if (isDefined(type.rtsaField) and type.rtsaField <> null) {
            type.rtsaField;
        } else {
            type.type.name;
        }
    }
    
    def generateImports(RtsaService service) {
        'import de.iip_ecosphere.platform.kiServices.rapidminer.rtsa.MultiRtsaRestService;
        import com.fasterxml.jackson.databind.ObjectMapper;
        import com.fasterxml.jackson.core.JsonProcessingException;'
    }

    def generateServiceAttribute(MeshElement elt, RtsaService service) {
        'private MultiRtsaRestService service;'
    }

    def genIngestor(RtsaService service, String methodSuffix, String conn, String type, String dir, ServiceBase target, String connPlaceHolder) {
        String field = outFieldNames.get(type);
        String expr = generateTransportSend(service, type, springConnId(service, conn, target, app), connPlaceHolder);
        if (getTypeAdd() <> "") {
            'service.attachIngestor(${type}${getTypeAdd()}.class, "${field}", data -> ${genSentProbe(service, expr, false, type, "data")});'
        }
        'service.attachIngestor(${type}.class, "${field}", data -> ${genSentProbe(service, expr, false, type, "data")});'
    }
    
    def getServiceType(MeshElement elt, RtsaService service) {
        "de.iip_ecosphere.platform.kiServices.rapidminer.rtsa.MultiRtsaRestService";
    }

    def isBackward(sequenceOf(IOType) types, String type) {
        Boolean bwd = false;
        for (IOType t : types) {
            if (t.type.name == type) {
                bwd = not(t.forward);
            }
        }
        bwd;
    }

    def generateAsyncProcessorBody(MeshElement proc, RtsaService service, String methodSuffix, String methodSuffixWithServiceId, String type) {
        String field = inFieldNames.get(type);
        String expr;
        if (not(isBackward(service.input, type))) { // service is not prepared for this
            expr = 'service.processQuiet("${field}", data)';
        } else {
            expr = '';
        }
        'return data -> ${genRcvProbe(service, expr, type, "data")};'
    }
    
    // shall not be called, RTSA is so far always asynchronous
    def generateSyncProcessorBody(MeshProcessor proc, RtsaService service, String methodSuffix, String inType, String outType) {
        String field = inFieldNames.get(inType);
        String expr = 'service.processQuiet("${field}", data)';
        'return data -> ${genSentProbe(service, expr, true, outType, "data")};'
    }

    // shall not be called, RTSA is so far always asynchronous
    def generateSyncProcessorBody(MeshProcessor proc, RtsaService service, String methodSuffix, String methodSuffixWithServiceId, String inType, String outType) {
        String inField = inFieldNames.get(inType);
        String outField = outFieldNames.get(outType);
        String expr = 'service.processSyncQuiet("${inField}", data, "${outField}")';
        'return data -> ${genSentProbe(service, expr, true, outType, "data")};'
    }    

    def generateReceptionCallback(MeshProcessor elt, RtsaService service) {
        String serviceId = "_" + toIdentifier(service.id);
        '${generateTypeTranslators(elt, service, serviceId)}'
    }
    
}
