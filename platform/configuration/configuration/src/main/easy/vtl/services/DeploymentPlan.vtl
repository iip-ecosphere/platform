@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="yaml", indentSteps = 4, profileArg_sorting = "INSERT", profileArg_indicatorIndent="2")
template DeploymentPlan(IIPEcosphere config, YamlFileArtifact target, DeploymentPlan plan, Application app, String artifact) {

    def main(IIPEcosphere config, YamlFileArtifact target, DeploymentPlan plan, Application app, String artifact) {
        YamlNode n = target.addDocument(true);
        n.addValue("application", plan.name);
        n.addValue("id", plan.id);
        n.addValue("appId", app.id);
        n.addValue("version", plan.ver);
        n.addValue("description", plan.description);
        n.addValueNotEmpty("artifact", artifact);
        n.addValue("parallelize", plan.parallelize);
        n.addValue("allowMultiExecution", plan.allowMultiExecution);
        n.addValue("onUndeployRemoveArtifact", plan.onUndeployRemoveArtifact);
        n.addValue("disabled", plan.disabled);
        generateEnsembles(plan, n);
        generateAssignments(plan, n);
        if (isDefined(plan.cmdArg) and plan.cmdArg.length() > 0) {
            n.addList("arguments", plan.cmdArg.split(","));
        }
        generateServers(plan, n);
        generateParameter(plan, n);
    }
    
    def generateAssignments(DeploymentPlan plan, YamlNode node) {
        if (isDefined(plan.assignments) and plan.assignments.size() > 0) {
            YamlList list = node.addList("assignments");
            plan.assignments->forEach(ServiceAssignment a|generateAssignment(a, list));
        }
    }

    @DispatchBasis
    def generateAssignment(ServiceAssignment assng, YamlList list) {
    }

    def generateAssignment(NamedServiceAssignment assng, YamlList list) {
        YamlNode n = list.addObject();
        n.addValue("resource", assng.resource);
        YamlList sList = n.addList("services");
        assng.services->forEach(MeshElement s|sList.addValue(s.impl.id));
    }
    
    def generateEnsembles(DeploymentPlan plan, YamlNode node) {
        if (isDefined(plan.ensembles) and plan.ensembles.size() > 0) {
           YamlNode e = node.addObject("ensembles");
           plan.ensembles->forEach(EnsembleSpec s|e.addValue(s.leader.impl.id, s.member.impl.id));
        }
    }

    def generateServers(DeploymentPlan plan, YamlNode node) {
        if (isDefined(plan.servers) and plan.servers.size() > 0) {
            YamlList s = node.addList("servers");
            plan.servers->forEach(ServerAssignment a|generateServer(a, s));
        }
    }

    @DispatchBasis
    def generateServer(ServerAssignment assng, YamlList list) {
    }

    def generateServer(NamedServerAssignment assng, YamlList list) {
        list.addObject().addValue(assng.server.id, assng.hostId);
    }
    
    def generateParameter(DeploymentPlan plan, YamlNode node) {
        if (plan.parameter.size() > 0) {
            YamlNode p = node.addObject("serviceParams");
            for (ParameterServiceAssignment a: plan.parameter) {
                a.parameter->forEach(ParameterAssignment pa|generateParameterAssignment(pa, p.addObject(a.service.id)));
            }
        }
    }
    
    @DispatchBasis
    def generateParameterAssignment(ParameterAssignment assng, YamlNode node) {
    }

    def generateParameterAssignment(IntegerParameterAssignment assng, YamlNode node) {
        node.addValue(assng.parameter, assng.value);
    }

    def generateParameterAssignment(StringParameterAssignment assng, YamlNode node) {
        node.addValue(assng.parameter, assng.value);
    }

    def generateParameterAssignment(RealParameterAssignment assng, YamlNode node) {
        node.addValue(assng.parameter, assng.value);
    }

    def generateParameterAssignment(BooleanParameterAssignment assng, YamlNode node) {
        node.addValue(assng.parameter, assng.value);
    }

    def generateParameterAssignment(LongParameterAssignment assng, YamlNode node) {
        node.addValue(assng.parameter, assng.value);
    }

}
