@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template DeploymentPlan(IIPEcosphere config, FileArtifact target, DeploymentPlan plan, Application app, String artifact) {

    def main(IIPEcosphere config, FileArtifact target, DeploymentPlan plan, Application app, String artifact) {
        'application: ${plan.name}
        id: ${plan.id}
        appId: ${app.id}
        version: ${plan.ver}
        description: ${plan.description}
        ${generateArtifact(artifact)|e}
        parallelize: ${plan.parallelize}
        allowMultiExecution: ${plan.allowMultiExecution}
        onUndeployRemoveArtifact: ${plan.onUndeployRemoveArtifact}
        disabled: ${plan.disabled}
        ${generateEnsembles(plan)|e}
        ${generateAssignments(plan)|e}
        ${generateArguments(plan)|e}
        ${generateServers(plan)|e}
        ${generateParameter(plan)|e}'
    }
    
    def generateArtifact(String artifact) {
        if (artifact <> "") {
            'artifact: ${artifact}'
        }
    }
    
    def generateArguments(DeploymentPlan plan) {
        if (isDefined(plan.cmdArg) and plan.cmdArg.length() > 0) { // EASY-bug
            sequenceOf(String) tmp = plan.cmdArg.split(",");
            'arguments:'
            for (String a: tmp) {
                "  - ${a}"
            }
        }
    }
    
    def generateAssignments(DeploymentPlan plan) {
        if (isDefined(plan.assignments) and plan.assignments.size() > 0) {
            'assignments:'
            for (ServiceAssignment a: plan.assignments) {
                '${generateAssignment(a)}'
            }
        }
    }

    // dispatch basis
    def generateAssignment(ServiceAssignment assng) {
        ''
    }

    def generateAssignment(NamedServiceAssignment assng) {
        '  - resource: ${assng.resource}
            services:'
        for (MeshElement s: assng.services) {
            '    - ${s.impl.id}'
        }
    }
    
    def generateEnsembles(DeploymentPlan plan) {
        if (isDefined(plan.ensembles) and plan.ensembles.size() > 0) {
            'ensembles:'
            for (EnsembleSpec s: plan.ensembles) {
                '  ${s.leader.impl.id}: ${s.member.impl.id}'
            }
        }
    }

    def generateServers(DeploymentPlan plan) {
        if (isDefined(plan.servers) and plan.servers.size() > 0) {
            'servers:'
            for (ServerAssignment a: plan.servers) {
                '${generateServer(a)}'
            }
        }
    }

    // dispatch basis
    def generateServer(ServerAssignment assng) {
        ''
    }

    def generateServer(NamedServerAssignment assng) {
        '  - ${assng.server.id}: ${assng.hostId}'
    }
    
    def generateParameter(DeploymentPlan plan) {
        if (plan.parameter.size() > 0) {
            'serviceParams:
                ${generateParameterServiceAssignments(plan.parameter)}'
        }
    }
    
    def generateParameterServiceAssignments(sequenceOf(ParameterServiceAssignment) parameter) {
        for (ParameterServiceAssignment a: parameter) {
            '${a.service.id}:
              ${generateParameterServiceAssignment(a)}'
        }
    }

    def generateParameterServiceAssignment(ParameterServiceAssignment assng) {
        for (ParameterAssignment a: assng.parameter) {
            '  ${generateParameterAssignment(a)}'
        }
    }

    // dispatch basis
    def generateParameterAssignment(ParameterAssignment assng) {
        ''
    }

    def generateParameterAssignment(IntegerParameterAssignment assng) {
        '${assng.parameter} : ${assng.value}'
    }

    def generateParameterAssignment(StringParameterAssignment assng) {
        '${assng.parameter} : ${assng.value}'
    }

    def generateParameterAssignment(RealParameterAssignment assng) {
        '${assng.parameter} : ${assng.value}'
    }

    def generateParameterAssignment(BooleanParameterAssignment assng) {
        '${assng.parameter} : ${assng.value}'
    }

    def generateParameterAssignment(LongParameterAssignment assng) {
        '${assng.parameter} : ${assng.value}'
    }

}
