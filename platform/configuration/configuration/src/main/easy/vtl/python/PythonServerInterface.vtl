import PythonBasics;
import MeshBasics;
import ServiceBasics;
import PythonServerBase;
insert PythonServerPart*;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template PythonServerInterface(Configuration config, FileArtifact target, PythonServer server, String pkg) extends PythonServerBase {
    
    def produceSuper(PythonServer server) {
        String sId = "'${server.id}'";
        'super().__init__("${server.id}", "${server.id}", Version("${server.ver}"), "${server.description}", True, ServiceKind.SERVER)
        Registry.services[${sId}] = self'
    }
    
    def main(Configuration config, FileArtifact target, PythonServer server, String pkg) {
        String clsName = asTypeName(server.id);
        'from AbstractService import AbstractService
        import Registry
        from Version import Version
        from Service import ServiceState
        from Service import ServiceKind

        class ${clsName}ServerInterface(AbstractService):
            """Interface for server "${server.id}"
               Generated by: EASy-Producer."""

            ingestor = None ## gen
            ${produceParameterFields(server.parameter)}
            
            def __init__(self):
                """Initializes the server service.""" 
                ${produceSuper(server)}

            def attachIngestor(self, ingestor): ## gen
                self.ingestor = ingestor

            def ingest(self, data): ## gen
                if self.ingestor is not None:
                    self.ingestor(data)
            
            ${produceReconfigure(server.parameter)}
            
            def setState(self, state:ServiceState):
                """Changes the state. [R133c]
                
                Parameters:
                  - newState -- the new state (ServiceState)
                """
                super().setState(state)
                if (state==ServiceState.STARTING):
                    self.start()
                if (state==ServiceState.STOPPING):
                    self.stop()
                    
            def start(self):
                """Called when the server shall start.
                """
                pass

            def stop(self):
                """Called when the server shall stop.
                """
                pass
                    
            ${generateReceiveClientServer(server)}
            '
    }
    
}
