import PythonBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template PythonJsonSerializer(Configuration config, FileArtifact target, RecordType type, Boolean sharedInterfaces) {

    def encoder(String clsName) {
    'class ${clsName}Encoder(JSONEncoder):
    """JSON encoder class for ${clsName}.
    Generated by: EASy-Producer."""

    def default(self, o):
        """Provides access to the attributes in o.
        
        Parameters:
          - o -- the object to serialize
        Returns:
          dict
            the attributes
        """
        return o.__dict__
    '
    }

    def main(Configuration config, FileArtifact target, RecordType type, Boolean sharedInterfaces) {
        String clsName = asTypeName(type.name);
        String add = "";
        if (sharedInterfaces) {
            add = "Impl";
        }
        'from json import JSONEncoder
        import json
        from iip.TypeTransatorToString import TypeTransatorToString
        from datatypes.${clsName} import ${clsName}
        
        class ${clsName}Serializer(TypeTranslatorToString):
            """JSON transport serializer for ${clsName}.
               Generated by: EASy-Producer."""
            
            ${encoder(clsName)}
            
            def __init__(self):
                """Initializes the transformer.""" 
                Registry.serializers["${clsName}"] = self
                Registry.types[${clsName}] = "${clsName}"         
            
            def readFrom(self, data: bytes) -> ${clsName}:
                """Turns bytes into an object.
                
                Parameters:
                  - data -- the data bytes
                Returns:
                  object
                    the deserialized object
                """
            
                result = ${clsName}${add}()
                result.__dict__ = json.loads(data)
                return result

            def writeTo(self, source: ${clsName}) -> bytes:
                """Turns an object into bytes.
                
                Parameters:
                  - source -- the object
                Returns:
                  bytes
                    the serialized data bytes
                """
                
                return ${clsName}Encoder().encode(source).encode("UTF-8")
                
            ${clsName}Serializer()'
    }
    
}
