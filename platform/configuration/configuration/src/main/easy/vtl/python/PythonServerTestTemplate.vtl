import Basics;
import PythonBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="python")
template PythonServerTestTemplate(Configuration config, PythonCodeArtifact target, PythonService pythonElements, PythonServer pythonServer) {

    def main(Configuration config, PythonCodeArtifact target, PythonService pythonElements, PythonServer pythonServer) {
        String clsName = asTypeName(pythonServer.id);
        String servicesPackageName = "services";
        if (pythonElements <> null) {
            if (pythonElements.server <> null and pythonElements.server.isKindOf(PythonServer)) {
                pythonServer = pythonElements.server;
                clsName = clsName + asTypeName(pythonElements.name);
            }
            servicesPackageName = getStringValueSafe(pythonElements.servicesPackageName, "services");
        }
        target.addImport("unittest");
        target.addImport("sys");
        target.addImport("os");
        target.addImport("argparse");

        target.addSysPathInsert(6, "../../../target/pySrc/iip");
        target.addSysPathInsert(7, "../../../target/pySrc");
        target.addImport("TestUtils", "runTestsFromFile").addName("runTestsFromTestFile").addName("readTestDataJson").addName("runAllTestsFromFile");
        target.addSLComment("will be the relative paths from impl.impl to impl.model, given through pom /gen onwards!", true);
        target.addSysPathInsert(1, "../../../gen/hm23/ApplicationInterfaces/src/main/python");
        target.addSysPathInsert(2, "../../../gen/hm23/ApplicationInterfaces/src/main/python/iip");
        target.addSLComment("always fixed value as these directories are generated in the impl.impl", true);
        target.addSysPathInsert(3, "../../main/python/services");
        target.addSysPathInsert(5, '../../main/python/${servicesPackageName}'); 
        target.addSysPathInsert(4, "../../main/python");

        target.addImport("time");
        target.addImport("Service", "ServiceState");
        target.addImport("json");

        String serverName = asTypeName(pythonElements.server.id);
        target.addImport(clsName, clsName);
        target.addImport(serverName, serverName);

        setOf(String) done = {};
        if (pythonElements <> null) {
            genTypeImports(pythonElements.input, done, target);
            genTypeImports(pythonElements.output, done, target);
            genSerializerImports(pythonElements.input, target);
        }

        target.addEmptyLine();
        target.addCall("os.chdir").addStringArgument("../../main/python");
        target.addEmptyLine();
        PythonCodeClass c = target.addClass(clsName + "Test").addBase("unittest.TestCase", PythonCodeImportScope.NONE);

        PythonCodeFunction f = c.addFunc("test_inputTest");
        f.addSLComment('Change name to correct .json, access rawData for values i.e. rawData["InputType"]["Value1"]');
        f.addAssign("rawData", '""');
        f.addAssign("server", '${asTypeName(pythonServer.id)}()');
        f.addCall("server.setState").addArgument("ServiceState.STARTING");
        f.addCall("server.setState").addArgument("ServiceState.RUNNING");
        f.addEmptyLine();
        if (pythonElements <> null) {
            f.addCall("time.sleep").addArgument(10);
            f.addEmptyLine();
            f.addAssign("service", '${asTypeName(pythonElements.name)}()');
            f.addCall("service.setState").addArgument("ServiceState.STARTING");
            f.addCall("service.setState").addArgument("ServiceState.RUNNING");
            genSerializerInitialization(pythonElements.input, f);
            f.addCall("service.attachIngestor").addArgument("assertionIngestor");
            f.addCall("runAllTestsFromFile").addArgument("service.getId()").addArgument("../../test/resources/testData-${asTypeName(pythonElements.name)}.json");
            f.addEmptyLine();
            f.addSLComment("prepare your data, e.g., loading from json");
            f.addSLComment("Needed to enable the loading of resources like the finished service would", true);
            f.addEmptyLine();
            f.addSLComment("instantiate your service here, e.g., service = PyService()");
            f.addSLComment("call your service here, e.g., service.processNewInput(impl)");
            f.addEmptyLine();
            f.addCall("service.setState").addArgument("ServiceState.STOPPING");
            f.addCall("service.setState").addArgument("ServiceState.STOPPED");
            f.addEmptyLine();

            genTestAssertionIngestor(target);
        }
        f.addCall("server.setState").addArgument("ServiceState.STOPPING");
        f.addCall("server.setState").addArgument("ServiceState.STOPPED");
        f.addEmptyLine();
        f.addSLComment("do your asserts here");
        f.addCall("self.assertTrue").addArgument(true);

        genTestMainUnittestArgparse(target);
    }
    
}
