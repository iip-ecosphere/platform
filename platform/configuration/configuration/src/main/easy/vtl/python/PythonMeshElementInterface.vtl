import PythonBasics;
import MeshBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="python")
template PythonMeshElementInterface(Configuration config, PythonCodeArtifact target, MeshElement elt, String pkg) extends MeshBasics {

    setOf(String) reg = {};
    PythonCodeClass cls;
    
    def registerMethod(String kind, MeshElement elt, String type, String methodSuffix) {
        reg.add("Registry.${kind}['${elt.impl.id}_${type}'] = self.${methodSuffix}");
    }

    // called via MeshBasics.generateDataMethods for MeshSource
    def generateSourceMethod(MeshSource src, String type, String methodSuffix, String methodSuffixWithServiceId) {
        if (!src.impl.asynchronous) {
            registerMethod("senders", src, type, methodSuffix);
            addSourceMethod(src, type, methodSuffix, methodSuffixWithServiceId, cls).addRaiseNotImplementedError();
        }
    } 

    // called via MeshBasics.generateDataMethods for asynch MeshProcessor
    def generateAsyncProcessorInMethod(MeshProcessor proc, String type, String methodSuffix, String methodSuffixWithServiceId) {
        registerMethod("asyncTransformers", proc, type, methodSuffix);
        addAsyncProcessorInMethod(proc, type, methodSuffix, methodSuffixWithServiceId, cls).addRaiseNotImplementedError();
    } 

    // called via MeshBasics.generateDataMethods for synch MeshProcessor
    def generateSyncProcessorMethod(MeshProcessor proc, String inType, String outType, String methodSuffix, String methodSuffixWithServiceId) {
        registerMethod("syncTransformers", proc, type, methodSuffix);
        addSyncProcessorMethod(proc, inType, outType, methodSuffix, methodSuffixWithServiceId, cls).addRaiseNotImplementedError();
    } 
    
    // called via MeshBasics.generateDataMethods for MeshSink
    def generateSinkMethod(MeshSink snk, String type, String methodSuffix, String methodSuffixWithServiceId) {
        registerMethod("receivers", snk, type, methodSuffix);
        addSinkMethod(snk, type, methodSuffix, methodSuffixWithServiceId, cls).addRaiseNotImplementedError();
    }
    
    def produceSuper(ServiceBase base, PythonCodeFunction f) {
    } 
    
    def produceSuper(PythonService service, PythonCodeFunction f) {
        String sId = "'${service.id}'";
        f.add('super().__init__("${service.id}", "${service.name}", Version("${service.ver}"), "${service.description}", ${toBoolean(service.deployable)}, ServiceKind.${service.kind})');
        f.addAssign('Registry.services[${sId}]', 'self');
    }
    
    def main(Configuration config, PythonCodeArtifact target, MeshElement elt, String pkg) {
        String clsName = asTypeName(elt.name);
        target.addImport("AbstractService", "AbstractService");
        target.addImport("iip.Registry");
        target.addImport("Version", "Version");
        target.addImport("Service", "ServiceState");
        target.addImport("Service", "ServiceKind");
        setOf(RecordType) types = collectRecordTypes(elt);
        types->forEach(RecordType t|addDatatypeImport(t.name, false, target));
        
        cls = addPythonClass(target, clsName + "Interface", 'Partially implemented service interface for ${clsName}')
            .addBase("AbstractService");
        cls.addAttribute("ingestor", "None");
        PythonCodeFunction f = cls.addConstructor("Initializes the service.");
        produceSuper(elt.impl, f);
        f.add("self.registerMethods()");
        
        addAttachIngestor(cls);
        addAttachIngest(cls);
        addSetStateStartStop(cls, "service");        
        
        generateDataMethods(elt, true);

        f = cls.addMethod("registerMethods");
        reg->forEach(String s|f.add(s));
    }
    
}
