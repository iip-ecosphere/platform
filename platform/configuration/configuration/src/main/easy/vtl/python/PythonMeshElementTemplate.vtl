import PythonBasics;
import MeshBasics;
import PythonMeshElementTemplateBase;
insert PythonMeshElementTemplatePart*;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template PythonMeshElementTemplate(Configuration config, FileArtifact target, MeshElement elt, String pkg, PythonService service) extends PythonMeshElementTemplateBase {

    def main(Configuration config, FileArtifact target, MeshElement elt, String pkg, PythonService service) {
        IIPEcosphere cfg = config;
        initTypeAdd(cfg);
        String clsName = asTypeName(service.name);
        String ifName = "${clsName}Interface";
        'import iip.Registry
        from Version import Version
        from Service import ServiceState
        from Service import ServiceKind
        ${produceDatatypeImports(elt, service)}
        from interfaces.${clsName}Interface import ${clsName}Interface

        """Do not utilise global code here. Place the needed function in the start / end methods.
           Add methods needed to be run on the start of a service in the start or end methods NOT in init()"""

        class ${clsName}(${inheritsFrom(ifName)}):
            """Template service implementation for ${clsName}
               Generated by: EASy-Producer."""
            
            def __init__(self):
                """Initializes the service.""" 
                super().__init__()
                ${produceConstructorRest(service)}

            def start(self):
                """Called when the server shall start.
                """
                ${produceSetStateStarting(service)}

            def stop(self):
                """Called when the server shall stop.
                """

                ${produceSetStateStopping(service)}
            ${produceReconfigure(service)}
            ${generateDataMethods(elt, true)}
            ${generateFurtherMethods(service)}

        #registers itself
        ${clsName}()'
    }
    
}
