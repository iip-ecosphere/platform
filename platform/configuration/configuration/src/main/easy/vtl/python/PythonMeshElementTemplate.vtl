import PythonBasics;
import MeshBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template PythonMeshElementTemplate(Configuration config, FileArtifact target, MeshElement elt, String pkg) extends MeshBasics {

    String typeAdd = "";

    // called via MeshBasics.generateDataMethods for MeshSource
    def generateSourceMethod(MeshSource src, String type, String methodSuffix, String methodSuffixWithServiceId) {
        if (!src.impl.asynchronous) {
        'def ${methodSuffix}(self) -> ${type}:
            """Data generator for source classes.
        
            Return:
              - the created data
            """
            result = ${type}${typeAdd}()
            #TODO add your code here
            return result'
        }
    } 

    // called via MeshBasics.generateDataMethods for asynch MeshProcessor
    def generateAsyncProcessorInMethod(MeshProcessor proc, String type, String methodSuffix, String methodSuffixWithServiceId) {
        'def ${methodSuffix}(self, data: ${type}):
            """Asynchronous data processing method. Use self.ingest(data) to pass the result back to the data stream.
        
            Parameters:
              - data -- the data to process
            """
            #create result instance and call self.ingest(data)
            raise NotImplementedError'
    } 

    // called via MeshBasics.generateDataMethods for synch MeshProcessor
    def generateSyncProcessorMethod(MeshProcessor proc, String inType, String outType, String methodSuffix, String methodSuffixWithServiceId) {
        'def ${methodSuffix}(self, data: ${inType}) -> ${outType}:
            """Synchronous data processing method.
        
            Parameters:
              - data -- the data to process
            Returns:
              the processed data              
            """
            result = ${outType}${typeAdd}()
            #TODO add your code here
            return result'
    } 
    
    // called via MeshBasics.generateDataMethods for MeshSink
    def generateSinkMethod(MeshSink snk, String type, String methodSuffix, String methodSuffixWithServiceId) {
        'def ${methodSuffix}(self, data: ${type}):
            """Sink method, receives data.
        
            Parameters:
              - data -- the received data
            """
            raise NotImplementedError'
    }
    
    def produceDatatypeImports(MeshElement elt) {
        setOf(RecordType) types = collectRecordTypes(elt);
        for (RecordType t: types) {
            String name = t.name;
            'from datatypes.${name} import ${name}'
        }
    } 

    def main(Configuration config, FileArtifact target, MeshElement elt, String pkg) {
        IIPEcosphere cfg = config;
        if (cfg.sharedInterfaces) {
            typeAdd = "Impl";
        } else {
            typeAdd = "";
        }
        String clsName = asTypeName(elt.name);
        'import iip.Registry
        from iip.Version import Version
        from iip.Service import ServiceState
        from iip.Service import ServiceKind
        ${produceDatatypeImports(elt)}
        from interfaces.${clsName}Interface import ${clsName}Interface

        class ${clsName}(${clsName}Interface):
            """Template service implementation for ${clsName}
               Generated by: EASy-Producer."""
            
            def __init__(self):
                """Initializes the service.""" 
                super().__init__()
            
            ${generateDataMethods(elt, true)}

        #registers itself
        ${clsName}()'
    }
    
}
