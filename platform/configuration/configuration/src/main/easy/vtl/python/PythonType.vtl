import Basics;
import PythonBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template PythonType(Configuration config, FileArtifact target, RecordType type, Boolean interface, Boolean sharedInterfaces) {

    // generates code for the individual attributes
    def attributes(RecordType type) {
        if (not(interface)) {
            '#Mapped into properties without leading _ below resembling getter/setter'
            ''
            for (Field f: type.fields) {
                '_${asIdentifier(f.name)}: ${toTypeName(f.type)} = ${fieldDefaultValue(f)}'
            }
        }
    }
    
    def String fieldDefaultValue(Field field) {
        if (field.optional) {
            "None";
        } else {
            defaultValue(field.type);
        }    
    }
    
    // generates code for the getters
    def getters(RecordType type) {
        for (Field f: type.fields) {
            'def get${asMethodNameSuffix(f.name)}(self) -> ${toTypeName(f.type)}:
                """Returns the value of {@code ${asIdentifier(f.name)}}.${prependIfNotEmpty(" ", f.description)}
                
                   Returns:
                     - the value of ${f.name}"""'
            if (interface) {
            '    raise NotImplementedError'
            } else {
            '    return self._${asIdentifier(f.name)}'
            }
            ''
        }
    }

    // generates code for the setters
    def setters(RecordType type) {
        for (Field f: type.fields->select(f|not(f.readOnly))) {
            'def set${asMethodNameSuffix(f.name)}(self, v${genSetterTypeAnnotation(f, f.type)}):
                """Changes the value of {@code ${asIdentifier(f.name)}}.${prependIfNotEmpty(" ", f.description)}
                
                   Parameters:
                     - v -- the new value of ${f.name}${genSetterParamVDoc(f, f.type)}"""'
            if (interface) {
            '    raise NotImplementedError'
            } else {
            '    ${genSetterAssignment(f, f.type)}'
            }
            ''
        }
    }

    // generates code for the properties
    def properties(RecordType type) {
        '#Indeed, there are 2.4 decorators for this, but for now we want to have all here: pythonic field access'
        '#backed by getter/setter and the ability to replace data classes by e.g. projecting or data enhancing'
        '#functionality (original idea of the "interfaces" with similar naming as in Java. It may be that the '
        "#interfaces become superfluous due to the properties, but let's leave them in for now."
        ''
        for (Field f: type.fields) {
            String set;
            if (f.readOnly) {
                set = "";
            } else {
                set = ", set${asMethodNameSuffix(f.name)}";
            }
            '${asIdentifier(f.name)} = property(get${asMethodNameSuffix(f.name)}${set})\n'
        }
    }
    
    def genSetterAssignment(Field f, DataType type) {
        'self._${asIdentifier(f.name)} = v'
    }

    def genSetterTypeAnnotation(Field f, DataType type) {
        ': ${toTypeName(f.type)}'
    }

    def genSetterParamVDoc(Field f, DataType type) {
        ''
    }
    
    // numpy conversion
    
    def genSetterAssignment(Field f, NumericPrimitiveType type) {
        '${genNumpyConversion(f, type)}'
    }
    
    def genSetterAssignment(Field f, BooleanTypeType type) {
        '${genNumpyConversion(f, type)}'
    }

    def genSetterAssignment(Field f, ArrayType type) {
        'tmp = []
         for e in v:
             if ("numpy" in str(type(e))):
                 tmp.append(e.item())
             else:
                 tmp.append(e)
         self._${asIdentifier(f.name)} = tmp'
    }
    
    protected def genNumpyConversion(Field f, DataType type) {
        'if ("numpy" in str(type(v))):
             self._${asIdentifier(f.name)} = v.item()
         else:
             self._${asIdentifier(f.name)} = v'
    }
    
    def genSetterTypeAnnotation(Field f, NumericPrimitiveType type) {
        ''
    }
    
    def genSetterParamVDoc(Field f, NumericPrimitiveType type) {
        ', may be of type ${toTypeName(f.type)} or the corresponding numpy type'
    }
    
    def genTypeImports(String init, RecordType type) {
        String res = init;
        for (Field f: type.fields) {
            String imp = genImport(f.type);
            if (res.length() > 0) {
                if (imp.length() > 0) {
                    res = res + "\n" + imp;
                }
            } else {
                res = imp;
            }
        }
        res;
    }

    def String genImport(DataType type) {    
        ''
    }

    def String genImport(RecordType type) {
        String clsName = asTypeName(type.name);
        'from datatypes.${clsName} import ${clsName}'
    }

    def main(Configuration config, FileArtifact target, RecordType type, Boolean interface, Boolean sharedInterfaces) {
        String clsName = asTypeName(type.name);
        String add = "";
        String comment;
        String ext = "";
        String imp = "";
        if (sharedInterfaces) {
            if (interface) {
                comment = "Interface";
            } else {
                add = "Impl";
                comment = "Implementation";
                ext = "(${clsName})";
                imp = "from datatypes.${clsName} import ${clsName}";                
            }
        } else {
            comment = "Implementation";
            interface = false;
        }
        '${genTypeImports(imp, type)|e}
        from datetime import datetime
        from decimal import Decimal
        
        class ${clsName}${add}${ext}:
            """${comment} of the application data type ${clsName}. 
               Generated by: EASy-Producer."""
         
            ${attributes(type)|e}
            
            ${getters(type)}
            
            ${setters(type)}
            
            ${properties(type)}'
    }
    
}
