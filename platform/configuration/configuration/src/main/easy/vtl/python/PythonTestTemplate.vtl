import Basics;
import PythonBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="python")
template PythonTestTemplate(Configuration config, PythonCodeArtifact target, PythonService pythonElements) {
    
    def main(Configuration config, PythonCodeArtifact target, PythonService pythonElements) {
        target.addImport("unittest");
        target.addImport("sys");
        target.addImport("os");
        target.addImport("argparse");
        
        target.addSysPathInsert(6, "../../../target/pySrc/iip");
        target.addSysPathInsert(7, "../../../target/pySrc");
        target.addImport("TestUtils", "runTestsFromFile").addName("runTestsFromTestFile").addName("readTestDataJson").addName("runAllTestsFromFile").addName("getListOfDeserializedData");
        target.addSLComment("will be the relative paths from impl.impl to impl.model, given through pom /gen onwards!", true);
        target.addSysPathInsert(1, "../../../gen/hm23/ApplicationInterfaces/src/main/python");
        target.addSysPathInsert(2, "../../../gen/hm23/ApplicationInterfaces/src/main/python/iip");
        target.addSLComment("always fixed value as these directories are generated in the impl.impl", true);
        target.addSysPathInsert(3, "../../main/python/services");
        target.addSysPathInsert(5, '../../main/python/${getStringValueSafe(pythonElements.servicesPackageName, "services")}');
        target.addSysPathInsert(4, "../../main/python");
        target.addEmptyLine();
        target.addImport("Service", "ServiceState");
        target.addImport("json");

        String clsName = asTypeName(pythonElements.name);
        target.addImport(clsName, clsName);

        setOf(String) done = {};
        genTypeImports(pythonElements.input, done, target);
        genTypeImports(pythonElements.output, done, target);
        genSerializerImports(pythonElements.input, target);

        target.addEmptyLine();
        target.addCall("os.chdir").addStringArgument("../../main/python");
        target.addEmptyLine();
        target.addClass(asTypeName(pythonElements.name) + "Test").addBase("unittest.TestCase", PythonCodeImportScope.NONE).(c|{
            c.addFunc("test_inputTest").(f|{
                f.addSLComment('Change name to correct .json, access rawData for values i.e. rawData["InputType"]["Value1"]');
                f.addAssign("rawData", '""');
                f.addAssign("service", '${asTypeName(pythonElements.name)}()');
                f.addCall("service.setState").addArgument("ServiceState.STARTING");
                f.addCall("service.setState").addArgument("ServiceState.RUNNING");
                genSerializerInitialization(pythonElements.input, f);
                f.addCall("service.attachIngestor").addArgument("assertionIngestor");
                f.addCall("runAllTestsFromFile").addArgument("service.getId()").addStringArgument("../../test/resources/testData-${asTypeName(pythonElements.name)}.json");
                f.addEmptyLine();
                f.addSLComment('prepare your data, e.g., loading from json');
                f.addSLComment('Needed to enable the loading of resources like the finished service would', true);
                f.addEmptyLine();
                f.addSLComment('instantiate your service here, e.g., service = PyService()');
                f.addSLComment('call your service here, e.g., service.processNewInput(impl)');
                f.addEmptyLine();
                f.addCall("service.setState").addArgument("ServiceState.STOPPING");
                f.addCall("service.setState").addArgument("ServiceState.STOPPED");
                f.addEmptyLine();
                f.addSLComment('do your asserts here');
                f.addCall("self.assertTrue").addArgument(true);
            });
        });

        genTestAssertionIngestor(target);
        genTestMainUnittestArgparse(target);
    }
    
}
