import Basics;
import PythonBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template PythonTestTemplate(Configuration config, FileArtifact target, sequenceOf(MeshElement) pythonElements) {

    def serviceImports(sequenceOf(MeshElement) pythonElements) {
        for (MeshElement elt: pythonElements) {
            String clsName = asTypeName(elt.impl.name);
            'from ${clsName} import ${clsName}'
        }
    }
    
    def typeImports(sequenceOf(MeshElement) pythonElements) {
        setOf(String) done = {};
        for (MeshElement elt: pythonElements) {
            '${genTypeImports(elt.impl.input, done)}'
            '${genTypeImports(elt.impl.output, done)}'                  
        }
    }
    
    def genTypeImports(sequenceOf(IOType) types, setOf(String) done) {
        for (IOType type : types) {
            String clsName = toTypeName(type);
            if (not(done.includes(clsName))) {
                done.add(clsName);
                'from datatypes.${clsName} import ${clsName}'
            }
        }
    }

    def main(Configuration config, FileArtifact target, sequenceOf(MeshElement) pythonElements) {
        'import unittest
        
        import sys
        import os
        import argparse
        parser = argparse.ArgumentParser()
        parser.add_argument("relModelPath", help="relative path to the impl.model project")
        args = parser.parse_args()

        """ will be the relativve paths from impl.impl to impl.model, given through pom /gen onwards! """
        sys.path.insert(1, (args.relModelPath + "/gen/test/ApplicationInterfaces/src/main/python"))
        sys.path.insert(2, (args.relModelPath + "/gen/test/ApplicationInterfaces/src/main/python/iip"))
        """ always fixed value as these directorys are generated in the impl.impl """
        sys.path.insert(3, "../../main/python/services") 

        import json

        ${serviceImports(pythonElements)}
        ${typeImports(pythonElements)}

        class TestPyServive(unittest.TestCase):
        
            def test_inputTest(self):
            
                #Change name to correct .json, access rawData for values i.e. rawData["InputType"]["Value1"]
                rawData = ""
                with open ("../resources/testData-PyService.json", "r") as f:
                    rawData = json.load(f)

                # prepare your data, e.g., loading from json
                """Needed to enable the loading of resources like the finished service would"""
                os.chdir("../../main/python") 

                # instantiate your service here, e.g., service = PyService()
                # call your service here, e.g., service.processNewInput(impl)
	            
                # do your asserts here
                self.assertTrue(True)

        if __name__ == "__main__":
            """Makes unittest and argparse work together"""
            unittest.main(argv=["first-arg-is-ignored"], exit=False)'
    }
    
}
