import PythonBasics;
import MeshBasics;
import ServiceBasics;
import PythonServerBase;
insert PythonServerPart*;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template PythonServer(Configuration config, FileArtifact target, PythonServer server, String pkg) extends PythonServerBase {
    
    def main(Configuration config, FileArtifact target, PythonServer server, String pkg) {
        String clsName = asTypeName(server.id);
        'from AbstractService import AbstractService
        import Registry
        from Version import Version
        from Service import ServiceState
        from Service import ServiceKind
        from interfaces.${clsName}ServerInterface import ${clsName}ServerInterface
        ${produceImports(server)|e}

        class ${clsName}Server(${clsName}ServerInterface):
            """Partially implemented server for "${server.id}"
               Generated by: EASy-Producer."""
               
            ${produceFields(server)|e}
            
            def __init__(self):
                """Initializes the server service.""" 
                super().__init__()
                ${produceSuper(server)}
            
            def start(self):
                """Called when the server shall start.
                """
                ${produceSetStateStarting(server)}

            def stop(self):
                """Called when the server shall stop.
                """
                ${produceSetStateStopping(server)}

            ${generateReceiveClientServer(server)}
            ${produceRest(server)|e}
            
        #registers itself
        ${clsName}Server()'
    }
    
}
