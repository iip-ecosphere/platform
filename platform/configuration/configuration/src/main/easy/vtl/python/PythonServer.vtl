import PythonBasics;
import MeshBasics;
import ServiceBasics;
import PythonServerBase;
insert PythonServerPart*;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template PythonServer(Configuration config, FileArtifact target, PythonServer server, String pkg) extends PythonServerBase {
    
    def main(Configuration config, FileArtifact target, PythonServer server, String pkg) {
        String clsName = asTypeName(server.id);
        'from AbstractService import AbstractService
        import Registry
        from Version import Version
        from Service import ServiceState
        from Service import ServiceKind
        ${produceImports(server)|e}

        class ${clsName}Server(AbstractService):
            """Partially implemented server for "${server.id}"
               Generated by: EASy-Producer."""
            
            ${produceParameterFields(server.parameter)}
            
            def __init__(self):
                """Initializes the server service.""" 
                ${produceSuper(server)}
                self.registerMethods()
            
            ${produceReconfigure(server.parameter)}
            
            def setState(self, state:ServiceState):
                """Changes the state. [R133c]
                
                Parameters:
                  - newState -- the new state (ServiceState)
                """
                super().setState(state)
                if (state==ServiceState.STARTING):
                    ${produceSetStateStarting(server)}
                if (state==ServiceState.STOPPING):
                    ${produceSetStateStopping(server)}
            
            def registerMethods(self):
                pass'
    }
    
}
