import Basics;
import JavaBasics;
import JavaMapping;
import ServiceBasics;
import SpringBasics;
import SpringCloudStreamBasics;
import MeshBasics;
import EcsRuntimeDockerContainerManagerYaml;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="yaml", indentSteps = 2, profileArg_sorting = "INSERT")
template JavaSpringCloudStreamYaml(IIPEcosphere config, YamlFileArtifact target, mapOf(MeshElement, setOf(MeshConnector)) mappedMesh, sequenceOf(MeshElement) nodes, Application app) extends MeshBasics {

    sequenceOf(String) tmp = {};
    setOf(String) beans = {};
    mapOf(DataType, String) backSenders = {};
    mapOf(DataType, setOf(String)) backReceivers = {};
    
    /*
    * Emits a list prefixed by name:elt, elements separated by ";". Empty if elt is empty.
    */
    def namedList(String name, setOf(String) elt, YamlNode node) {
        if (elt.size() > 0) {
            node.addValue(name, semicolonList(elt));
        }
    }
        
    /*
    * Emits a spring destination table from destinations. Considers destination "*" as "useNativeEncoding".
    */
    def generateDestinations(mapOf(String, setOf(String)) destinations, YamlNode node) {
        if (destinations.size() > 0) {
            YamlNode bindings = node.addObject("bindings");
            for (String k : destinations.keys().asSequence()->sortedBy(e|e)) { // sortedBy for testing
                String dst = "";
                Boolean useNativeEncoding = false;
                for (String d : destinations.get(k).asSequence()->sortedBy(n|n)) { // sortedBy for testing
                    if (d == "*") {
                        useNativeEncoding = true;
                    } else {
                        if (dst.length() > 0) {
                            dst = dst + ",";
                        }
                        dst = dst + d;
                    }
                }
                YamlNode obj = bindings.addObject(k);
                obj.addValueNotEmpty("destination", dst);
                if (useNativeEncoding) {
                    obj.addObject("producer").addValue("useNativeEncoding", true);
                }
            }
        }
    }

    
    // ----------------------------- creates a protocol setup --------------------------

    @DispatchBase
    def protocolConfig(TransportProtocol protocol, Boolean global, YamlNode node) {
    }

    def protocolConfig(TransportProtocolAMQP protocol, Boolean global, YamlNode node) {
        produceProtocolConfig(protocol, "amqp", global, true, node);
    }

    def protocolConfig(TransportProtocolMQTTv3 protocol, Boolean global, YamlNode node) {
        produceProtocolConfig(protocol, "mqtt", global, false, node);
    }

    def protocolConfig(TransportProtocolMQTTv5 protocol, Boolean global, YamlNode node) {
        produceProtocolConfig(protocol, "mqtt", global, false, node);
    }

    def produceProtocolConfig(TransportProtocol protocol, String key, Boolean global, Boolean userPwdFallback, YamlNode node) {
        YamlNode proto = node.addObject(key);
        proto.addValue("host", protocolHost(protocol, global));
        proto.addValue("port", protocolPort(protocol, global));
        proto.addValue("actionTimeout", getActionTimeout(protocol));
        produceTransportSecurity(protocol, userPwdFallback, proto);
    }
    
    // --------------------------- spring poller(s) ---------------------------------------------
    
    def poller(sequenceOf(MeshElement) nodes, YamlNode node) {
        // until Spring Cloud Streams 3.1.1 there is no individual poll setting per source
        // might be solved with code, but unsure if needed at all as connectors are anyway asynchronous
        Integer pollInterval = calcPollerInterval(nodes);
        if (pollInterval > 0) {
            node.addObject("poller").addValue("fixedDelay", pollInterval);
        }
    }
        
    // ------------------------------------- binders ------------------------------------
    
    // produce the official, but also our work-around binder structure
    // internal binder is for internal, localhost communication
    // external could be a global broker, that may dynamically be selected by the platform 
    def produceBinders(IIPEcosphere config, YamlNode node) {
        String binder = binderName(config);
        YamlNode bProp = node.addObjects("binders/properties", "/");
        produceBinder(config, "internal", binder, false, bProp);
        produceBinder(config, "external", binder, true, bProp);
    }
    
    def produceBinder(IIPEcosphere config, String kind, String type, Boolean global, YamlNode node) {
        YamlNode kindNode = node.addObject(kind);
        kindNode.addValue("type", type);
        YamlNode kindEnv = kindNode.addObject("environment");
        protocolConfig(config.transportProtocol, global, kindEnv);
    }
    
    // ----------------------------------------- main -------------------------------------
 
    def main(IIPEcosphere config, YamlFileArtifact target, mapOf(MeshElement, setOf(MeshConnector)) mappedMesh, sequenceOf(MeshElement) nodes, Application app) {
        mapOf(String, setOf(String)) destinations = {};
        setOf(String) functions = {};
        setOf(String) sources = {};
        calcBindings(mappedMesh, nodes, destinations, functions, sources, "", app);
        YamlNode n = target.addDocument(true);

        protocolConfig(config.transportProtocol, false, n);
        produceTransport(config, n);
        produceAas(config, n, withDocker=false, implLocalEphemerial=config.aasImplServer.devicesAsEphemeral);
        produceBinders(config, n);
        if (app.debug) {
            YamlNode log = n.addObjects("logging/level/org/springframework", "/");
            log.addValue("cloud", "DEBUG");
            log.addValue("integration", "DEBUG");
        }
        YamlNode metricsProvider = n.addObject("metricsprovider");
        metricsProvider.addValue("schedulerrate", 3000);
        metricsProvider.addValue("memorybaseunit", "kilobytes");
        metricsProvider.addValue("diskbaseunit", "megabytes");
        
        YamlNode management = n.addObject("management");
        management.addObjects("health/binders", "/").addValue("enabled", true);
        management.addObjects("endpoints/web/exposure", "/").addValue("include", "metrics");
        
        YamlNode spring = n.addObject("spring");
        spring.addObject("main").addValue("banner-mode", "off");
        YamlNode springCloud = spring.addObject("cloud");
        namedList("definition", functions, springCloud.addObject("function"));
        namedList("sources", sources, springCloud);
        YamlNode springCloudStream = springCloud.addObject("stream");
        poller(nodes, springCloudStream);
        springCloudStream.addObject("default").addValue("contentType", "application/iip");
        springCloudStream.addValue("defaultBinder", "internal");
        generateDestinations(destinations, springCloudStream);
        produceBinders(config, springCloudStream);
    }

}