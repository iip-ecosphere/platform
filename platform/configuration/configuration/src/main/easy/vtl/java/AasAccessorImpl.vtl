import Basics;
import JavaBasics;
import AasBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="java", profileArg_javadocIndent=" * ", lineLength = 120, charset="UTF-8")
template AasAccessorImpl(Configuration config, JavaCodeArtifact target, AasSubmodelType type, String pkg) {

    setOf(String) done = {};
    setOf(String) doneMethods = {};

    def produceMethodsForFields(AasFields fields, String class, JavaCodeClass mainCls) {
        for (AasField field: fields) {
            produceMethods(stripMultiListType(field), class, field, 0, mainCls);
        }
    }

    // mode == 0: full method code
    // mode == 1: inner method code
    // mode == 2: Java type

    @DispatchBasis
    def produceMethods(DataType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        if (type == AasGenericSubmodelElementCollection) {
            AasElementType t = type;
            produceElementMethods(t, class, field, mode, "getSubmodelElementCollection", mainCls);
        } else if (type == AasGenericEntityType) {
            AasElementType t = type;
            produceElementMethods(t, class, field, mode, "getEntity", mainCls);
        } else {
            mainCls.addSLComment('TODO unconsidered type in produceMethods: ${type.name} ${type}');
        }
    }
    
    @DispatchCase
    def produceMethods(StringTypeType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        produceGetter(field, class, "String", "String", "", "Property", "getProperty", mainCls);
    }

    @DispatchCase
    def produceMethods(IntegerTypeType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        produceGetter(field, class, "int", "Int", "", "Property", "getProperty", mainCls);
    }

    @DispatchCase
    def produceMethods(LongTypeType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        produceGetter(field, class, "long", "Long", "", "Property", "getProperty", mainCls);
    }
    
    @DispatchCase
    def produceMethods(UnsignedInteger64TypeType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        produceGetter(field, class, "java.math.BigInteger", "BigInteger", "", "Property", "getProperty", mainCls);
    }

    @DispatchCase
    def produceMethods(FloatTypeType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        produceGetter(field, class, "float", "Float", "", "Property", "getProperty", mainCls);
    }

    @DispatchCase
    def produceMethods(DoubleTypeType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        produceGetter(field, class, "double", "Double", "", "Property", "getProperty", mainCls);
    }

    @DispatchCase
    def produceMethods(BooleanTypeType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        produceGetter(field, class, "boolean", "Boolean", "", "Property", "getProperty", mainCls);
    }

    @DispatchCase
    def produceMethods(DateTimeTypeType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        produceGetter(field, class, "java.util.Date", "Date", "", "Property", "getProperty", mainCls);
    }

    @DispatchCase
    def produceMethods(AasEnumType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        String clsName = asTypeName(type.name);
        produceGetter(field, class, clsName, "Enum", "${clsName}.class", "Property", "getProperty", mainCls);
    }
    
    // AasLangStringType

    @DispatchCase
    def produceMethods(AasAnyURITypeType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        produceGetter(field, class, "String", "AnyUri", "", "Property", "getProperty", mainCls);
    }

    @DispatchCase
    def produceMethods(AasFileResourceTypeType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        produceGetter(field, class, "de.iip_ecosphere.platform.support.aas.FileDataElement", "FileDataElement", "", "FileDataElement", "getDataElement", mainCls);
    }

    @DispatchCase
    def produceMethods(AasRangeTypeType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        produceGetter(field, class, "de.iip_ecosphere.platform.support.aas.Range", "Range", "", "Range", "getDataElement", mainCls);
    }

    @DispatchCase
    def produceMethods(AasBlobTypeType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        produceGetter(field, class, "de.iip_ecosphere.platform.support.aas.BlobDataElement", "BlobDataElement", "", "BlobDataElement", "getDataElement", mainCls);
    }

    @DispatchCase
    def produceMethods(AasReferenceTypeType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        produceGetter(field, class, "de.iip_ecosphere.platform.support.aas.ReferenceElement", "ReferenceElement", "", "ReferenceElement", "getReferenceElement", mainCls);
    }
    
    @DispatchCase
    def produceMethods(AasRelationTypeType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        produceGetter(field, class, "de.iip_ecosphere.platform.support.aas.RelationshipElement", "RelationshipElement", "", "RelationshipElement", "getRelationshipElement", mainCls);
    }

    @DispatchCase
    def produceMethods(AasMultiLangStringTypeType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        produceGetter(field, class, "de.iip_ecosphere.platform.support.aas.LangString[]", "LangString", "", "MultiLanguageProperty", "getDataElement", mainCls);
    }
    
    @DispatchCase
    def produceMethods(AasSubmodelType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        mainCls.addSLComment('TODO unconsidered submodel ${type}');
        /*if (!doneMethods.includes(type.name)) {
            doneMethods.add(type.name);
            produceMethodsForFields(type.fields, class, mainCls);
            doneMethods.remove(type.name);
        }*/
    }
    
    @DispatchCase
    def produceMethods(AasSubmodelElementCollectionType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        if (!doneMethods.includes(type.name)) {
            doneMethods.add(type.name);
            produceElementMethods(type, class, field, mode, "getSubmodelElementCollection", mainCls);
            doneMethods.remove(type.name);
        }
    }
    
    @DispatchCase
    def produceMethods(AasEntityType type, String class, AasField field, Integer mode, JavaCodeClass mainCls) {
        if (!doneMethods.includes(type.name)) {
            doneMethods.add(type.name);
            produceElementMethods(type, class, field, mode, "getEntity", mainCls);
            doneMethods.remove(type.name);
        }
    }
    
    def produceElementMethods(AasElementType type, String class, AasField field, Integer mode, String methodName, JavaCodeClass mainCls) {
        if (notSkip(field)) {
            String clsName = asTypeName(type.name);
            String fldName = asTypeName(validateName(field.name));
            JavaCodeMethod mth = mainCls.addMethod(qualifyAasCls(clsName), "get"+fldName, "Gets an instance of ${field.name}.");
            mth.getJavadocComment().addReturnComment("the instance or <b>null</b> for none");

            String idShortParam = "";
            if (field.isGeneric) {
                mth.addParameter("String", "idShort", "the actual idShort");
                idShortParam = "idShort";
            }
            String accessEx = getFieldNameEx(field, "index", idShortParam);
            if (isFieldCounting(field)) {
                mth.addParameter("int", "index", "0-based index to access a specific instance");
            }
            if (hasMultiSemId(field)) {
                mth.addParameter("String", "semanticId", "the actual semanticId");
            }
            
            JavaCodeExpression returnEx = new JavaCodeTextExpression("super.${methodName}(${accessEx})");
            if (!isImplementedByAPI(type)) { // add null check
                mth.addVariable("", "tmp", returnEx);
                returnEx = new JavaCodeTernaryExpression("null == tmp", "null", 
                    new JavaCodeConstructorCall(clsName).addArgument("tmp"));
            }     
            mth.addReturn(returnEx);
        }
    }
    
    def produceGetter(AasField field, String class, String type, String infix, String enumIfClass, String aasType, String aasAccess, JavaCodeClass mainCls) {
        if (notSkip(field)) {
            String fldName = validateName(field.name);
            String getPrefix = "get${fldName.firstToUpper()}";
            Boolean iteratingField = isFieldCounting(field) or field.maximumInstances > 1;

            JavaCodeMethod getProp = mainCls.addMethod("de.iip_ecosphere.platform.support.aas." + aasType, "${getPrefix}Property", "Returns the property ${field.name}.");
            
            String valueType = type;
            if (iteratingField) {
                valueType = "Iterable<${considerWrapper(type)}>";
            } else if (isOpen(field.type)) {
                valueType = insertBeforeClass(valueType, "I"); 
            }
            JavaCodeMethod getVal = mainCls.addMethod(valueType, getPrefix, "Returns the value of property ${field.name}.");
            getVal.addException("java.util.concurrent.ExecutionException", "if the property cannot be accessed or the contained value cannot be converted");

            JavaCodeExpression idShortEx = new JavaCodeStringExpression(field.name);
            String fieldNameOverride = "";
            if (field.isGeneric) {
                fieldNameOverride = "idShort";
                idShortEx = new JavaCodeVariableExpression(fieldNameOverride);
                getProp.addParameter("String", fieldNameOverride, "the actual idShort");
                getVal.addParameter("String", fieldNameOverride, "the actual idShort");
            }

            JavaCodeExpression propEx = new JavaCodeMethodCall(aasAccess).addArgument(getFieldNameEx(field, "index", fieldNameOverride));
            setOf(String) needsCast = {"MultiLanguageProperty", "FileDataElement", "ReferenceElement", "BlobDataElement", "Range"};
            if (needsCast.includes(aasType)) {
                propEx = new JavaCodeCastExpression(aasType, propEx);
            }
            if (isFieldCounting(field)) {
                getProp.addParameter("int", "index", "the index of the field");
            }
            getProp.addReturn(propEx, "the property");

            if (hasMultiSemId(field)) {
                getVal.addParameter("String", "semanticId", "the actual semanticId");
            }
            JavaCodeMethodCall getValueEx;
            if (iteratingField) {
                JavaCodeExpression transformEx;
                String collectType = type;
                if (aasType == "Property") {
                    if (infix == "Enum") {
                        String specificType = collectType;
                        if (isOpen(field.type)) {
                            specificType = "I" + collectType;
                        }
                        transformEx = new JavaCodeMethodCall("getEnumValue")
                            .addArgument("p").addClassArgument(collectType).addClassArgument(specificType);
                    } else {
                        transformEx = new JavaCodeMethodCall("cast")
                            .addArgument("p").addClassArgument(considerWrapper(type));
                    }
                    collectType = aasType;
                } else if (aasType == "MultiLanguageProperty") {
                    transformEx = new JavaCodeMethodCall("getLangStringValue").addArgument("p");
                    collectType = aasType;
                }
                JavaCodeExpression semIdEx = getSemanticIdExpr(field.semanticId, "<no semId given>");
                if (hasMultiSemId(field)) {
                    semIdEx = new JavaCodeTernaryExpression("semanticId != null && semanticId.length() > 0", "semanticId", semIdEx);
                }
                getValueEx = new JavaCodeMethodCall("collect");
                getValueEx.addArgument(new JavaCodeMethodCall("elements"));
                getValueEx.addClassArgument(collectType);
                getValueEx.addArgument(semIdEx);
                getValueEx.addArgument(new JavaCodeLambdaExpression("p").addExpression(transformEx));
            } else {
                getValueEx = new JavaCodeMethodCall('get${infix}Value'); // getXXXValue(ElementsAccess, idShort))
                getValueEx.addThisArgument();
                getValueEx.addArgument(idShortEx);
                if (infix == "Enum") { // here: getEnumValue(ElementsAccess, idShort, Class<T>, Class<E>)
                    if (isOpen(field.type)) {
                        getValueEx.addClassArgument("I" + type);
                    } else {
                        getValueEx.addClassArgument(enumIfClass);
                    }
                    getValueEx.addClassArgument(enumIfClass);
                }
            }
            getVal.addReturn(getValueEx, "the value");
        }
    }
    
    // ------------------------------ classes -----------------------------------------
    
    def produceClassesForFields(AasFields fields, Boolean top, JavaCodeClass mainCls) {
        for (AasField field: fields) {
            produceClasses(field.type, isFieldCounting(field), top, mainCls);
        }
    }
    
    @DispatchBasis    
    def produceClasses(DataType type, Boolean counting, Boolean top, JavaCodeClass mainCls) {
    }

    @DispatchCase
    def produceClasses(AasSubmodelElementCollectionType type, Boolean counting, Boolean top, JavaCodeClass mainCls) {
        String clsName = asTypeName(type.name);
        if (!done.includes(clsName) and !isImplementedByAPI(type) and notSkip(type)) {
            done.add(clsName);

            JavaCodeClass cls = mainCls.addClass(clsName, 
                getClassComment(type.description, "Accessor", "AAS accessor implementation", false));
            cls.setPublic();
            cls.setStatic();
            cls.addExtends("de.iip_ecosphere.platform.support.aas.types.common.DelegatingSubmodelElementCollection");
            JavaCodeMethod cons = cls.addConstructor("Creates a wrapping instance for ${getIdShort(type)}.")
                .setProtected();
            cons.addParameter("de.iip_ecosphere.platform.support.aas.SubmodelElementCollection", "parent", "the parent submodel element collection builder");    
            cons.add("super(parent);");
            produceMethodsForFields(type.fields, clsName, cls);

            produceClassesForFields(type.fields, false, mainCls);
        }
    }
        
    @DispatchCase
    def produceClasses(AasEntityType type, Boolean counting, Boolean top, JavaCodeClass mainCls) {
        String clsName = asTypeName(type.name);
        if (!done.includes(clsName) and !isImplementedByAPI(type) and notSkip(type)) {
            done.add(clsName);
            
            JavaCodeClass cls = mainCls.addClass(clsName, 
                getClassComment(type.description, "Accessor", "AAS accessor implementation", false));
            cls.setPublic();
            cls.setStatic();
            cls.addExtends("de.iip_ecosphere.platform.support.aas.types.common.DelegatingEntity");
            JavaCodeMethod cons = cls.addConstructor("Creates a wrapping instance for ${getIdShort(type)}.")
                .setProtected();
            cons.addParameter("de.iip_ecosphere.platform.support.aas.Entity", "parent", "the parent submodel element collection builder");    
            cons.add("super(parent);");
            produceMethodsForFields(type.fields, clsName, cls);

            produceClassesForFields(type.fields, false, mainCls);
        }
    }
    
    @DispatchCase
    def produceClasses(AasSubmodelType type, Boolean counting, JavaCodeClass mainCls) {
        mainCls.addSLComment(' TODO unconsidered submodel ${type}');
        //produceClassesForFields(type.fields, true, mainCls);
    }

    // ------------------------------- main -------------------------------------------

    def main(Configuration config, JavaCodeArtifact target, AasSubmodelType type, String pkg) {
        String clsName = asTypeName(type.name);
        doneMethods.add(type.name);
        
        JavaCodeClass mainCls = codeCreateClass(target, pkg, clsName, 
            getClassComment(type.description, "Accessor", "AAS Accessor implementation", true));
        mainCls.addStaticImport("de.iip_ecosphere.platform.support.aas.IdentifierType.*");
        mainCls.addStaticImport("de.iip_ecosphere.platform.support.aas.types.common.Utils.*");
        mainCls.addImport("${pkg}.${clsName}Builder.*");
        mainCls.addExtends("de.iip_ecosphere.platform.support.aas.types.common.DelegatingSubmodel");

        JavaCodeMethod cons = mainCls.addConstructor("Creates a wrapping ${getIdShort(type)} submodel instance.");
        cons.addParameter("de.iip_ecosphere.platform.support.aas.Aas", "aas", "the parent AAS");
        cons.add('super(aas.getSubmodel("${getIdShort(type)}"));');

        produceMethodsForFields(type.fields, "${clsName}", mainCls);
        produceClassesForFields(type.fields, true, mainCls);
    }
}
