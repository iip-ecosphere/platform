import Basics;
import JavaMapping;
import EcsRuntimeDockerContainerManagerYaml;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template PlatformYaml(IIPEcosphere config, FileArtifact target, String modelName) {

    def produceDevMgtServer(IIPEcosphere config) {
        DeviceMgtStorageServer s = config.deviceMgtStorageServer; 
        if (s.port > 0) {
            'storageServer:
                port: ${s.port}
                path: "${s.path}"
                authenticationKey: ${s.authenticationKey}'
        } else {
            ''
        }
    }
    
    def produceDeviceMgtStorage(String topKey, DeviceMgtStorage s, PackageStore p) {
        '${topKey}:
            endpoint: "http://${s.host}:${s.port}"
            region: ${s.region}
            authenticationKey: ${s.authenticationKey}
            bucket: ${p.bucket}
            prefix: ${p.prefix}
            packageDescriptor: ${p.packageDescriptor}
            packageFilename: ${p.packageFilename}'
    }

    def produceDevMgt(IIPEcosphere config) {
        produceDeviceMgtStorage("runtimeStorage", config.deviceMgtStorage, config.deviceMgtStorage.runtimeStorage);
        produceDeviceMgtStorage("configStorage", config.deviceMgtStorage, config.deviceMgtStorage.configStorage);
        produceDevMgtServer(config);
    }
    
    def produceCentralMonitoring(IIPEcosphere config) {
        PlatformMonitoring mon = config.platformMonitoring;
        produceCentralMonitoring(mon);
    }

    def produceCentralMonitoring(PlatformMonitoring mon) {
        ''
    }

    def produceCentralMonitoring(PrometheusPlatformMonitoring mon) {
        // we assume a common schema for now
        'prometheus:
          server:
            schema: ${mon.schema}
            host: ${mon.host}
            port: ${mon.port}
            running: ${mon.running}
          exporter: 
            schema: ${mon.schema}
            host: ${mon.exporterHost}
            port: ${mon.exporterPort}
            running: ${mon.exporterRunning}
          alertMgr: 
            schema: ${mon.schema}
            host: ${mon.alertMgrHost}
            port: ${mon.alertMgrPort}
            running: ${mon.alertMgrRunning}
          scrapeInterval: ${mon.scrapeInterval}
          scrapeTimeout: ${mon.scrapeTimeout}'
    }
    
    def produceEasy(IIPEcosphere config, String modelName) {
        String base = ".";
        if (config.modelBaseFolder <> null) {
            base = config.modelBaseFolder;
        }
        String genTarget = "gen";
        if (config.genTarget <> null) {
            genTarget = config.genTarget;
        }
        String metaModelFolder = "src/main/easy";
        if (config.metaModelFolder <> null) {
            metaModelFolder = config.metaModelFolder;
        }
        String configFolder = "";
        if (config.configFolder <> null) {
            configFolder = config.configFolder;
        }
        'easyProducer: 
          ivmlModelName: ${modelName}
          base: ${base}
          genTarget: ${genTarget}
          ivmlMetaModelFolder: ${base}/${metaModelFolder}
          ivmlConfigFolder: ${base}/${configFolder}
          ${additionalEasyModelFolders(config)|e}
        '
    }
    
    def additionalEasyModelFolders(IIPEcosphere config) {
        if (isDefined(config.additionalModelFolders) and config.additionalModelFolders <> null and config.additionalModelFolders.size() > 0) {
            'additionalIvmlFolders:'
            for (String a: config.additionalModelFolders) {
                '  - ${a}'
            }
        }
    }
    
    def uploadFolder(IIPEcosphere config) {
        String up = getStringValueSafe(config.uploadFolder, "");
        if (up <> "") {
            "uploadFolder: {$up}"
        } else {
            ""
        }
    }
    
    def main(IIPEcosphere config, FileArtifact target, String modelName) {
        Integer heartbeatTimeout = getIntegerValueSafe(config.deviceHeartbeatTimeout, config.deviceHeartbeatTimeoutDflt);
        String pers = "${config.aasPersistency}";
        produceTransport(config);
        produceAas(config, pers, false);
        produceNetMgr(config);
        produceDevMgt(config);
        produceCentralMonitoring(config);
        produceEasy(config, modelName);
        'artifactsFolder: ${config.artifactsFolder}
        artifactsUriPrefix: ${config.artifactsUriPrefix}
        ${uploadFolder(config)|e}
        aasHeartbeatTimeout: ${heartbeatTimeout}'
    }

}
