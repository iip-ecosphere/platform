import JavaBasics;
import ServiceBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaServiceStub(Configuration config, FileArtifact target, ServiceBase service, String pkg) extends ServiceBasics {
    
    // something in the auto-formatting goes crazy here. Resorting to individual VIL context expressions :/
    
    def produceAsyncProcessorBody(IOType type) {
        String t = toTypeName(type);
        'public void process${t.firstToUpperCase()}(${t} data) {'
        '    // TODO connect via VAB'
        '}'
    }
    
    def produceSyncProcessorBody(IOType returnType, IOType dataType) {
        String d = toTypeName(dataType);
        String r = toTypeName(returnType);
        'public ${r} transform${d.firstToUpperCase()}(${d} data) {'
        '    return null; // TODO connect via VAB'
        '}'
    }
    
    def produceIngestorBody(IOType type) {
        String t = toTypeName(type);
        '@Override'
        'public void attach${t.firstToUpperCase()}Ingestor(DataIngestor<${t}> ingestor) {'
        '    // TODO clarify with Impl'
        '}'
    }
    
    def produceProducerBody(IOType type) {
        String t = toTypeName(type);
        '@Override'
        'public ${t} produce${t.firstToUpperCase()}() {'
        '    return null; // TODO connect via VAB'
        '}'
    }

    def main(Configuration config, FileArtifact target, ServiceBase service, String pkg) {
        String clsName = asTypeName(service.name);
        'package ${pkg};
        
        import de.iip_ecosphere.platform.services.environment.*;
        import de.iip_ecosphere.platform.support.aas.InvocablesCreator;
        import iip.datatypes.*;
        import iip.interfaces.*;

        /**
         * IIP-Ecosphere service stub for net node \'${service.name}\'.
         * Generated by: EASy-Producer.
         */
        public class ${clsName}Stub extends ServiceStub implements ${clsName}Interface {

            /**
             * Creates the setup and registers the operations.
             * 
             * @param iCreator the AAS invocables creator
             * @param serviceId the service id to create the qualified names via {@link ServiceMapper#getQName(Service, String)}
             */
            public ${clsName}Stub(InvocablesCreator iCreator, String serviceId) {
                super(iCreator, serviceId);
            }
            
            ${produceForInputTypes(service)}
            ${produceForOutputTypes(service)}
        }'
    }
    
}
