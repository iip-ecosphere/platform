@advice(IIPEcosphere)
template JavaBasics(Configuration config, FileArtifact target) {

    def String asIdentifier(String s) {
        s;
    }

    def String asMethodNameSuffix(String s) {
        s.firstToUpperCase().toIdentifier();
    }
    
    def String asTypeName(String s) {
        if (s.indexOf("[") > 0) {
            s; // assume type name with array
        } else if (s.indexOf(".") > 0) {
            s; // assume FQN
        } else {
            s.firstToUpperCase().toCamelCaseIdentifier();
        }
    }
    
    def String test(String s) {
        s;
    }
    
    // ------------------------------------------ type name access -------------------------------------

    def String toTypeName(IOType type) {
        toTypeName(type.type);
    }
    
    def String toTypeName(DataType type) {
        asTypeName(type.name);
    }
    
    def String toTypeName(PrimitiveType type) {
        type.name; // fallback
    }
    
    def String toTypeName(IntegerTypeType type) {
        "int";
    }

    def String toTypeName(LongTypeType type) {
        "long";
    }
    
    def String toTypeName(StringTypeType type) {
        "String";
    }

    def String toTypeName(BooleanTypeType type) {
        "boolean";
    }

    def String toTypeName(FloatTypeType type) {
        "float";
    }

    def String toTypeName(DoubleTypeType type) {
        "double";
    }

    def String toTypeName(ObjectTypeType type) {
        "Object";
    }

    def String toTypeName(ByteArrayTypeType type) {
        "byte[]";
    }

    def String toTypeName(IntegerArrayTypeType type) {
        "int[]";
    }

    def String toTypeName(DoubleArrayTypeType type) {
        "double[]";
    }

    def String toTypeName(IEC61131_3DateTimeTypeType type) {
        "java.util.Date";
    }
    
    // ------------------------------------------ primitive type casting -------------------------------------
    
        // preliminary... JavaBasics + ??
    def cast(DataType type) {
        ""
    }
    
    def cast(PrimitiveType type) {
        "(" + type.name + ")";
    }
    
    def String cast(IntegerTypeType type) {
        "(int)";
    }

    def String cast(LongTypeType type) {
        "(long)";
    }

    def String cast(StringTypeType type) {
        "(String)";
    }
    
    def String cast(BooleanTypeType type) {
        "(boolean)";
    }

    def String cast(FloatTypeType type) {
        "(float)";
    }

    def String cast(DoubleTypeType type) {
        "(double)";
    }

    def String cast(ObjectTypeType type) {
        "";
    }

    def String cast(ByteArrayTypeType type) {
        "(byte[])";
    }

    def String cast(IntegerArrayTypeType type) {
        "(int[])";
    }

    def String cast(DoubleArrayTypeType type) {
        "(double[])";
    }

    def String cast(IEC61131_3DateTimeTypeType type) {
        "(java.util.Date)";
    }

    // ------------------------------------------ (MVN) artifact access -------------------------------------
    
    def String getArtifact(MeshElement elt) {
        getArtifact(elt.impl);
    }
    
    def String getArtifact(ServiceBase service) {
        "";
    }

    def String getArtifact(CompleteService service) {
        service.artifact;
    }

    def String getArtifact(JavaService service) {
        service.artifact;
    }

    def String getArtifact(Connector conn) {
        conn.artifact;
    }
    
    // ------------------------------------------ other -------------------------------------

    def String toPath(String pkg) {
        pkg.replace(".", "/");
    }
    
    def String toJvmMemLimitOpt(Integer limit) {
        if (limit > 0) {
            "-Xmx${limit}M"
        } else {
            ""
        }
    }

}
