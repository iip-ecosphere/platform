@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaBasics(Configuration config, FileArtifact target) {

    def String asIdentifier(String s) {
        s;
    }

    def String asMethodNameSuffix(String s) {
        s.firstToUpperCase().toIdentifier();
    }
    
    def String asTypeName(String s) {
        if (s.indexOf("[") > 0) {
            s; // assume type name with array
        } else if (s.indexOf(".") > 0) {
            s; // assume FQN
        } else {
            s.firstToUpperCase().toCamelCaseIdentifier();
        }
    }
    
    // ------------------------------------------ type name access -------------------------------------

    def String toTypeName(IOType type) {
        toTypeName(type.type);
    }
    
    def String toTypeName(DataType type) {
        asTypeName(type.name);
    }
    
    def String toTypeName(PrimitiveType type) {
        type.name; // fallback
    }
    
    def String toTypeName(EnumType type) {
        asTypeName(type.name);
    }
    
    def String toTypeName(IntegerTypeType type) {
        "int";
    }

    def String toTypeName(UInt16TypeType type) {
        "int";
    }

    def String toTypeName(LongTypeType type) {
        "long";
    }
    
    def String toTypeName(StringTypeType type) {
        "String";
    }

    def String toTypeName(BooleanTypeType type) {
        "boolean";
    }

    def String toTypeName(FloatTypeType type) {
        "float";
    }

    def String toTypeName(DoubleTypeType type) {
        "double";
    }

    def String toTypeName(ByteTypeType type) {
        "byte";
    }

    def String toTypeName(ObjectTypeType type) {
        "Object";
    }
    
    def String toTypeName(ArrayType type) {
        toTypeName(type.type) + "[]";
    } // implies ByteArrayTypeType, IntegerArrayTypeType, DoubleArrayTypeType

    def String toTypeName(IEC61131_3DateTimeTypeType type) {
        "java.util.Date";
    }
    
    def String considerWrapper(String typeName) {
        switch (typeName) { // Java primitives to Wrapper
            "int" : "Integer",
            "long" : "Long",
            "float" : "Float",
            "double" : "Double",
            "byte" : "Byte",
            "boolean" : "Boolean",
            "char" : "Char",
            "short" : "Short",
            default: typeName
        }
    }
    
    def String toTypeName(ListType type) {
        String t = considerWrapper(toTypeName(type));
        "java.util.List<${t}>"
    }
    
    // ------------------------------------------ primitive type casting -------------------------------------
    
    def cast(DataType type) {
        "(" + toTypeName(type) + ")";
    }

    // ------------------------------------------ (MVN) artifact access -------------------------------------
    
    def String getArtifact(MeshElement elt) {
        getArtifact(elt.impl);
    }
    
    def String getArtifact(ServiceBase service) {
        "";
    }

    def String getArtifact(CompleteService service) {
        service.artifact;
    }

    def String getArtifact(JavaService service) {
        service.artifact;
    }

    def String getArtifact(Connector conn) {
        conn.artifact;
    }
    
    // ------------------------------------------ other -------------------------------------

    def String toPath(String pkg) {
        pkg.replace(".", "/");
    }
    
    def String toJvmMemLimitOpt(Integer limit) {
        if (limit > 0) {
            "-Xmx${limit}M"
        } else {
            ""
        }
    }

}
