import Basics;
import JavaBasics;
import JavaConnector;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="java", profileArg_javadocIndent="* ", lineLength = 120, profileArg_eltSorting="CONS")
template JavaConnectorRestImpl(Configuration config, JavaCodeArtifact target, RestConnector conn, String pkg) {
    
    def main(Configuration config, JavaCodeArtifact target, RestConnector conn, String pkg) {
        IIPEcosphere cfg = config;
    
        String typeName = asTypeName(conn.name);
        String clsName = typeName + "Impl";
        String generics = getConnectorGenerics(conn, false, pkg=pkg + ".", typeAdd="RestType"); // adjust to rest, allow for auto-imports

        JavaCodeClass mainCls = codeCreateClass(target, pkg, clsName, 'Rest connector implementation for ${typeName}');
        mainCls.addExtends("de.iip_ecosphere.platform.connectors.rest.RESTConnector" + generics);

        JavaCodeMethod m = mainCls.addConstructor("Connector constructor.");
        generics = getConnectorGenerics(conn, false, pkg=pkg + ".", typeAdd="RestType", prefix="de.iip_ecosphere.platform.connectors.rest.RESTItem, Object, ");
        m.addParameter("de.iip_ecosphere.platform.connectors.types.ProtocolAdapter${generics}...", "adapter", "the protocol adapter");
        m.addSuperCall().addArgument("adapter");
        
        m = mainCls.addMethod("Class<?>", "getResponseClass");
        m.addOverrideAnnotation();
        m.addReturn(toTypeName(conn.inInterface) + "RestType.class");

        m = mainCls.addMethod("Class<?>", "getItemClass");
        m.addOverrideAnnotation();
        m.addReturn(toTypeName(conn.inInterface) + "RestType.class");
    }
    
}
