import Basics;
import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaEnum(Configuration config, FileArtifact target, EnumType type, String pkg) {

    // generates code for the individual literals
    def literals(EnumType type) {
        for (EnumLiteral l: type.literals, ",\n", ";\n") {
            '/**
            * Defines the literal ${l.name}.${prependIfNotEmpty(" ", getDescription(l))}
            */
            ${asIdentifier(l.name)}(${l.ordinal})'
        }
        '\n' // strange, needed to flush VTL :(
    }

    def main(Configuration config, FileArtifact target, EnumType type, String pkg) {
        String clsName = asTypeName(type.name);
        'package ${pkg};

        /**
         * Enumeration ${clsName}.
         * Generated by: EASy-Producer.
         */
        public enum ${clsName} {
         
            ${literals(type)|e}

            private int modelOrdinal;

            private ${clsName}(int modelOrdinal) {
                this.modelOrdinal = modelOrdinal;
            }
            
            /**
            * Returns the model ordinal of this enum literal.
            *
            * @return the model ordinal value
            */
            public int getModelOrdinal() {
                return modelOrdinal;
            }
            
            /**
            * Returns an enum literal via its model ordinal.
            * 
            * @param modelOrdinal the ordinal to search for
            * @return the enum literal, may be <b>null</b> for none
            */
            public static ${clsName} valueByModelOrdinal(int modelOrdinal) {
                // preliminary, currently no lookup
                ${clsName} result = null;
                for (${clsName} l : ${clsName}.values()) {
                    if (l.getModelOrdinal() == modelOrdinal) {
                        result = l;
                        break;
                    }
                }
                return result;
            }

        }'
    }
    
}
