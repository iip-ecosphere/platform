import Basics;
import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template MavenBasics(Configuration config, FileArtifact target) {

    // creates the Maven root element(s) in the given [empty] XML file
    // returns the <project> node
    def XmlElement createMavenRoot(XmlFileArtifact target) {
        target.setOmitXmlDeclaration(true);
        XmlElement project = target.createRootElement("project");
        buildAttribute(buildAttribute(buildAttribute(project, "xmlns", "http://maven.apache.org/POM/4.0.0"), "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance"), "xsi:schemaLocation", "http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd");
        buildElement(project, "modelVersion", "4.0.0");
    }
    
    // appends a dependency. parent shall be a <dependencies> node. If groupId or artifactId are empty, nothing is emitted
    // version, type and scope are as in Maven and, by default, empty
    // returns the dependency XML element 
    def XmlElement appendDependency(XmlElement parent, String groupId, String artifactId, String ver = "", String type = "", String scope = "", Boolean createDepElt=true, String classifier = "") {
        if (groupId.length() > 0 and artifactId.length() > 0) {
            XmlElement dep;
            if (createDepElt) {
                dep = new XmlElement(parent, "dependency");
            } else {
                dep = parent;
            }
            new XmlElement(dep, "groupId", groupId);
            new XmlElement(dep, "artifactId", artifactId);
            if (ver.length() > 0) {
                new XmlElement(dep, "version", ver);
            }
            if (type.length() > 0) {
                new XmlElement(dep, "type", type);
            }
            if (scope.length() > 0) {
                new XmlElement(dep, "scope", scope);
            }
            if (classifier.length() > 0) {
                new XmlElement(dep, "classifier", classifier);
            }
            dep;
        }
    }
    
    def appendArtifact(XmlElement parent, String artifact, String dfltVersion="", Boolean createDepElt=true) {
        XmlElement res;
        sequenceOf(String) artList = artifact.split(":");
        if (artList.size() == 2) { // groupId:artifactId
            res = appendDependency(parent, artList[0], artList[1], dfltVersion, createDepElt=createDepElt);
        }
        if (artList.size() == 3) { // groupId:artifactId:version
            res = appendDependency(parent, artList[0], artList[1], artList[2], createDepElt=createDepElt);
        }
        if (artList.size() == 4) { // groupId:artifactId:type:version
            res = appendDependency(parent, artList[0], artList[1], artList[3], artList[2], createDepElt=createDepElt);
        }
        if (artList.size() == 5) { // groupId:artifactId:type:classifier:version
            res = appendDependency(parent, artList[0], artList[1], artList[4], artList[2], createDepElt=createDepElt, classifier=artList[3]);
        }
        res;
    }
    
    // creates the Maven attributes for the project itself. The parent is the <project> node as e.g. returned by createMavenRoot
    // name or description may be omitted, packaging is by default "jar"
    def createMavenProjectAttributes(XmlElement project, String artifactId, String name, String description, String packaging="jar") {
        new XmlElement(project, "artifactId", artifactId);
        new XmlElement(project, "packaging", packaging);
        if (name.length() > 0) {
            new XmlElement(project, "name", name);
        }
        if (description.length() > 0) {
            new XmlElement(project, "description", description);
        }
    }

    // creates the Maven parent element, to reference to a parent pom
    // The parent is the <project> node as e.g. returned by createMavenRoot     
    def createMavenParent(XmlElement project, String groupId, String artifactId, String version, String relativePath="") {
        XmlElement par = new XmlElement(project, "parent");
        new XmlElement(par, "groupId", groupId);
        new XmlElement(par, "artifactId", artifactId);
        new XmlElement(par, "version", version);
        new XmlElement(par, "relativePath", relativePath);
        par;
    }
    
    // creates the element for the Maven build section
    def createMavenBuildElement(XmlElement project, String srcDir="\\${basedir}/", Boolean withPlugins=false) {
        XmlElement build = new XmlElement(project, "build");
        if (srcDir.length() > 0) {
            new XmlElement(build, "sourceDirectory", srcDir);
        }
        if (withPlugins) {
            createPlugins(build);
        } else {
            build;
        }
    }
    
    def XmlElement appendPlugin(XmlElement parent, String groupId, String artifactId, String ver, Boolean cfg) {
        XmlElement p1 = new XmlElement(parent, "plugin");
        if (groupId.length() > 0) {
            new XmlElement(p1, "groupId", groupId);
        }
        buildElement(buildElement(p1, "artifactId", artifactId), "version", ver);
        if (cfg) {
            appendConfiguration(p1);
        } else {
            p1;
        }
    }
    
    def appendConfiguration(XmlElement parent) {
        new XmlElement(parent, "configuration");
    }

    def createPlugins(XmlElement parent) {
        new XmlElement(parent, "plugins");
    }
    
    def createDependencies(XmlElement project) {
        new XmlElement(project, "dependencies");
    }

    def createPluginManagement(XmlElement project) {
        new XmlElement(project, "pluginManagement");
    }

    def appendExecutionsParent(XmlElement parent) {
        new XmlElement(parent, "executions");
    }

    def appendExecutions(XmlElement parent) {
        new XmlElement(new XmlElement(parent, "executions"), "execution");
    }

    def appendGoal(XmlElement execution, String goal) {
        new XmlElement(new XmlElement(execution, "goals"), "goal", goal);
    }
    
    def appendExclusions(XmlElement dep) {
        new XmlElement(dep, "exclusions");
    }
    
    def appendExclusion(XmlElement excls, String groupId, String artifactId) {
        XmlElement e = new XmlElement(excls, "exclusion");
        new XmlElement(e, "groupId", groupId);
        new XmlElement(e, "artifactId", artifactId);
        e;
    }
    
    def appendSingleExclusion(XmlElement dep, String groupId, String artifactId) {
        appendExclusion(appendExclusions(dep), groupId, artifactId);
    }
    
    // ---------------------------------- maven jar plugin ------------------------------------------------------
    
    def XmlElement appendMavenJarPlugin(XmlElement plugins, String ver, Boolean addClassPath, String mainClass="", String goal="") {
        XmlElement plugin = appendPlugin(plugins, "org.apache.maven.plugins", "maven-jar-plugin", ver, false);
        if (addClassPath or mainClass.length() > 0) {
            XmlElement config = appendConfiguration(plugin);
            XmlElement manifest = new XmlElement(new XmlElement(config, "archive"), "manifest");
            if (addClassPath) {
                new XmlElement(manifest, "addClasspath", addClassPath);
            }
            if (mainClass.length() > 0) {
                new XmlElement(manifest, "mainClass", mainClass);
            }
        }
        if (goal.length() > 0) {
            appendGoal(appendExecutions(plugin), goal);
        }
        plugin;
    }   
    
    // ----------------------------------- maven dependency plugin ---------------------------------------------
    
    def XmlElement appendMavenDependencyPlugin(XmlElement plugins, String ver="3.2.0") {
        appendPlugin(plugins, "org.apache.maven.plugins", "maven-dependency-plugin", ver, false);
    } 

    def XmlElement appendMavenIipDependencyPlugin(XmlElement plugins, String ver="\\${project.version}") {
        appendPlugin(plugins, "de.iip-ecosphere.platform", "dependency-plugin", ver, false);
    } 

    def XmlElement appendMavenDependencyPluginUnpackArtifact(XmlElement plugins, String artifact, String classifier, String outputDir, String destFileName, String ver="3.2.0", String type="jar", String phase="process-sources") {
        XmlElement plugin = appendMavenDependencyPlugin(plugins, ver);
        appendMavenDependencyPluginUnpackArtifactExecution(plugin, artifact, classifier, outputDir, destFileName, type, phase);
    }
    
    def XmlElement appendMavenDependencyPluginUnpackArtifactExecution(XmlElement plugin, String artifact, String classifier, String outputDir, String destFileName, String type="jar", String phase="process-sources") {
        XmlElement execs = new XmlElement(plugin, "executions");
        appendMavenDependencyPluginExecution(execs, "unpack", artifact, classifier, outputDir, destFileName, type=type, phase=phase);
        execs;
    }
    
    def XmlElement appendMavenDependencyPluginExecution(XmlElement execs, String goal, String artifact, String classifier, String outputDir, String destFileName, String type="jar", String phase="process-sources", String id="") {
        XmlElement exec = new XmlElement(execs, "execution");
        if (length(id) == 0) { // fallback
            id = goal;
        }
        new XmlElement(exec, "id", id);
        appendGoal(exec, goal);
        new XmlElement(exec, "phase", phase);
        XmlElement config = appendConfiguration(exec);
        XmlElement items = new XmlElement(config, "artifactItems");
        appendMavenDependencyPluginArtifactItem(items, artifact, classifier, outputDir, destFileName, type=type);        
        items;
    }
    
    def XmlElement appendMavenDependencyPluginArtifactItem(XmlElement items, String artifact, String classifier, String outputDir, String destFileName, String type="jar") {
        XmlElement item = new XmlElement(items, "artifactItem");
        appendArtifact(item, artifact, createDepElt=false);
        if (type.length() > 0) {
            new XmlElement(item, "type", type);
        }
        if (classifier.length() > 0) {
            new XmlElement(item, "classifier", classifier);
        }
        new XmlElement(item, "overWrite", "true");        
        new XmlElement(item, "outputDirectory", outputDir);
        new XmlElement(item, "destFileName", destFileName);
        item;    
    }
    
    // includes/excludes separated by ;
    def XmlElement appendMavenIipDependencyPluginCleanup(XmlElement cfg, String directory, String includes, String excludes) {
        XmlElement cleanup = new XmlElement(cfg, "cleanup");
        new XmlElement(cleanup, "directory", directory);
        if (includes <> "") {
            XmlElement inc = new XmlElement(cleanup, "includes");
            sequenceOf(String) tmp = includes.split(";");
            for (String t : tmp) {
                new XmlElement(inc, "include", t);
            }
        }
        if (excludes <> "") {
            XmlElement exc = new XmlElement(cleanup, "excludes");
            sequenceOf(String) tmp = includes.split(";");
            for (String t : tmp) {
                new XmlElement(exc, "exclude", t);
            }
        }
        cfg;
    }
    
    
    def XmlElement appendMavenDependencyPluginCopyDeps(XmlElement plugins, String ver="3.2.0", String jarDir="", Boolean copyOwn=false, Boolean prependGroupId=true) {
        XmlElement plugin = appendMavenDependencyPlugin(plugins, ver);
        XmlElement execs = new XmlElement(plugin, "executions");
        if (jarDir.length() > 0) {
            appendMavenDependencyPluginCopyDepsExecution(execs, jarDir, copyOwn, prependGroupId);
        }
        execs;
    }
    
    def XmlElement appendMavenDependencyPluginCopyDepsExecution(XmlElement execs, String jarDir="", 
        Boolean copyOwn=false, Boolean prependGroupId=true, String phase="package", String excludeIds="", 
        String includeScope="", String includeIds="", String rootCoords="") {
        
        XmlElement exec = new XmlElement(execs, "execution");

        new XmlElement(exec, "id", "copy-dependencies");
        appendGoal(exec, "copy-dependencies");
        new XmlElement(exec, "phase", phase);
        XmlElement config = appendConfiguration(exec);
        new XmlElement(config, "prependGroupId", "${prependGroupId}");
        new XmlElement(config, "outputDirectory", jarDir);
        new XmlElement(config, "overWriteReleases", "false");
        new XmlElement(config, "overWriteSnapshots", "true");
        new XmlElement(config, "overWriteIfNewer", "true");
        if (includeIds.length() > 0) {
            new XmlElement(config, "includeArtifactIds", "${includeIds}");
        }
        if (excludeIds.length() > 0) {
            new XmlElement(config, "excludeArtifactIds", "${excludeIds}");
        }
        if (includeScope.length() > 0) {
            new XmlElement(config, "includeScope", "${includeScope}");
        }
        if (rootCoords.length() > 0) {
            new XmlElement(config, "rootCoordinates", "${rootCoords}");
        }

        if (copyOwn) {
            exec = new XmlElement(execs, "execution");
            new XmlElement(exec, "id", "copy-self");
            appendGoal(exec, "copy");
            new XmlElement(exec, "phase", "install");
            XmlElement config = appendConfiguration(exec);
            XmlElement arts = new XmlElement(config, "artifactItems");
            XmlElement art = new XmlElement(arts, "artifactItem");
            new XmlElement(art, "groupId", "\\${project.groupId}");
            new XmlElement(art, "artifactId", "\\${project.artifactId}");
            new XmlElement(art, "version", "\\${project.version}");
            new XmlElement(art, "type", "\\${project.packaging}");
            new XmlElement(config, "prependGroupId", "${prependGroupId}");
            new XmlElement(config, "outputDirectory", jarDir);
        }
        exec;
    }
    
    def XmlElement appendMavenDependencyPluginBuildClasspathExecution(XmlElement execs, String id="build-classpath", 
        String phase="prepare-package", String outputFile="\\${project.build.directory}/classes/classpath", 
        Boolean prependGroupId=true, String prefix="", String fileSeparator="", String pathSeparator="", 
        String includeScope="", String prepend="", String goal="build-classpath", String baseFile="", 
        String includeArtifactIds="", String excludeArtifactIds="", String rootCoordinates="") {
        
        XmlElement exec = new XmlElement(execs, "execution");
        new XmlElement(exec, "id", id);
        new XmlElement(exec, "phase", phase);
        appendGoal(exec, goal);
        XmlElement config = appendConfiguration(exec);
        new XmlElement(config, "outputFile", outputFile);
        new XmlElement(config, "prependGroupId", "${prependGroupId}");
        new XmlElement(config, "overWriteIfNewer", "true");
        if (prefix.length() > 0) {
            new XmlElement(config, "localRepoProperty", prefix);
            new XmlElement(config, "prefix", prefix);
        }
        if (fileSeparator.length() > 0) {
            new XmlElement(config, "fileSeparator", fileSeparator);
        }
        if (pathSeparator.length() > 0) {
            new XmlElement(config, "pathSeparator", pathSeparator);
        }
        if (includeScope.length() > 0) {
            new XmlElement(config, "includeScope", "${includeScope}");
        }
        if (prepend.length() > 0) {
            XmlElement prep = new XmlElement(config, "prepends");
            new XmlElement(prep, "prepend", "${prepend}");
        }
        if (baseFile.length() > 0) {
            new XmlElement(config, "baseFile", "${baseFile}");
        }
        if (includeArtifactIds.length() > 0) {
            new XmlElement(config, "includeArtifactIds", "${includeArtifactIds}");
        }
        if (excludeArtifactIds.length() > 0) {
            new XmlElement(config, "excludeArtifactIds", "${excludeArtifactIds}");
        }
        if (rootCoordinates.length() > 0) {
            new XmlElement(config, "rootCoordinates", "${rootCoordinates}");
        }
        exec;
    }
    
    def appendWinLinuxDependencyPluginBuildClasspathExecution(XmlElement execs, String folder, String ownArtifact="") {
        appendMavenDependencyPluginBuildClasspathExecution(execs, outputFile="../${folder}/classpath.win", 
            prependGroupId=true, prefix=folder, fileSeparator="\\", pathSeparator=";", includeScope="runtime", 
            id="build-classpath-win", prepend="${folder}\\" + "${ownArtifact}.jar"); 
        appendMavenDependencyPluginBuildClasspathExecution(execs, outputFile="../${folder}/classpath.ux", 
            prependGroupId=true, prefix=folder, fileSeparator="/", pathSeparator=":", includeScope="runtime", 
            id="build-classpath-ux", prepend="${folder}/${ownArtifact}.jar"); 
    }

    // ------------------------------------------- maven shade plugin --------------------------------------------

    def XmlElement appendMavenShadePlugin(XmlElement plugins, String ver="2.3", String mainClass="") {
        XmlElement plugin = appendPlugin(plugins, "org.apache.maven.plugins", "maven-shade-plugin", ver, false);
        XmlElement exec = appendExecutions(plugin);
        new XmlElement(exec, "phase", "package");
        appendGoal(exec, "shade");
        if (mainClass.length() > 0) {
            XmlElement cfg = appendConfiguration(exec);
            XmlElement trans = new XmlElement(cfg, "transformers");
            XmlElement t = new XmlElement(trans, "transformer"); 
            new XmlAttribute(t, "implementation", "org.apache.maven.plugins.shade.resource.ManifestResourceTransformer");
            new XmlElement(t, "mainClass", mainClass);
        }
        exec;
    }
    
    // ------------------------------------------- maven assembly plugin --------------------------------------------------

    // use appendAssemblyDescriptor on result    
    def XmlElement appendAssemblyPlugin(XmlElement plugins, String ver="3.1.1") {
        XmlElement plugin = appendPlugin(plugins, "org.apache.maven.plugins", "maven-assembly-plugin", ver, false);
        new XmlElement(plugin, "executions");
    }
    
    // on assembly descriptor (execs), add multiple assembly descriptor infos 
    def appendAssemblyDescriptors(XmlElement assemblyExecs, setOf(AssemblyInfo) assemblies) {
        for (AssemblyInfo as: assemblies.asSequence()->sortedBy(a|a.id)) { // sortedBy for testing
            appendAssemblyDescriptor(assemblyExecs, as.id, as.path, attach=as.attach, outputDir=as.outDir, finalName=as.finalName, phase=as.phase);
        }
    }
        
    def XmlElement appendAssemblyDescriptor(XmlElement execs, String id, String descriptor, String outputDir="\\${project.build.directory}", Boolean attach=false, String phase="package", String finalName="") {
        XmlElement exec = new XmlElement(execs, "execution");
        new XmlElement(exec, "id", id);
        new XmlElement(exec, "phase", phase);
        appendGoal(exec, "single");
        XmlElement cfg = appendConfiguration(exec);
        new XmlElement(new XmlElement(cfg, "descriptors"), "descriptor", descriptor);
        new XmlElement(cfg, "outputDirectory", outputDir);
        new XmlElement(cfg, "attach", "${attach}");
        if (finalName.length() > 0) {
            new XmlElement(cfg, "finalName", finalName);
            new XmlElement(cfg, "appendAssemblyId", "false");
        }
        cfg;
    }
    
    // ------------------------------------------- maven Java compiler plugin -------------------------------------------------
    
    def XmlElement appendCompilerPlugin(XmlElement plugins, String ver="3.7.0", String javaVer="1.8", String encoding="Cp1252") {
        XmlElement plugin = appendPlugin(plugins, "org.apache.maven.plugins", "maven-compiler-plugin", ver, false);
        XmlElement cfg = appendConfiguration(plugin);
        new XmlElement(cfg, "source", javaVer);
        new XmlElement(cfg, "target", javaVer);
        new XmlElement(cfg, "encoding", encoding);
    }
    
    // ------------------------------------------- maven Java testing (surefire) -----------------------------------------------
    
    def XmlElement appendSurefirePlugin(XmlElement plugins, String ver="3.0.0-M3", String include="**/AllTests.class", String depArtifact="surefire-junit47", Boolean tests=true) {
        XmlElement plugin = appendPlugin(plugins, "org.apache.maven.plugins", "maven-surefire-plugin", ver, false);
        XmlElement cfg = appendConfiguration(plugin);
        if (include.length() > 0) {
            XmlElement includes = new XmlElement(cfg, "includes");
            new XmlElement(includes, "include", include);
        }
        if (!tests) {
            new XmlElement(cfg, "skipTests", "true");
        }
        new XmlElement(cfg, "forkCount", "0"); // else it fails with jacoco
        if (depArtifact.length() > 0) {
            XmlElement deps = createDependencies(plugin);
            appendDependency(deps, "org.apache.maven.surefire", depArtifact, ver = ver);
        }
        cfg;
    }    
    
    // ------------------------------------------- maven clean plugin -----------------------------------------------------
    
    def XmlElement appendCleanPlugin(XmlElement plugins, String ver="2.5", String phase="initialize", String goal="clean", String dir="\\${project.build.directory}", String include="*.jar", Boolean excludeDefaultDirs=true) {
        XmlElement plugin = appendPlugin(plugins, "org.apache.maven.plugins", "maven-clean-plugin", ver, false);
        XmlElement exec = appendExecutions(plugin);
        new XmlElement(exec, "id", "auto-clean");
        new XmlElement(exec, "phase", phase);
        appendGoal(exec, goal);
        XmlElement cfg = appendConfiguration(exec);
        new XmlElement(cfg, "excludeDefaultDirectories", "${excludeDefaultDirs}");
        XmlElement fileset = new XmlElement(new XmlElement(cfg, "filesets"), "fileset");
        new XmlElement(fileset, "directory", dir); 
        if (include.length() > 0) {
            XmlElement includes = new XmlElement(fileset, "includes");
            sequenceOf(String) inTmp = include.split(",");
            for (String in: inTmp) {
                new XmlElement(includes, "include", in);
            }
        }
        plugin;
    }
    
    // --------------------------------------------- maven resources plugin ------------------------------------------------
    
    def XmlElement appendMavenResourcesPlugin(XmlElement plugins, String ver="3.2.0") {
        appendPlugin(plugins, "org.apache.maven.plugins", "maven-resources-plugin", ver, false);
    } 

    def XmlElement appendMavenResourcesCopyResources(XmlElement plugins, String outputDirectory, String resourceDirectory, sequenceOf(String) files, String ver="3.2.0", String phase="validate", String id="") {
        XmlElement plugin = appendMavenResourcesPlugin(plugins, ver);
        XmlElement execs = appendExecutionsParent(plugin);
        appendMavenResourcesCopyResourcesExecution(execs, "copy-resources", outputDirectory, resourceDirectory, files, phase=phase, id=id);
        execs;
    }
    
    def XmlElement appendMavenResourcesCopyResourcesExecution(XmlElement execs, String goal, String outputDirectory, String resourceDirectory, sequenceOf(String) files, String phase="validate", String id="") {
        XmlElement exec = new XmlElement(execs, "execution");
        if (length(id) == 0) { // fallback
            id = goal;
        }
        new XmlElement(exec, "id", id);
        appendGoal(exec, goal);
        new XmlElement(exec, "phase", phase);
        XmlElement config = appendConfiguration(exec);
        new XmlElement(config, "outputDirectory", outputDirectory);
        XmlElement resources = new XmlElement(config, "resources");
        XmlElement resource = new XmlElement(resources, "resource");
        new XmlElement(resource, "directory", resourceDirectory);
        new XmlElement(resource, "filtering", "false");
        for (String f: files->sortedBy(g|g)) { // sorted for testing
            new XmlElement(resource, "include", f);
        }
        config;
    }
    
    def String mavenBuildOutputDir() {
        "\\${project.build.outputDirectory}";
    }
    
    def String mavenBuildOutputResourcesDir() {
        mavenBuildOutputDir() + "/resources";
    }

    // ---------------------------- deployment ------------------------
    
    def addDistributionManagement(XmlElement dm, String repo, String id, String name, String url) {
        XmlElement repository = new XmlElement(dm, repo);
        new XmlElement(repository, "id", id);
        new XmlElement(repository, "name", name);
        new XmlElement(repository, "url", url);
        dm;
    }
    
    // ---------------------------- specific for oktoflow ------------------------

    // append some common base dependencies to avoid repetition
    def appendIipBaseDependencies(XmlElement parent, Boolean forAas=true, Boolean includeJUnit=true) {
        // this may require some JDK exclusions
        appendDependency(parent, "javax.activation", "javax.activation-api");
        if (includeJUnit) {
            appendDependency(parent, "junit", "junit", "4.12", scope="test");
        }
    }

    def addDistributionManagement(XmlElement project, IIPEcosphere cfg) {
        Boolean hasReleaseRepo = (isDefined(cfg.mavenReleaseRepository) and cfg.mavenReleaseRepository <> null);
        Boolean hasSnapshotRepo = (isDefined(cfg.mavenSnapshotRepository) and cfg.mavenSnapshotRepository <> null);
        if (hasReleaseRepo or hasSnapshotRepo) { 
            XmlElement dm = new XmlElement(project, "distributionManagement");
            if (hasReleaseRepo) {
                MavenRepository repo = cfg.mavenReleaseRepository;
                addDistributionManagement(project, "repository", repo.id, repo.name, repo.url);
            }
            if (hasSnapshotRepo) {
                MavenRepository repo = cfg.mavenSnapshotRepository;
                addDistributionManagement(project, "snapshotRepository", repo.id, repo.name, repo.url);
            }
        }
    } 
    
    def appendDeploymentPlugins(XmlElement plugins, IIPEcosphere cfg) {
        Boolean hasSnapshotRepo = (isDefined(cfg.mavenSnapshotRepository) and cfg.mavenSnapshotRepository <> null);
        if (isDefined(cfg.mavenDeployType) and cfg.mavenDeployType <> null) {
            if (hasSnapshotRepo and cfg.mavenDeployType == MavenDeployType::NEXUS) {
                MavenRepository repo = cfg.mavenSnapshotRepository; // first guess/shot
                XmlElement deployPlugin = appendPlugin(plugins, "", "maven-deploy-plugin", "2.8.2", true);
                new XmlElement(deployPlugin, "skip", "true");
                XmlElement nexusPlugin = appendPlugin(plugins, "org.sonatype.plugins", "nexus-staging-maven-plugin", "1.5.1", false);
                XmlElement execs = appendExecutionsParent(nexusPlugin);
                XmlElement exec = new XmlElement(execs, "execution");
                new XmlElement(exec, "id", "default-deploy");
                new XmlElement(exec, "phase", "deploy");
                appendGoal(exec, "deploy");
                XmlElement plCfg = appendConfiguration(nexusPlugin);
                new XmlElement(plCfg, "serverId", repo.id);
                new XmlElement(plCfg, "nexusUrl", repo.url);
                new XmlElement(plCfg, "skipStaging", "true");
            }
        }
    }
    
    // ---------------------------------------------------------------
    
    def addSemanticIdResolverDependencies(XmlElement parent, IIPEcosphere config) {
        if (isDefined(config.aasSemanticIdResolver) and config.aasSemanticIdResolver <> null) {
            for (AasSemanticIdResolver p: config.aasSemanticIdResolver) {
                appendArtifact(parent, p.artifact);
            }        
        } // use the default builtin
    }
    
    def appendIipPythonPlugin(XmlElement parent, String ver, String modelProject="") {
        XmlElement plugin = appendPlugin(parent, "de.iip-ecosphere.platform", "maven-python", ver, false);
        XmlElement execs = appendExecutionsParent(plugin);
        XmlElement exec = new XmlElement(execs, "execution");
        new XmlElement(exec, "id", "py-compile");
        appendGoal(exec, "compile-python");

        exec = new XmlElement(execs, "execution");
        new XmlElement(exec, "id", "py-test");
        appendGoal(exec, "test-python");
        XmlElement cfg = appendConfiguration(exec);
        if (modelProject <> "") {
            new XmlElement(cfg, "modelProject", modelProject);
        }
        XmlElement fileSet = new XmlElement(cfg, "fileset");
        new XmlElement(fileSet, "directory", "src/test/python");
        new XmlElement(new XmlElement(fileSet, "includes"), "include", "**/*Test.py");
    }
    
    def appendEclipseLifecycleMappingPlugin(XmlElement parent, String groupId, String artifactId, String versionRange, String goal, String ver="1.0.0") {
        XmlElement pluginCfg = appendPlugin(parent, "org.eclipse.m2e", "lifecycle-mapping", ver, true);
        new XmlComment(pluginCfg, "Plugin is only needed for Eclipse, used phase is usually valid for maven, warning in Eclipse can be ignored.");
        XmlElement lfcMeta = new XmlElement(pluginCfg, "lifecycleMappingMetadata");
        XmlElement execs = new XmlElement(lfcMeta, "pluginExecutions");
        XmlElement exec = new XmlElement(execs, "pluginExecution");

        XmlElement filter = new XmlElement(exec, "pluginExecutionFilter"); 
        new XmlElement(filter, "groupId", groupId);
        new XmlElement(filter, "artifactId", artifactId);
        new XmlElement(filter, "versionRange", versionRange);
        XmlElement goals = new XmlElement(filter, "goals");
        new XmlElement(goals, "goal", goal);

        XmlElement action = new XmlElement(exec, "action");
        new XmlElement(action, "ignore");
        pluginCfg;
    }

    def appendEclipseLifecycleMapping4DependenciesPlugin(XmlElement parent, String versionRange="[3.1.2,)", String goal="copy", String ver="1.0.0") {
        appendEclipseLifecycleMappingPlugin(parent, "org.apache.maven.plugins", "maven-dependency-plugin", versionRange, goal, ver);
    }
    
    def sequenceOf(String) defltOktoResourceFiles() {
        sequenceOf(String) res = {"*.yml", "*.png", "*.jpg", "*.json"};
        res;
    } 

}
