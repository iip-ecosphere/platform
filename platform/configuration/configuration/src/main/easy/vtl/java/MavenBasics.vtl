@advice(IIPEcosphere)
template MavenBasics(Configuration config, FileArtifact target) {

    // creates the Maven root element(s) in the given [empty] XML file
    // returns the <project> node
    def XmlElement createMavenRoot(XmlFileArtifact target) {
        target.setOmitXmlDeclaration(true);
        XmlElement project = target.createRootElement("project");
        buildAttribute(buildAttribute(buildAttribute(project, "xmlns", "http://maven.apache.org/POM/4.0.0"), "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance"), "xsi:schemaLocation", "http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd");
        buildElement(project, "modelVersion", "4.0.0");
    }
    
    // appends a dependency. parent shall be a <dependencies> node. If groupId or artifactId are empty, nothing is emitted
    // version, type and scope are as in Maven and, by default, empty
    // returns the dependency XML element 
    def XmlElement appendDependency(XmlElement parent, String groupId, String artifactId, String ver = "", String type = "", String scope = "", Boolean createDepElt=true) {
        if (groupId.length() > 0 and artifactId.length() > 0) {
            XmlElement dep;
            if (createDepElt) {
                dep = new XmlElement(parent, "dependency");
            } else {
                dep = parent;
            }
            new XmlElement(dep, "groupId", groupId);
            new XmlElement(dep, "artifactId", artifactId);
            if (ver.length() > 0) {
                new XmlElement(dep, "version", ver);
            }
            if (type.length() > 0) {
                new XmlElement(dep, "type", type);
            }
            if (scope.length() > 0) {
                new XmlElement(dep, "scope", scope);
            }
            dep;
        }
    }
    
    def appendArtifact(XmlElement parent, String artifact, String dfltVersion="", Boolean createDepElt=true) {
        sequenceOf(String) artList = artifact.split(":");
        if (artList.size() == 2) {
            appendDependency(parent, artList[0], artList[1], dfltVersion, createDepElt=createDepElt);
        }
        if (artList.size() == 3) {
            appendDependency(parent, artList[0], artList[1], artList[2], createDepElt=createDepElt);
        }
    }
    
    // creates the Maven attributes for the project itself. The parent is the <project> node as e.g. returned by createMavenRoot
    // name or description may be omitted, packaging is by default "jar"
    def createMavenProjectAttributes(XmlElement project, String artifactId, String name, String description, String packaging="jar") {
        new XmlElement(project, "artifactId", artifactId);
        new XmlElement(project, "packaging", packaging);
        if (name.length() > 0) {
            new XmlElement(project, "name", name);
        }
        if (description.length() > 0) {
            new XmlElement(project, "description", description);
        }
    }

    // creates the Maven parent element, to reference to a parent pom
    // The parent is the <project> node as e.g. returned by createMavenRoot     
    def createMavenParent(XmlElement project, String groupId, String artifactId, String version) {
        XmlElement par = new XmlElement(project, "parent");
        new XmlElement(par, "groupId", groupId);
        new XmlElement(par, "artifactId", artifactId);
        new XmlElement(par, "version", version);
        par;
    }
    
    // creates the element for the Maven build section
    def createMavenBuildElement(XmlElement project, String srcDir="\\${basedir}/", Boolean withPlugins=false) {
        XmlElement build = new XmlElement(project, "build");
        if (srcDir.length() > 0) {
            new XmlElement(build, "sourceDirectory", srcDir);
        }
        if (withPlugins) {
            createPlugins(build);
        } else {
            build;
        }
    }
    
    def XmlElement appendPlugin(XmlElement parent, String groupId, String artifactId, String ver, Boolean cfg) {
        XmlElement p1 = new XmlElement(parent, "plugin");
        if (groupId.length() > 0) {
            new XmlElement(p1, "groupId", groupId);
        }
        buildElement(buildElement(p1, "artifactId", artifactId), "version", ver);
        if (cfg) {
            appendConfiguration(p1);
        } else {
            p1;
        }
    }
    
    def appendConfiguration(XmlElement parent) {
        new XmlElement(parent, "configuration");
    }

    def createPlugins(XmlElement parent) {
        new XmlElement(parent, "plugins");
    }
    
    def createDependencies(XmlElement project) {
        new XmlElement(project, "dependencies");
    }

    def appendExecutions(XmlElement parent) {
        new XmlElement(new XmlElement(parent, "executions"), "execution");
    }

    def appendGoal(XmlElement execution, String goal) {
        new XmlElement(new XmlElement(execution, "goals"), "goal", goal);
    }
    
    def XmlElement appendMavenJarPlugin(XmlElement plugins, String ver, Boolean addClassPath, String mainClass="", String goal="") {
        XmlElement plugin = appendPlugin(plugins, "org.apache.maven.plugins", "maven-jar-plugin", ver, false);
        if (addClassPath or mainClass.length() > 0) {
            XmlElement config = appendConfiguration(plugin);
            XmlElement manifest = new XmlElement(new XmlElement(config, "archive"), "manifest");
            if (addClassPath) {
                new XmlElement(manifest, "addClasspath", addClassPath);
            }
            if (mainClass.length() > 0) {
                new XmlElement(manifest, "mainClass", mainClass);
            }
        }
        if (goal.length() > 0) {
            appendGoal(appendExecutions(plugin), goal);
        }
    }   
    
    def XmlElement appendMavenDependencyPlugin(XmlElement plugins, String ver="3.2.0") {
        appendPlugin(plugins, "org.apache.maven.plugins", "maven-dependency-plugin", ver, false);
    } 

    def XmlElement appendMavenDependencyPluginUnpackArtifact(XmlElement plugins, String artifact, String classifier, String outputDir, String destFileName, String ver="3.2.0", String type="jar", String phase="process-sources") {
        XmlElement plugin = appendMavenDependencyPlugin(plugins, ver);
        XmlElement execs = new XmlElement(plugin, "executions");
        XmlElement exec = new XmlElement(execs, "execution");
        new XmlElement(exec, "id", "unpack");
        appendGoal(exec, "unpack");
        new XmlElement(exec, "phase", phase);
        XmlElement config = appendConfiguration(exec);
        XmlElement items = new XmlElement(config, "artifactItems");
        XmlElement item = new XmlElement(items, "artifactItem");
        appendArtifact(item, artifact, createDepElt=false);
        if (type.length() > 0) {
            new XmlElement(item, "type", type);
        }
        if (classifier.length() > 0) {
            new XmlElement(item, "classifier", classifier);
        }
        new XmlElement(item, "overWrite", "true");        
        new XmlElement(item, "outputDirectory", outputDir);
        new XmlElement(item, "destFileName", destFileName);
        execs;
    }
    
    def XmlElement appendMavenDependencyPluginCopyDeps(XmlElement plugins, String ver="3.2.0", String jarDir="", Boolean copyOwn=false, Boolean prependGroupId=true) {
        XmlElement plugin = appendMavenDependencyPlugin(plugins, ver);
        if (jarDir.length() > 0) {
            XmlElement execs = new XmlElement(plugin, "executions");
            XmlElement exec = new XmlElement(execs, "execution");

            new XmlElement(exec, "id", "copy-dependencies");
            appendGoal(exec, "copy-dependencies");
            new XmlElement(exec, "phase", "package");
            XmlElement config = appendConfiguration(exec);
            new XmlElement(config, "prependGroupId", "${prependGroupId}");
            new XmlElement(config, "outputDirectory", jarDir);
            new XmlElement(config, "overWriteReleases", "false");
            new XmlElement(config, "overWriteSnapshots", "true");
            new XmlElement(config, "overWriteIfNewer", "true");        

            if (copyOwn) {
                exec = new XmlElement(execs, "execution");
                new XmlElement(exec, "id", "copy-self");
                appendGoal(exec, "copy");
                new XmlElement(exec, "phase", "install");
                XmlElement config = appendConfiguration(exec);
                XmlElement arts = new XmlElement(config, "artifactItems");
                XmlElement art = new XmlElement(arts, "artifactItem");
                new XmlElement(art, "groupId", "\\${project.groupId}");
                new XmlElement(art, "artifactId", "\\${project.artifactId}");
                new XmlElement(art, "version", "\\${project.version}");
                new XmlElement(art, "type", "\\${project.packaging}");
                new XmlElement(config, "prependGroupId", "${prependGroupId}");
                new XmlElement(config, "outputDirectory", jarDir);
            }
        }
        plugin;
    }

    def XmlElement appendMavenShadePlugin(XmlElement plugins, String ver="2.3", String mainClass="") {
        XmlElement plugin = appendPlugin(plugins, "org.apache.maven.plugins", "maven-shade-plugin", ver, false);
        XmlElement exec = appendExecutions(plugin);
        new XmlElement(exec, "phase", "package");
        appendGoal(exec, "shade");
        if (mainClass.length() > 0) {
            XmlElement cfg = appendConfiguration(exec);
            XmlElement trans = new XmlElement(cfg, "transformers");
            XmlElement t = new XmlElement(trans, "transformer"); 
            new XmlAttribute(t, "implementation", "org.apache.maven.plugins.shade.resource.ManifestResourceTransformer");
            new XmlElement(t, "mainClass", mainClass);
        }
    }

    // use appendAssemblyDescriptor on result    
    def XmlElement appendAssemblyPlugin(XmlElement plugins, String ver="3.1.1") {
        XmlElement plugin = appendPlugin(plugins, "org.apache.maven.plugins", "maven-assembly-plugin", ver, false);
        new XmlElement(plugin, "executions");
    }
    
    def XmlElement appendAssemblyDescriptor(XmlElement execs, String id, String descriptor, String outputDir="\\${project.build.directory}", Boolean attach=false, String phase="package", String finalName="") {
        XmlElement exec = new XmlElement(execs, "execution");
        new XmlElement(exec, "id", id);
        new XmlElement(exec, "phase", phase);
        appendGoal(exec, "single");
        XmlElement cfg = appendConfiguration(exec);
        new XmlElement(new XmlElement(cfg, "descriptors"), "descriptor", descriptor);
        new XmlElement(cfg, "outputDirectory", outputDir);
        new XmlElement(cfg, "attach", "${attach}");
        if (finalName.length() > 0) {
            new XmlElement(cfg, "finalName", finalName);
            new XmlElement(cfg, "appendAssemblyId", "false");
        }
    }
    
    def XmlElement appendCompilerPlugin(XmlElement plugins, String ver="3.7.0", String javaVer="1.8", String encoding="Cp1252") {
        XmlElement plugin = appendPlugin(plugins, "org.apache.maven.plugins", "maven-compiler-plugin", ver, false);
        XmlElement cfg = appendConfiguration(plugin);
        new XmlElement(cfg, "source", javaVer);
        new XmlElement(cfg, "target", javaVer);
        new XmlElement(cfg, "encoding", encoding);
    }
    
    def XmlElement appendSurefirePlugin(XmlElement plugins, String ver="3.0.0-M3", String include="**/AllTests.class", String depArtifact="surefire-junit47", Boolean tests=true) {
        XmlElement plugin = appendPlugin(plugins, "org.apache.maven.plugins", "maven-surefire-plugin", ver, false);
        XmlElement cfg = appendConfiguration(plugin);
        if (include.length() > 0) {
            XmlElement includes = new XmlElement(cfg, "includes");
            new XmlElement(includes, "include", include);
        }
        if (!tests) {
            new XmlElement(cfg, "skipTests", "true");
        }
        new XmlElement(cfg, "forkCount", "0"); // else it fails with jacoco
        if (depArtifact.length() > 0) {
            XmlElement deps = createDependencies(plugin);
            appendDependency(deps, "org.apache.maven.surefire", depArtifact, ver = ver);
        }
    }    
    
    def XmlElement appendCleanPlugin(XmlElement plugins, String ver="2.5", String phase="initialize", String goal="clean", String dir="\\${project.build.directory}", String include="*.jar") {
        XmlElement plugin = appendPlugin(plugins, "org.apache.maven.plugins", "maven-clean-plugin", ver, false);
        XmlElement exec = appendExecutions(plugin);
        new XmlElement(exec, "id", "auto-clean");
        new XmlElement(exec, "phase", phase);
        appendGoal(exec, goal);
        XmlElement cfg = appendConfiguration(exec);
        new XmlElement(cfg, "excludeDefaultDirectories", "true");
        XmlElement fileset = new XmlElement(new XmlElement(cfg, "filesets"), "fileset");
        new XmlElement(fileset, "directory", dir); 
        if (include.length() > 0) {
            XmlElement includes = new XmlElement(fileset, "includes");
            new XmlElement(includes, "include", include);
        }
        plugin;
    }
    
    // ---------------------------- specific to IIP-Ecosphere ------------------------

    // append some common base dependencies to avoid repetition
    def appendIipBaseDependencies(XmlElement parent, Boolean forAas=true, Boolean includeJUnit=true) {
        // this may require some JDK exclusions
        appendDependency(parent, "javax.activation", "javax.activation-api");
        if (includeJUnit) {
            appendDependency(parent, "junit", "junit", "4.12", scope="test");
        }
    }

}
