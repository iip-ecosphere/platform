import Basics;
import JavaMapping;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template EcsRuntimeDockerContainerManagerYaml(IIPEcosphere config, FileArtifact target, EcsDevice deviceType) {

    def serverHost(EndpointAddress addr) {
        if (addr.serverHost <> null) {
            'serverHost: ${addr.serverHost}'
        } else {
            ''
        }
    }
    
    def produceAasCors(IIPEcosphere config) {
        String aasCors = getStringValueSafe(config.aasAccessControlAllowOrigin, "");
        if (aasCors <> "") {
            'accessControlAllowOrigin: "${aasCors}"'
        } else {
            ''
        }
    }

    def produceAasPluginId(IIPEcosphere config) {
        String aasPluginId = getStringValueSafe(config.aasPluginId, "");
        if (aasPluginId <> "") {
            'pluginId: "${aasPluginId}"'
        } else {
            ''
        }
    }

    def produceAasStartupTimeout(IIPEcosphere config) {
        Integer timeout = getIntegerValueSafe(config.aasStartupTimeout, 0);
        if (timeout > 0) {
            'aasStartupTimeout: ${timeout}'
        } else {
            ''
        }
    }

    def produceAas(IIPEcosphere config, String aasPersistence="", Boolean withDocker=true, Boolean implLocalEphemerial=false) {
        EndpointAddress aasServer = config.aasServer;
        EndpointAddress aasRegistryServer = config.aasRegistryServer;
        ImplAddress aasImplServer = config.aasImplServer;
        Integer aasImplServerPort = aasImplServer.port;
        String aasImplServerHost = aasImplServer.host;
        String aasImplNetmask = aasImplServer.netmask;
        if (implLocalEphemerial) {
            aasImplServerPort = -1;
            aasImplServerHost = "127.0.0.1";
        }
        if (withDocker) {
        '${produceContainerMgr(config.containerManager)}'
        }
        'monitoringUpdatePeriod: ${config.containerManager.monitoringUpdatePeriod}'
        'aas:
          server:
            port: ${aasServer.port}
            host: ${aasServer.host}
            schema: ${aasServer.schema}
            path: ${aasServer.path}
          registry:
            port: ${aasRegistryServer.port}
            host: ${aasRegistryServer.host}
            schema: ${aasRegistryServer.schema}
            path: ${aasRegistryServer.path}
          implementation:
            port: ${aasImplServerPort}
            host: ${aasImplServerHost}
            netmask: ${aasImplNetmask}
            schema: ${aasImplServer.schema}
            protocol: ${aasProtocolName(aasImplServer.protocol)}
          ${serverHost(aasServer)|e}
          ${produceAasCors(config)|e}
          ${produceAasStartupTimeout(config)|e}
          ${produceAasPersistence(aasPersistence)|e}
          ${produceAasPluginId(config)|e}'
    }

    def produceContainerMgr(ContainerManager containerManager) {
        ''
    }
    
    def produceContainerMgr(DockerContainerManager containerManager) {
        'docker:
            dockerHost: ${containerManager.dockerHost}
            dockerImageYamlFilename: ${containerManager.dockerImageYamlFilename}
            deleteWhenUndeployed: ${containerManager.deleteWhenUndeployed}'
        if (isDefined(containerManager.registry) and containerManager.registry <> "") {
        '    registry: ${containerManager.registry}'
        }
        if (isDefined(containerManager.authenticationKey) and containerManager.authenticationKey <> "") {
        '    authenticationKey: ${containerManager.authenticationKey}'
        }
    }

    def produceContainerMgr(LxcContainerManager containerManager) {
        'lxc:
            dockerHost: ${containerManager.dockerHost}
            lxcImageYamlFilename: ${containerManager.lxcImageYamlFilename}
            deleteWhenUndeployed: ${containerManager.deleteWhenUndeployed}'
    }
    
    def produceAasPersistence(String aasPersistence) {
        if (aasPersistence.length() > 0) {
            'persistence: ${aasPersistence}'
        } else {
            ''
        }
    }
    
    def getActionTimeout(TransportProtocol tp) {
        max(1000, getIntegerValueSafe(tp.actionTimeout, 1000));
    }

    def getActionTimeout(TransportProtocolMQTTv3 tp) {
        max(3000, getIntegerValueSafe(tp.actionTimeout, 3000));
    }

    def getActionTimeout(TransportProtocolMQTTv5 tp) {
        max(3000, getIntegerValueSafe(tp.actionTimeout, 3000));
    }
    
    def produceTransport(IIPEcosphere config) {
       TransportProtocol tp = config.transportProtocol;
       String gHost = getStringValueSafe(tp.globalHost, "");
       'transport:
            host: ${gHost}
            port: ${tp.port}
            actionTimeout: ${getActionTimeout(tp)}
            ${produceTransportSecurity(tp, true)|e}
            ${produceGateway(tp)|e}'
    }
    
    def produceGateway(TransportProtocol tp) {
        Integer port = getIntegerValueSafe(tp.gatewayPort, 10000);
        String netmask = getStringValueSafe(tp.netmask, "");
        'gatewayPort: ${port}
        netmask : ${netmask}'
    }    
    
    def produceTransportSecurity(TransportProtocol tp, Boolean userPwdFallback) {
        if (isDefined(tp.security) and tp.security <> null) {
            SecuritySettings sec = tp.security;
            if (isDefined(sec.authenticationKey) and sec.authenticationKey <> "") {
                'authenticationKey: ${sec.authenticationKey}'
            }
            if (isDefined(sec.keystoreKey) and sec.keystoreKey <> "") {
                'keystoreKey: ${sec.keystoreKey}'
            }
            if (isDefined(sec.keyAlias) and sec.keyAlias <> "") {
                'keyAlias: ${sec.keyAlias}'
            }
            if (isDefined(sec.hostNameVerification)) {
                'hostnameVerification: ${sec.hostNameVerification}'
            }
        } else {
            ''
        }
    }
    
    def produceNetMgr(IIPEcosphere config) {
       // take over the AAS netmask for consistency
       ImplAddress aasImplServer = config.aasImplServer;
       String aasImplNetmask = aasImplServer.netmask;
       // we leave out port range for now
       'netMgr:
            netmask: ${aasImplNetmask}'
    }
    
    def produceArtefactInfixes(EcsDevice deviceType) {
        if (deviceType.containerName.trim().length() > 0) { // not "dflt" here
            'artifactInfixes:
              - ${deviceType.containerName}'
        } else {
            ''
        }
    }
    
    def produceEcsRuntimeCfg(IIPEcosphere config, FileArtifact target, EcsDevice deviceType) {
        '${produceTransport(config)}'
        '${produceAas(config, implLocalEphemerial=config.aasImplServer.devicesAsEphemeral)}'
        '${produceNetMgr(config)}'
        '${produceArtefactInfixes(deviceType)|e}'
    } 

    def main(IIPEcosphere config, FileArtifact target, EcsDevice deviceType) {
        produceEcsRuntimeCfg(config, target, deviceType);
    }

}
