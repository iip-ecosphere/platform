import Basics;
import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaType(Configuration config, FileArtifact target, RecordType type, String pkg, Boolean interface, Boolean sharedInterfaces, Boolean impl) {

    String ending = " {";
    Boolean emitJavadoc = true;
    
    // generates code for the individual attributes
    def attributes(RecordType type) {
        if (not(interface)) {
            for (Field f: type.fields) {
                'private ${toTypeName(f.type)} ${asIdentifier(f.name)};\n'
            }
        }
    }

    // generates code for shallow copy of all fields (shallow for now)
    def copy(RecordType type, String sourceVariable) {
        for (Field f: type.fields) {
            'this.${asIdentifier(f.name)} = ${sourceVariable}.get${asMethodNameSuffix(f.name)}();'
        }
    }
    
    // generates code for the getters
    def getters(RecordType type) {
        for (Field f: type.fields) {
            if (emitJavadoc) {
                '/**
                  * Returns the value of {@code ${asIdentifier(f.name)}}.${prependIfNotEmpty(" ", f.description)}
                  * 
                  * @return the value
                  */'
            } else {
                '@Override'
            }
            'public ${toTypeName(f.type)} get${asMethodNameSuffix(f.name)}()${ending}'
            if (not(interface)) {
                '
                    return ${asIdentifier(f.name)};
                }\n'
            }
        }
    }

    // generates code for the setters
    def setters(RecordType type) {
        for (Field f: type.fields) {
            if (emitJavadoc) {
                '/**
                 * Changes the value of {@code ${asIdentifier(f.name)}}.${prependIfNotEmpty(" ", f.description)}
                 * 
                 * @param value the new value
                 */'
            } else {
                '@Override'
            }
            'public void set${asMethodNameSuffix(f.name)}(${toTypeName(f.type)} value)${ending}'
            if (not(interface)) {
                '
                    this.${asIdentifier(f.name)} = value;
                }\n'
            }
        }
    }
    
    def constructors(RecordType type, String clsName, String add) {
        if (not(interface)) {
            '/**
             * Default constructor. Fields are pre-allocated with default Java values.
             */
            public ${clsName}${add}() {
            }

            /**
             * Copy constructor.
             * 
             * @param from the instance to copy the values from
             */
            public ${clsName}${add}(${clsName} from) {
                ${copy(type, "from")}
            }'        
        }
    }
    
    def toString(String kw) {
        if (kw == "class") {
            '@Override
            public String toString() {
                return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(this, 
                    de.iip_ecosphere.platform.services.environment.IipStringStyle.SHORT_STRING_STYLE);
            }'
        }
    }
    
    def genHashCodeEquals(String kw, String clsName, RecordType type) {
        if (kw == "class") {
            
            '@Override
            public int hashCode() {
                int hc = 0;
                ${genRecHashCode(type)|e}
                return hc;
            }
            
            @Override
            public boolean equals(Object other) {
                boolean eq;
                if (other instanceof ${clsName}) {
                    ${clsName} oth = (${clsName}) other;
                    eq = true;
                    ${genRecEquals(type)|e}
                } else {
                    eq = false;
                }
                return eq;
            }'
        }
    }

    def genHashCode(String access, DataType type, Boolean optional) {
        '${considerWrapper(toTypeName(type))}.hashCode(${access})'
    }

    def genHashCode(String access, EnumType type, Boolean optional) {
        '${access} != null ? ${access}.hashCode() : 0'
    }
    
    def genHashCode(String access, RecordType type, Boolean optional) {
        genHashCodeObject(access, optional);
    }

    def genHashCode(String access, StringTypeType type, Boolean optional) {
        genHashCodeObject(access, optional);
    }

    def genHashCode(String access, ArrayType type, Boolean optional) {
        genHashCodeObject(access, optional);
    }
    
    def genHashCodeObject(String access, Boolean optional) {
        '${access} != null ? ${access}.hashCode() : 0'
    }
    
    def genRecHashCode(RecordType type) {
        for (Field f: type.fields) {
            'hc += ${genHashCode("get${f.name.firstToUpper()}()", f.type, f.optional)};'
        }
    }

    def genEquals(String access, DataType type, Boolean optional) {
        '${access} == oth.${access}'
    }

    def genEquals(String access, RecordType type, Boolean optional) {
        genEqualsObject(access, optional);
    }

    def genEquals(String access, StringTypeType type, Boolean optional) {
        genEqualsObject(access, optional);
    }

    def genEquals(String access, ArrayType type, Boolean optional) {
        genEqualsObject(access, optional);
    }
    
    def genEqualsObject(String access, Boolean optional) {
        '${access} != null ? ${access}.equals(oth.${access}) : true'
    }

    def genRecEquals(RecordType type) {
        for (Field f: type.fields) {
            'eq &= ${genEquals("get${f.name.firstToUpper()}()", f.type, f.optional)};'
        }
    }

    def main(Configuration config, FileArtifact target, RecordType type, String pkg, Boolean interface, Boolean sharedInterfaces, Boolean impl) {
        String clsName = asTypeName(type.name);
        String kw = "class";
        String add = "";
        String comment;
        String implements = "";
        String imp = "";
        if (sharedInterfaces) {
            if (interface) {
                ending = ";\n";
                kw = "interface";
                comment = "Interface";
                emitJavadoc = true;
            } else {
                if (impl) {
                    add = "Impl";
                    implements = " implements ${clsName}";
                    imp = "import ${pkg}.${clsName};";
                    emitJavadoc = false;
                } else { // just as a usual type, but anyway shared, e.g., for connector data types
                    emitJavadoc = true;
                }
                comment = "Implementation";
            }
        } else {
            comment = "Implementation";
            interface = false;
            emitJavadoc = true;
        }
        'package ${pkg};
        
        ${imp|e}

        /**
         * ${comment} of the application data type ${clsName}.
         * Generated by: EASy-Producer.
         */
        public ${kw} ${clsName}${add}${implements} {
         
            ${attributes(type)|e}

            ${constructors(type, clsName, add)|e}

            ${getters(type)}
            
            ${setters(type)}

            ${genHashCodeEquals(kw, clsName, type)|e}
            
            ${toString(kw)|e}

        }'
    }
    
}
