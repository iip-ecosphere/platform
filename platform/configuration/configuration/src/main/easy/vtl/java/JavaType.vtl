import Basics;
import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="java", profileArg_javadocIndent=" * ", lineLength = 120, profileArg_eltSorting="CONS")
template JavaType(Configuration config, JavaCodeArtifact target, RecordType type, String pkg, Boolean interface, Boolean sharedInterfaces, Boolean impl) {

    String ending = " {";
    Boolean emitJavadoc = true;

    @DispatchBasis
    def getTypeName(Field field) {
        toTypeName(field.type);
    }
    
    @DispatchCase
    def getTypeName(AasField field) {
        String result = toTypeName(field.type);
        if (isMultiField(field)) { // convention, type must be list type and we return a list of elements anyway
            if (field.type.isKindOf(ListType)) {
                ListType listType = field.type;
                result = toTypeName(listType.type);
            }
            'java.util.List<QualifiedElement<${considerWrapper(result)}>>';
        } else {
            result;
        }
    }
    
    @DispatchBasis
    def String genHashCode(String access, DataType type, Boolean optional) {
        String javaType = toTypeName(type);
        if ("java.math.BigInteger" == javaType or "java.math.BigDecimal" == javaType) {
            "${access} != null ? ${access}.hashCode() : 0";
        } else {
            "${considerWrapper(toTypeName(type))}.hashCode(${access})";
        }
    }

    @DispatchCase
    def String genHashCode(String access, AliasType type, Boolean optional) {
        genHashCode(access, type.represents, optional);
    }

    @DispatchCase
    def String genHashCode(String access, EnumType type, Boolean optional) {
        "${access} != null ? ${access}.hashCode() : 0";
    }
    
    @DispatchCase
    def String genHashCode(String access, RecordType type, Boolean optional) {
        genHashCodeObject(access, optional);
    }
    
    @DispatchCase
    def String genHashCode(String access, IEC61131_3DateTimeTypeType type, Boolean optional) {
        genHashCodeObject(access, optional);
    }

    @DispatchCase
    def String genHashCode(String access, DateTimeTypeType type, Boolean optional) {
        genHashCodeObject(access, optional);
    }

    @DispatchCase
    def String genHashCode(String access, ByteStringTypeType type, Boolean optional) {
        genHashCodeObject(access, optional);
    }

    @DispatchCase
    def String genHashCode(String access, ObjectTypeType type, Boolean optional) {
        genHashCodeObject(access, optional);
    }

    @DispatchCase
    def String genHashCode(String access, StringTypeType type, Boolean optional) {
        genHashCodeObject(access, optional);
    }

    @DispatchCase
    def String genHashCode(String access, ArrayType type, Boolean optional) {
        genHashCodeObject(access, optional);
    }
    
    def String genHashCodeObject(String access, Boolean optional) {
        "${access} != null ? ${access}.hashCode() : 0";
    }
    
    def getHashCodeAccess(Field f) {
        "get${asMethodNameSuffix(f.name)}()";
    }

    @DispatchBasis
    def String genEquals(String access, DataType type, Boolean optional) {
        String javaType = toTypeName(type);
        if ("java.math.BigInteger" == javaType or "java.math.BigDecimal" == javaType) {
            genEqualsObject(access, optional);
        } else {
            "${access} == oth.${access}";
        }
    }

    @DispatchCase
    def String genEquals(String access, RecordType type, Boolean optional) {
        genEqualsObject(access, optional);
    }
    
    @DispatchCase
    def String genEquals(String access, IEC61131_3DateTimeTypeType type, Boolean optional) {
        genEqualsObject(access, optional);
    }

    @DispatchCase
    def String genEquals(String access, DateTimeTypeType type, Boolean optional) {
        genEqualsObject(access, optional);
    }

    @DispatchCase
    def String genEquals(String access, ByteStringTypeType type, Boolean optional) {
        genEqualsObject(access, optional);
    }

    @DispatchCase
    def String genEquals(String access, ObjectTypeType type, Boolean optional) {
        genEqualsObject(access, optional);
    }

    @DispatchCase
    def String genEquals(String access, StringTypeType type, Boolean optional) {
        genEqualsObject(access, optional);
    }

    @DispatchCase
    def String genEquals(String access, ArrayType type, Boolean optional) {
        genEqualsObject(access, optional);
    }
    
    def String genEqualsObject(String access, Boolean optional) {
        "${access} != null ? ${access}.equals(oth.${access}) : true";
    }
    
    @DispatchBasis
    def Boolean typeNeedsAasElement(DataType type) {
        false;
    }

    @DispatchCase
    def Boolean typeNeedsAasElement(RecordType type) {
        Boolean result = false;
        for (Field field: type.fields) {
            result = result or fieldNeedsAasElement(field);
        }
        result;
    }

    @DispatchBasis
    def Boolean fieldNeedsAasElement(Field field) {
        false;
    }
    
    @DispatchCase
    def Boolean fieldNeedsAasElement(AasField field) {
        isMultiField(field);
    }

    @DispatchBasis
    def genHashCodeField(Field field, JavaCodeMethod hash) {
        genHashCodeBasis(field, hash);
    }
    
    def genHashCodeBasis(Field f, JavaCodeMethod hash) {
       hash.addAssignment("hc", "+=", genHashCode(getHashCodeAccess(f), f.type, f.optional));
    }
    
    @DispatchCase
    def genHashCodeField(AasField field, JavaCodeMethod hash) {
        if (isMultiField(field)) {
            hash.addAssignment("hc", "+=", genHashCodeObject(getHashCodeAccess(field), field.optional));
        } else {
            genHashCodeBasis(field, hash);
        }
    }

    def configureGetterSetter(JavaCodeMethod method, boolean getter, Field f) {
        if (emitJavadoc) {
            JavaCodeJavadocComment comment = method.getJavadocComment();
            if (getter) {
                comment.setComment('Returns the value of {@code ${asMethodFieldIdentifier(f.name)}}.${prependIfNotEmpty(" ", stripLang(f.description))}');
                comment.addReturnComment("the value");
            } else {
                comment.setComment('Changes the value of {@code ${asMethodFieldIdentifier(f.name)}}.${prependIfNotEmpty(" ", stripLang(f.description))}');
                if (f.readOnly) {
                    comment.addComment(" This field is read only, but needs an accessor for connector serializers. Although you can change it, a connector may ignore the value.");
                } 
                comment.addParameterComment("value", "the new value");
            }
        } else {
            method.addOverrideAnnotation();
        }
        method.addAnnotation("com.fasterxml.jackson.annotation.JsonIgnore"); // unconditional -> service integrations
    }
    
    def main(Configuration config, JavaCodeArtifact target, RecordType type, String pkg, Boolean interface, Boolean sharedInterfaces, Boolean impl) {
        IIPEcosphere cfg = config;
    
        String clsName = asTypeName(type.name);
        String add = "";
        String comment;
        String implements = "";
        if (sharedInterfaces) {
            if (interface) {
                ending = ";\n";
                comment = "Interface";
                emitJavadoc = true;
            } else {
                if (impl) {
                    add = "Impl";
                    implements = "${pkg}.${clsName}";
                    emitJavadoc = false;
                } else { // just as a usual type, but anyway shared, e.g., for connector data types
                    emitJavadoc = true;
                }
                comment = "Implementation";
            }
        } else {
            comment = "Implementation";
            interface = false;
            emitJavadoc = true;
        }

        JavaCodeClass mainCls = codeCreateClass(target, pkg, clsName + add, '${comment} of the application data type ${clsName}');
        if (typeNeedsAasElement(type)) {
            mainCls.addImport("de.iip_ecosphere.platform.transport.serialization.QualifiedElement");
        }
        mainCls.addAnnotation("de.iip_ecosphere.platform.support.iip_aas.ConfiguredName").addStringArgument(type.name);
        mainCls.addInterface(implements);
        mainCls.asInterface(interface);

        for (Field f: type.fields) {
            JavaCodeAttribute attr = mainCls.createAttribute(getTypeName(f), asMethodFieldIdentifier(f.name), not(interface));
            if (not(interface)) {
                attr.addAnnotation("com.fasterxml.jackson.annotation.JsonProperty").addStringArgument(f.name); // unconditional -> service integrations
                attr.addAnnotation("de.iip_ecosphere.platform.support.iip_aas.ConfiguredName").addStringArgument(f.name);        
            }
            configureGetterSetter(mainCls.addGetter(attr), true, f);
            configureGetterSetter(mainCls.addSetter(attr, "value"), false, f);
        }

        if (not(interface)) { // below: out-of-order method production
            mainCls.addConstructor("Default constructor. Fields are pre-allocated with default Java values.");

            JavaCodeMethod cons = mainCls.addConstructor("Copy constructor.");
            cons.addParameter(clsName, "from", "the instance to copy the values from");

            JavaCodeMethod hash = mainCls.addHashCode();
            hash.addVariable("int", "hc", "0");

            JavaCodeMethod eq = mainCls.addEquals("other");
            eq.addVariable("boolean", "eq", "");
            JavaCodeAlternative eqAlt = eq.addIf('other instanceof ${clsName}');
            eqAlt.addAssignment("${clsName} oth", "(${clsName}) other");
            eqAlt.addAssignment("eq", "true");

            for (Field f: type.fields) {
                cons.addAssignment('this.${asMethodFieldIdentifier(f.name)}', 'from.get${asMethodNameSuffix(f.name)}()');
                genHashCodeField(f, hash);
                eqAlt.addAssignment("eq", "&=", genEquals("get${asMethodNameSuffix(f.name)}()", f.type, f.optional));
            }
            
            hash.addReturn("hc");

            eqAlt.addElse().addAssignment("eq", "false");
            eq.addReturn("eq");
            
            JavaCodeMethod toString = mainCls.addToString();
            toString.addReturn("org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(this, 
                de.iip_ecosphere.platform.services.environment.IipStringStyle.SHORT_STRING_STYLE)");
        }
    }
    
}
