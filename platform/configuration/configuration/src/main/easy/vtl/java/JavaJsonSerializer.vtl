import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaJsonSerializer(Configuration config, FileArtifact target, RecordType type, String pkg, String typePkg, Boolean sharedInterfaces, Boolean impl) {

    def importTypePackage(String pkg, String typePkg) {
        if (pkg != typePkg) {
            'import ${typePkg}.*;'
        } else {
            ''
        }
    }
    
    def defineJacksonOptionals(RecordType type, String objectMapperVar, String typeName) {
        sequenceOf(String) fieldNames = type.fields->select(f|f.optional)->collect(f|f.name);
        if (fieldNames.size() > 0) {
            String fieldList = "";
            Boolean first = true;
            for (String n: fieldNames) {
                if (not(first)) {
                    fieldList = fieldList + ", ";
                }
                fieldList = fieldList + "\"${n}\"";
                first = false;
            }
            'JsonUtils.defineOptionals(${objectMapperVar}, ${typeName}.class, ${fieldList});'
        }
    }
    
    def defineJacksonTypeMapper(IIPEcosphere config, String varName) {
        if (config.sharedInterfaces) {
             'JsonUtils.handleIipDataClasses(${varName}); // only if nested?'
        }
    }

    def main(Configuration config, FileArtifact target, RecordType type, String pkg, String typePkg, Boolean sharedInterfaces, Boolean impl) {
        String clsName = asTypeName(type.name);
        String typeName = clsName;
        String add = "";
        if (sharedInterfaces) {
            add = "Impl";
            if (impl) {
                typeName = typeName + add;
            }
        }        
        'package ${pkg};
        
        import java.io.IOException;
        import de.iip_ecosphere.platform.transport.serialization.*;
        import de.iip_ecosphere.platform.support.json.JsonUtils;
        ${importTypePackage(pkg, typePkg)}
        import com.fasterxml.jackson.databind.ObjectMapper;
        import com.fasterxml.jackson.core.JsonProcessingException;
        
        /**
         * JSON transport serializer for ${clsName}.
         * Generated by: EASy-Producer.
         */
        public class ${typeName}Serializer implements Serializer<${typeName}> {

            private static final ObjectMapper MAPPER = new ObjectMapper();
            static {
                ${defineJacksonOptionals(type, "MAPPER", typeName)|e}
                ${defineJacksonTypeMapper(config, "MAPPER")|e}
            }
        
            @Override             
            public ${typeName} from(byte[] data) throws IOException {
                try {
                    return MAPPER.readValue(data, ${clsName}${add}.class);
                } catch (JsonProcessingException e) {
                    throw new IOException(e);
                }
            }

            @Override    
            public byte[] to(${typeName} source) throws IOException {
                try {
                    return MAPPER.writeValueAsBytes(source);
                } catch (JsonProcessingException e) {
                    throw new IOException(e);
                }
            }

            @Override
            public ${typeName} clone(${typeName} origin) throws IOException {
                return new ${clsName}${add}(origin);
            }

            @Override
            public Class<${typeName}> getType() {
                return ${typeName}.class;
            }
        
        }
        '
    }
    
}
