import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaJsonSerializer(Configuration config, FileArtifact target, RecordType type, String pkg, String typePkg, Boolean sharedInterfaces) {

    def importTypePackage(String pkg, String typePkg) {
        if (pkg != typePkg) {
            'import ${typePkg}.*;'
        } else {
            ''
        }
    }

    def main(Configuration config, FileArtifact target, RecordType type, String pkg, String typePkg, Boolean sharedInterfaces) {
        String clsName = asTypeName(type.name);
        String add = "";
        if (sharedInterfaces) {
            add = "Impl";
        }        
        'package ${pkg};
        
        import java.io.IOException;
        import de.iip_ecosphere.platform.transport.serialization.*;
        ${importTypePackage(pkg, typePkg)}
        import com.fasterxml.jackson.databind.ObjectMapper;
        import com.fasterxml.jackson.core.JsonProcessingException;
        
        /**
         * JSON transport serializer for ${clsName}.
         * Generated by: EASy-Producer.
         */
        public class ${clsName}Serializer implements Serializer<${clsName}> {
        
            @Override             
            public ${clsName} from(byte[] data) throws IOException {
                try {
                    ObjectMapper objectMapper = new ObjectMapper();
                    return objectMapper.readValue(data, ${clsName}${add}.class);
                } catch (JsonProcessingException e) {
                    throw new IOException(e);
                }
            }

            @Override    
            public byte[] to(${clsName} source) throws IOException {
                try {
                    ObjectMapper objectMapper = new ObjectMapper();
                    return objectMapper.writeValueAsBytes(source);
                } catch (JsonProcessingException e) {
                    throw new IOException(e);
                }
            }

            @Override
            public ${clsName} clone(${clsName} origin) throws IOException {
                return new ${clsName}${add}(origin);
            }

            @Override
            public Class<${clsName}> getType() {
                return ${clsName}.class;
            }
        
        }
        '
    }
    
}
