import Basics;
import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template AasBasics(Configuration config, FileArtifact target) {

    // java keywords    
    def validateName(String name) {
        if (name == "class") {
            name = "clazz";
        } else if (name == "Class") {
            name = "Clazz";
        } else if (name == "const") {
            name = "conzt";
        } else if (name == "Const") {
            name = "Conzt";
        } else if (name == "default") {
            name = "deflt";
        } else if (name == "Default") {
            name = "Dflt";
        }
        name;
    }
    
    def getSemanticIdExpr(DecisionVariable var) {
        getSemanticIdExpr(var, "");
    }
        
    /**
    * Returns a semantic id expression for code, e.g., irdi("..."). May return an empty string if no semanticId is 
    * defined in the given variable.
    */
    def getSemanticIdExpr(DecisionVariable var, String dflt) {
        String semanticId = getStringValueSafe(var, dflt);
        if (semanticId.length() > 0) {
            if (semanticId.startsWith("irdi:")) {
                semanticId = 'irdi("${semanticId.substring(5)}")';                
            } else if (semanticId.startsWith("iri:")) {
                semanticId = 'iri("${semanticId.substring(4)}")';                
            } else {
                semanticId = '"${semanticId}"';
            }
        } else {
            semanticId = '""';
        }
        semanticId;
    }
        
    /**
    * AASX does not include counting information, PDF is not consistent. We assume counting if explicitly
    * stated or the cardinality explicitly requires multiple instances (both -1 means not set).
    */
    def isFieldCounting(AasField field) {
       getBooleanValueSafe(field.counting, false)
           or (getIntegerValueSafe(field.minimumInstances, -1) >= 0 and getIntegerValueSafe(field.maximumInstances, -1) == -1);
    }

    def getFieldNameEx(AasField field, String counterEx) {
        getFieldNameEx(field, counterEx, "");
    }
    
    def getFieldNameEx(AasField field, String counterEx, String nameOverride) {
        String result;
        if (nameOverride.length() > 0) {
            result = nameOverride;
        } else {
            result = '"${getFieldName(field.type, field)}"';
        }
        if (isFieldCounting(field)) {
            result = 'getCountingIdShort(${result}, ${counterEx})';
        }
        result;
    }
    
    @DispatchBasis
    def getFieldName(DataType type, AasField field) {
        getIdShort(field);
    }    

    @DispatchCase
    def getFieldName(AasElementType elt, AasField field) {
        if (elt == AasGenericSubmodelElementCollection) {
            getIdShort(field);
        } else if (elt == AasGenericEntityType) {
            getIdShort(field);
        } else {
            getIdShort(elt); // by default the field name but else the (imported) structure counts
        }
    }
    
    /**
    * Returns a class comment with the contents of var, else with dflt.
    */
    def produceClassComment(DecisionVariable var, String entity, String dflt) {
        String comment = getStringValueSafe(var, "");
        if (comment.length() > 0) {
            comment = "${entity} support for " + htmlize(quoteComment(comment.firstToLower()));
        } else {
            comment = dflt + ".";
        }
        '/**
        * ${comment}
        * Generated by: EASy-Producer.
        */'
    }

    /**
     * Replaces problematic characters
     */    
    def quoteComment(String comment) {
        comment.replace("“", "\"").replace("”", "\"");
    }

    @DispatchBasis    
    def collectTypeNames(DataType type, setOf(String) result, String postfix) {
	}

    @DispatchCase
    def collectTypeNames(AasSubmodelType type, setOf(String) result, String postfix) {
	    String name = asTypeName(type.name) + postfix;
		if (!result.includes(name)) {
			result.add(name);
			if (isDefined(type.fields) and type.fields <> null) {
				collectFieldTypeNames(type.fields, result, postfix);
			}
		}
    }

    @DispatchCase
    def collectTypeNames(AasEnumType type, setOf(String) result, String postfix) {
	    if (postfix <> "") {
            result.add(asTypeName(type.name)); // no postfix
		}
    }

    @DispatchCase
    def collectTypeNames(AasSubmodelElementCollectionType type, setOf(String) result, String postfix) {
	    String name = asTypeName(type.name) + postfix;
        if (type <> AasGenericSubmodelElementCollection and !result.includes(name)) {
            result.add(name);
            if (isDefined(type.fields) and type.fields <> null) {
                collectFieldTypeNames(type.fields, result, postfix);
            }
        }
    }

    @DispatchCase
    def collectTypeNames(AasEntityType type, setOf(String) result, String postfix) {
	    String name = asTypeName(type.name) + postfix;
        if (type <> AasGenericEntityType and !result.includes(name)) {
            result.add(name);
            if (isDefined(type.fields) and type.fields <> null) {
                collectFieldTypeNames(type.fields, result, postfix);
            }
        }
    }
    
    def collectFieldTypeNames(AasFields fields, setOf(String) result, String postfix) {
        for (AasField field : fields) {
		    if (field <> null and isDefined(field.type) and field.type <> null) {
                collectTypeNames(field.type, result, postfix);
			}
        }
    }
    
    def genImports(AasSubmodelType type, String prefix, String postfix) {
        setOf(String) types = {};
        collectTypeNames(type, types, postfix);
        types.remove(asTypeName(type.name) + postfix);
        for (String t : types->sortedBy(s|s)) {
            'import ${prefix}.${t};'
        }
    }

    def skip(AasElementType elt) {      //getBooleanValueSafe(elt.isGeneric, false);
        false;
    }
    
    def notSkip(AasElementType elt) {
        not(skip(elt));
    }
    
    def skip(AasField field) {
        getBooleanValueSafe(field.isGeneric, false) and getStringValueSafe(field.semanticId, "").length() == 0;
    }
    
    def notSkip(AasField field) {
        not(skip(field));
    }
    
    def isImplementedByAPI(Any instance) {
        instance == AasGenericSubmodelElementCollection or instance == AasGenericEntityType;
    }
    
    def hasMultiSemId(AasField field) {
        getBooleanValueSafe(field.multiSemanticIds, false);
    }

    @DispatchBase    
    def hasMultiSemId(DataType elt) {
    }

    @DispatchCase
    def hasMultiSemId(AasElementType elt) {
        getBooleanValueSafe(elt.multiSemanticIds, false);
    }
    
    @DispatchBase    
    def getSemId(DataType elt) {
        "";
    }

    @DispatchCase
    def getSemId(AasElementType elt) {
        elt.semanticId;
    }
    
    def getIdShort(AasField field) {
        field.name;
    }
    
    def getIdShort(AasElementType elt) {
        getStringValueSafe(elt.idShort, elt.name);
    }
    
    @DispatchBasis
    def isOpen(DataType elt) {
        false;
    }
    
    @DispatchCase
    def isOpen(AasEnumType elt) {
        elt.isOpen == true;
    }
    
    
    def DataType stripMultiListType(Field field) {
        DataType type = field.type;
        if (isMultiField(field)) {
            type = getElementType(type);
        }
        type;
    }

}
