import Basics;
import JavaBasics;
import MavenBasics;
import JavaMapping;
import MeshBasics;

import Rtsa;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template SpringCloudStreamDeploymentDescriptor(Configuration config, FileArtifact target, Application app, sequenceOf(MeshElement) elements) extends MeshBasics {

    Boolean returnType = false;
    Boolean inputType = false;

    def generateServices(sequenceOf(MeshElement) elements) {
        for (MeshElement elt: elements) {
            '${generateService(elt, elt.impl)}'
        }
    }
    
    def generateService(MeshElement elt, ServiceBase service) {
    }
    
    def generateService(MeshElement elt, Service service) {
        '- id: ${service.id}
          name: ${service.name}
          version: ${service.ver}
          description: ${service.description}
          deployable: ${service.deployable}
          kind: ${service.kind}
          cmdArg: 
            - --iip.port=\\${port}
            - --iip.protocol=\\${protocol}
            ${generateMemLimitOpt(service)|e}
          relations:
            - endpoint:
                portArg: --mqtt.port=\\${port} --amqp.port=\\${port}
                hostArg: --mqtt.host=\\${host} --amqp.host=\\${host}
            ${generateRelations(elt)|e}
          ${generateProcess(elt, service)|e}
          ${generateAppSetup(service)|e}'
    }
    
    def generateProcess(MeshElement elt, Service service) {
        ''
    }

    def generateProcess(MeshElement elt, PythonService service) {
        String id = toFolderName(service.id);
        'process: 
            homePath: \\${tmp}/${id}/python
            ${pythonExecutable(service)|e}
            executablePath: \\${tmp}/${id}/python
            artifacts:
              - /python_${id}.zip
            cmdArg:
              - --mode
              - console
              - --modulesPath
              - \\${tmp}/${id}/python
              - --sid
              - ${service.id}
              ${pythonDataArg(service)|e}
            started: true'
    }
    
    def pythonDataArg(PythonService service) {
        if (service.integrationMode == PythonIntegrationMode::console_oneShot) {
            "--data"
        } else {
            ""
        }
    }
    
    def pythonExecutable(PythonService service) {
        if (isDefined(service.entrypointModule) and service.entrypointModule.length() > 0) {
            "executable: ${service.entrypointModule}"
        } else {
            ""
        }
    }

    // preliminary in here, move out    
    def generateProcess(MeshElement elt, KodexService service) {
        String id = toFolderName(service.id);
        'process: 
            artifacts:
              - /kodex.zip
              - /kodex_${id}.zip
            homePath: \\${tmp}/${id}/kodex
            executablePath: \\${tmp}/${id}/kodex 
            started: true'
    }
    
    // preliminary in here, move out    
    def generateProcess(MeshElement elt, RtsaService service) {
        String id = toFolderName(service.id);
        String bin = rtsaBin(service);
        String instance = rtsaInstance(service);
        'process: 
            artifacts:
              - /${bin}
              - /${instance}
            homePath: \\${tmp}/${id}/rtsa
            executablePath: \\${tmp}/${id}/rtsa 
            cmdArg:
              - --iip.rtsa.path=${service.path}
            started: true'
    }
    
    def generateMemLimitOpt(Service service) {
        String opt = toJvmMemLimitOpt(service.memLimit);
        if (opt.length() > 0) {
            "- ${opt}"
        } else {
            "";
        }
    }
    
    def generateRelations(MeshElement elt) {
    }

    def generateRelations(MeshSource elt) {
        generateRelations(elt, elt.next);
    }

    def generateRelations(MeshInnerElement elt) {
        generateRelations(elt, elt.next);
    }
    
    def generateRelations(MeshElement elt, setOf(MeshConnector) conns) {
        String eltMet = generateDataMethods(elt);
        returnType = true;
        inputType = true;
        String eltType = generateDataMethods(elt);
        returnType = false;
        '- channel: ${eltMet}-out-0
          direction: OUT
          type: ${eltType}'
        if (conns.size() > 0) {
            for (MeshConnector conn : conns, "\n") {
                MeshInnerElement next = conn.next;
                String nextMeth = generateDataMethods(next);
                returnType = true;
                inputType = true;
                String nextType = generateDataMethods(next);
                returnType = false;
                '
                - channel: ${nextMeth}-in-0
                  id: ${conn.name}
                  service: ${next.impl.id}
                  direction: IN
                  type: ${nextType}'
            }
        }
    }

    // -------------------------- mesh basics refinement, extract stream names ---------------------------------

    def generateSelect(String inType, String outType, String methodSuffixWithServiceId) {
        if (returnType) {
            if (inputType) {
                inType;
            } else {
                outType;
            }
        } else {
            methodSuffixWithServiceId;
        }
    }

    def generateSourceMethod(MeshSource src, String type, String methodSuffix, String methodSuffixWithServiceId) {
        generateSelect(type, type, methodSuffixWithServiceId);
    } 

    def generateAsyncProcessorInMethod(MeshProcessor proc, String type, String methodSuffix, String methodSuffixWithServiceId) {
        generateSelect(type, type, methodSuffixWithServiceId);
    } 

    def generateSyncProcessorMethod(MeshProcessor proc, String inType, String outType, String methodSuffix, String methodSuffixWithServiceId) {
        generateSelect(inType, outType, methodSuffixWithServiceId);
    } 
    
    def generateSinkMethod(MeshSink sink, String type, String methodSuffix, String methodSuffixWithServiceId) {
        generateSelect(type, type, methodSuffixWithServiceId);
    } 
    
    // ----------------------------------- types -----------------------------------
    
    def generateTypes(sequenceOf(MeshElement) elements) {
        setOf(DataType) types = {};
        for (MeshElement elt: elements) {
            collectTypes(elt, types);
        }
        if (types.size() > 0) {
            'types:
                ${generateTypes(types)}'
        }
    }
    
    def generateTypes(setOf(DataType) types) {
        for (RecordType type: types->selectByType(RecordType)->sortedBy(t|t.name)) {
            '${generateType(type)}'
        }
    }
    
    def generateType(DataType type) {
        ''
    }

    def generateType(RecordType type) {
        '- name: ${toTypeName(type)}
          fields:
            ${generateFields(type.fields)}'
    }
    
    def generateFields(Fields fields) {
        for (Field f: fields) {
            '- name: ${f.name}
              type: ${toTypeName(f.type)}'
        }
    }
    
    def collectTypes(MeshElement elt, setOf(DataType) types) {
    }

    def collectTypes(MeshSource elt, setOf(DataType) types) {
        collectIOTypes(elt.output, types);
    }

    def collectTypes(MeshProcessor elt, setOf(DataType) types) {
        collectIOTypes(elt.input, types);
        collectIOTypes(elt.output, types);
    }

    def collectTypes(MeshSink elt, setOf(DataType) types) {
        collectIOTypes(elt.input, types);
    }
    
    def collectIOTypes(sequenceOf(IOType) declTypes, setOf(DataType) types) {
        for (IOType t: declTypes) {
            collectType(t.type, types);
        }        
    }
    
    def collectType(DataType type, setOf(DataType) types) {
    } 

    def collectType(RecordType type, setOf(DataType) types) {
        types.add(type);
        for (Field f: type.fields) {
            types.add(f.type);
        }
    }
    
    def generateAppSetup(ServiceBase service) {
        ''
    }

    def generateAppSetup(Service service) {
        if (isDefined(service.manufacturer) and service.manufacturer <> null) {
            generateAppSetup(service.id, service.name, service.ver, service.manufacturer);
        } else {
            ''
        }
    } 
    
    def generateAppSetup(Application app) {
        if (isDefined(app.manufacturer) and app.manufacturer <> null) {
            generateAppSetup(app.id, app.name, app.ver, app.manufacturer);
        } else {
            ''
        }
    } 
    
    def generateAppSetup(String id, String name, String ver, Manufacturer m) {
        if (m <> null) {
            ManufacturerAddress ad = m.address;
            'application:
              id: ${id}
              name: ${name}
              version: ${ver}
              manufacturerName: ${m.manufacturerName}
              manufacturerProductDesignation: ${m.manufacturerProductDesignation}
              address:
                department: ${ad.department}
                street: ${ad.street}
                zipCode: ${ad.zipCode}
                cityTown: ${ad.cityTown}'
        }
    }

    // ----------------------------------- main -----------------------------------
    
    def main(Configuration config, FileArtifact target, Application app, sequenceOf(MeshElement) elements) {
        'id: ${app.id}
        name: ${app.name}
        version: ${app.ver}
        ${generateAppSetup(app)|e}
        ${generateTypes(elements)}
        services:
           ${generateServices(elements)}
        '
    }

}
