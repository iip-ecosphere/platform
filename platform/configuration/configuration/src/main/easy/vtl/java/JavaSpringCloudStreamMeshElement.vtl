import JavaBasics;
import SpringCloudStreamBasics;
import MeshBasics;
import JavaConnector;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaSpringCloudStreamMeshElement(Configuration config, FileArtifact target, MeshElement elt, String pkg, Application app, Boolean sharedInterfaces) extends MeshBasics {

    Boolean isConnector = false;

    // -------------- special case no service allowed for convenience when building up a configuration ------------------

    def fallbackToNull(MeshElement elt, String text, Boolean func) {
        fallbackToNull(elt.impl, text, func);
    }

    def fallbackToNull(ServiceBase service, String text, Boolean func) {
        text;
    }

    def fallbackToNull(JavaService service, String text, Boolean func) {
        if (service.class.length() == 0) {
            if (func) {
                'null';
            } else {
                '{}';
            }
        } else {
            '${text}';
        }
    }

    // ----------------------------- MeshBasics refinement/use ----------------------------
    
    def attachIngestors(ServiceBase base) {
         for (String methodSuffix : ingestors.getKeys()) {
             // automatic serialization fails (sometimes) in spring cloud stream 3.1.1 when connected to consumer
             if (asyncIngestors.containsKey(methodSuffix)) {
                 if (asyncIngestors.get(methodSuffix)) { // if it is asynchronous
                     '${generateIngestor(base, methodSuffix, ingestors.get(methodSuffix))}'
                 }
             }
         }
    }
    
    def generateIngestor(ServiceBase base, String methodSuffix, String type) {
        String methodName;
        if (sharedInterfaces) {
            methodName = "attach${type.firstToUpperCase()}Ingestor";
        } else {
            methodName = "attach${methodSuffix}Ingestor";
        }    
        'service.${methodName}(data -> SerializerMessageConverter.serializeAndSend(streamBridge, "${methodSuffix}-in-0", data));'
    }
    
    // called via MeshBasics.generateDataMethods for MeshSource
    def generateSourceMethod(MeshSource src, String type, String methodSuffix, String methodSuffixWithServiceId) {
        generateSourceMethod(src, src.impl, type, methodSuffix, methodSuffixWithServiceId);
    }
    
    def generateSourceMethod(MeshSource src, ServiceBase service, String type, String methodSuffix, String methodSuffixWithServiceId) {
    }
    
    def generateSourceMethod(MeshSource src, Service service, String type, String methodSuffix, String methodSuffixWithServiceId) {
        if (!service.asynchronous) {
            String methodName;
            if (sharedInterfaces) {
                methodName = "produce${type.firstToUpperCase()}";
            } else {
                methodName = methodSuffix;
            }
            '/**
            * Creates data to be ingested.
            *
            * @return the data supplier functor
            */
            @Bean
            public Supplier<${type}> ${methodSuffixWithServiceId}() {
                return () -> ${fallbackToNull(src, "service.${methodName}()", true)}; 
            }'
        }
    }

    def generateSourceMethod(MeshSource src, Connector conn, String type, String methodSuffix, String methodSuffixWithServiceId) {
        '/**
        * Called when data arrived that shall be passed on to the connector.
        *
        * @return the data consumer functor
        */
        @Bean
        public Consumer<${type}> ${methodSuffixWithServiceId}() {
            return data -> ${fallbackToNull(src, "service.send(data)", false)};
        }'    
    }
    
    def Boolean recordSourceIngestor(MeshSource elt, IOType type) {
        not(isConnector); // type(elt.impl) <> Connector
    }

    // called via MeshBasics.generateDataMethods for asynch MeshProcessor
    def generateAsyncProcessorInMethod(MeshProcessor proc, String type, String methodSuffix, String methodSuffixWithServiceId) {
        generateAsyncProcessorInMethod(proc, proc.impl, type, methodSuffix, methodSuffixWithServiceId);
    } 
    
    def generateAsyncProcessorInMethod(MeshProcessor proc, ServiceBase base, String type, String methodSuffix, String methodSuffixWithServiceId) {
        '/**
        * Called when data arrived that shall be processed (asynchronously).
        *
        * @return the data consumer functor
        */
        @Bean
        public Consumer<${type}> ${methodSuffixWithServiceId}() {
            ${generateAsyncProcessorBody(proc, base, methodSuffix, type)}
        }'
    }

    def generateAsyncProcessorBody(MeshProcessor proc, ServiceBase base, String methodSuffix, String type) {
        String methodName;
        if (sharedInterfaces) {
            methodName = "process${type.firstToUpperCase()}";
        } else {
            methodName = methodSuffix;
        }
        'return data -> ${fallbackToNull(proc, "service.${methodName}(data)", false)};'
    }

    // called via MeshBasics.generateDataMethods for synch MeshProcessor
    def generateSyncProcessorMethod(MeshProcessor proc, String inType, String outType, String methodSuffix, String methodSuffixWithServiceId) {
        generateSyncProcessorMethod(proc, proc.impl, inType, outType, methodSuffix, methodSuffixWithServiceId);
    }
    
    def generateSyncProcessorMethod(MeshProcessor proc, ServiceBase base, String inType, String outType, String methodSuffix, String methodSuffixWithServiceId) {
        '/**
        * Called when data arrived that shall be processed (synchronously).
        *
        * @return the data transformation functor
        */
        @Bean
        public Function<${inType}, ${outType}> ${methodSuffixWithServiceId}() {
            ${generateSyncProcessorBody(proc, base, methodSuffix, inType, outType)}
        }'
    } 

    def generateSyncProcessorBody(MeshProcessor proc, ServiceBase base, String methodSuffix, String inType, String outType) {
        String methodName;
        if (sharedInterfaces) {
            methodName = "transform${inType.firstToUpperCase()}";
        } else {
            methodName = methodSuffix;
        }
        'return data -> ${fallbackToNull(proc, "service.${methodName}(data)", true)};'
    }
    
    // called via MeshBasics.generateDataMethods for MeshSink
    def generateSinkMethod(MeshSink snk, String type, String methodSuffix, String methodSuffixWithServiceId) {
        String methodName;
        if (sharedInterfaces) {
            methodName = "process${type.firstToUpperCase()}";
        } else {
            methodName = methodSuffix;
        }
        '/**
        * Called when data arrived that shall be received (data sink).
        *
        * @return the data consumer functor
        */
        @Bean
        public Consumer<${type}> ${methodSuffixWithServiceId}() {
            return data -> ${fallbackToNull(snk, "service.${methodName}(data)", false)};
        }'
    } 
    
    // --------------- initial service to obtain a service instance to run with -------------------------
    
    def initialService(MeshElement elt, ServiceBase service) {
        ''
    }

    def initialService(MeshElement elt, Service service) {
        ''
    }
    
    def generateAbstractServiceCreateInstance(MeshElement elt, ServiceBase service, String attrName, String className) {
        String serviceType = getServiceType(elt, service);
        '${attrName} = AbstractService.createInstance("${className}", 
            ${serviceType}.class, 
            "${service.id}", 
            "${getDeploymentDescriptorPath()}");'
    }

    def initialService(MeshElement elt, JavaService service) {
        if (service.class.length() > 0) {
            String serviceType = getServiceType(elt, service);
            '${generateAbstractServiceCreateInstance(elt, service, "service", service.class)}'
            'Starter.mapService(service);'
        } else {
            '// NO service defined, no initialization possible'
        }
    }
    
    // TODO connector connect
    // TODO connector protocol adapter
    
    def initialService(MeshElement elt, Connector conn) {
        String connGen = getConnectorGenerics(conn, false);
        String clsName = getClsName(elt);
        '${adapterCreationFragment(conn, "adapter")};
        ${conn.class}${connGen} conn = new ${conn.class}<>(adapter);
        ${getYamlServiceFragment("serviceData", clsName, conn.id)}; 
        service = new ConnectorServiceWrapper${getConnectorGenerics(conn, true)}(serviceData, conn, 
            () -> createConnectorParameter());
        service.setReceptionCallback(new ConnectorReceptionCallback());
        Starter.mapService(service);'
    }

    // TODO family

    /*def initialService(MeshElement elt, ServiceFamily family) {
       initialService(family.members.toSequence().first());
    }*/

    def generateReceptionCallback(MeshElement elt, ServiceBase base) {
        ''
    }
    
    // --------------- service type -------------------------
    
    def String getClsName(MeshElement elt) {
        asTypeName(elt.name);
    }
    
    def getServiceType(MeshElement elt, ServiceBase base) {
        if (sharedInterfaces) {
            "${getClsName(elt)}Interface";
        } else {
            "${getClsName(elt)}Service";
        }
    }
    
    def getServiceType(MeshElement elt, Connector conn) {
        isConnector = true;
        "ConnectorServiceWrapper" + getConnectorGenerics(conn, true);
    }
    
    def generateImports(ServiceBase base) {
        ''
    }
    
    def generateServiceAttribute(MeshElement elt, ServiceBase base) {
        String serviceType = getServiceType(elt, base);
        'private ${serviceType} service;'
    }
        
    // -------------------- Python --------------------------

    def initialService(MeshElement elt, PythonService service) {
        '${generateAbstractServiceCreateInstance(elt, service, "service", getServiceType(elt, service))}'
        'Starter.mapService(service);'
    }
    
    def getServiceType(MeshElement elt, PythonService service) {
        if (service.integrationMode == PythonIntegrationMode::console_continuous) {
            "PythonAsyncProcessService"
        } else {
            "PythonSyncProcessService"
        }
    }
    
    def generateIngestor(PythonService service, String methodSuffix, String type) {
        'service.attachIngestor(${type}.class, "${type}", data -> SerializerMessageConverter.serializeAndSend(streamBridge, "${methodSuffix}-in-0", data));'
    }

    def generateAsyncProcessorBody(MeshProcessor proc, PythonService base, String methodSuffix, String type) {
        'return data -> service.processQuiet("${type}", data);'
    }
    
    def generateSyncProcessorBody(MeshProcessor proc, PythonService base, String methodSuffix, String inType, String outType) {
        'return data -> service.processQuiet("${type}", data);'
    }

    // -------------------- KODEX ---------------------------

    def String kodexServiceName(IOType in, IOType out) {
        "service${toTypeName(in.type)}${toTypeName(out.type)}";
    }
    
    def getServiceType(MeshElement elt, KodexService service) {
        "de.iip_ecosphere.platform.security.services.kodex.KodexService";
    }
    
    def generateIngestor(KodexService service, String methodSuffix, String type) {
        ''
    }

    def generateImports(KodexService service) {
        'import com.fasterxml.jackson.databind.ObjectMapper;
        import com.fasterxml.jackson.core.JsonProcessingException;
        import org.slf4j.LoggerFactory;'
    }
    
    def generateServiceAttribute(MeshProcessor elt, KodexService service) {
        String serviceType = getServiceType(elt, service);
        mapOf(IOType, IOType) pairs = ioPairs(elt);
        for (IOType in : pairs.keys()) {
            String inType = toTypeName(in.type);
            IOType out = pairs.get(in);
            String outType = toTypeName(out.type);
            'private ${serviceType}<${inType},${outType}> ${kodexServiceName(in, out)};'
        }
    }
    
    def generateAsyncProcessorBody(MeshProcessor proc, KodexService kodex, String methodSuffix, String type) {
        mapOf(IOType, IOType) pairs = ioPairs(proc);
        setOf(IOType) ins = pairs.keys()->select(t|toTypeName(t.type)==type);
        if (ins.size() > 0) {
            IOType in = ins.toSequence().first();
            if (pairs.containsKey(in)) {
                IOType out = pairs.get(in);
                'return data -> { 
                    try {
                        ${kodexServiceName(in, out)}.process(data);
                    } catch (IOException e) {
                        LoggerFactory.getLogger(getClass()).error("Processing data: " + e.getMessage());
                    }
                };'
            } else {
                'return null;'
            }
        } else {
            'return null;'
        }
    }

    def initialService(MeshProcessor elt, KodexService service) {
        String clsName = getClsName(elt);
        '${getYamlServiceFragment("serviceData", clsName, "${service.id}")};\n'
        mapOf(IOType, IOType) pairs = ioPairs(elt);
        for (IOType in : pairs.keys()) {
            String inType = toTypeName(in.type);
            IOType out = pairs.get(in);
            String outType = toTypeName(out.type);
            '${kodexServiceName(in, out)} = new ${getServiceType(elt, elt.impl)}(
                new ${inType}InputTranslator(), 
                new ${outType}OutputTranslator(), 
                new ${outType}ReceptionCallback(), 
                serviceData);
            Starter.mapService(${kodexServiceName(in, out)});'
        }
    }

    def generateReceptionCallback(MeshProcessor elt, KodexService service) {
        String serviceId = "_" + toIdentifier(service.id);

        for (IOType out : elt.output) {
             String type = toTypeName(out.type);
             String methodSuffix = "create" + type.firstToUpperCase() + serviceId;

            '/**
             * Reception callback.
             * 
             * @author EASy-Producer
             */
            private class ${type}ReceptionCallback implements ReceptionCallback<${type}> {

                @Override
                public void received(${type} data) {
                    streamBridge.send("${methodSuffix}", data);
                }

                @Override
                public Class<${type}> getType() {
                    return ${type}.class;
                }

            }
            '
        }
        
        for (IOType in : elt.input) {
            String type = toTypeName(in.type);
            '/**
             * In-data JSON type translator.
             * 
             * @author EASy-Producer
             */
            private static class ${type}InputTranslator implements TypeTranslator<${type}, String> {

                @Override
                public ${type} from(String data) throws IOException {
                    return null; // shall be filled, not needed here
                }

                @Override
                public String to(${type} source) throws IOException {
                    try {
                        ObjectMapper objectMapper = new ObjectMapper();
                        return objectMapper.writeValueAsString(source);
                    } catch (JsonProcessingException e) {
                        throw new IOException(e);
                    }                
                }

             }
             '
        }
        
        for (IOType out : elt.output) {
             String type = toTypeName(out.type);
             '/**
              * Out-data JSON type translator.
              * 
              * @author EASy-Producer
              */
             private static class ${type}OutputTranslator implements TypeTranslator<String, ${type}> {

                 @Override
                 public String from(${type} data) throws IOException {
                     return null; // shall be filled, not needed here
                 }

                 @Override
                 public ${type} to(String source) throws IOException {
                     try {
                         ObjectMapper objectMapper = new ObjectMapper();
                         return objectMapper.readValue(source, ${type}.class);
                     } catch (JsonProcessingException e) {
                         throw new IOException(e);
                     }
                 }
             }
             '
         }
    }
    
    // --------------------- main ---------------------------

    // method attachIngestors() is not needed from Java side but allows for MeshBasics script reuse
    def main(Configuration config, FileArtifact target, MeshElement elt, String pkg, Application app, Boolean sharedInterfaces) {
        String clsName = getClsName(elt);
        ServiceBase impl = elt.impl;
        'package ${pkg};
        
        import java.io.IOException;
        import java.util.function.*;
        import javax.annotation.PostConstruct;
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.context.annotation.Bean;
        import org.springframework.cloud.stream.function.StreamBridge;
        import org.springframework.stereotype.Component;
        import org.springframework.context.annotation.ComponentScan;
        import org.springframework.context.annotation.Import;
        import org.springframework.scheduling.annotation.EnableScheduling;
        import de.iip_ecosphere.platform.transport.serialization.*;
        import de.iip_ecosphere.platform.transport.connectors.ReceptionCallback;
        import de.iip_ecosphere.platform.transport.spring.SerializerMessageConverter;
        import de.iip_ecosphere.platform.services.environment.*;
        import de.iip_ecosphere.platform.services.environment.spring.Starter;
        import de.iip_ecosphere.platform.services.environment.spring.metricsProvider.MetricsProvider;
        import de.iip_ecosphere.platform.connectors.ConnectorParameter;
        import de.iip_ecosphere.platform.connectors.types.*;
        import iip.datatypes.*;
        import iip.interfaces.*;
        import iip.stubs.*;
        ${generateImports(elt.impl)|e}

        /**
         * Spring Cloud Stream service frame for net node \'${elt.name}\'.
         *
         * @author EASy-Producer.
         */
        @Component
        @EnableScheduling
        public class ${clsName} {
        
            @Autowired
            private StreamBridge streamBridge;
            ${generateServiceAttribute(elt, elt.impl)}
            // so far plain delegation, preparation but so far no support for service switching
            @Autowired
            @SuppressWarnings("unused")
            private MetricsProvider metrics;

            ${generateReceptionCallback(elt, elt.impl)|e}
        
            /**
             * Creates an instance.
             */
            public ${clsName}() {
                ${initialService(elt, elt.impl)}
            }
        
            ${generateDataMethods(elt)}
            ${generateConnectorParameter(elt, app)}

            /**
             * Attaches the ingestors.
             */
            @PostConstruct 
            public void attachIngestors() {
                ${attachIngestors(elt.impl)}
            }
            ${generateAdapterTranslators(elt)}
            ${generateReceptionCallback(elt)}
        }'
    }
    
}
