import Basics;
import JavaBasics;
import AasBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="java", profileArg_javadocIndent="* ", lineLength = 120)
template AasBuilderImpl(Configuration config, FileArtifact target, AasSubmodelType type, String pkg) {

    setOf(String) done = {};
    setOf(String) doneEnum = {};
    setOf(String) doneMethods = {};

    /**
    * Produces the code for setting the semantic id on the actual object.
    */
    def produceSetSemanticId(DecisionVariable var, boolean asStatement, boolean multiId) {
        String semanticIdEx = getSemanticIdExpr(var);
        if (multiId) {
            if (semanticIdEx.length() > 0) {
                semanticIdEx = 'semanticId != null && semanticId.length() > 0 ? semanticId : ${semanticIdEx}';
            } else {
                semanticIdEx = "semanticId";
            }
        }
        if (semanticIdEx.length() > 0) {
            if (asStatement) {
                'setSemanticId(${semanticIdEx});'
            } else {
                '.setSemanticId(${semanticIdEx})'
            }
        }
    }

    def produceSetterComment(DecisionVariable var, String name, String varName) {
        String comment = getStringValueSafe(var, "");
        if (comment.length() > 0) {
            comment = "Changes " + htmlize(quoteComment(comment.firstToLower()));
        } else {
            comment = "Defines the value of ${name}";
        }
        '/**
        * ${comment}
        *
        * @param ${varName} the value
        * @return <b>this</b> (builder style)
        */'
    }

    def produceSetterComment(DecisionVariable var, String name, sequenceOf(AasField) params, String furtherParam) {
        String comment = getStringValueSafe(var, "");
        if (comment.length() > 0) {
            comment = "Changes " + htmlize(quoteComment(comment.firstToLower()));
        } else {
            comment = "Defines the value of ${name}";
        }
        if (params.size() > 1) {
            comment = comment + " in conjunction with ";
            Boolean first = true;
            for (AasField p: params.subSequence(1, params.size() - 1)) {
                if (!first) {
                    comment = comment + ", ";
                }
                comment = comment + "${p.name}";
                first = false;
            }
        }
        '/**
        * ${comment}.
        *
        ${produceSetterCommandFields(params)|e}
        ${furtherParam|e}
        * @return <b>this</b> (builder style)
        */'
    }
    
    def produceSetterCommandFields(sequenceOf(AasField) params) {
        for (AasField field: params) {
            '${produceParamComment(field.type, field)}'
        }
    }
    
    @DispatchBasis
    def produceParamComment(DataType type, AasField field) {
        '* @param ${validateName(getFieldNameIdentifier(field))} the value for ${field.name}'
    }
    
    // ------------------------------- produce fields --------------------------------------------
    
    /**
    * Produces declarations for the given fields (selecting those that prequire a presence recording).
    */
    def produceFields(AasFields fields) {
        for (AasField field: fields) {
            '${produceField(field)|e}'
        }
    }
    
    def produceField(AasField field) {
        if (notSkip(field)) {
            if (isFieldCounting(field) or field.minimumInstances >= 0 or field.maximumInstances >= 0) {
                'private int ${getFieldNameCounterIdentifier(field)} = 0;'
            }
        }
    } 

    // ------------------------------- produce methods -------------------------------------------

    // mode == 0: full method code
    // mode == 1: inner method code
    // mode == 2: Java type

    @DispatchBasis    
    def produceMethods(DataType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        if (type == AasGenericSubmodelElementCollection) {
            AasElementType t = type;
            '${produceElementMethods(t, class, field, grouped, mode)}'
        } else if (type == AasGenericEntityType) {
            AasElementType t = type;
            '${produceElementMethods(t, class, field, grouped, mode)}'
        } else {
            '// TODO unconsidered type in produceMethods: ${type}'
        }
    }
    
    @DispatchCase
    def produceMethods(StringTypeType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        '${produceSetter(field, class, "String", "STRING", grouped, mode)}'
    }

    @DispatchCase
    def produceMethods(IntegerTypeType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        '${produceSetter(field, class, "int", "INTEGER", grouped, mode)}'
    }

    @DispatchCase
    def produceMethods(LongTypeType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        '${produceSetter(field, class, "long", "INT64", grouped, mode)}'
    }
    
    @DispatchCase
    def produceMethods(UnsignedInteger64TypeType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        '${produceSetter(field, class, "java.math.BigInteger", "UINT64", grouped, mode)}'
    }    
    
    @DispatchCase
    def produceMethods(FloatTypeType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        '${produceSetter(field, class, "float", "FLOAT", grouped, mode)}'
    }

    @DispatchCase
    def produceMethods(DoubleTypeType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        '${produceSetter(field, class, "double", "DOUBLE", grouped, mode)}'
    }

    @DispatchCase
    def produceMethods(BooleanTypeType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        '${produceSetter(field, class, "boolean", "BOOLEAN", grouped, mode)}'
    }

    @DispatchCase
    def produceMethods(DateTimeTypeType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        '${produceSetter(field, class, "java.util.Date", "DATE_TIME", grouped, mode)}'
    }
    
    @DispatchCase
    def produceMethods(AasAnyURITypeType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        '${produceSetter(field, class, "String", "ANY_URI", grouped, mode)}'
    }

    @DispatchCase
    def produceMethods(AasBlobTypeType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        '${produceSetter(field, class, "BlobDataElement", "", grouped, mode)}'
    }

    @DispatchCase
    def produceMethods(AasEnumType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        String clsName = asTypeName(type.name);
        '${produceSetter(field, class, clsName, "STRING", grouped, mode)}'
    }
    
    // AasLangStringType

    @DispatchCase
    def produceMethods(AasFileResourceTypeType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        '${produceSetter(field, class, "FileDataElement", "", grouped, mode)}'
    }
    
    @DispatchCase
    def produceMethods(AasRangeTypeType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        '${produceSetter(field, class, "Range", "", grouped, mode)}'
    }

    @DispatchCase
    def produceMethods(AasRelationTypeType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        '${produceSetter(field, class, "RelationshipElement", "", grouped, mode)}'
    }
    
    @DispatchCase
    def produceMethods(AasReferenceTypeType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        '${produceSetter(field, class, "ReferenceElement", "", grouped, mode)}'
    }

    @DispatchCase
    def produceMethods(AasMultiLangStringTypeType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        // specific call used, no aasType needed
        '${produceSetter(field, class, "LangString...", "", grouped, mode)}'
    }

    def produceSetter(AasField field, String class, String type, String aasType, sequenceOf(AasField) grouped, Integer mode) {
        if (notSkip(field)) {
            if (mode == 0) {
                String fldName = validateName(field.name);
                sequenceOf(AasField) params = {};
                params.add(field);
                for (AasField p: grouped->reject(AasField f|f.type.isKindOf(AasMultiLangStringTypeType))) {
                    params.add(p);
                }
                for (AasField p: grouped->select(AasField f|f.type.isKindOf(AasMultiLangStringTypeType))) { // varargs, must be last
                    params.add(p);
                }
                String paramList = "";
                String addComment = "";
                if (field.isGeneric) {
                    paramList = appendWithSeparator(paramList, ", ", "String idShort");
                    addComment = "* @param idShort the actual idShort";
                }
                for (AasField p : params) {
                    String pType = produceMethods(stripMultiListType(p), class, p, grouped, 2);
                    String param = produceParameter(p.type, pType, getFieldNameIdentifier(p));
                    paramList = appendWithSeparator(paramList, ", ", param);
                }
                String commentSemId = "";
                if (hasMultiSemId(field)) {
                    paramList = appendWithSeparator(paramList, ", ", "String semanticId");
                    addComment = appendWithNewline(addComment, "* @param semanticId the actual semantic ID");
                }
                
                '${produceSetterComment(field.description, field.name, params, addComment)}
                public ${class} set${fldName.firstToUpper()}(${paramList}) {
                    ${produceSetterInner(params, class)}
                    return this;
                }
                '
            } else if (mode == 1) {
                '${produceSetterInner(field.type, field, aasType)}'
            } else {
                '${type}'
            }
        } else {
            ''
        }
    }

    def produceSetterInner(sequenceOf(AasField) params, String class) {
        for (AasField p : params) {
            '${produceMethods(stripMultiListType(p), class, p, params, 1)}'
        }
    }

    @DispatchBasis    
    def valueAccessExpression(DataType type, AasField field) {
        String fld = validateName(getFieldNameIdentifier(field));
        '${fld}'
    }
    
    @DispatchBasis
    def String produceParameter(DataType type, String paramType, String paramName) {
        paramType + " " + validateName(paramName);
    }

    @DispatchCase
    def valueAccessExpression(AasEnumType type, AasField field) {
        '${getFieldNameIdentifier(field)}.getValue()'
    }
    
    @DispatchBasis
    def String produceParameter(AasEnumType type, String paramType, String paramName) {
        String prefix = "";
        if (type.isOpen) {
            prefix = "I";
        }
        prefix + paramType + " " + validateName(paramName);
    }
    
    def getFieldNameEx(AasField field) {
        String override = "";
        if (field.isGeneric) {
            override = "idShort";
        }
        getFieldNameEx(field, "++${getFieldNameCounterIdentifier(field)}", override);
    }
    
    @DispatchBasis
    def produceSetterInner(DataType type, AasField field, String aasType) {
        '${produceFieldMarker(field)|e}
        createPropertyBuilder(${getFieldNameEx(field)})
            ${produceSetSemanticId(field.semanticId, false, hasMultiSemId(field))|e}
            .setValue(Type.${aasType}, ${valueAccessExpression(type, field)}).build();'
    }
    
    // AasFileResourceTypeType
    
    @DispatchCase
    def produceSetterInner(AasFileResourceTypeType type, AasField field, String aasType) {
        '${produceFieldMarker(field)|e}
        createFileDataElementBuilder(${getFieldNameEx(field)}, file, mimeType)
            ${produceSetSemanticId(field.semanticId, false, hasMultiSemId(field))|e}
            .build();'
    }
    
    @DispatchCase
    def produceParamComment(AasFileResourceTypeType type, AasField field) {
        '* @param file the relative or absolute file name with extension'
        '* @param mimeType the mime type of the file'
    }

    @DispatchCase
    def String produceParameter(AasFileResourceTypeType type, String paramType, String paramName) {
        "String file, String mimeType";
    }
    
    // AasRangeTypeType
    
    @DispatchCase
    def produceSetterInner(AasRangeTypeType type, AasField field, String aasType) {
        '${produceFieldMarker(field)|e}
        createRangeBuilder(${getFieldNameEx(field)}, type, min, max)
            ${produceSetSemanticId(field.semanticId, false, hasMultiSemId(field))|e}
            .build();'
    }
    
    @DispatchCase
    def produceParamComment(AasRangeTypeType type, AasField field) {
        '* @param type the value type of the range'
        '* @param min the minimum value'
        '* @param max the maximum value'
    }

    @DispatchCase
    def String produceParameter(AasRangeTypeType type, String paramType, String paramName) {
        "Type type, Object min, Object max";
    }    

    // AasBlobTypeType
    
    @DispatchCase
    def produceSetterInner(AasBlobTypeType type, AasField field, String aasType) {
        '${produceFieldMarker(field)|e}
        createBlobDataElementBuilder(${getFieldNameEx(field)}, file, mimeType)
            ${produceSetSemanticId(field.semanticId, false, hasMultiSemId(field))|e}
            .build();'
    }
    
    @DispatchCase
    def produceParamComment(AasBlobTypeType type, AasField field) {
        '* @param file the relative or absolute file name with extension'
        '* @param mimeType the mime type of the file'
    }

    @DispatchCase
    def String produceParameter(AasBlobTypeType type, String paramType, String paramName) {
        "String file, String mimeType";
    }

    // AasReferenceType

    @DispatchCase
    def produceSetterInner(AasReferenceTypeType type, AasField field, String aasType) {
        '${produceFieldMarker(field)|e}
        createReferenceElementBuilder(${getFieldNameEx(field)})
            ${produceSetSemanticId(field.semanticId, false, hasMultiSemId(field))|e}
            .setValue(reference).build();'
    }

    @DispatchCase
    def produceParamComment(AasReferenceTypeType type, AasField field) {
        '* @param reference the target reference'
    }

    @DispatchCase
    def String produceParameter(AasReferenceTypeType type, String paramType, String paramName) {
        "Reference reference";
    }
    
    // AasRelationType
    
    @DispatchCase
    def produceSetterInner(AasRelationTypeType type, AasField field, String aasType) {
        '${produceFieldMarker(field)|e}
        createRelationshipElementBuilder(${getFieldNameEx(field)}, first, second)
            ${produceSetSemanticId(field.semanticId, false, hasMultiSemId(field))|e}
            .build();'
    }

    @DispatchCase
    def produceParamComment(AasRelationTypeType type, AasField field) {
        '* @param first the reference in the relation'
        '* @param second the second reference in the relation'
    }

    @DispatchCase
    def String produceParameter(AasRelationTypeType type, String paramType, String paramName) {
        "Reference first, Reference second";
    }
    
    @DispatchCase
    def produceSetterInner(AasMultiLangStringTypeType type, AasField field, String aasType) {
        '${produceMultiLangFieldMarker(field)|e}
        createMultiLanguageProperty(getDelegate(), createMultiLanguageProperties, ${getFieldNameEx(field)}, 
            ${getSemanticIdExpr(field.semanticId)}, ${getFieldNameIdentifier(field)});'
    }
    
    def produceFieldMarker(AasField field) {
        if (hasCardinality(field) and !isFieldCounting(field)) { // counting: ++ when constructing the idShort
            if (field.countInstanceOnValue and field.type.isTypeOf(BooleanTypeType)) {
                'if (${getFieldNameIdentifier(field)}) {
                    ${getFieldNameCounterIdentifier(field)}++;
                }'
            } else {
                '${getFieldNameCounterIdentifier(field)}++;'
            }        
        } else {
            if (isFieldCounting(field)) {
                '// counting -> composition of idShort'
            } else {
                '// not mandatory'
            }
        }
    }

    def produceMultiLangFieldMarker(AasField field) {
        if (hasCardinality(field) and !isFieldCounting(field)) { // counting: ++ when constructing the idShort
            'if (${getFieldNameIdentifier(field)}.length > 0) {
                ${getFieldNameCounterIdentifier(field)}++;
            }'
        }
    }

    @DispatchCase
    def produceMethods(AasSubmodelElementCollectionType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        if (doneMethods.excludes(type.name)) {
            doneMethods.add(type.name);
            String res = '${produceElementMethods(type, class, field, grouped, mode)}';
            doneMethods.remove(type.name);
            '${res}'
        }
    }
    
    @DispatchCase
    def produceMethods(AasEntityType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        if (doneMethods.excludes(type.name)) {
            doneMethods.add(type.name);
            String res = '${produceElementMethods(type, class, field, grouped, mode)}';
            doneMethods.remove(type.name);
            '${res}'
        }
    }
    
    @DispatchCase
    def produceMethods(AasSubmodelType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        // TODO unconsidered submodel ${type}
        /*// unclear, rolls it out
        if (doneMethods.excludes(type.name)) {
            doneMethods.add(type.name);
            String result = '${produceMethodsForFields(type.fields, class)}';
            doneMethods.remove(type.name);
            '${result|e}'
        } else {
            '${produceElementMethods(type, class, field, grouped, mode)}'
        }*/
    }
    
    def produceElementMethods(AasElementType type, String class, AasField field, sequenceOf(AasField) grouped, Integer mode) {
        if (mode == 0 and notSkip(field)) {
            String clsName = asTypeName(type.name);
            String fldName = asTypeName(field.name);
            String idEx = '"${field.name}"';
            String counterEx = "";
            String params = "";
            String paramsComment0 = "";
            String paramsComment1 = "";
            String paramsComment2 = "";
            String paramsComment3 = "";
            if (isFieldCounting(field)) {
                counterEx = "++${getFieldNameCounterIdentifier(field)}";
                idEx = "getCountingIdShort(${idEx}, ${counterEx})";
                counterEx = ", " + counterEx;            
            }
            String semIdParamEx = "";
            Boolean hasTypeMultiSemId = hasMultiSemId(type); 
            if (hasTypeMultiSemId) {
                semIdParamEx = ", semanticId";
            }
            String genericParam = "";
            if (type.isGeneric or field.isGeneric) {
                params = appendWithSeparator(params, ", ", "String idShort");
                paramsComment0 = "@param idShort the actual idShort";
                idEx = "idShort";
                genericParam = "idShort, ";
            }
            String builderEx = 'new ${clsName}Builder(${genericParam}this${counterEx}${semIdParamEx})';
            if (type == AasGenericSubmodelElementCollection) {
                params = appendWithSeparator(params, ", ", "boolean ordered, boolean allowDuplicates");
                builderEx = 'super.createSubmodelElementCollectionBuilder(${idEx}, ordered, allowDuplicates)';
                paramsComment1 = "* @param ordered whether the collection is ordered";
                paramsComment2 = "* @param allowDuplicates whether the collection allows duplicates";
            } else if (type == AasGenericEntityType) {
                params = appendWithSeparator(params, ", ", "Entity.EntityType type");
                builderEx = 'super.createEntityBuilder(${idEx}, type, null)';
                paramsComment1 = "* @param type the entity type";
            }
            if (hasMultiSemId(field) or hasTypeMultiSemId) {
                params = appendWithSeparator(params, ", ", "String semanticId");
                paramsComment3 = "* @param semanticId the actual semantic id";
                if (not(hasTypeMultiSemId)) {
                    builderEx = builderEx + ".setSemanticId(semanticId)";
                }
            }
            '/**
            * Creates a builder for ${htmlize(field.name)}.
            *
            ${paramsComment0|e}
            ${paramsComment1|e}
            ${paramsComment2|e}
            ${paramsComment3|e}
            * @return the builder instance, {@link Builder#build()} must be called
            */
            public ${clsName}Builder create${fldName}Builder(${params}) {
                ${produceFieldMarker(field)|e}
                return ${builderEx};
            }
            '
        }
    }    

    def produceMethodsForFields(AasFields fields, String class) {
        setOf(String) inGrouping = {};
        for (AasField field: fields->select(AasField f | f.groupWith <> null)) {
            inGrouping.add(field.name);
        }
        for (AasField field: fields) {
            if (!inGrouping.includes(field.name)) {
                sequenceOf(AasField) grouped = fields->select(AasField f | f.groupWith == field.name);
                '${produceMethods(stripMultiListType(field), class, field, grouped, 0)|e}'
            }
        }
    }
    
    def produceBuildMethod(AasFields fields, String returnType) {
        Integer count = 0;  // select does not work??
        for (AasField f : fields) {
            if (hasCardinality(f)) {
                count = count + 1;
            }
        }
        if (count > 0) {
            '@Override
            public ${returnType} build() {
                ${produceBuildMethodAsserts(fields)}
                return super.build();
            }'
        }
    }
    
    def hasCardinality(AasField field) {
        field.minimumInstances >= 0 or field.maximumInstances >= 0;
    }
    
    def produceBuildMethodAsserts(AasFields fields) {
        for (AasField field : fields) { // select does not work??
            if (hasCardinality(field) and notSkip(field)) {
                String fieldName = getFieldNameIdentifier(field);
                String condition = "";
                String text = "";
                if (field.minimumInstances >= 0 and field.maximumInstances == field.minimumInstances) {
                    condition = "${getFieldNameCounterIdentifier(field)} == ${field.minimumInstances}";
                    text = "equal ${field.minimumInstances}";
                } else {
                    if (field.minimumInstances >= 0) {
                        condition = "${field.minimumInstances} <= ${getFieldNameCounterIdentifier(field)}";
                        text = "greater or equal ${field.minimumInstances}";
                    }
                    if (field.maximumInstances >= 0) {
                        condition = appendWithSeparator(condition, " && ", "${getFieldNameCounterIdentifier(field)} <= ${field.maximumInstances}");
                        text = appendWithSeparator(text, " and ", "less or equal ${field.maximumInstances}");
                    }
                }
                'assertThat(${condition}, "Cardinality {} of ${field.name} must be ${text}.", ${getFieldNameCounterIdentifier(field)});\n'
            }
        }
    }
    
    def getFieldNameIdentifier(AasField field) {
        asIdentifier(field.name).firstToLower();
    }

    def getFieldNameCounterIdentifier(AasField field) {
        "${getFieldNameIdentifier(field)}Counter";
    }

    def getFieldNamePresenceIdentifier(AasField field) {
        "${getFieldNameIdentifier(field)}Present";
    }
    
    // ------------------------------- produce classes -------------------------------------------

    @DispatchBasis    
    def produceClasses(DataType type, Boolean counting, Boolean top, AasField field) {
        ''
    }

    @DispatchCase
    def produceClasses(AasSubmodelElementCollectionType type, Boolean counting, Boolean top, AasField field) {
        String clsName = asTypeName(type.name);
        if (!done.includes(type.name) and !isImplementedByAPI(type) and notSkip(type)) {
            done.add(type.name);
            String basicIdShortEx = '"${getIdShort(type)}"';
            String idShortEx = 'getCountingIdShort("${getIdShort(type)}", nr)';
            String idShortComment = "";
            String idShortParam = "";
            if (type.isGeneric or field.isGeneric) {
                idShortComment = "* @param idShort the actual idShort";
                idShortParam = "String idShort, ";
                basicIdShortEx = "idShort";
                idShortEx = 'getCountingIdShort(idShort, nr)';
            }
            String parentComment;
            String parentType;
            if (top) {
                parentComment = "submodel";
                parentType = "SubmodelBuilder";
            } else {
                parentComment = "submodel element container";
                parentType = "SubmodelElementContainerBuilder";
            }
            String semIdComment = "";
            String semIdParam = "";
            if (hasMultiSemId(type)) {
                semIdParam = ", String semanticId";
                semIdComment = "* @param semanticId the actual semantic ID";
            }
            '${produceClassComment(type.description, "Builder", "AAS Builder implementation")}
            public class ${clsName}Builder extends DelegatingSubmodelElementCollectionBuilder {
                
                ${produceFields(type.fields)|e}

                /**
                * Creates a builder instance for ${htmlize(getIdShort(type))}.
                *
                ${idShortComment|e}
                * @param smBuilder the parent ${parentComment} builder
                ${semIdComment|e}
                */
                protected ${clsName}Builder(${idShortParam}${parentType} smBuilder${semIdParam}) {
                    super(smBuilder.createSubmodelElementCollectionBuilder(${basicIdShortEx}, ${type.ordered}, ${type.allowDuplicates}));
                    ${produceSetSemanticId(type.semanticId, true, hasMultiSemId(type))}
                }
                
                /**
                * Creates a builder instance for ${htmlize(getIdShort(type))}.
                *
                ${idShortComment|e}
                * @param smBuilder the parent ${parentComment} builder
                * @param nr the structure number
                ${semIdComment|e}
                */
                protected ${clsName}Builder(${idShortParam}${parentType} smBuilder, int nr${semIdParam}) {
                    super(smBuilder.createSubmodelElementCollectionBuilder(${idShortEx}, ${type.ordered}, ${type.allowDuplicates}));
                    ${produceSetSemanticId(type.semanticId, true, hasMultiSemId(type))}
                }
                
                ${produceMethodsForFields(type.fields, "${clsName}Builder")|e}
                ${produceBuildMethod(type.fields, "SubmodelElementCollection")|e}
            }
            '
            '${produceClassesForFields(type.fields, false)|e}'
        }
    }

    @DispatchCase
    def produceClasses(AasEntityType type, Boolean counting, Boolean top, AasField field) {
        String clsName = asTypeName(type.name);
        if (!done.includes(type.name) and !isImplementedByAPI(type) and notSkip(type)) {
            done.add(type.name);
            String basicIdShortEx = '"${getIdShort(type)}"';
            String idShortEx = 'getCountingIdShort("${getIdShort(type)}", nr)';
            String idShortComment = "";
            String idShortParam = "";
            if (type.isGeneric or field.isGeneric) {
                idShortComment = "* @param idShort the actual idShort";
                idShortParam = "String idShort, ";
                basicIdShortEx = "idShort";
                idShortEx = 'getCountingIdShort(idShort, nr)';
            }
            String parentComment;
            String parentType;
            if (top) {
                parentComment = "submodel";
                parentType = "SubmodelBuilder";
            } else {
                parentComment = "submodel element container";
                parentType = "SubmodelElementContainerBuilder";
            }
            String semIdComment = "";
            String semIdParam = "";
            if (hasMultiSemId(type)) {
                semIdParam = ", String semanticId";
                semIdComment = "* @param semanticId the actual semantic ID";
            }
            
            '${produceClassComment(type.description, "Builder", "Entity Builder implementation")}
            public class ${clsName}Builder extends DelegatingEntityBuilder {
            
                ${produceFields(type.fields)|e}

                /**
                * Creates a builder instance for ${htmlize(getIdShort(type))}.
                *
                ${idShortComment|e}
                * @param smBuilder the parent ${parentComment} builder
                ${semIdComment|e}
                */
                protected ${clsName}Builder(${idShortParam}${parentType} smBuilder${semIdParam}) {
                    super(smBuilder.createEntityBuilder(${basicIdShortEx}, Entity.EntityType.${type.type}, null));
                    ${produceSetSemanticId(type.semanticId, true, hasMultiSemId(type))}
                }
                
                /**
                * Creates a builder instance for ${htmlize(getIdShort(type))}.
                *
                ${idShortComment|e}
                * @param smBuilder the parent ${parentComment} builder
                * @param nr the structure number
                ${semIdComment|e}
                */
                protected ${clsName}Builder(${idShortParam}${parentType} smBuilder, int nr${semIdParam}) {
                    super(smBuilder.createEntityBuilder(${idShortEx}, Entity.EntityType.${type.type}, null));
                    ${produceSetSemanticId(type.semanticId, true, hasMultiSemId(type))}
                }                
                
                ${produceMethodsForFields(type.fields, "${clsName}Builder")|e}
                ${produceBuildMethod(type.fields, "Entity")|e}
            }
            '
            '${produceClassesForFields(type.fields, false)|e}'
        }
    }
    
    @DispatchCase
    def produceClasses(AasSubmodelType type, Boolean counting, Boolean top, AasField field) {
        '// TODO unconsidered submodel ${type}'
        //'${produceClassesForFields(type.fields, true)}'
    }

    def produceClassesForFields(AasFields fields, Boolean top) {
        for (AasField field: fields) {
            '${produceClasses(field.type, isFieldCounting(field), top, field)|e}'
        }
    }
    
    // ------------------------------- produce enums ------------------------------------------

    /**
    * Produces enum declarations for the given fields (selecting those that use an enum type).
    */
    def produceEnumsForFields(Fields fields) {
        for (Field field: fields) {
            '${produceEnumForField(field)|e}'
        }
    }

    /**
    * Dispatch basis for producing an enum declaration for the given field.
    */
    @DispatchBasis    
    def produceEnumForField(Field field) {
        ''
    }

    /**
    * Produces an enum declaration for the given AAS field.
    */
    @DispatchBasis    
    def produceEnumForField(AasField field) {
        '${produceEnum(field.type)|e}'
    }

    /**
    * Dispatch basis for producing an enum declaration for the given Enumeration type.
    */
    @DispatchBasis
    def produceEnum(DataType type) {
        ''
    }

    /**
    * Produces an enum declaration for the given record type by processing the declared fields.
    */
    @DispatchCase
    def produceEnum(RecordType type) {
        if (doneEnum.excludes(type.name)) {
            doneEnum.add(type.name);
            '${produceEnumsForFields(type.fields)|e}'
        }
    }

    /**
    * Produces an enum declaration for the given AAS Enumeration type.
    */
    @DispatchCase
    def produceEnum(AasEnumType type) {
        String clsName = asTypeName(type.name);
        if (!done.includes(type.name)) {
            done.add(type.name);
            String implements = "";
            if (getBooleanValueSafe(type.isOpen, false)) {
               implements = " implements I${clsName}"; 
               '${produceClassComment(type.description, "Interface", "AAS enumeration interface")}
                public interface I${clsName} {

                    /**
                     * Returns the value id/given ordinal.
                     * 
                     * @return the value id/given ordinal
                     */
                    public int getValueId();
                    
                    /**
                     * Returns the semantic id.
                     * 
                     * @return the semantic id
                     */
                    public String getSemanticId();
                    
                    /**
                     * Returns the value to be used in the AAS.
                     * 
                     * @return the value to be used in the AAS
                     */
                    public String getValue();

                }
                '
            }
            '${produceClassComment(type.description, "Enumeration", "AAS enumeration implementation")}
            public enum ${clsName}${implements} {
            
                ${produceLiterals(type.literals)};
            
                private int valueId;
                private String semanticId;
                private String value;
            
                /**
                 * Creates a constant.
                 * 
                 * @param valueId the value id/given ordinal
                 * @param semanticId the semantic id
                 * @param value the value
                 */
                private ${clsName}(int valueId, String semanticId, String value) {
                    this.valueId = valueId;
                    this.semanticId = semanticId;
                    this.value = value;
                }
                
                ${genEnumGetter(type, "int", "valueId", "(optional) value id/given ordinal")}
                
                ${genEnumGetter(type, "String", "semanticId", "(optional) semantic id")}
                
                ${genEnumGetter(type, "String", "value", "value to be used in the AAS")}
                
            }
            '
        }
    }

//
    def genEnumGetter(AasEnumType type, String attributeType, String attributeName, String commentText) {
        if (type.isOpen) {
            '@Override'
        } else {
            '/**
            * Returns the ${commentText}.
            *
            * @return the ${commentText}
            */'
        }
        'public ${attributeType} get${attributeName.firstToUpper()}() {
            return ${attributeName};
        }'
    }

    /**
    * Produces constant declaration code for the given Enumeration literals.
    */
    def produceLiterals(sequenceOf(EnumLiteral) literals) {
        for (EnumLiteral literal: literals, ",", ";") {
            '${produceLiteral(literal)}'
        }
    }

    /**
    * Dispatch basis for producing constant declaration code for an Enumeration literal.
    */
    @DispatchBasis
    def produceLiteral(EnumLiteral literal) {
    }

    /**
    * Produces constant declaration code for an AAS Enumeration literal.
    */
    @DispatchCase
    def produceLiteral(AasEnumLiteral literal) {
        String name = getStringValueSafe(literal.identifier, literal.name);
        name = name.replace(" ", "_").toUpperCase();
        Integer valueId = getIntegerValueSafe(literal.ordinal, 0);
        String value = getStringValueSafe(literal.value, literal.name);
        String semanticIdExpr = getSemanticIdExpr(literal.semanticId);
        '${name}(${valueId}, ${semanticIdExpr}, "${value}")'
    }

    // ------------------------------- main -------------------------------------------
    
    def main(Configuration config, FileArtifact target, AasSubmodelType type, String pkg) {
        String clsName = asTypeName(type.name);
        String idConstructorVisibility = "public";
        if (type.fixedName) {
            idConstructorVisibility = "private";
        }
       'package ${pkg};
        
        import static de.iip_ecosphere.platform.support.aas.IdentifierType.*;
        import static de.iip_ecosphere.platform.support.aas.types.common.Utils.*;

        import de.iip_ecosphere.platform.support.Builder;
        import de.iip_ecosphere.platform.support.aas.Aas.AasBuilder;
        import de.iip_ecosphere.platform.support.aas.Entity.EntityBuilder;
        import de.iip_ecosphere.platform.support.aas.Submodel.SubmodelBuilder;
        import de.iip_ecosphere.platform.support.aas.SubmodelElementCollection.SubmodelElementCollectionBuilder;
        import de.iip_ecosphere.platform.support.aas.*;
        import de.iip_ecosphere.platform.support.aas.types.common.*;
        
        ${produceClassComment(type.description, "Builder", "AAS Builder implementation")}
        public class ${clsName}Builder extends DelegatingSubmodelBuilder {
        
            private boolean createMultiLanguageProperties = true;

            ${produceFields(type.fields)|e}
        
            ${produceEnumsForFields(type.fields)|e}

            /**
            * Creates a ${type.name} submodel builder.
            * 
            * @param aasBuilder the parent AAS builder
            * @param identifier the submodel identifier
            */            
            public ${clsName}Builder(AasBuilder aasBuilder, String identifier) {
                this(aasBuilder, identifier, "${getIdShort(type)}");
            }

            /**
            * Creates a ${type.name} submodel builder.
            * 
            * @param aasBuilder the parent AAS builder
            * @param identifier the submodel identifier
            * @param idShort the idShort of the submodel to create
            */            
            ${idConstructorVisibility} ${clsName}Builder(AasBuilder aasBuilder, String identifier, String idShort) {
                super(aasBuilder.createSubmodelBuilder(idShort, identifier));
                ${produceSetSemanticId(type.semanticId, true, hasMultiSemId(type))}
            }
            
            /**
             * Defines whether multi-language properties shall be created. AASPackageExplorer compliance.
             *
             * @param createMultiLanguageProperties whether multi-language properties shall be created, taints compliance 
             *     if {@code false}
             */
            public void setCreateMultiLanguageProperties(boolean createMultiLanguageProperties) {
                this.createMultiLanguageProperties = createMultiLanguageProperties;
            } 

            ${produceMethodsForFields(type.fields, "${clsName}Builder")|e}
            ${produceBuildMethod(type.fields, "Submodel")|e}

            ${produceClassesForFields(type.fields, true)|e}

        }'
    }
        
}
