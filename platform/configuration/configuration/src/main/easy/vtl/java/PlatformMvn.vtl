import Basics;
import MavenBasics;
import JavaMapping;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template PlatformMvn(IIPEcosphere config, XmlFileArtifact target, String dir, String main, Boolean tests) {

    def main(IIPEcosphere config, XmlFileArtifact target, String dir, String main, Boolean tests) {
        String iipGroup = "de.iip-ecosphere.platform";
        String springGroup = "org.springframework.boot";
        String projectVersion = "\\${project.version}";
        
        XmlElement project = createMavenRoot(target);
        createMavenProjectAttributes(project, "platform.exec", "ConfiguredPlatformInstance", "Configured platform instance");
        createMavenParent(project, iipGroup, "platformDependencies", "${config.iipVer}");
        
        XmlElement dep = createDependencies(project);
        appendDependency(dep, iipGroup, aasClientModule(config), projectVersion);
        appendDependency(dep, iipGroup, aasServerModule(config), projectVersion);
        appendDependency(dep, iipGroup, transportProtocolModule(config), projectVersion);
        appendDependency(dep, iipGroup, deviceRegistryModule(config), projectVersion);
        appendDependency(dep, iipGroup, deviceMgtStorageModule(config), projectVersion);
        appendDependency(dep, iipGroup, centralMonitoringModule(config), projectVersion);
        appendDependency(dep, iipGroup, "monitoring", projectVersion);
        appendDependency(dep, iipGroup, "configuration.configuration", projectVersion);
        appendDependency(dep, iipGroup, "platform", projectVersion);
        appendDependency(dep, iipGroup, managementUiModule(config), projectVersion);
        appendIipBaseDependencies(dep);
        
        XmlElement plugins = createMavenBuildElement(project, "", true);
        appendMavenJarPlugin(plugins, "2.3", false, main);
        appendMavenDependencyPluginCopyDeps(plugins, jarDir="../${dir}", copyOwn=true);
        appendCompilerPlugin(plugins);
        appendSurefirePlugin(plugins, tests=tests);

        sequenceOf(String) files = {"*.yml", "*.png", "*.jpg"};
        XmlElement ex2 = appendMavenResourcesCopyResources(plugins, mavenBuildOutputResourcesDir(), getResourcesFolder()+"/software", files, id="sw-res");
        appendMavenResourcesCopyResourcesExecution(ex2, "copy-resources", mavenBuildOutputResourcesDir(), getResourcesFolder()+"/platform", files, id="platf-res");
    }

}
