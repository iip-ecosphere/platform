import Basics;
import JavaBasics;

// Generation operations for data assignment operations and data transfer among data types
// May be called directly for Java-based access, but also can be extended and individual (marked) parts
// overridden to generate different access styles, e.g., for model access paths.
@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template DataOperationBasics(Configuration config, FileArtifact target) {

    setOf(String) dummy = {}; // not nice
    Boolean optWithStepIn = true;
    mapOf(String, String) variables = {};
    Integer argsNestingLevel = 0;
    Integer nestedStepCount = 0;

    def translateDataOperations(setOf(AssignmentOperation) assng, DataType src, String srcQual, DataType tgt, String tgtQual, setOf(String) done, JavaCodeBlockInterface meth) {
        mapOf(Field, String) fields = {};
        mapOf(Field, String) fieldIndexes = {};
        mapFields(src, fields, fieldIndexes, srcQual, "", true); 
        mapFields(tgt, fields, fieldIndexes, tgtQual, "", false);
        assng->forEach(AssignmentOperation a|meth.add(translateDataOperation(a, fields, fieldIndexes, done)));
    }

    @DispatchBasis
    def JavaCodeExpression translateDataOperation(AssignmentOperation assng, mapOf(Field, String) fields, mapOf(Field, String) indexes, setOf(String) done) {
        new JavaCodeExpression();
    }

    def JavaCodeExpression translateDataOperation(ModelCallOperation call, mapOf(Field, String) fields, mapOf(Field, String) indexes, setOf(String) done) {
        boolean emit = true;
        Boolean hasField = isDefined(call.field) and call.field <> null;
        if (hasField)  {
            if (fields.containsKey(field)) {
                emit = false;
            } else {
                done.add(call.field);
            }
        }
        if (emit) {
            JavaCodeExpression ex = combineArgs(new JavaCodeMethodCall("access.call").addStringArgument(call.name), 
                call.arguments, fields, indexes);
            if (hasField and not(call.field.readOnly)) {
                ex = translateFieldAccess(call.field, fields, true, ex, done, true, indexes);
            }
            ex;
        } else {
            new JavaCodeExpression();
        }
    }

    def JavaCodeExpression translateDataOperation(FieldAssignmentOperation assng, mapOf(Field, String) fields, mapOf(Field, String) indexes, setOf(String) done) {
        if ((fields.containsKey(assng.field) or argsNestingLevel > 0) and not(assng.field.readOnly)) {
            translateFieldAccess(assng.field, fields, true, translateDataOperation(assng.operation, fields, indexes), done, true, indexes);
        } else {
            new JavaCodeExpression();
        }
    }
    
    def JavaCodeExpression translateDataOperation(TransferAssignmentOperation assng, mapOf(Field, String) fields, mapOf(Field, String) indexes, setOf(String) done, JavaCodeBlockInterface meth) {
        if ((indexes.containsKey(assng.field) and fields.containsKey(assng.nameField) and fields.containsKey(assng.valueField)) or argsNestingLevel > 0) {
            JavaCodeExpression fnExpr = getTransferAssignmentExpression(assng, fields, indexes, done);
            translateFieldAccess(assng.nameField, fields, true, fnExpr, done, true, indexes);
        } else {
            new JavaCodeExpression();
        }
    }
    
    def JavaCodeExpression getTransferAssignmentExpression(TransferAssignmentOperation assng, mapOf(Field, String) fields, mapOf(Field, String) indexes, setOf(String) done) {
        new JavaCodeTextExpression("/* FIELD/CONVERTER ACCESS NOT DEFINED */");
    }

    @DispatchBasis
    def JavaCodeExpression translateDataOperation(DataOperation op, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        new JavaCodeExpression();
    }

    def JavaCodeExpression translateDataOperation(OutChannelDataOperation op, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        new JavaCodeTextExpression("channel"); // accesses serializer attribute
    }

    def JavaCodeExpression translateDataOperation(DataFieldAccess op, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        translateFieldAccess(op.field, fields, false, new JavaCodeExpression(), dummy, false, indexes);
    }

    def JavaCodeExpression translateDataOperation(FieldNameDataOperation op, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        if (indexes.containsKey(op.field)) {
            new JavaCodeTextExpression("/* FIELD ACCESS NOT DEFINED */");
        } else {
            new JavaCodeExpression();
        }
    }
    
    def JavaCodeExpression translateFieldAccess(Field field, mapOf(Field, String) fields, Boolean set, JavaCodeExpression value, setOf(String) done, Boolean recordDone, mapOf(Field, String) indexes) {
        if ((fields.containsKey(field) and indexes.containsKey(field)) or argsNestingLevel > 0) {
           if (recordDone and argsNestingLevel == 0) {
               done.add(mapTargetPath(fields.get(field), field));
           }
           genFieldAccess(fields.get(field), field, set, value, indexes.get(field));
        } else {
           new JavaCodeExpression();
        }
    }
        
    // can be overridden
    def JavaCodeExpression genFieldAccess(String path, Field field, Boolean set, JavaCodeExpression value, String indexes) {
       if (set) {
           new JavaCodeMethodCall(path + ".set" + asMethodNameSuffix(field.name)).addArgument(value);
       } else {
           new JavaCodeMethodCall(path + ".get" + asMethodNameSuffix(field.name)); 
       }
    }

    @DispatchBasis
    def JavaCodeExpression translateDataOperation(ConstantDataOperation op, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        new JavaCodeExpression();
    }

    def JavaCodeExpression translateDataOperation(IntegerConstantDataOperation op, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        new JavaCodeTextExpression(op.value);
    }

    def JavaCodeExpression translateDataOperation(StringConstantDataOperation op, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        new JavaCodeStringExpression(op.value);
    }

    def JavaCodeExpression translateDataOperation(BooleanConstantDataOperation op, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        new JavaCodeTextExpression(op.value);
    }

    def JavaCodeExpression translateDataOperation(RealConstantDataOperation op, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        new JavaCodeTextExpression(op.value);
    }
    
    def JavaCodeExpression translateDataOperation(ParenthesisDataOperation op, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        new JavaCodeParenthesisExpression(translateDataOperation(op.operation, fields, indexes));
    }

    @DispatchBasis
    def JavaCodeExpression translateDataOperation(DataTranslationOperation op, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        new JavaCodeExpression();
    }

    def JavaCodeExpression translateDataOperation(AddDataTranslationOperation op, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        combine(op, "+", fields, indexes);
    }
    
    def JavaCodeExpression translateDataOperation(SubtractDataTranslationOperation op, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        combine(op, "-", fields, indexes);
    }
    
    def JavaCodeExpression translateDataOperation(MuliplyDataTranslationOperation op, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        combine(op, "*", fields, indexes);
    }
    
    def JavaCodeExpression translateDataOperation(DivideDataTranslationOperation op, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        combine(op, "/", fields, indexes);
    }

    def JavaCodeExpression combine(DataTranslationOperation op, String jop, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        JavaCodeArgumentListExpression operands = combineArgs(new JavaCodeArgumentListExpression(), op.arguments, fields, indexes);
        new JavaCodeOperatorExpression(jop, operands);
    }

    def JavaCodeArgumentListExpression combineArgs(JavaCodeArgumentListExpression ex, sequenceOf(DataOperation) args, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        argsNestingLevel = argsNestingLevel + 1;
        for (DataOperation op : args) {
            ex.addArgument(translateDataOperation(op, fields, indexes));
        }
        argsNestingLevel = argsNestingLevel - 1;
        ex;
    }
    
    // ----------------------------------- maps fields to access paths  -----------------------------
    
    // dispatch basis
    def mapFields(DataType type, mapOf(Field, String) result, mapOf(Field, String) indexes, String qual, String iQual, Boolean forSrc) {
    } 

    def mapFields(RecordType type, mapOf(Field, String) result, mapOf(Field, String) indexes, String qual, String iQual, Boolean forSrc) {
        Integer index = 0;
        for (Field f : type.fields) {
            String fn;
            if (forSrc) {
               fn = mapSourcePath(qual, f);
            } else {
               fn = mapTargetPath(qual, f);
            }
            result.add(f, qual);
            String iq;
            if (iQual.length() > 0) {
                iq = iQual + ", " + index;
            } else {
                iq = "" + index;
            } 
            indexes.add(f, iq);
            mapFields(f.type, result, indexes, fn, iq, forSrc);
            index = index + 1;
        }
    } 

    def JavaCodeExpression getterPath(String qual, Field f) {
        new JavaCodeMethodCall(qual + ".get" + asMethodNameSuffix(f.name));
    }

    def JavaCodeExpression setterPath(String qual, Field f, JavaCodeExpression value) {
        new JavaCodeMethodCall(qual + ".set" + asMethodNameSuffix(f.name)).addArgument(value);
    }

    // ----------------------------------- maps access paths to fields -----------------------------
    
    def mapSourcePaths(DataType type, mapOf(String, Field) result, String qual) {
    }

    def mapSourcePaths(RecordType type, mapOf(String, Field) result, String qual) {
        for (Field f : type.fields) {
            String fn = mapSourcePath(qual, f);
            result.add(fn, f);
            mapSourcePaths(f.type, result, fn);
        }
    }
    
    // customizable paths, may be different depending on application, use here method calls
    // if you override this function, also override mapTargetSeparator()
    def mapTargetPath(String qual, Field f) {
        getterPath(qual, f).toCode();
    }

    def String mapTargetSeparator() {
        ".";
    }

    // customizable paths, may be different depending on application, use here method calls
    // if you override this function, also override mapSourceSeparator()
    def mapSourcePath(String qual, Field f) {
        getterPath(qual, f).toCode();
    }
    
    def String mapSourceSeparator() {
        ".";
    }
    
    // ------------------------------------ produce data transfer -----------------------------------
    // to be used with mapPaths; the idea is to hash over the target datatype (mapPaths, target = to write to) and to 
    // produce for the input data type (to read from). Thus we have to build up both access path.
    // Currently the default Java implementation focuses on object transfers from temporary instances.
    
    @DispatchBasis
    def produceDataTransfer(DataType type, mapOf(String, Field) mapping, String typeQual, String mapQual, setOf(String) done, String indexes, String paths, JavaCodeBlockInterface block) {
    }

    @DispatchCase
    def produceDataTransfer(RecordType type, mapOf(String, Field) mapping, String typeQual, String mapQual, setOf(String) done, String indexes, String paths, JavaCodeBlockInterface block) {
        String targetSep = mapTargetSeparator();
        String sourceSep = mapSourceSeparator();
        boolean isTop = mapQual.rfind(sourceSep) == 0;
        int index = 0;
        String out = "";
         if (isTop) {
            startTopRecordType(type, mapQual, block);
        }
        JavaCodeBlock code = new JavaCodeBlock();
        for (Field f : type.fields) {
            String iq;
            if (indexes.length() > 0) {
                iq = indexes + ", " + index;
            } else {
                iq = "" + index;
            }
            String p = f.name;
            if (paths.length() > 0) {
               p = paths + targetSep + p;
            }
            index = index + 1;
            String tn = mapTargetPath(typeQual, f);
            String mq = mapSourcePath(mapQual, f);
            if (not(done.includes(tn)) and mapping.containsKey(mq)) {
                produceDataTransfer(f, prefixPath(tn, targetSep), mapping.get(mq), prefixPath(mq, sourceSep), iq, p, code);
                produceDataTransfer(f, f.type, mapping, tn, mq, done, iq, p, code);
            }
        }
        produceDataTransferOutput(type, block, code, getTemporaryVariable(typeQual, typeQual));
        if (isTop) {
            endTopRecordType(mapQual, block);
        }
    }

    def startTopRecordType(RecordType type, String path, JavaCodeBlockInterface block) {
    }
    
    def endTopRecordType(String path, JavaCodeBlockInterface block) {
    }
    
    // to be refined by caller; by default, data transfer code is written as one method. if not, output can be redirected
    def produceDataTransferOutput(RecordType type, JavaCodeBlockInterface target, JavaCodeBlock code, String tmpVar) {
        target.addAll(code);
    }

    // internal dispatch basis, akin produceDataTransfer(DataType), but carries actual field that is not present at top-level call
    def produceDataTransfer(Field field, DataType type, mapOf(String, Field) mapping, String typeQual, String mapQual, setOf(String) done, String indexes, String paths, JavaCodeBlockInterface block) {
       if (isKindOf(type, RecordType)) { // fallback for OPC, shall not be needed
            startRecord(field, indexes, block);
            produceDataTransfer(type, mapping, typeQual, mapQual, done, indexes, paths, block);
            endRecord(field, indexes, block);
        }
    }

    def startRecord(Field field, String indexes, JavaCodeBlockInterface block) {
    }

    def endRecord(Field field, String indexes, JavaCodeBlockInterface block) {
    }

    // akin produceDataTransfer(RecordType), but carries actual field that is not present at top-level call, calls produceDataTransfer(RecordType)
    def produceDataTransfer(Field field, RecordType type, mapOf(String, Field) mapping, String typeQual, String mapQual, setOf(String) done, String indexes, String paths, JavaCodeBlockInterface block) {
         produceDataTransfer(type, mapping, typeQual, mapQual, done, indexes, paths, block);
    }
        
    // returns the prefix before the last sep in path
    def prefixPath(String path, String sep) {
        Integer pos = path.rfind(sep);
        if (pos <= 0) {
            "";
        } else {
            path.substring(0, pos);
        }
    }
    
    // returns the tail after the last sep in path
    def suffixPath(String path, String sep) {
        Integer pos = path.rfind(sep);
        if (pos <= 0) {
            path;
        } else {
            path.substring(pos + 1);
        }
    } 
    
    def produceDataTransfer(Field tgt, String tgtQual, Field src, String srcQual, String indexes, String paths, JavaCodeBlockInterface block) {
        block.add(setterPath(tgtQual, tgt, getterPath(srcQual, src)));
    }
    
    // -------------------------------------- formatter/parser conversion ------------------------------------ 
    
    // convName is the infix of InputConverter/OutputFormatter conversion functions, e.g., toShort/fromShort
    // types defined in JavaBasic must match these functions; confParam in particular for date must match also
    @DispatchBasis    
    def convName(DataType type) {
        "";
    }
    
    // to/from will be prefixed, must map to method names in Input/OutputConverter
    @DispatchCase
    def convName(PrimitiveType type) {
        "/* NOT DEFINED */";
    }

    @DispatchCase
    def convName(AliasType type) {
        DataType dt = type.represents;
        convName(dt);
    }

    @DispatchCase
    def convName(ObjectTypeType type) {
        "Object";
    }

    @DispatchCase
    def convName(ShortTypeType type) {
        "Short";
    }
    
    @DispatchCase
    def convName(IntegerTypeType type) {
        "Integer";
    }
    
    @DispatchCase
    def convName(LongTypeType type) {
        "Long";
    }

    @DispatchCase
    def convName(StringTypeType type) {
        "String";
    }
    
    @DispatchCase
    def convName(BooleanTypeType type) {
        "Boolean";
    }

    @DispatchCase
    def convName(FloatTypeType type) {
        "Float";
    }

    @DispatchCase
    def convName(DoubleTypeType type) {
         "Double";
    }

    @DispatchCase
    def convName(ByteTypeType type) {
         "Byte";
    }

    @DispatchCase
    def convName(EnumType type) {
         "Enum";
    }

    // Start - Added types OPC UA - by Ahmad
    @DispatchCase
    def convName(Integer16TypeType type) {
         "Short";
    }

    @DispatchCase
    def convName(Integer32TypeType type) {
         "Integer";
    }
    
    @DispatchCase
    def convName(Integer64TypeType type) {
         "Long";
    }
    
    @DispatchCase
    def convName(SByteTypeType type) {
         "Byte";
    }
    
    @DispatchCase
    def convName(UnsignedInteger16TypeType type) {
         "Integer";
    }

    @DispatchCase
    def convName(UnsignedInteger32TypeType type) {
         "Long";
    }
    
    @DispatchCase
    def convName(UnsignedInteger64TypeType type) {
         "BigInteger";
    }
    
    @DispatchCase
    def convName(ByteStringTypeType type) {
         "ByteArray";
    }
    
    @DispatchCase
    def convName(DateTimeTypeType type) {
         "LocalDateTime";
    }
    // End - Added types OPC UA - by Ahmad

    /*def convName(ByteArrayTypeType type) { // currently no method in interface, needed?
    }*/

    @DispatchCase
    def convName(StringArrayTypeType type) {
        "StringArray";
    }

    @DispatchCase
    def convName(IntegerArrayTypeType type) {
        "IntegerArray";
    }

    @DispatchCase
    def convName(DoubleArrayTypeType type) {
        "DoubleArray";
    }

    @DispatchCase
    def convName(ArrayType type) {
        "Object"; // fallback
    }

    @DispatchCase
    def convName(ListType type) {
        "List";
    }

    @DispatchCase
    def convName(IEC61131_3DateTimeTypeType type) {
        "Date";
    }
    
    // dispatch basis, additional parameter to be passed to the parser/formatter conversion method, usually empty
    @DispatchBasis
    def convParam(DataType type, Boolean convFrom, JavaCodeMethodCall call) {
    }

    @DispatchCase
    def convParam(DateTimeTypeType type, Boolean convFrom, JavaCodeMethodCall call) {
        call.addStringArgument("ISO8601");
    }

    @DispatchCase
    def convParam(IEC61131_3DateTimeTypeType type, Boolean convFrom, JavaCodeMethodCall call) {
        call.addStringArgument("'DT#'YYYY-MM-dd-HH:mm:ss.SS");
    }
    
    @DispatchCase
    def convParam(EnumType type, Boolean convFrom, JavaCodeMethodCall call) {
        if (!convFrom) {
            call.addClassArgument(toQualifiedTypeName(type));
        }
    }

    @DispatchCase
    def convParam(ListType type, Boolean convFrom, JavaCodeMethodCall call) {
        if (!convFrom) {
            call.addClassArgument(toQualifiedTypeName(type.type));
        }
    }
    
    // generates a formatter/parser conversion operation call
    // - converter the variable name holding the converter
    // - the type to convert
    // - prefix to be used before #convName, "from" or "to"
    // - data the actual data to be converted, may be a parameter name    
    def JavaCodeExpression genConvertOp(String converter, DataType type, String prefix, JavaCodeExpression data) {
        String convertOp = prefix + convName(type);
        JavaCodeMethodCall call = new JavaCodeMethodCall(prefix + convName(type)).qualifiedBy(converter).addArgument(data);
        convParam(type, prefix=="from", call);
        call;
    }
    
    // temporary variables, added to block if needed
    def createTemporaryVariable(String path, String sep, DataType type, JavaCodeExpression init, JavaCodeBlockInterface block) {
        if (not(variables.containsKey(path))) {
            String name = suffixPath(path, sep);
            if (name.length() == 0) {
                name = "tmp";
            }
            name = name.replace(".", "").replace("()","").toIdentifier() + variables.size(); // preliminary, check getter path -> expression
            variables.add(path, name);
            block.addVariable(toQualifiedTypeName(type), name, init);
        }
    }
    
    def String getTemporaryVariable(String path, String fallback) {
        if (variables.containsKey(path)) {
            variables.get(path); 
        } else {
            fallback;
        }
    }
    
    def clearTemporaryVariables() {
        variables.clear();
    }
    
    def JavaCodeExpression wrapOptionalIoVoid(Field field, JavaCodeExpression ex, String param="", String args="", String optFind="", String optReplace="") {
        wrapOptional(field, ex, param=param, args=args, optFind=optFind, optReplace=optReplace, op="de.iip_ecosphere.platform.support.function.IOVoidFunction.optional");
    }
    
    // wraps an expression (without considering ";") so that IOExceptions are caught
    def JavaCodeExpression wrapOptional(Field field, JavaCodeExpression ex, String param="", String args="", String optFind="", String optReplace="", String op="de.iip_ecosphere.platform.connectors.model.ModelAccessProvider.optional") {
        if (field.optional) {
            ex.replaceVariable(optFind, optReplace); // happens only if args <> ""
            JavaCodeMethodCall m = new JavaCodeMethodCall(op, JavaCodeImportScope.METHOD);
            m.addArgument(param).addLambdaArgument().addVariables(args).addExpression(ex);
            m;
        } else {
            ex;
        }
    }
    
    // ------------------------------------------- mapping support ------------------------------------
    
    def mapOf(Field, Integer) mappedCachingTimes(setOf(MappingEntry) mapping) {
        mapOf(Field, Integer) result = {};
        for (CachingTimeMappingEntry e: mapping->selectByType(CachingTimeMappingEntry)) {
            result.add(e.field, e.cachingTime);
        }
        result;
    }
    
    // path expression substitution, pathEx usually a string constant, to be prefixed by pathVar
    // of pathEx starts with quote + pathPrefix
    def String substPathEx(String pathEx, String pathPrefix, String pathVar) {
        String resultEx = pathEx;
        if (resultEx.startsWith('"' + pathPrefix)) {
            resultEx = pathVar + ' + "' + resultEx.substring(pathPrefix.length() + 1);
        }
        resultEx;
    }

    @DispatchBasis
    def getFieldPath(Field field, String nameOrPath) {
        nameOrPath;
    }

    // initial/experimental
    @DispatchCase
    def getFieldPath(UAFieldType field, String nameOrPath) {
        if (getProperty("iip.experimental.opcNodeId", "").length() > 0 and isDefined(field.nodeId) and field.nodeId <> null) {
            NodeId nid = field.nodeId;
            '"nameSpaceIndex = ${nid.nameSpaceIndex}, identifier = ${nid.identifier}"';
        } else {
            nameOrPath;
        }
    }
    
    @DispatchBasis
    def getTypePath(RecordType type, String nameOrPath) {
        nameOrPath;
    }

    // initial/experimental
    @DispatchCase
    def getTypePath(UABaseType type, String nameOrPath) {
        if (getProperty("iip.experimental.opcNodeId", "").length() > 0 and isDefined(type.nodeId) and type.nodeId <> null) {
            NodeId nid = type.nodeId;
            '"nameSpaceIndex = ${nid.nameSpaceIndex}, identifier = ${nid.identifier}"';
        } else {
            nameOrPath;
        }
    }
    
}