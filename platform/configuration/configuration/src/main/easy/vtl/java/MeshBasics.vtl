import Basics;
import JavaBasics;
import ServiceBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template MeshBasics(Configuration config, FileArtifact target) {

    mapOf(String, Boolean) asyncIngestors = {};
    mapOf(String, String) ingestors = {};
    
    def String getClsName(MeshElement elt) {
        asTypeName(elt.name);
    }
    
    // -------------------------------------------- suffixes -------------------------------

    def String getMethodSuffix(MeshElement elt, String type, String outType) {
        "";
    }

    def String getMethodSuffix(MeshSource elt, String type, String outType) {
        "create" + type.firstToUpperCase();
    }

    def String getMethodSuffix(MeshProcessor elt, String type, String outType) {
        if (elt.impl.asynchronous) {
            "process" + type.firstToUpperCase();
        } else {
            "transform" + type.firstToUpperCase() + outType.firstToUpperCase();
        }
    }

    def String getMethodSuffix(MeshSink elt, String type, String outType) {
        "receive" + type.firstToUpperCase();
    }

    def String getServiceIdSuffix(ServiceBase base) {
        "_" + toIdentifier(base.id);
    }
    
    def String getServiceIdSuffix(MeshElement elt) {
        getServiceIdSuffix(elt.impl);
    }
    
    def String getMethodSuffixId(String methodSuffix, String serviceId) {
        methodSuffix + serviceId;
    }

    def String getMethodSuffixId(String methodSuffix, MeshElement elt) {
        methodSuffix + getServiceIdSuffix(elt);
    }

    // -------------------------------------------------------------------------------------
    
    def String getDeploymentDescriptorPath() {
        "/deployment.yml";
    }
    
    def String getYamlServiceFragment(String varName, String clsName, String serviceId, String artifactVarName="art", String appVar="") {
        'YamlArtifact ${artifactVarName} = YamlArtifact.readFromYamlSafe(${clsName}.class
            .getResourceAsStream("${getDeploymentDescriptorPath()}"));'
        if (appVar.length() > 0) {
            'ApplicationSetup ${appVar} = ${artifactVarName}.getApplication();'
        }
        'YamlService ${varName} = ${artifactVarName}.getServiceSafe("${serviceId}")'
    }

    def generateDataMethods(MeshElement elt) {
    }
    
    def Boolean recordSourceIngestor(MeshSource elt, IOType type) {
        true;
    }
    
    def sequenceOf(IOType) getSourceOutput(ServiceBase impl) {
        impl.output;
    }

    def sequenceOf(IOType) getSourceOutput(Connector impl) {
        impl.input;
    }

    def sequenceOf(IOType) getSourceInput(ServiceBase impl) {
        impl.input;
    }

    def sequenceOf(IOType) getSourceInput(Connector impl) {
        impl.output;
    }

    def generateDataMethods(MeshSource elt) {
        '${generateAsyncDataMethods(backward(getSourceInput(elt.impl)), backward(getSourceOutput(elt.impl)), elt)}'
        String serviceId = "_" + toIdentifier(elt.impl.id);
        for (IOType out : getSourceOutput(elt.impl)) {
            String type = toTypeName(out.type);
            String methodSuffix = "create" + type.firstToUpperCase();
            String methodSuffixId = methodSuffix + serviceId;
            if (recordSourceIngestor(elt, out)) {
                ingestors.add(methodSuffixId, type);
                asyncIngestors.add(methodSuffixId, elt.impl.asynchronous);
            }
            notifyTypeUse(elt, false, out, methodSuffix, methodSuffixId, true);
            '${generateSourceMethod(elt, type, methodSuffix, methodSuffixId)}'
        }
    }

    def Boolean recordAsyncProcessorIngestor(MeshElement elt, IOType type) {
        true;
    }

    def Boolean recordAsyncProcessorIngestor(MeshProcessor elt, IOType type) {
        true;
    }

    def Boolean recordSyncProcessorIngestor(MeshProcessor elt, IOType type) {
        true;
    }

    def generateDataMethods(MeshProcessor elt) {
        String serviceId = "_" + toIdentifier(elt.impl.id);
        if (elt.impl.asynchronous) {
            '${generateAsyncDataMethods(elt.input, elt.output, elt)}'
        } else {
            '${generateAsyncDataMethods(backward(elt.input), backward(elt.output), elt)}'
            Integer p = 0;
            sequenceOf(IOType) inFwd = forward(elt.input);
            sequenceOf(IOType) outFwd = forward(elt.output);
            Integer maxP = min(inFwd.size(), outFwd.size()); // must be equal -> constraint syncEqualIO
            while (p < maxP) {
                IOType in = inFwd[p];
                IOType out = outFwd[p];
                p = p + 1;
                String inType = toTypeName(in.type);
                String outType = toTypeName(out.type);
                String methodSuffix = "transform" + inType.firstToUpperCase() + outType.firstToUpperCase();
                String methodSuffixId = methodSuffix + serviceId;
                if (recordSyncProcessorIngestor(elt, out)) {
                    ingestors.add(methodSuffixId, outType);
                    asyncIngestors.add(methodSuffixId, false);
                }
                notifyTypeUse(elt, true, in, methodSuffix, methodSuffixId, true);
                '${generateSyncProcessorMethod(elt, inType, outType, methodSuffix, methodSuffixId)}'
            }
            // there are no remaining -> constraint syncEqualIO
        }
    }
    
    def generateAsyncDataMethods(sequenceOf(IOType) input, sequenceOf(IOType) output, MeshElement elt) {
        String serviceId = "_" + toIdentifier(elt.impl.id);
        for (IOType out : output) {
            String type = toTypeName(out.type);
            String methodSuffix = "process" + type.firstToUpperCase();
            String methodSuffixId = methodSuffix + serviceId;
            if (recordAsyncProcessorIngestor(elt, out)) {
                ingestors.add(methodSuffixId, type);
                asyncIngestors.add(methodSuffixId, true);
            }
            notifyTypeUse(elt, false, out, methodSuffix, methodSuffixId, false);
        }
        for (IOType in : input) {
            String type = toTypeName(in.type);
            String methodSuffix = "process" + type.firstToUpperCase();
            String methodSuffixId = methodSuffix + serviceId;
            /*if (recordAsyncProcessorIngestor(elt, in)) {
                ingestors.add(methodSuffixId, type);
                asyncIngestors.add(methodSuffixId, true);
            }*/
            notifyTypeUse(elt, true, in, methodSuffix, methodSuffixId, true);
            '${generateAsyncProcessorInMethod(elt, type, methodSuffix, methodSuffixId)}'
        }    
    }
        
    def generateDataMethods(MeshSink elt) {
        sequenceOf(IOType) out = {};
        generateAsyncDataMethods(backward(elt.input), out, elt);
        String serviceId = "_" + toIdentifier(elt.impl.id);
        for (IOType in : elt.input) {
            String type = toTypeName(in.type);
            String methodSuffix = "receive" + type.firstToUpperCase();
            String methodSuffixId = methodSuffix + serviceId;
            notifyTypeUse(elt, true, in, methodSuffix, methodSuffixId, true);
            '${generateSinkMethod(elt, type, methodSuffix, methodSuffixId)}'
        }
    }
    
    def notifyTypeUse(MeshElement elt, Boolean inType, IOType type, String methodSuffix, String methodSuffixWithServiceId, Boolean beforeGen) {
    }

    def generateSourceMethod(MeshSource src, String type, String methodSuffix, String methodSuffixWithServiceId) {
        ''
    } 

    def generateAsyncProcessorInMethod(MeshElement elt, String type, String methodSuffix, String methodSuffixWithServiceId) {
        ''
    } 

    def generateAsyncProcessorInMethod(MeshProcessor proc, String type, String methodSuffix, String methodSuffixWithServiceId) {
        ''
    } 

    def generateSyncProcessorMethod(MeshProcessor proc, String inType, String outType, String methodSuffix, String methodSuffixWithServiceId) {
        ''
    } 
    
    def generateSinkMethod(MeshSink sink, String type, String methodSuffix, String methodSuffixWithServiceId) {
        ''
    } 
    
    // --------------------------------- collecting record types ---------------------------------------------
    
    def mapOf(IOType, IOType) ioPairs(MeshProcessor elt) {
        ioPairs(elt.input, elt.output);
    }

    def setOf(RecordType) collectRecordTypes(MeshElement elt) {
        setOf(RecordType) types = {};
        collectRecordTypesImpl(elt, types);
        types;
    }
    
    def collectRecordTypesImpl(MeshElement elt, setOf(RecordType) types) {
        // nothing, dispatch base
    } 

    def collectRecordTypesImpl(MeshSource source, setOf(RecordType) types) {
        collectRecordTypesFromSet(source.output, types);
    }
    
    def collectRecordTypesImpl(MeshProcessor processor, setOf(RecordType) types) {
        collectRecordTypesFromSet(processor.input, types);
        collectRecordTypesFromSet(processor.output, types);
    }
    
    def collectRecordTypesImpl(MeshSink sink, setOf(RecordType) types) {
        collectRecordTypesFromSet(sink.input, types);
    }
    
    def setOf(MeshConnector) nextConnectors(MeshElement elt) {
        {};
    }

    def setOf(MeshConnector) nextConnectors(MeshSource source) {
        source.next;
    }

    def setOf(MeshConnector) nextConnectors(MeshInnerElement elt) {
        elt.next;
    }
    
}
