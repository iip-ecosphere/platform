import JavaBasics;
import MeshBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="java", profileArg_javadocIndent=" * ", lineLength = 120)
template JavaMeshElementInterface(Configuration config, JavaCodeArtifact target, MeshElement elt, String pkg) extends MeshBasics {
    
    JavaCodeClass mainCls;

    // called via MeshBasics.generateDataMethods for MeshSource
    def generateSourceMethod(MeshSource src, String type, String methodSuffix, String methodSuffixWithServiceId) {
        if (!src.impl.asynchronous) {
            mainCls.addMethod(type, methodSuffix, "Creates data to be ingested.");
        }
    } 

    // called via MeshBasics.generateDataMethods for asynch MeshProcessor
    def generateAsyncProcessorInMethod(MeshProcessor proc, String type, String methodSuffix, String methodSuffixWithServiceId) {
        mainCls.addMethod("", methodSuffix, "Called when data arrived that shall be processed (asynchronously).")
            .addParameter(type, "data", "the arrived data");
    } 

    // called via MeshBasics.generateDataMethods for synch MeshProcessor
    def generateSyncProcessorMethod(MeshProcessor proc, String inType, String outType, String methodSuffix, String methodSuffixWithServiceId) {
        mainCls.addMethod(outType, methodSuffix, "Called when data arrived that shall be processed (synchronously).", "the transformation result, <b>null</b> for no data")
            .addParameter(inType, "data", "the arrived data");
    } 
    
    // called via MeshBasics.generateDataMethods for MeshSink
    def generateSinkMethod(MeshSink snk, String type, String methodSuffix, String methodSuffixWithServiceId) {
        mainCls.addMethod("", methodSuffix, "Called when data arrived that shall be received (data sink).")
            .addParameter(type, "data", "the data received data");
    } 

    def main(Configuration config, JavaCodeArtifact target, MeshElement elt, String pkg) {
        String clsName = asTypeName(elt.name);
        mainCls = codeCreateClass(target, pkg, "${clsName}Service", "IIP-Ecosphere service interface for net node \'${elt.name}\'");
        mainCls.asInterface().addExtends("de.iip_ecosphere.platform.services.environment.Service");
        generateDataMethods(elt, true);
        for (String methodSuffix : ingestors.getKeys()) {
            if (asyncIngestors.get(methodSuffix, false)) {
                String type = ingestors.get(methodSuffix);
                mainCls.addMethod("", "attach" + methodSuffix + "Ingestor", 'Called by the platform to attach an asynchronous data ingestor for type "${type}".')
                    .addParameter("de.iip_ecosphere.platform.services.environment.DataIngestor<${toQualifiedTypeName(type)}>", "ingestor", 'the "${type}" ingestor instance');
            }
        }
    }
    
}
