import Basics;
import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="java", profileArg_javadocIndent="* ", lineLength = 120)
template JavaConnectorConnectivityTest(IIPEcosphere config, FileArtifact target, Connector conn, String pkg) {

    def genSerializerRegistrationStatement(String clsName) {
        'SerializerRegistry.registerSerializer(iip.serializers.${clsName}.class);'
    }

    def genSerializerRegistration(DataType type) {
        String clsName = toTypeName(type);
        if (config.sharedInterfaces) {
            String implClsName = clsName + "Impl";
            '${genSerializerRegistrationStatement(implClsName)}'
        }
        '${genSerializerRegistrationStatement(clsName)}'
    }
    
    def genCallback(DataType type, String varName) {
        String clsName = toTypeName(type);
        
        'private static ReceptionCallback<${clsName}> ${varName}
            = new ReceptionCallback<${clsName}>() {

            @Override
            public void received(${clsName} data) {
                System.out.println("Connector received: " + data);
            }

            @Override
            public Class<${clsName}> getType() {
                return ${clsName}.class;
            }
        
        };'
    }

    def main(IIPEcosphere config, FileArtifact target, Connector conn, String pkg) {
        String clsName = asTypeName(conn.name);
        IOTypeWithPath machineInIf = conn.inInterface;
        IOTypeWithPath machineOutIf = conn.outInterface;
        DataType platfIn = firstType(conn.output);
        String platfInClsName = toTypeName(platfIn);
        DataType platfOut = firstType(conn.input);
        String platfOutClsName = toTypeName(platfOut);
        String connFqn = conn.class;
        JavaPath connFqnPath = connFqn;
        String connName = connFqnPath.name();
        
        'package ${pkg};
        import java.io.IOException;
        
        import de.iip_ecosphere.platform.connectors.ConnectorParameter;
        import de.iip_ecosphere.platform.support.TimeUtils;
        import de.iip_ecosphere.platform.transport.connectors.ReceptionCallback;
        import de.iip_ecosphere.platform.transport.serialization.SerializerRegistry;
        
        import ${connFqn};
        
        import iip.nodes.${clsName};
        import iip.datatypes.${platfOutClsName};
        import iip.datatypes.${platfInClsName};

        /**
         * Technical connection test for connector "${conn.name}".
         * Generated by: EASy-Producer.
         */
        public class ${clsName}Test {
        
            ${genCallback(platfOut, "callback")}
        
            /**
             * Main program.
             * 
             * @param args ignored
             * @throws IOException if intended connectivity fails
             */
            public static void main(String[] args) throws IOException {
                ${genSerializerRegistration(platfIn)}
                ${genSerializerRegistration(platfOut)}
                
                ConnectorParameter params = ${clsName}
                    .createConnectorParameter(); // as configured, or create own and customize
                    
                ${connName}<${platfOutClsName}, ${platfInClsName}> conn = new ${connName}<>(
                    ${clsName}.createConnectorAdapter());
                Runtime.getRuntime().addShutdownHook(new Thread(() -> conn.disconnectSafe()));
                conn.connect(params);
                conn.setReceptionCallback(callback);
                System.out.println("Connector ${conn.name} created...");
        
                // wait for data
                while (true) {
                    TimeUtils.sleep(300);
                }
            }

        }'
    }
    
}
