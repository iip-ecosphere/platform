import Basics;
import JavaBasics;
import ServiceBasics;
import SpringBasics;
import JavaConnector;
import MeshBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="java", profileArg_javadocIndent=" * ", lineLength = 120)
template JavaConnectorConnectivityTest(IIPEcosphere config, JavaCodeArtifact target, Connector conn, String pkg) {

    def addSerializerRegistration(JavaCodeMethod method, DataType type) {
        String clsName = toTypeName(type);
        if (config.sharedInterfaces) {
            String implClsName = clsName + "Impl";
            addSerializerRegistration(method, "iip.serializers." + implClsName + "Serializer");
        }
        addSerializerRegistration(method, "iip.serializers." + clsName + "Serializer");
    }    
    
    def addCallback(JavaCodeClass cls, DataType type, String varName) {
        String clsName = toTypeName(type);
        cls.addAttribute("de.iip_ecosphere.platform.transport.connectors.ReceptionCallback<${clsName}>", varName).(attr|{
            attr.setStatic().setPrivate();
            attr.addAnonymous("ReceptionCallback<${clsName}>").(init|{
                init.addMethod("void", "received").(meth|{
                    meth.addAnnotation("Override");
                    meth.addParameter(clsName, "data");
                    meth.addCall("System.out.println")
                    .addArgument('"Connector received: " + data');
                });
                init.addMethod("Class<${clsName}>", "getType")
                  .addReturn("${clsName}.class")
                  .addAnnotation("Override");
            });
        });
    }

    def main(IIPEcosphere config, JavaCodeArtifact target, Connector conn, String pkg) {
        String clsName = asTypeName(conn.name);
        target.setPackage(pkg);
        target.addImport("de.iip_ecosphere.platform.transport.connectors.ReceptionCallback");
        target.addImport("iip.nodes.${clsName}");
        target.addImport("iip.datatypes.${platfOutClsName}");
        target.addImport("iip.datatypes.${platfInClsName}");
        JavaCodeClass mainCls = target.addClass("${clsName}Test",
            'Technical connection test for connector "${conn.name}".
            Generated by: EASy-Producer.');
        JavaCodeMethod mainClsMain = mainCls.addMainMethod("Main program.", "args", "ignored");
        mainClsMain.addException("java.io.IOException", "if intended connectivity fails");

        sequenceOf(ConnectorTypes) cTypes = pairTypes(conn);
        while(cTypes.size() > 1) { // for now, limit to 1 in test
            cTypes.removeLast();
        }
        for (ConnectorTypes cType : cTypes) {
            IOTypeWithPath machineInIf = cType.ifInType;
            IOTypeWithPath machineOutIf = cType.ifOutType;
            DataType platfIn = cType.outType.type;
            String platfInClsName = toTypeName(platfIn);
            DataType platfOut = cType.inType.type;
            String platfOutClsName = toTypeName(platfOut);
            String connFqn = getConnectorCls(conn);
            target.addImport(connFqn);
            JavaPath connFqnPath = connFqn;
            String connName = connFqnPath.name();

            addSerializerRegistration(mainClsMain, platfIn);
            addSerializerRegistration(mainClsMain, platfOut);
            addCallback(mainCls, platfIn, "callback");
            mainClsMain
                .addCall("ResourceLoader.registerResourceResolver")
                    .addNewArgument("de.iip_ecosphere.platform.support.resources.FolderResourceResolver.FolderResourceResolver")
                    .addStringArgument(".");
            
            mainClsMain.addEmptyLine();
            mainClsMain.addSLComment("as configured, or create own and customize");
            mainClsMain.addVariable("de.iip_ecosphere.platform.connectors.ConnectorParameter", "params", 
                "${clsName}.createConnectorParameter()");
            mainClsMain.addEmptyLine();
    
            mainClsMain.addVariable("${conn.class}<${platfInClsName}, ${platfOutClsName}>", "conn", "")
                .addNew(connName + getConnectorInstanceGenerics(conn))
                    .addArgument("${clsName}.createConnectorAdapter()");
            codeAddShutdownHook(mainClsMain, "conn.disconnectSafe()");
            mainClsMain.addCall("conn.connect").addArgument("params");
            mainClsMain.addSLComment("// if polling connector, enable: conn.enableNotifications(false);");
            mainClsMain.addCall("conn.setReceptionCallback").addArgument("callback");        
            mainClsMain.addCall("System.out.println").addStringArgument("Connector ${conn.name} created...");
            
            mainClsMain.addEmptyLine();
            mainClsMain.addSLComment("wait for data");
            mainClsMain.addCall("System.out.println").addStringArgument("Requesting data until <CTRL>+C...");
            mainClsMain.addWhileLoop("true")
                .addCall("de.iip_ecosphere.platform.support.TimeUtils.sleep", JavaCodeImportScope.CLASS)
                .addArgument(300);
        }
    }
    
}
