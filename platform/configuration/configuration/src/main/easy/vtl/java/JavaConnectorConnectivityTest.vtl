import Basics;
import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="java", profileArg_javadocIndent="* ", lineLength = 120)
template JavaConnectorConnectivityTest(IIPEcosphere config, FileArtifact target, Connector conn, String pkg) {

    def addSerializerRegistrationStatement(JavaCodeMethod method, String clsName) {
        method
          .addCall("de.iip_ecosphere.platform.transport.serialization.SerializerRegistry.registerSerializer", JavaCodeImportScope.CLASS)
            .addArgument("iip.serializers.${clsName}.class");
    }

    def addSerializerRegistration(JavaCodeMethod method, DataType type) {
        String clsName = toTypeName(type);
        if (config.sharedInterfaces) {
            String implClsName = clsName + "Impl";
            addSerializerRegistrationStatement(method, implClsName);
        }
        addSerializerRegistrationStatement(method, clsName);
    }    
    
    def addCallback(JavaCodeClass cls, DataType type, String varName) {
        String clsName = toTypeName(type);
        JavaCodeAttribute attr = cls.addAttribute("de.iip_ecosphere.platform.transport.connectors.ReceptionCallback<${clsName}>", varName)
            .setStatic()
            .setPrivate();
        JavaCodeAnonymousClass init = attr.addAnonymous("ReceptionCallback<${clsName}>");
        JavaCodeMethod meth = init.addMethod("void", "received");
        meth.addAnnotation("Override");
        meth.addParameter(clsName, "data");
        meth.addCall("System.out.println")
            .addArgument('"Connector received: " + data');
        init.addMethod("Class<${clsName}>", "getType")
          .addReturn("${clsName}.class")
          .addAnnotation("Override");
    }

    def main(IIPEcosphere config, FileArtifact target, Connector conn, String pkg) {
        String clsName = asTypeName(conn.name);
        IOTypeWithPath machineInIf = conn.inInterface;
        IOTypeWithPath machineOutIf = conn.outInterface;
        DataType platfIn = firstType(conn.output);
        String platfInClsName = toTypeName(platfIn);
        DataType platfOut = firstType(conn.input);
        String platfOutClsName = toTypeName(platfOut);
        String connFqn = conn.class;
        JavaPath connFqnPath = connFqn;
        String connName = connFqnPath.name();

        JavaCodeArtifact art = target;
        art.setPackage(pkg);
        art.addImport("de.iip_ecosphere.platform.transport.connectors.ReceptionCallback");
        art.addImport(connFqn);
        art.addImport("iip.nodes.${clsName}");
        art.addImport("iip.datatypes.${platfOutClsName}");
        art.addImport("iip.datatypes.${platfInClsName}");

        JavaCodeClass mainCls = art.addClass("${clsName}Test",
            'Technical connection test for connector "${conn.name}".
            Generated by: EASy-Producer.');
        addCallback(mainCls, platfOut, "callback");
        
        JavaCodeMethod mainClsMain = mainCls.addMainMethod("Main program.", "args", "ignored");
        mainClsMain.addException("java.io.IOException", "if intended connectivity fails");
        addSerializerRegistration(mainClsMain, platfIn);
        addSerializerRegistration(mainClsMain, platfOut);
        
        mainClsMain.addEmptyLine();
        mainClsMain.addSLComment("as configured, or create own and customize");
        mainClsMain.addVariable("de.iip_ecosphere.platform.connectors.ConnectorParameter", "params", 
            "${clsName}.createConnectorParameter()");
        mainClsMain.addEmptyLine();

        mainClsMain.addVariable("${connName}<${platfOutClsName}, ${platfInClsName}>", "conn", "")
            .addNew("${connName}<>")
                .addArgument("${clsName}.createConnectorAdapter()");
        mainClsMain.addCall("java.lang.Runtime.getRuntime().addShutdownHook", JavaCodeImportScope.CLASS)
            .addArgument("new Thread(() -> conn.disconnectSafe())"); // rework -> new
        mainClsMain.addCall("conn.connect").addArgument("params");
        mainClsMain.addCall("conn.setReceptionCallback").addArgument("callback");        
        mainClsMain.addCall("System.out.println").addStringArgument("Connector ${conn.name} created...");
        
        mainClsMain.addEmptyLine();
        mainClsMain.addSLComment("wait for data");
        mainClsMain.addWhileLoop("true")
            .addCall("de.iip_ecosphere.platform.support.TimeUtils.sleep", JavaCodeImportScope.CLASS)
            .addArgument(300);
    }
    
}
