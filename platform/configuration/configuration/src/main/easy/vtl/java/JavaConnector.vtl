import Basics;
import JavaBasics;
import DataOperationBasics;
import MeshBasics;
import ServiceBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaConnector(Configuration config, FileArtifact target) extends DataOperationBasics {

    Boolean genFrom = false; // temporary
    String add = "";
    String topPath = "";
    mapOf(Field, Integer) cachingTimes = {};
    Boolean splitTranslatorMethods = true;
    Boolean dataTransferTo = true; // temporary
    mapOf(RecordType, String) typeOut = {};
    RecordType topType;
    mapOf(RecordType, String) typeOutVars = {};
    
    // path name customization
    
    def getFieldNameForPath(Field field) {
        field.name;
    }

    def getFieldNameForPath(UAFieldType field) {
        field.displayName;
    }
    
    // qualified/unqualified Java types to be used as template parameter for data from machine in connector generation, 
    @DispatchBasis
    def String getMachineOutputTypeName(Connector conn) {
        "Object"; // generic, to be overridden
    }

    @DispatchCase
    def String getMachineOutputTypeName(ChannelConnector conn) {
        "byte[]"; // taken from code
    }

    @DispatchCase
    def String getMachineOutputTypeName(OpcUaV1Connector conn) {
        "de.iip_ecosphere.platform.connectors.opcuav1.DataItem"; // taken from code
    }

    @DispatchCase
    def String getMachineOutputTypeName(ModbusTcpV1Connector conn) {
        "de.iip_ecosphere.platform.connectors.modbustcpipv1.ModbusItem"; // taken from code
    }

    @DispatchCase
    def String getMachineOutputTypeName(AdsConnector conn) {
        "Object"; // taken from code
    }

    @DispatchCase
    def String getMachineOutputTypeName(AasConnector conn) {
        "Object"; // taken from code
    }

    // qualified/unqualified Java types to be used as template parameter for data to machine in connector generation, 
    @DispatchBasis
    def String getMachineInputTypeName(Connector conn) {
        "Object"; // generic, to be overridden
    }

    @DispatchCase
    def String getMachineInputTypeName(ChannelConnector conn) {
        "byte[]"; // generic, to be overridden
    }

    @DispatchCase
    def String getMachineInputTypeName(OpcUaV1Connector conn) {
        "Object"; // generic, to be overridden
    }

    @DispatchCase
    def String getMachineInputTypeName(ModbusTcpV1Connector conn) {
        "Object"; // generic, to be overridden
    }

    @DispatchCase
    def String getMachineInputTypeName(AdsConnector conn) {
        "Object"; // generic, to be overridden
    }

    @DispatchCase
    def String getMachineInputTypeName(AasConnector conn) {
        "Object"; // taken from code
    }

    def getConnectorGenerics(Connector conn, boolean withMachine) {
        String type = "<";
        if (withMachine) {
            type = type + getMachineOutputTypeName(conn);
            type = type + ", ";
            type = type + getMachineInputTypeName(conn);
            type = type + ", ";
        }
        type = type + asTypeName(getFirstTypeName(conn.output));
        type = type + ", ";
        type = type + asTypeName(getFirstTypeName(conn.input));
        type + ">";
    }

    // dispatch basis    
    def setOf(String) getOutChannels(Connector conn) {
        setOf(String) result = {};
        result;
    }

    def setOf(String) getOutChannels(ChannelConnector conn) {
        setOf(String) result = {};
        if (isDefined(conn.outChannel) and conn.outChannel <> null and conn.outChannel.length() > 0) {
            result.add(conn.outChannel);
        }
        if (isDefined(conn.outChannels) and conn.outChannels <> null) {
            for (String c: conn.outChannels) {
                result.add("${c}"); // EASy-Bug, string value conversion
            }
        }
        result;
    }
    
    // dispatchBasis
    def adapterBaseType(Connector conn, Boolean monitoring) {
        String name;
        if (monitoring) {
            name = "MonitoredTranslatingProtocolAdapter"; // channeled, but use without channels
        } else {
            name = "TranslatingProtocolAdapter";
        }
        name;
    }
    
    // dispatch basis: return the adapter type for a non-channel connector; monitoring - return the type name for the 
    // monitoring wrapper
    def adapterType(Connector conn, Boolean monitoring, Boolean withArray) {
        String connGen = getConnectorGenerics(conn, true);
        String name = adapterBaseType(conn, monitoring);
        '${name}${connGen}'
    }
    
    def adapterCreationFragment(Connector conn, String varName, String metricsVarName, String logFileVarName) {
        String inAdapter;
        String outAdapter;
        if (conn.inAdapterClass.length() > 0) {
            inAdapter = "new ${conn.inAdapterClass}()";
        } else {
            inAdapter = "new MachineInputTranslator(inPathSupplier)";
        }
        if (conn.outAdapterClass.length() > 0) {
            outAdapter = "new ${conn.outAdapterClass}()";
        } else {
            outAdapter = "new MachineOutputTranslator(outPathSupplier)";
        }
        '${adapterType(conn, false, false)} ${varName};
        if (${metricsVarName} != null) {
            ${varName} = new ${adapterType(conn, true, false)}(
                ${outAdapter}, 
                ${inAdapter}, 
                ${metricsVarName}, ${logFileVarName});
        } else {
            ${varName} = new ${adapterType(conn, false, false)}(
                ${outAdapter}, 
                ${inAdapter});
        }'
    }
    
    def escapeString(String str) {
        "\"${str}\""
    }
    
    def getEncoding(Connector conn) {
        switch(conn.encoding) {
            TextEncoding::ANSI : "ISO-8859-1",
            TextEncoding::ASCII : "US-ASCII",
            TextEncoding::UTF8 : "UTF8"
        }
    }
    
    def adapterBaseType(ChannelConnector conn, Boolean monitoring) {
        String name;
        if (monitoring) {
            name = "MonitoredTranslatingProtocolAdapter"; // channeled, but use without channels
        } else {
            name = "ChannelTranslatingProtocolAdapter";
        }
        name;
    }
    
    // return the adapter type for a channel connector; monitoring - return the type name for the 
    // monitoring wrapper
    def adapterType(ChannelConnector conn, Boolean monitoring, Boolean withArray) {
        String connGen = getConnectorGenerics(conn, true);
        String name = adapterBaseType(conn, monitoring);
        String array = "";
        if (withArray and getOutChannels(conn).size() > 1) {
            array = "[]";
        }
        '${name}${connGen}${array}'
    }

    def adapterCreationFragment(ChannelConnector conn, String varName, String metricsVarName, String logFileVarName) {
        String inSerializer;
        String outSerializer;
        if (conn.inSerializerClass.length() > 0) {
            if (conn.inSerializerClass == "*") {
                inSerializer = "new ${toTypeName(conn.inInterface)}Serializer()";
            } else {
                inSerializer = "(Serializer<"+asTypeName(getFirstTypeName(conn.input))+">) TypeTranslators.createSerializer(getClass().getClassLoader(), \"" + conn.inSerializerClass + "\")";
            }
        } else {
            inSerializer = 'new ${asTypeName(conn.name)}FormatterSerializer(${escapeString(getEncoding(conn))}, null, inPathSupplier)';
        }
        if (conn.outSerializerClass.length() > 0) {
            if (conn.outSerializerClass == "*") {
                outSerializer = "new ${toTypeName(conn.outInterface)}Serializer()";
            } else {
                outSerializer = "(Serializer<"+asTypeName(getFirstTypeName(conn.output))+">) TypeTranslators.createSerializer(getClass().getClassLoader(), \"" + conn.outSerializerClass + "\")";
            }
        } else {
            outSerializer = 'new ${asTypeName(conn.name)}ParserSerializer(${escapeString(getEncoding(conn))}, null, outPathSupplier)';
        }

        String inAdapter;
        String outAdapter;
        if (conn.inAdapterClass.length() > 0) {
            inAdapter = "new ${conn.inAdapterClass}()";
        } else {
            inAdapter = "new ConnectorInputTypeAdapter<${asTypeName(getFirstTypeName(conn.input))}>(${inSerializer})";
        }
        if (conn.outAdapterClass.length() > 0) {
            outAdapter = "new ${conn.outAdapterClass}()";
        } else {
            outAdapter = "new ChanneledConnectorOutputTypeAdapter<${asTypeName(getFirstTypeName(conn.output))}>(${outSerializer})";
        }
        
        setOf(String) outChannels = getOutChannels(conn);
        String arrayInit = "";
        if (outChannels.size() > 1) {
            arrayInit = " = new ${adapterBaseType(conn, false)}[${outChannels.size()}]";
            '@SuppressWarnings("unchecked")'
        }
        '${adapterType(conn, false, true)} ${varName}${arrayInit};'
        Integer arrayCount = 0;
        for (String outChannel: outChannels->sortedBy(s|s)) {
            String arrayAccess = "";
            if (outChannels.size() > 1) {
                arrayAccess = "[${arrayCount}]";
            }
            arrayCount = arrayCount + 1;
            'if (${metricsVarName} != null) {
                ${varName}${arrayAccess} = new ${adapterType(conn, true, false)}(
                    "${outChannel}", ${outAdapter.substitute("#CHANNEL#", outChannel)}, 
                    "${conn.inChannel}", ${inAdapter.substitute("#CHANNEL#", conn.inChannel)}, 
                    ${metricsVarName}, ${logFileVarName});
            } else {
                ${varName}${arrayAccess} = new ${adapterType(conn, false, false)}(
                    "${outChannel}", ${outAdapter.substitute("#CHANNEL#", outChannel)}, 
                    "${conn.inChannel}", ${inAdapter.substitute("#CHANNEL#", conn.inChannel)});
            }' 
        }
    }
    
    // ------------------------------------------ generating adapter translator classes ---------------------------
    // private inner static classes with fixed names for (model) connectors, no classes for channel connectors
    
    // generate adapter translator classes, convenience call    
    def generateAdapterTranslators(MeshElement elt) {
        generateAdapterTranslators(elt.impl);
    }
    
    // generate adapter translator classes, dispatch base    
    def generateAdapterTranslators(ServiceBase service) {
        ''
    }

    // generate the adaptor translator classes for a generic connector    
    def generateAdapterTranslators(Connector conn) {
        '
        ${generateMachineInputTranslator(conn)}
        ${generateMachineOutputTranslator(conn)}'
    }
    
    // don't generate translator classes for channel connectors    
    def generateAdapterTranslators(ChannelConnector conn) {
        ''
    }
    
    def genOutputTransTo(DataType imType, String path, DataType pltfType, setOf(AssignmentOperation) assng, String oType, String coType) {
        ''
    }
    
    // unify imType with access/model without having an instance, write into pltfType
    def genOutputTransTo(RecordType imType, String path, RecordType pltfType, setOf(AssignmentOperation) assng, String oType, String coType) {
        genFrom = false;
        setOf(String) done = {};
        topPath = path;
        String imTypePath = "";
        if (not(optWithStepIn)) {
             imTypePath = topPath;
        }
        mapOf(String, Field) mapping = {};
        mapSourcePaths(imType, mapping, imTypePath);
        dataTransferTo = true;
        typeOut.add(pltfType, "");
        topType = pltfType;
        produceDataTransfer(pltfType, mapping, "result", imTypePath, done, "", "");
        String topTypeOut = typeOut.get(pltfType);
        typeOut.remove(pltfType);
        for (RecordType t : typeOut.keys()->sortedBy(m|m.name)) {
            String tName = toTypeName(t);
            'private void to${tName}(ModelAccess access, ModelInputConverter inConverter, ${tName} ${typeOutVars.get(t)}, String path) throws IOException {
                ${emitAsLines(typeOut.get(t))}
            }\n'
        }
        typeOut.clear();
        typeOutVars.clear();
        '@Override
        public ${coType} to(${oType} source) throws IOException {
            ModelAccess access = getModelAccess();
            final ModelInputConverter inConverter = access.getInputConverter();
            final ModelOutputConverter outConverter = access.getOutputConverter();
            final String path = pathSupplier == null ? "${topPath}" : pathSupplier.get();
            
            ${coType} result = new ${coType}${add}();\n
            ${translateDataOperations(assng, imType, imTypePath, pltfType, "result", done)}
            ${emitAsLines(topTypeOut)}
            
            return result; 
        }'|8;
    }

    def genOutputTransFrom(DataType imType, String path, DataType pltfType, setOf(AssignmentOperation) assng, String iType, String ciType) {
        ''
    }

    // unify imType with access/model without having an instance, write into pltfType
    def genOutputTransFrom(RecordType imType, String path, RecordType pltfType, setOf(AssignmentOperation) assng, String iType, String ciType) {
        genFrom = true;
        setOf(String) done = {};
        topPath = path;
        String imTypePath = "";
        if (not(optWithStepIn)) {
             imTypePath = topPath;
        }
        mapOf(String, Field) mapping = {};
        mapSourcePaths(imType, mapping, imTypePath);
        dataTransferTo = false;
        typeOut.add(pltfType, "");
        topType = pltfType;
        produceDataTransfer(pltfType, mapping, "data", imTypePath, done, "", "");
        String topTypeOut = typeOut.get(pltfType);
        typeOut.remove(pltfType);
        for (RecordType t : typeOut.keys()->sortedBy(m|m.name)) {
            'private void from${toTypeName(t)}(ModelAccess access, ModelOutputConverter outConverter, ${ciType} data, String path) throws IOException {
                ${emitAsLines(typeOut.get(t))}
            }\n'
        }
        typeOut.clear();
        typeOutVars.clear();        
        '@Override
        public ${iType} from(${ciType} data) throws IOException {
            ModelAccess access = getModelAccess();
            final ModelOutputConverter outConverter = access.getOutputConverter();
            final ModelInputConverter inConverter = access.getInputConverter();
            final String path = pathSupplier == null ? "${topPath}" : pathSupplier.get();
            
            ${translateDataOperations(assng, imType, imTypePath, pltfType, "data", done)}
            ${emitAsLines(topTypeOut)}
            
            return null; // done, no instance of pseudo type
        }'|8;
    }
    
    def emitAsLines(String text) {
        sequenceOf(String) lines = text.split("\n");
        for (String l: lines) {
            String tmp = trim(l);
            if (tmp <> "") {
                '${trim(tmp)}'
            }
        }
    }
    
    def produceDataTransferOutput(RecordType type, String text, String tmpVar) {
        String out = "";
        if (splitTranslatorMethods) {
            typeOut.add(type, text); // just override, even if it comes multiple times it's for the same type
            typeOutVars.add(type, tmpVar);
            if (dataTransferTo) {
                out = 'to${toTypeName(type)}(access, inConverter, ${tmpVar}, path);';
            } else {
                out = 'from${toTypeName(type)}(access, outConverter, data, path);\n';
            }
        } else {
            typeOut.add(topType, appendWithNewline(typeOut.get(topType), text));
        }
        '${out}'
    }
    
    // called via translateDataOperations
    def genFieldAccess(String path, Field field, Boolean set, String setEnd, String value, String indexes) {
        '${genFieldAccessInt(path, field, set, setEnd, value, indexes, nestedStepCount)}'; // EASY-bug, nestedStepCount in wrong scope
    }
    
    protected def genFieldAccessInt(String path, Field field, Boolean set, String setEnd, String value, String indexes, Integer nestedCount) {
       String p;
       if (optWithStepIn) {
           p = getFieldNameForPath(field);
           if (nestedCount == 0 and topPath <> "") {
               p = topPath + p;
           }
       } else {
           p = path + getFieldNameForPath(field);
       }
       p = substPathEx('"${p}"', topPath, "path");
       if (set) {
           if (field.readOnly) {
               ''
           } else {
               if (not(genFrom)) {
                   wrapOptional(field, path + ".set" + asMethodNameSuffix(field.name) + "(" + value + ")", args="access, a", optFind="access.", optReplace="a.") + "${setEnd}"; 
               } else {
                   if (convName(field.type) <> "") { // is there a conversion?
                       String convOp = genConvertOp("outConverter", field.type, "from", value);
                       if (isMultiField(field)) {
                           AasField fld = field;
                           convOp = convOp.replace(".fromList(", ".fromElementList(");
                           wrapOptional(field, 'access.setMultiValue("${field.name}", ${fld.counting}, ${convOp})') + "${setEnd}";
                       } else {                       
                           wrapOptional(field, "access.set(${getFieldPath(field, p)}, " + convOp + ")", args="access, a", optFind="access.", optReplace="a.") + "${setEnd}"; 
                       }
                   }
               }
           }
       } else {
           '${genFieldGetCall(field, p)}'
       }
    }

    @DispatchBasis    
    def genFieldGetCall(Field field, String p) {
        String ex = "access.get(${getFieldPath(field, p)}, ${cachingTime(field)})";
        '${genConvertOp("inConverter", field.type, "to", ex)}';
    }
    
    def genFieldGetCall(AasField field, String p) {
        if (isMultiField(field)) {
            String cls = considerWrapper(toTypeName(getElementType(field.type)));
            String qualifier = getQualifier(field);
            'access.getMultiValue(${cls}.class, "${field.name}", ${field.counting}${qualifier})'
        } else {
            String ex = "access.get(${getFieldPath(field, p)}, ${cachingTime(field)})";
            String convOp = genConvertOp("inConverter", field.type, "to", ex);
            if (field.type.isKindOf(ListType) and convOp.startsWith("toList(")) {
                convOp = convOpt.replace(".toList(", ".toElementList(");
            }
            '${convOp}';
        }
    }
    
    def cachingTime(Field field) {
        if (cachingTimes.containsKey(field)) {
            cachingTimes.get(field);
        } else {
            field.cachingTime;
        }
    }
    
    // called via produceDataTransfer
    def produceDataTransfer(Field tgt, String tgtQual, Field src, String srcQual, String indexes, String paths) {
        String acc = genFieldAccessInt(mapSourcePath(srcQual, src), tgt, genFrom, ";", getterPath(tgtQual, tgt), indexes, nestedStepCount); 
        if (not(genFrom)) {
            if (isRecordArray(tgt)) { // PRELIMINARY MAPPING!!!
                ArrayType at = tgt.type;
                String arrayEltTypeName = "${asTypeName(at.type.name)}";
                acc = "(${arrayEltTypeName}[]) " + acc;
            }
            if (tgt.type.isKindOf(RecordType)) {
                String nextPath = getterPath(tgtQual, tgt); // all "vars" before the .set
                String cons = "new ${toTypeName(tgt.type)}${add}()";
                '\n${createTemporaryVariable(nextPath, mapSourceSeparator(), tgt.type, "${cons}")}
                ${wrapOptional(tgt, setterPath(getTemporaryVariable(tgtQual, tgtQual), tgt, getTemporaryVariable(nextPath, cons)), args="access, a", optFind="access.", optReplace="a.")};'
            } else {
                '\n${wrapOptional(tgt, setterPath(getTemporaryVariable(tgtQual, tgtQual), tgt, acc), args="access, a", optFind="access.", optReplace="a.")};'
            }
        } else {
            '${acc}'
        }
    }
    
    // called via produceDataTransfer
    def produceDataTransfer(Field field, RecordType type, mapOf(String, Field) mapping, String typeQual, String mapQual, setOf(String) done, String indexes, String paths) {
        if (optWithStepIn) {
            String path = topPath;
            if (nestedStepCount == 0 and path.length() > 0) {
                path = path + getFieldNameForPath(field);
                path = substPathEx('"${path}"', topPath, "path");
            } else {
                path = getFieldNameForPath(field);
                path = '"${path}"';
            }
            nestedStepCount = nestedStepCount + 1;
            //path = substPathEx('"${path}"', topPath, "path");
            if (field.optional) {
                'try {'
            }
            '\n\naccess = access.stepInto(${getFieldPath(field, path)});'
        }
        '${produceDataTransfer(type, mapping, typeQual, mapQual, done, indexes, paths)}'
        if (optWithStepIn and nestedStepCount > 0) {
            nestedStepCount = nestedStepCount - 1;
            'access = access.stepOut();\n'
            if (field.optional) {
                '} catch (IOException e${nestedStepCount}) {
                }'
            }
        }
    }
    
    @Override
    def startTopRecordType(RecordType type, String path) {
        if (optWithStepIn and path.length() > 1) {
            if (path.startsWith("/")) {
                path = path.substring(1);
            }
            nestedStepCount = nestedStepCount + 1;
            String pathEx = 'path + "${path}"';
            String topPath = getTypePath(type, pathEx);
            '\n\naccess = access.stepInto(${topPath});\n'
        }
    }
    
    @Override
    def endTopRecordType(String path) {
        if (optWithStepIn and path.length() > 1) {
            nestedStepCount = nestedStepCount - 1;
            'access = access.stepOut();\n'
        }
    }
    
    // called via mapPaths and produceDataTransfer
    def mapSourcePath(String qual, Field f) {
        qual + "/" + f.name;
    }
    
    def String mapSourceSeparator() {
        "/";
    }
    
    // overwrite internal dispatch basis to allow for data transfer generation on all fields. Object fields are used below to initalize
    // object fields of data instances
    def produceDataTransfer(Field f, DataType type, mapOf(String, Field) mapping, String typeQual, String mapQual, setOf(String) done, String indexes, String paths, String level) {
        String targetSep = mapTargetSeparator();
        String sourceSep = mapSourceSeparator();
        String tn = mapTargetPath(typeQual, f);
        String mq = mapSourcePath(mapQual, f);
        if (not(done.includes(tn)) and mapping.containsKey(mq)) {
            Integer tnPos = tn.rfind(targetSep);
            Integer mqPos = mq.rfind(sourceSep);
            '${produceDataTransfer(f, prefixPath(tn, targetSep), mapping.get(mq), prefixPath(mq, sourceSep), indexes, paths)}' 
        } else {
            ''
        }
    }
    
    def setAdd(Configuration config) {
        IIPEcosphere cfg = config;
        if (cfg.sharedInterfaces) {
            add = "Impl";
        } else {
            add = "";
        }
    }

    def generateMachineOutputTranslator(Connector conn) {
        clearTemporaryVariables();
        IOTypeWithPath outIoType = conn.outInterface;
        Boolean useNotifications = conn.samplingPeriod <= 0; // else polling
        cachingTimes = mappedCachingTimes(conn.mapping);
        if (conn.inAdapterClass.length() == 0) {
            setAdd(config);
            String coType = asTypeName(getFirstTypeName(conn.output));
            String oType = getMachineOutputTypeName(conn);
        '
        private static class MachineOutputTranslator extends AbstractConnectorOutputTypeTranslator<${oType}, ${coType}> {

            private Supplier<String> pathSupplier;
        
            private MachineOutputTranslator(Supplier<String> pathSupplier) {
                this.pathSupplier = pathSupplier;
            }

            ${genOutputTransTo(outIoType.type, getPath(conn.outInterface), getFirstType(conn.output), conn.operations, oType, coType)}
        
            @Override
            public void initializeModelAccess() throws IOException {
                ModelAccess access = getModelAccess();
                access.useNotifications(${useNotifications});
            }
        
            @Override
            public Class<? extends ${oType}> getSourceType() {
                return ${oType}.class;
            }
        
            @Override
            public Class<? extends ${coType}> getTargetType() {
                return ${coType}.class;
            }
        
        }'
        } else {
        ''
        }
    }

    def generateMachineInputTranslator(Connector conn) {
        clearTemporaryVariables();
        IOTypeWithPath inIoType = conn.inInterface;
        cachingTimes = mappedCachingTimes(conn.mapping);
        if (conn.outAdapterClass.length() == 0) {
            setAdd(config);
            String ciType = asTypeName(getFirstTypeName(conn.input));
            String iType = getMachineInputTypeName(conn);
        '
        private static class MachineInputTranslator extends AbstractConnectorInputTypeTranslator<${ciType}, ${iType}> {

            private Supplier<String> pathSupplier;
        
            private MachineInputTranslator(Supplier<String> pathSupplier) {
                this.pathSupplier = pathSupplier;
            }
        
            ${genOutputTransFrom(inIoType.type, getPath(conn.inInterface), getFirstType(conn.input), conn.operations, iType, ciType)}
        
            @Override
            public Class<? extends ${iType}> getSourceType() {
                return ${iType}.class;
            }
        
            @Override
            public Class<? extends ${ciType}> getTargetType() {
                return ${ciType}.class;
            }
        
        }'
        } else {
            ''
        }
    }
    
    // --------------------------------------- reception callback -----------------------------------------
    
    def generateReceptionCallback(MeshElement elt, Application app) {
        generateReceptionCallback(elt, elt.impl, app);
    }

    def generateReceptionCallback(MeshElement elt, ServiceBase service, Application app) {
        ''
    }

    def generateReceptionCallback(MeshElement elt, Connector conn, Application app) {
        String serviceId = "_" + toIdentifier(conn.id);
        String coType = asTypeName(getFirstTypeName(conn.output));
        String suffix = coType.firstToUpperCase() + serviceId;
        String methodSuffix = "create" + suffix;
        
        setOf(String) connections = {};        
        setOf(DataType) outFwd = {}; // are we allowed to sendthis?
        for (IOType t: forward(conn.output)) {
            outFwd.add(t.type);
        }
        for (MeshConnector c: nextConnectors(elt)) {
            MeshElement target = c.next;
            for (IOType t: target.impl.input) {
               if (outFwd.includes(t.type)) {
                     String type = toTypeName(t.type);
                     String outName = getOutName(target, type);
                     String connId = getMethodSuffixId(getMethodSuffix(target, type, outName), target);
                     connections.add(connId + "-in-0");
               }
            }
        }
        String connectionIds = "";
        for (String c: connections->sortedBy(n|n)) {
            connectionIds = connectionIds + ", \"${c}\"";
        }        
        
        'private class ConnectorReceptionCallback implements ReceptionCallback<${coType}> {
        
            {
                Starter.getSetup(); // initialize Transport if needed
            }
        
            @Override
            public void received(${coType} data) {
                MetricsProvider.increaseCounterBy(serviceSent, 1.0);
                Transport.send(c -> c.asyncSend(${composeDestination("${conn.id}_${coType}", app, "appInstId")}, data), "${conn.id}"${connectionIds});
            }
        
            @Override
            public Class<${coType}> getType() {
                return ${coType}.class;
            }
                
        }'
    }

    // --------------------------------------- connector parameter -----------------------------------------
    
    def generateConnectorParameter(MeshElement elt, Application app) {
        generateConnectorParameter(elt, elt.impl, app);
    }

    @DispatchBasis
    def generateConnectorParameter(MeshElement elt, ServiceBase service, Application app) {
        ''
    }

    def getApplicationInformation(Connector conn, Application app) {
        app.id;
    }

    def getApplicationInformation(AasConnector conn, Application app) {
        conn.idShortSpec;
    }

    def generateEndpointPath(Connector conn) {
        ""
    }

    def generateEndpointPath(AasConnector conn) {
        String regPath = "";
        String url = "http://" + conn.registryHost + ":" + conn.registryPort;
        if (conn.registryPath <> "") {
            regPath = "/" + conn.registryPath;
        }
        '.setEndpointPath(null == hostOverride ? "${url}${regPath}" : "http://" + hostOverride + ":${conn.registryPort}${regPath}")'
    }
    
    def getCacheMode(Connector conn) {
        switch (conn.cacheMode) {
            CacheMode::HASH : "CacheMode.HASH",
            CacheMode::EQUALS : "CacheMode.EQUALS",
            default: "CacheMode.NONE"
        }
    }
    
    def getConnectorPort(Connector conn) {
        if (isDefined(conn.port)) {
            conn.port;
        } else {
            -1;
        }
    }

    def getConnectorHost(Connector conn) {
        if (isDefined(conn.host)) {
            "${conn.host}";
        } else {
            "";
        }
    }

    @DispatchBasis
    def getConnectorSchema(Connector conn) {
        "";
    }
    
    @DispatchCase
    def getConnectorSchema(AasConnector conn) {
        String result = "Schema.HTTP";
        if (isDefined(conn.security) and conn.security <> null) {
            result = "Schema.HTTPS";
        }
        result;
    }

    def getConnectorDeviceServiceKey(Connector conn) {
        if (isDefined(conn.deviceServiceKey)) {
            '"${conn.deviceServiceKey}"';
        } else {
            "null";
        }
    }

    @DispatchCase
    def generateConnectorParameter(MeshElement elt, Connector conn, Application app) {
        String schemaArg = getConnectorSchema(conn);
        if (schemaArg.length() > 0) {
            schemaArg = ", " + schemaArg;
        }
        '/**
        * Creates the connector parameter instance. [public for testing]
        *
        * @return the instance to be passed to the connector
        */
        public static ConnectorParameter createConnectorParameter() {
            ${getYamlServiceFragment("yaml", getClsName(elt), conn.id)}; 
            ${generateConnectorParamSecurityDecls(conn)|e}
            String host = "${getConnectorHost(conn)}";
            String hostOverride = null;
            int port = ${getConnectorPort(conn)};
            if (null != yaml.getNetMgtKey() && yaml.getNetMgtKey().length() > 0) {
                ServerAddress netKeyMgtAddress = NetworkManagerFactory.getInstance().getPort(yaml.getNetMgtKey());
                if (null != netKeyMgtAddress) {
                    host = netKeyMgtAddress.getHost();
                    hostOverride = host;
                    port = netKeyMgtAddress.getPort();
                    System.out.println(host+" "+port);
                }
            }'
            String deviceServiceKey = getConnectorDeviceServiceKey(conn);
            String svcStatement;
            if (deviceServiceKey.length() > 0 and deviceServiceKey <> "null") { 
                svcStatement = ".setService(svc)";
                'NameplateSetup.Service svc = NameplateSetup.resolveServiceFromAas(${getConnectorDeviceServiceKey(conn)});
                if (null != svc) { // device has precedence
                    host = svc.getHost();
                    port = svc.getPort();
                }'
            } else {
                svcStatement = "";
                '\n'
            }
            'return ConnectorParameter.ConnectorParameterBuilder
                .newBuilder(host, port${schemaArg})
                ${svcStatement|e}
                .setApplicationInformation("${getApplicationInformation(conn, app)}", "${app.description}")
                .setCacheMode(${getCacheMode(conn)})
                .setNotificationInterval(${conn.samplingPeriod})
                ${generateEndpointPath(conn)|e}
                ${generateConnectorParamSecuritySettings(conn)|e}
                ${generateSpecificSettings(conn)|e}
                .build();
        }'
    }
    
    def generateConnectorParamSecurityDecls(Connector conn) {
        if (conn.security <> null) {
            SecuritySettings sec = conn.security;
            if (isDefined(sec.authenticationKey) and sec.authenticationKey <> "") {
                'Map<String, IdentityToken> identities = new HashMap<>();
                IdentityToken tok = IdentityStore.getInstance().getToken("${sec.authenticationKey}", true, "${conn.host}:${conn.port}"); 
                identities.put(ConnectorParameter.ANY_ENDPOINT, tok);
                identities.put("opc.tcp://${conn.host}:${conn.port}", tok);'
            }
            if (isDefined(sec.keystoreKey) and sec.keystoreKey <> "") {
                'String keystoreKey = "${sec.keystoreKey}";'
            } 
        }
    }
    
    def generateConnectorParamSecuritySettings(Connector conn) {
        if (conn.security <> null) {
            SecuritySettings sec = conn.security;
            if (isDefined(sec.authenticationKey) and sec.authenticationKey <> "") {
                '.setIdentities(identities)'
            }
            if (isDefined(sec.keystoreKey) and sec.keystoreKey <> "") {
                '.setKeystoreKey(keystoreKey)'
            } 
            if (isDefined(sec.keyAlias) and sec.keyAlias <> "") {
                '.setKeyAlias("${sec.keyAlias}")'
            }
            if (isDefined(sec.hostNameVerification)) {
                '.setHostnameVerification(${sec.hostNameVerification})'
            }
        }
    }

    @DispatchBasis
    def generateSpecificSettings(Connector conn) {
        ''
    }
    
    @DispatchCase
    def generateSpecificSettings(AasConnector conn) {
        sequenceOf(Plugin) aasPlugins = conn.plugins->select(p|p.kind==PluginKind::AAS).toSequence();
        if (aasPlugins.size() > 0) {
            Plugin plugin = aasPlugins[0];
            '.setSpecificSetting("PLUGINID", "${plugin.id}")\n'
        } else {
            ''
        }
    }
    
    @DispatchCase
    def generateSpecificSettings(SerialConnector conn) {
        Integer baudRate = getIntegerValueSafe(conn.baudRate, -1);
        if (baudRate > 0) {
            '.setSpecificSetting("BAUDRATE", ${baudRate})\n'
        }
        Integer dataBits = getIntegerValueSafe(conn.dataBits, -1);
        if (dataBits > 0) {
            '.setSpecificSetting("DATABITS", ${dataBits})\n'
        }
        Integer stopBits = getIntegerValueSafe(conn.stopBits, -1);
        if (stopBits > 0) {
            '.setSpecificSetting("STOPBITS", ${stopBits})\n'
        }
        String parity = getStringValueSafe(conn.parity, "");
        if (parity <> "") {
            '.setSpecificSetting("PARITY", "${parity}")\n'
        }
    }

    @DispatchCase
    def generateSpecificSettings(ModbusTcpV1Connector conn) {
        String connectorName = toIdentifier(conn.name);
        '.setSpecificSettingFromResourceSafe("SERVER_STRUCTURE", "${connectorName}.server")'
    }
    
}
