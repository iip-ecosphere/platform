import Basics;
import JavaBasics;
import MavenBasics;
import JavaMapping;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template EcsRuntimeMvn(IIPEcosphere config, XmlFileArtifact target, String dir, String main, Boolean tests, EcsDevice deviceType) {

    def main(IIPEcosphere config, XmlFileArtifact target, String dir, String main, Boolean tests, EcsDevice deviceType) {
        String iipGroup = "de.iip-ecosphere.platform";
        String projectVersion = "\\${project.version}";
        String artifactId = "ecsRuntime.exec${getContainerNameInfix(deviceType)}";
        
        XmlElement project = createMavenRoot(target);
        createMavenProjectAttributes(project, artifactId, "ConfiguredEcsRuntime", "Configured ECS runtime");
        createMavenParent(project, iipGroup, "platformDependencies", "${config.iipVer}");

        XmlElement dep = createDependencies(project);
        appendDependency(dep, iipGroup, "support", projectVersion);
        appendDependency(dep, iipGroup, "ecsRuntime", projectVersion);
        appendDependency(dep, iipGroup, containerManagerModule(config), projectVersion);
        appendDependency(dep, iipGroup, transportProtocolModule(config), projectVersion);
        appendDependency(dep, iipGroup, aasClientModule(config), projectVersion);
        appendArtifact(dep, deviceIdProviderModule(config));
        addSemanticIdResolverDependencies(dep, config);
        appendIipBaseDependencies(dep);
        for (String d:deviceType.requiredModules) {
            appendArtifact(dep, "${d}");
        }

        XmlElement plugins = createMavenBuildElement(project, "", true);
        appendMavenJarPlugin(plugins, "2.3", false, main);
XmlElement dPlug = appendMavenIipDependencyPlugin(plugins);
XmlElement ex = appendExecutionsParent(dPlug);
appendMavenDependencyPluginCopyDepsExecution(ex, jarDir="../${dir}", copyOwn=true);
appendWinLinuxDependencyPluginBuildClasspathExecution(ex, dir, ownArtifact="${iipGroup}.${artifactId}-${config.iipVer}");
        appendCompilerPlugin(plugins);
        appendSurefirePlugin(plugins, tests=tests);
        sequenceOf(String) files = defltOktoResourceFiles();
        ex = appendMavenResourcesCopyResources(plugins, mavenBuildOutputResourcesDir(), getResourcesFolder()+"/devices", files, id="dev-res");
        appendMavenResourcesCopyResourcesExecution(ex, "copy-resources", mavenBuildOutputResourcesDir(), getResourcesFolder()+"/platform", files, id="platf-res");
    }

}
