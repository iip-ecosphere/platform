import JavaBasics;
import DataOperationBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaConnectorSerializer(Configuration config, FileArtifact target, DataType imType, DataType pltfType, 
    String pkg, String typePkg, Boolean sharedInterfaces, Boolean impl, MachineFormatter formatter, MachineParser parser, 
    String className, setOf(AssignmentOperation) assng) {

    Integer index = 0; // temporary
    String add = "";

    def importTypePackage(String pkg, String typePkg) {
        if (pkg != typePkg) {
            'import ${typePkg}.*;'
        } else {
            ''
        }
    }

    // preliminary... JavaBasics + ??
    def convName(PrimitiveType type) {
        switch(type.name) {
            "Integer" : "Integer",
            "Long" : "Long",
            "String" : "String",
            "Boolean" : "Boolean",
            "Float" : "Float",
            "Double" : "Double"
        }
    }
    
    // --------------------------------- genFrom ---------------------------------
    
    def genFrom(DataType imType, String imTypeName, DataType pltfType, String pltfTypeName) {
        index = 0;
        ''
    }
    
    def genFrom(RecordType imType, String imTypeName, DataType pltfType, String pltfTypeName) {
        index = 0;
        if (parser <> null) {
            setOf(String) done = {};
            '${genFromField("result", "", "", "", imType)}'
            '${pltfTypeName} test = new ${pltfTypeName}${add}();'
            '${translateDataOperations(assng, imType, "result", pltfType, "test", done)}'
            mapOf(String, Field) mapping = {};
            mapPaths(imType, mapping, "result");
            '${produceDataTransfer(pltfType, mapping, "test", "result", done)}'
        } else {
            ''
        }
    }
    
    def genFromField(String qual, String name, String fieldName, String typeQual, DataType type) {
        ''
    }

    def genFromField(String qual, String name, String fieldName, String typeQual, PrimitiveType type) {
        String convert = "to" + convName(type);
        '${qual}.set${asMethodNameSuffix(fieldName)}(parser.getConverter().${convert}(pr.getData("${name}", ${index}, mapping)));'
    }

    def genFromField(String qual, String name, String fieldName, String typeQual, RecordType type) {
        String q = qual;
        if (fieldName.length() > 0) { // fieldName == "" on top level
           q = q + ".get" + asMethodNameSuffix(fieldName);
           '${q} = new ${typeQual}${asTypeName(type.name)}();'
        }
        String tq = type.name + ".";
        for (Field f : type.fields, "\n") {
            String n = f.name;
            if (name.length() > 0) {
               n = name + "." + n;
            }
            String s = genFromField(q, n, f.name, tq, f.type);            
            index = index + 1;
            '${s}'
        }
    }
    
    // ---------------------------------- genTo -------------------------------------
    
    def genTo(DataType imType, DataType pltfType) {
        index = 0;
        ''
    }
    
    def genTo(RecordType imType, RecordType pltfType) {
        index = 0;
        if (formatter <> null) {
            genToField("source", "", "", imType);
        } else {
            ''
        }
    }

    def genToField(String qual, String name, String fieldName, DataType type) {
        ''
    }
    
    def genToField(String qual, String name, String fieldName, PrimitiveType type) {
        String convert = "from" + convName(type);
        'formatter.add("${name}", formatter.getConverter().${convert}(${qual}.get${asMethodNameSuffix(fieldName)}()));'
    }
    
    def genToField(String qual, String name, String fieldName, RecordType type) {
        String q = qual;
        if (fieldName.length() > 0) { // fieldName == "" on top level
           q = q + ".get" + asMethodNameSuffix(fieldName);
        }
        for (Field f : type.fields) {
            String n = f.name;
            if (name.length() > 0) {
               n = name + "." + n;
            }
            String s = genToField(q, n, f.name, f.type);
            index = index + 1;
            '${s}'
        }
    }
    
    // ---------------------------- inits ---------------------------------

    def generateInitParser(String className) {
        if (parser <> null) {
            '${generateInitParser(parser, className)}'
        } else {
            ''
        }
    }

    def generateInitParser(MachineParser parser, String className) {
        ''
    }

    def generateInitParser(TextLineParser parser, String className) {
        'parser = new TextLineParser(encoding, "${parser.separator}");'
    }

    def generateInitParser(JsonParser parser, String className) {
        ''  // TODO replace by class
    }

    def generateInitParser(JavaMachineParser parser, String className) {
        'parser = (InputParser<${parser.transferType}>) ParserUtils.createInstance(
            ${className}.class.getClassLoader(), "${parser.class}", encoding);'
    }
    
    def generateInitFormatter(String className) {
        if (formatter <> null) {
            '${generateInitFormatter(formatter, className)}'
        } else {
            ''
        }
    }
    
    def generateInitFormatter(MachineFormatter formatter, String className) {
        'formatter = new DummyFormatter();'
    }

    def generateInitFormatter(TextLineFormatter formatter, String className) {
        'formatter = new TextLineFormatter(encoding, "${formatter.separator}");'
    }

    def generateInitFormatter(JsonFormatter formatter, String className) {
        'formatter = new DummyFormatter();' // TODO replace by class 
    }

    def generateInitFormatter(JavaMachineFormatter formatter, String className) {
        'formatter = (OutputFormatter<${formatter.transferType}>) FormatterUtils.createInstance(
            ${className}.class.getClassLoader(), "${formatter.class}", encoding);'
    }
    
    // ---------------------------- attributes ---------------------------------
    
    def generateParserAttribute() {
        if (parser <> null) {
            'private InputParser<${parser.transferType}> parser;'
        } else {
            ''
        }
    }
    
    def generateParserFrom(String imTypeName, String pltfTypeName) {
        if (parser <> null) {
            'ParseResult<${parser.transferType}> pr = parser.parse(data);
            ${imTypeName} result = new ${imTypeName}();
            ${genFrom(imType, imTypeName, pltfType, pltfTypeName)|e}
            return result;'
        } else {
            'return null;'
        }
    }

    def generateFormatterAttribute() {
        if (formatter <> null) {
            'private OutputFormatter<${formatter.transferType}> formatter;'
        } else {
            ''
        }
    }

    def generateFormatterTo() {
        if (formatter <> null) {
            '${genTo(imType, pltfType)|e}
            return formatter.chunkCompleted();'
        } else {
            'return null;'
        }
    }
    
    // ---------------------------------- main ---------------------------------------

    def main(Configuration config, FileArtifact target, DataType imType, DataType pltfType, String pkg, String typePkg, 
        Boolean sharedInterfaces, Boolean impl, MachineFormatter formatter, MachineParser parser, String className, 
        setOf(AssignmentOperation) assng) {
        String imTypeName = asTypeName(imType.name);
        String pltfTypeName = asTypeName(pltfType.name);
        if (sharedInterfaces) {
            add = "Impl";
        }

        'package ${pkg};
        
        import java.io.IOException;
        import java.util.*;
        import de.iip_ecosphere.platform.transport.serialization.*;
        import de.iip_ecosphere.platform.connectors.parser.InputParser.ParseResult;
        import de.iip_ecosphere.platform.connectors.parser.*;
        import de.iip_ecosphere.platform.connectors.formatter.*;
        ${importTypePackage(pkg, typePkg)}
        import com.fasterxml.jackson.databind.ObjectMapper;
        import com.fasterxml.jackson.core.JsonProcessingException;
        
        /**
         * Parser/formatter connector serializer for ${imTypeName}.
         * Generated by: EASy-Producer.
         */
        public class ${className} implements Serializer<${imTypeName}> {
        
            ${generateParserAttribute()|e}
            ${generateFormatterAttribute()|e}
            private Map<String, Integer> mapping;
            
            public ${className}(String encoding, Map<String, Integer> mapping) {
                this.mapping = mapping;
                ${generateInitParser(className)|e}
                ${generateInitFormatter(className)|e}
            }
        
            @Override             
            public ${imTypeName} from(byte[] data) throws IOException {
                ${generateParserFrom("${imTypeName}${add}", "${pltfTypeName}")}
            }

            @Override    
            public byte[] to(${imTypeName} source) throws IOException {
                ${generateFormatterTo()}
            }

            @Override
            public ${imTypeName} clone(${imTypeName} origin) throws IOException {
                return new ${imTypeName}${add}(origin);
            }

            @Override
            public Class<${imTypeName}> getType() {
                return ${imTypeName}.class;
            }
        
        }
        '
    }
    
}
