import Basics;
import JavaBasics;
import DataOperationBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="java", profileArg_javadocIndent=" * ", lineLength = 120)
template JavaConnectorSerializer(Configuration config, JavaCodeArtifact target, DataType imType, String path, DataType pltfType, 
    String pkg, String typePkg, Boolean sharedInterfaces, Boolean impl, MachineFormatter formatter, MachineParser parser, 
    String className, setOf(AssignmentOperation) assng) extends DataOperationBasics {

    String add = "";
    String topPath = "";

    // temporary
    String index = "";
    sequenceOf(String) prVariableName = {"pr"};
    Boolean optionalFound = false;
    Boolean genFrom = false;
    Integer arrayCount = 0;
        
    // ------------------------------- refinement of DataOperationBasics ---------
    
    def JavaCodeExpression translateDataOperation(FieldNameDataOperation op, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        if (indexes.containsKey(op.field)) {
            new JavaCodeMethodCall("pr.getFieldName").addArgument(indexes.get(op.field));
        } else {
            new JavaCodeExpression();
        }
    }
    
    def JavaCodeExpression getTransferAssignmentExpression(TransferAssignmentOperation assng, mapOf(Field, String) fields, mapOf(Field, String) indexes, setOf(String) done) {
        JavaCodeExpression lambda = translateFieldAccess(assng.valueField, fields, true, genConvertOp("inConverter", assng.valueField.type, "to", "v"), done, true, indexes);
        JavaCodeMethodCall m = new JavaCodeMethodCall("pr.getFieldName");
            m.addLambdaArgument().addVariable("v").addExpression(lambda);
            m.addArgument(indexes.get(assng.field));
         m;
    }
    
    // --------------------------------- genFrom ---------------------------------
    
    def genFrom(DataType imType, String imTypeName, DataType pltfType, String pltfTypeName, String imVarName, String pltfVarName, JavaCodeBlockInterface meth) {
        index = "";
        optionalFound = false;
        // TODO unclear for now
    }
    
    def genFrom(RecordType imType, String imTypeName, DataType pltfType, String pltfTypeName, String imVarName, String pltfVarName, JavaCodeBlockInterface meth) {
        index = "";
        optionalFound = false;
        if (parser <> null) {
            setOf(String) done = {};
            translateDataOperations(assng, imType, imVarName, pltfType, pltfVarName, done, meth);
            mapOf(String, Field) mapping = {};
            mapSourcePaths(imType, mapping, imVarName);
            optionalFound = false; // from now again in sequence until optional
            produceDataTransfer(pltfType, mapping, pltfVarName, imVarName, done, "", "", meth);
        }
    }
    
    // called via translateDataOperations, no modelCalls in channel connectors
    def JavaCodeExpression translateDataOperation(ModelCallOperation call, mapOf(Field, String) fields, mapOf(Field, String) indexes, setOf(String) done) {
        new JavaCodeTextExpression("// model call not supported ${call.name}(...)");
    }

    // called via translateDataOperations
    def JavaCodeExpression genFieldAccess(String path, Field field, Boolean set, JavaCodeExpression value, String indexes) {
        genFieldAcc(path, field, set, value, indexes, "");
    }

    // called via translateDataOperations
    def JavaCodeExpression genFieldAcc(String path, Field field, Boolean set, JavaCodeExpression value, String indexes, String paths) {
       String p;
       String ix;
       String getOp;
       if (optWithStepIn) {
           p = field.name;
           ix = suffixPath(indexes, ",");
           getOp = "getLocalData";
       } else {
           p = paths + "." + field.name;
           ix = indexes;
           getOp = "getData";
       }
       if (field.optional) {
           optionalFound = true; // disable getData via index after first optional as indexes "jump"
       }
       if (set) {
           if (field.readOnly) {
               new JavaCodeExpression();
           } else {
               JavaCodeExpression ex;
               if (not(genFrom)) {
                   ex = value; // already converted
               } else {
                   ex = genConvertOp("outConverter", field.type, "from", value);
               }
               JavaCodeMethodCall m = new JavaCodeMethodCall(path + ".set" + asMethodNameSuffix(field.name));
               m.addArgument(ex);
               wrapOptionalIoVoid(field, m);
           }
       } else {
           JavaCodeMethodCall ex;
           if (not(genFrom)) {
               p = substPathEx('"${p}"', topPath, "path");
               ex = new JavaCodeMethodCall(getOp).qualifiedBy(prVariableName.last()).addArgument(p);
               if (ix.length() > 0 and not(optionalFound)) {
                   ex.addArgument(ix);
               }
           } else {
               ex = new JavaCodeMethodCall("get"+ asMethodNameSuffix(field.name)).qualifiedBy(path);
           }
           adjustConvertOp(field, genConvertOp("inConverter", field.type, "to", ex));
       }
    }
    
    @DispatchBasis
    def JavaCodeExpression adjustConvertOp(Field field, JavaCodeExpression convOp) {
        convOp;
    }

    @DispatchCase
    def JavaCodeExpression adjustConvertOp(AasField field, JavaCodeExpression convOp) {
        if (isMultiField(field) and field.type.isKindOf(ListType)) {
            convOp.replaceMethod("toList", "toElementList");
        }
        convOp;
    }

    def produceDataTransfer(Field tgt, String tgtQual, Field src, String srcQual, String indexes, String paths, JavaCodeBlockInterface block) {
        JavaCodeExpression acc = genFieldAcc(mapSourcePath(srcQual, src), tgt, genFrom, getterPath(tgtQual, tgt), indexes, paths);
        if (not(genFrom)) {
            if (isRecordArray(src) and isRecordArray(tgt)) {
                arrayCount = arrayCount + 1;
                ArrayType tgtArrayType = tgt.type; // conversion
                ArrayType srcArrayType = src.type; // conversion
                String arrayName = "array${arrayCount}";
                String srcArrayEltTypeName = asTypeName(srcArrayType.type.name);
                String tgtArrayEltTypeName = asTypeName(tgtArrayType.type.name);
                String qTgtArrayEltTypeName = asTypeName(toQualifiedTypeName(tgtArrayType.type));
                String outerPrName = "prArray${arrayCount}";
                String pathEx = substPathEx('"${src.name}"', topPath, "path");
                prVariableName.add("prElement");
                String fieldPath = getFieldPath(src, pathEx);

                block.addVariable(getParserResultType(parser), outerPrName, 
                    new JavaCodeMethodCall("stepInto").qualifiedBy("pr").addArgument(fieldPath).addArgument(suffixPath(indexes, ",")));
                block.addVariable(qTgtArrayEltTypeName + "[]", arrayName).addNewArray(tgtArrayEltTypeName).addDimension(outerPrName + ".getArraySize()");
                JavaCodeForLoop l = block.addForLoop("int", "i", "0", "i < size", "i++");
                    l.addLoopVariable("size", outerPrName + ".getArraySize()");
                    l.addVariable(getParserResultType(parser), "prElement", outerPrName + '.stepInto("", i)');
                    l.addAssignment(arrayName + "[i]", new JavaCodeConstructorCall(qTgtArrayEltTypeName + add));
                    genFrom(srcArrayType.type, srcArrayEltTypeName, tgtArrayType.type, tgtArrayEltTypeName, "tmp", "${arrayName}[i]", l);
                    l.addCall("stepOut").qualifiedBy("prElement");
                block.addCall("stepOut").qualifiedBy("prArray" + arrayCount);
                
                prVariableName.removeLast();
                acc = arrayName;
            }
            if (tgt.type.isKindOf(RecordType)) {
                JavaCodeExpression nextPath = getterPath(tgtQual, tgt); // all "vars" before the .set
                JavaCodeExpression cons = new JavaCodeConstructorCall(toQualifiedTypeName(tgt.type) + add);
                createTemporaryVariable(nextPath.toCode(), mapSourceSeparator(), tgt.type, cons, block);
                block.add(wrapOptionalIoVoid(tgt, setterPath(getTemporaryVariable(tgtQual, tgtQual), tgt, getTemporaryVariable(nextPath.toCode(), cons))));
            } else {
                block.add(wrapOptionalIoVoid(tgt, setterPath(getTemporaryVariable(tgtQual, tgtQual), tgt, acc)));
            }            
        } else {
            block.add(acc);
        }
    }
    
    // called via produceDataTransfer
    def produceDataTransfer(Field field, RecordType type, mapOf(String, Field) mapping, String typeQual, String mapQual, setOf(String) done, String indexes, String paths, JavaCodeBlockInterface block) {
        startRecord(field, indexes, block); // issues with dynamic dispatch and block, left in just in case -> startRecord, endRecord
        produceDataTransfer(type, mapping, typeQual, mapQual, done, indexes, paths, block);
        endRecord(field, indexes, block);
    }
    
    def startRecord(Field field, String indexes, JavaCodeBlockInterface block) {
        if (optWithStepIn) {
            nestedStepCount = nestedStepCount + 1;
            String pathEx = substPathEx('"${field.name}"', topPath, "path");
            String fieldPath = getFieldPath(field, pathEx);
            block.addAssignment("pr", new JavaCodeMethodCall("pr.stepInto").addArgument(fieldPath).addArgument(suffixPath(indexes, ",")));
        }
    }

    def endRecord(Field field, String indexes, JavaCodeBlockInterface block) {
        if (optWithStepIn) {
            nestedStepCount = nestedStepCount - 1;
            block.addAssignment("pr", new JavaCodeMethodCall("pr.stepOut"));
        }
    }

    // ---------------------------------- genTo -------------------------------------
    
    def genTo(DataType imType, String imTypeName, DataType pltfType, String pltfTypeName, JavaCodeMethod meth) {
        index = 0;
        if (formatter <> null) {
            meth.addCall("add").qualifiedBy("formatter").addStringArgument("") 
                .addArgument(genConvertOp("outConverter", pltfType, "from", "source"));
        }
    }
    
    def genTo(RecordType imType, String imTypeName, RecordType pltfType, String pltfTypeName, JavaCodeMethod meth) {
        index = 0;
        if (formatter <> null) {
            meth.addVariable(imTypeName, "tmp", new JavaCodeConstructorCall(imTypeName)); // TODO check if needed
            genToField("source", "", "", pltfType, imType, false, meth);
        }
    }

    def genToField(String qual, String name, String fieldName, DataType type, DataType srcType, Boolean nullable, JavaCodeBlockInterface meth) {
    }
    
    def genToField(String qual, String name, String fieldName, PrimitiveType type, PrimitiveType srcType, Boolean nullable, JavaCodeBlockInterface meth) {
        String data = "${qual}.get${asMethodNameSuffix(fieldName)}()";
        if (isRecordArray(type) and isRecordArray(srcType)) {
            arrayCount = arrayCount + 1;
            ArrayType tgtArrayType = type; // conversion
            ArrayType srcArrayType = srcType; // conversion
            String arrayName = "array${arrayCount}";
            String arrayEltTypeName = asTypeName(toQualifiedTypeName(tgtArrayType.type));
            meth.addCall("startArrayStructure").qualifiedBy("formatter").addStringArgument(name);
            meth.addCall("startObjectStructure").qualifiedBy("formatter").addNullArgument();
            meth.addVariable(arrayEltTypeName + "[]", arrayName, data);
            JavaCodeForLoop l = meth.addForLoop("int", "i", "0", "i < ${arrayName}.length", "i++");
            genToField("${arrayName}[i]", "", "", tgtArrayType.type, srcArrayType.type, nullable, l);
            meth.addCall("endStructure").qualifiedBy("formatter");
            meth.addCall("endStructure").qualifiedBy("formatter");
        } else {
            String pathEx = substPathEx('"${name}"', topPath, "path");
            meth.addCall("add").qualifiedBy("formatter").addArgument(pathEx)
                .addArgument(genConvertOp("outConverter", type, "from", data));
        }
    }
    
    def genToField(String qual, String name, String fieldName, RecordType type, RecordType srcType, Boolean nullable, JavaCodeBlockInterface meth) {
        String q = qual;
        if (fieldName.length() > 0) { // fieldName == "" on top level
           q = q + ".get" + asMethodNameSuffix(fieldName) + "()";
        }
        mapOf(String, DataType) srcFieldTypes = {};
        for (Field f : srcType.fields) {
            srcFieldTypes.add(f.name, f.type);
        }
        if (nullable) {
            meth = meth.addIf("${q} != null");
        }
        for (Field f : type.fields) {
            String n = f.name;
            if (name.length() > 0) {
               n = name + "." + n;
            }
            DataType srcFieldType = srcFieldTypes.get(f.name, ObjectType);
            genToField(q, n, f.name, f.type, srcFieldType, f.nullable, meth);
            index = index + 1;
        }
    }
    
    // ------------------------- parser types ---------------------------
    
    @DispatchBasis
    def String getParserType(MachineParser parser) {
        "";
    }

    @DispatchBasis
    def String getParserConverterType(MachineParser parser) {
        "";
    }

    @DispatchBasis
    def String getParserResultType(MachineParser parser) {
        "";
    }

    def String getParserType(JavaMachineParser parser) {
        parser.class;
    }

    def String getParserConverterType(JavaMachineParser parser) {
        parser.converterClass;
    }

    def String getParserResultType(JavaMachineParser parser) {
        parser.resultClass;
    }
    
    def String getParserType(JsonParser parser) {
        "de.iip_ecosphere.platform.connectors.parser.JsonInputParser";
    }

    def String getParserConverterType(JsonParser parser) {
        "de.iip_ecosphere.platform.connectors.parser.JsonInputParser.JsonInputConverter";
    }

    def String getParserResultType(JsonParser parser) {
        "de.iip_ecosphere.platform.connectors.parser.JsonInputParser.JsonParseResult";
    }

    def String getParserType(TextLineParser parser) {
        "de.iip_ecosphere.platform.connectors.parser.TextLineParser";
    }

    def String getParserConverterType(TextLineParser parser) {
        "de.iip_ecosphere.platform.connectors.parser.TextLineParser.TextLineParserConverter";
    }

    def String getParserResultType(TextLineParser parser) {
        "de.iip_ecosphere.platform.connectors.parser.TextLineParser.TextLineParseResult";
    }
    
    // ------------------------- formatter types ---------------------------

    // dispatch basis
    def String getFormatterType(MachineFormatter formatter) {
        "";
    }

    // dispatch basis
    def String getFormatterConverterType(MachineFormatter formatter) {
        "";
    }

    def String getFormatterType(JavaMachineFormatter formatter) {
        formatter.class;
    }

    def String getFormatterConverterType(JavaMachineFormatter formatter) {
        formatter.converterClass;
    }

    def String getFormatterType(TextLineFormatter formatter) {
        "de.iip_ecosphere.platform.connectors.formatter.TextLineFormatter";
    }

    def String getFormatterConverterType(TextLineFormatter formatter) {
        "de.iip_ecosphere.platform.connectors.formatter.TextLineFormatter.TextLineFormatterConverter";
    }

    def String getFormatterType(JsonFormatter formatter) {
        "de.iip_ecosphere.platform.connectors.formatter.JsonOutputFormatter";
    }

    def String getFormatterConverterType(JsonFormatter formatter) {
        "de.iip_ecosphere.platform.connectors.formatter.JsonOutputFormatter.JsonOutputConverter";
    }
    
    // ---------------------------- inits ---------------------------------

    def JavaCodeExpression generateInitParser(MachineParser parser, String className) {
        new JavaCodeTextExpression("");
    }

    def JavaCodeExpression generateInitParser(TextLineParser parser, String className) {
        JavaCodeConstructorCall c = new JavaCodeConstructorCall("de.iip_ecosphere.platform.connectors.parser.TextLineParser", JavaCodeImportScope.CLASS_NO_METHOD);
        c.addArgument("encoding");
        c.addStringArgument(parser.separator);
        c;
    }

    def JavaCodeExpression generateInitParser(JsonParser parser, String className) {
        new JavaCodeConstructorCall("de.iip_ecosphere.platform.connectors.parser.JsonInputParser");
    }

    def JavaCodeExpression generateInitParser(JavaMachineParser parser, String className) {
        JavaCodeMethodCall m = new JavaCodeMethodCall("de.iip_ecosphere.platform.connectors.parser.ParserUtils.createInstance", JavaCodeImportScope.METHOD_CLASS_IMPORT);
        m.addArgument("${className}.class.getClassLoader()");
        m.addStringArgument(getParserType(parser));
        m.addArgument("encoding");
        new JavaCodeCastExpression(getParserType(parser), m);
    }
    
    def JavaCodeExpression generateInitFormatter(MachineFormatter formatter, String className) {
        new JavaCodeConstructorCall('de.iip_ecosphere.platform.connectors.formatter.DummyFormatter', JavaCodeImportScope.CLASS_NO_METHOD);
    }

    def JavaCodeExpression generateInitFormatter(TextLineFormatter formatter, String className) {
        JavaCodeConstructorCall c = new JavaCodeConstructorCall("de.iip_ecosphere.platform.connectors.formatter.TextLineFormatter", JavaCodeImportScope.CLASS_NO_METHOD);
        c.addArgument("encoding");
        c.addStringArgument(formatter.separator);
        c;
    }

    def JavaCodeExpression generateInitFormatter(JsonFormatter formatter, String className) {
        new JavaCodeConstructorCall('de.iip_ecosphere.platform.connectors.formatter.JsonOutputFormatter', JavaCodeImportScope.CLASS_NO_METHOD);
    }

    def JavaCodeExpression generateInitFormatter(JavaMachineFormatter formatter, String className) {
        JavaCodeMethodCall m = new JavaCodeMethodCall("de.iip_ecosphere.platform.connectors.formatter.FormatterUtils.createInstance", JavaCodeImportScope.METHOD_CLASS_IMPORT);
        m.addArgument("${className}.class.getClassLoader()");
        m.addStringArgument(getFormatterType(formatter));
        m.addArgument("encoding");
        new JavaCodeCastExpression(getFormatterType(formatter), m);
    }
    
    // ---------------------------- attributes ---------------------------------
        
    def generateParserFrom(String imTypeName, String pltfTypeName, JavaCodeMethod meth) {
        if (parser <> null) {
            genFrom = false;
            clearTemporaryVariables();
            meth.addVariable(getParserResultType(parser), "pr", "parser.parse(data)");
            meth.addVariable(getParserConverterType(parser), "inConverter", "parser.getConverter()");
            JavaCodeVariableDeclaration result = meth.addVariable(pltfTypeName, "result", new JavaCodeConstructorCall(pltfTypeName + add, JavaCodeImportScope.CLASS_NO_METHOD));
            genFrom(imType, imTypeName, pltfType, pltfTypeName, "tmp", "result", meth);
            meth.addReturn(result);
        } else {
            meth.addReturn("null");
        }
    }

    def generateFormatterTo(String imTypeName, String pltfTypeName, JavaCodeMethod meth) {
        if (formatter <> null) {
            genFrom = true;
            clearTemporaryVariables();
            meth.addVariable(getFormatterConverterType(formatter), "outConverter", "formatter.getConverter()");
            genTo(imType, imTypeName, pltfType, pltfTypeName, meth);
            meth.addReturn(new JavaCodeMethodCall("chunkCompleted").qualifiedBy("formatter"));
        } else {
            meth.addReturn("null");
        }
    }
    
    // ---------------------------------- clone -------------------------------------
    
    def JavaCodeExpression generateClone(DataType type, String typeName, String add) {
        JavaCodeConstructorCall c = new JavaCodeConstructorCall(typeName);
        c.addArgument("origin");
        c; // no ${add}, arrays?
    }

    def JavaCodeExpression generateClone(RecordType type, String typeName, String add) {
        JavaCodeConstructorCall c = new JavaCodeConstructorCall(typeName + add);
        c.addArgument("origin");
        c;
    }

    def addSerializerMethod(String name, String type, JavaCodeClass mainCls) {
        JavaCodeMethod m = mainCls.addMethod("", name);
        m.addOverrideAnnotation();
        if (name == "from") {
            m.setType(type);
            m.addParameter("String", "channel");
            m.addParameter("byte[]", "data");
        } else {
            m.setType("byte[]");
            m.addParameter(type, "source");
        }
        m.addException("java.io.IOException");
        m.addVariable("String", "path", 'pathSupplier == null ? "${path}" : pathSupplier.get()').setFinal();
        m;
    }    
    
    // ---------------------------------- main ---------------------------------------

    def main(Configuration config, JavaCodeArtifact target, DataType imType, String path, DataType pltfType, String pkg, 
        String typePkg, Boolean sharedInterfaces, Boolean impl, MachineFormatter formatter, MachineParser parser, 
        String className, setOf(AssignmentOperation) assng) {
        String imTypeName = asTypeName(toQualifiedTypeName(imType));
        topPath = path;
        String pltfTypeName = asTypeName(pltfType.name);
        String pltfTypeNameQn = asTypeName(toQualifiedTypeName(pltfType));
        if (sharedInterfaces) {
            add = "Impl";
        }
        
        JavaCodeClass mainCls = codeCreateClass(target, pkg, className, "Parser/formatter connector serializer for ${pltfTypeName}");
        mainCls.addInterface("de.iip_ecosphere.platform.connectors.types.ChanneledConnectorOutputTypeAdapter.ChanneledSerializer<${pltfTypeNameQn}>");

        if (parser <> null) {
            mainCls.addAttribute(getParserType(parser), "parser");
        }

        if (formatter <> null) {
            mainCls.addAttribute(getFormatterType(formatter), "formatter");
        }
        mainCls.addAttribute("java.util.Map<String, Integer>", "mapping");
        mainCls.addAttribute("java.util.function.Supplier<String>", "pathSupplier");

        JavaCodeMethod m = mainCls.addConstructor();
        m.addParameter("String", "encoding");
        m.addParameter("java.util.Map<String, Integer>", "mapping");
        m.addParameter("java.util.function.Supplier<String>", "pathSupplier");
        m.addAssign("this.mapping", "mapping");
        m.addAssign("this.pathSupplier", "pathSupplier");
        if (parser <> null) {
            m.addAssign("parser", generateInitParser(parser, className));
        }
        if (formatter <> null) {
            m.addAssign("formatter", generateInitFormatter(formatter, className));
        } 
        
        m = addSerializerMethod("from", pltfTypeNameQn, mainCls);
        generateParserFrom(imTypeName + add, pltfTypeNameQn, m);

        m = addSerializerMethod("to", pltfTypeNameQn, mainCls);
        generateFormatterTo(imTypeName + add, pltfTypeNameQn, m);

        m = mainCls.addMethod(pltfTypeNameQn, "clone");
        m.addOverrideAnnotation();
        m.addParameter(pltfTypeNameQn, "origin");
        m.addException("java.io.IOException");
        m.addReturn(generateClone(pltfType, pltfTypeNameQn, add));

        m = mainCls.addMethod("Class<${pltfTypeName}>", "getType");
        m.addOverrideAnnotation();
        m.addReturn("${pltfTypeName}.class");
    }
    
}
