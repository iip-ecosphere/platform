import JavaBasics;
import DataOperationBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaConnectorSerializer(Configuration config, FileArtifact target, DataType imType, DataType pltfType, 
    String pkg, String typePkg, Boolean sharedInterfaces, Boolean impl, MachineFormatter formatter, MachineParser parser, 
    String className, setOf(AssignmentOperation) assng) extends DataOperationBasics {

    String add = "";

    // temporary
    String index = "";
    Integer nestedStepCount = 0;
    Boolean optionalFound = false;
    Boolean genFrom = false;
    
    def importTypePackage(String pkg, String typePkg) {
        if (pkg != typePkg) {
            'import ${typePkg}.*;'
        } else {
            ''
        }
    }
    
    // ------------------------------- refinement of DataOperationBasics ---------
    
    def String translateDataOperation(FieldNameDataOperation op, mapOf(Field, String) fields, mapOf(Field, String) indexes) {
        if (indexes.containsKey(op.field)) {
            "pr.getFieldName(" + indexes.get(op.field) + ")";
        } else {
            ""
        }
    }
    
    def String getTransferAssignmentExpression(TransferAssignmentOperation assng, mapOf(Field, String) fields, mapOf(Field, String) indexes, setOf(String) done) {
        String lambda = translateFieldAccess(assng.valueField, fields, true, "", genConvertOp("inConverter", assng.valueField.type, "to", "v"), done, true, indexes);
        "pr.getFieldName(v -> ${lambda}, " + indexes.get(assng.field) + ")";
    }
    
    // --------------------------------- genFrom ---------------------------------
    
    def genFrom(DataType imType, String imTypeName, DataType pltfType, String pltfTypeName) {
        index = "";
        optionalFound = false;
        '' // TODO unclear for now
    }
    
    def genFrom(RecordType imType, String imTypeName, DataType pltfType, String pltfTypeName) {
        index = "";
        optionalFound = false;
        if (parser <> null) {
            setOf(String) done = {};
            '${translateDataOperations(assng, imType, "tmp", pltfType, "result", done)}'
            mapOf(String, Field) mapping = {};
            mapSourcePaths(imType, mapping, "tmp");
            '${produceDataTransfer(pltfType, mapping, "result", "tmp", done, "", "")}'
        } else {
            ''
        }
    }

    // called via translateDataOperations
    def genFieldAccess(String path, Field field, Boolean set, String setEnd, String value, String indexes) {
        genFieldAcc(path, field, set, setEnd, value, indexes, "");
    }

    // called via translateDataOperations
    def genFieldAcc(String path, Field field, Boolean set, String setEnd, String value, String indexes, String paths) {
       String p;
       String ix;
       String getOp;
       if (optWithStepIn) {
           p = field.name;
           ix = suffixPath(indexes, ",");
           getOp = "getLocalData";
       } else {
           p = paths + "." + field.name;
           ix = indexes;
           getOp = "getData";
       }
       if (field.optional) {
           optionalFound = true; // disable getData via index after first optional as indexes "jump"
       }
       
       if (set) {
           String ex;
           if (not(genFrom)) {
               ex = value; // already converted
           } else {
               ex = genConvertOp("outConverter", field.type, "from", value);
           }
           wrapOptional(field, path + ".set" + asMethodNameSuffix(field.name) + "(" + ex + ")") + "${setEnd}"; 
       } else {
           String ex;
           if (not(genFrom)) {
               if (ix.length() > 0 and not(optionalFound)) {
                   ex = "pr.${getOp}(\"${p}\", ${ix})";
               } else {
                   ex = "pr.${getOp}(\"${p}\")";
               }
           } else {
               ex = path + ".get" + asMethodNameSuffix(field.name) + "()";
           }
           '${genConvertOp("inConverter", field.type, "to", ex)}';
       }
    }

    def produceDataTransfer(Field tgt, String tgtQual, Field src, String srcQual, String indexes, String paths) {
        String acc = genFieldAcc(mapSourcePath(srcQual, src), tgt, genFrom, ";", getterPath(tgtQual, tgt), indexes, paths);
        if (not(genFrom)) {
            if (tgt.type.isKindOf(RecordType)) {
                String nextPath = getterPath(tgtQual, tgt); // all "vars" before the .set
                String cons = "new ${toTypeName(tgt.type)}${add}()";
                '\n${createTemporaryVariable(nextPath, mapSourceSeparator(), tgt.type, "${cons}")}
                ${wrapOptional(tgt, setterPath(getTemporaryVariable(tgtQual, tgtQual), tgt, getTemporaryVariable(nextPath, cons)))};'
            } else {
                '\n${wrapOptional(tgt, setterPath(getTemporaryVariable(tgtQual, tgtQual), tgt, acc))};'
            }            
        } else {
            '\n${acc}'
        }
    }
    
    // called via produceDataTransfer
    def produceDataTransfer(Field field, RecordType type, mapOf(String, Field) mapping, String typeQual, String mapQual, setOf(String) done, String indexes, String paths) {
        if (not(genFrom) and optWithStepIn) {
            String path = field.name;
            nestedStepCount = nestedStepCount + 1;
            '\n\npr = pr.stepInto("${path}", ${suffixPath(indexes, ",")});' !<CR>;
        }
        '${produceDataTransfer(type, mapping, typeQual, mapQual, done, indexes, paths)}'
        if (not(genFrom) and optWithStepIn and nestedStepCount > 0) {
            nestedStepCount = nestedStepCount - 1;
            'pr = pr.stepOut();\n'
        } else {
            ''
        }
    }

    // ---------------------------------- genTo -------------------------------------
    
    def genTo(DataType imType, String imTypeName, DataType pltfType, String pltfTypeName) {
        index = 0;
        if (formatter <> null) {
            'formatter.add("", ${genConvertOp("outConverter", pltfType, "from", "source")});'
        } else {
            ''
        }
    }
    
    def genTo(RecordType imType, String imTypeName, RecordType pltfType, String pltfTypeName) {
        index = 0;
        if (formatter <> null) {
            '${imTypeName} tmp = new ${imTypeName}();'
            genToField("source", "", "", pltfType);
        } else {
            ''
        }
    }

    def genToField(String qual, String name, String fieldName, DataType type) {
        ''
    }
    
    def genToField(String qual, String name, String fieldName, PrimitiveType type) {
        String data = "${qual}.get${asMethodNameSuffix(fieldName)}()";
        'formatter.add("${name}", ${genConvertOp("outConverter", type, "from", data)});\n'
    }
    
    def genToField(String qual, String name, String fieldName, RecordType type) {
        String q = qual;
        if (fieldName.length() > 0) { // fieldName == "" on top level
           q = q + ".get" + asMethodNameSuffix(fieldName);
        }
        for (Field f : type.fields) {
            String n = f.name;
            if (name.length() > 0) {
               n = name + "." + n;
            }
            String s = genToField(q, n, f.name, f.type);
            index = index + 1;
            '${s}'
        }
    }
    
    // ------------------------- parser types ---------------------------
    
    // dispatch basis
    def String getParserType(MachineParser parser) {
        "";
    }

    // dispatch basis
    def String getParserConverterType(MachineParser parser) {
        "";
    }

    // dispatch basis
    def String getParserResultType(MachineParser parser) {
        "";
    }

    def String getParserType(JavaMachineParser parser) {
        parser.class;
    }

    def String getParserConverterType(JavaMachineParser parser) {
        parser.converterClass;
    }

    def String getParserResultType(JavaMachineParser parser) {
        parser.resultClass;
    }
    
    def String getParserType(JsonParser parser) {
        "JsonInputParser";
    }

    def String getParserConverterType(JsonParser parser) {
        "JsonInputParser.JsonInputConverter";
    }

    def String getParserResultType(JsonParser parser) {
        "JsonInputParser.JsonParseResult";
    }

    def String getParserType(TextLineParser parser) {
        "TextLineParser";
    }

    def String getParserConverterType(TextLineParser parser) {
        "TextLineParser.TextLineParserConverter";
    }

    def String getParserResultType(TextLineParser parser) {
        "TextLineParser.TextLineParseResult";
    }
    
    // ------------------------- formatter types ---------------------------

    // dispatch basis
    def String getFormatterType(MachineFormatter formatter) {
        "";
    }

    // dispatch basis
    def String getFormatterConverterType(MachineFormatter formatter) {
        "";
    }

    def String getFormatterType(JavaMachineFormatter formatter) {
        formatter.class;
    }

    def String getFormatterConverterType(JavaMachineFormatter formatter) {
        formatter.converterClass;
    }

    def String getFormatterType(TextLineFormatter formatter) {
        "TextLineFormatter";
    }

    def String getFormatterConverterType(TextLineFormatter formatter) {
        "TextLineFormatter.TextLineFormatterConverter";
    }

    def String getFormatterType(JsonFormatter formatter) {
        "JsonOutputFormatter";
    }

    def String getFormatterConverterType(JsonFormatter formatter) {
        "JsonOutputFormatter.JsonOutputConverter";
    }
    
    // ---------------------------- inits ---------------------------------

    def generateInitParser(String className) {
        if (parser <> null) {
            '${generateInitParser(parser, className)}'
        } else {
            ''
        }
    }

    def generateInitParser(MachineParser parser, String className) {
        ''
    }

    def generateInitParser(TextLineParser parser, String className) {
        'parser = new TextLineParser(encoding, "${parser.separator}");'
    }

    def generateInitParser(JsonParser parser, String className) {
        'parser = new JsonInputParser();'
    }

    def generateInitParser(JavaMachineParser parser, String className) {
        'parser = (${getParserType(parser)}) ParserUtils.createInstance(
            ${className}.class.getClassLoader(), "${getParserType(parser)}", encoding);'
    }
    
    def generateInitFormatter(String className) {
        if (formatter <> null) {
            '${generateInitFormatter(formatter, className)}'
        } else {
            ''
        }
    }
    
    def generateInitFormatter(MachineFormatter formatter, String className) {
        'formatter = new DummyFormatter();'
    }

    def generateInitFormatter(TextLineFormatter formatter, String className) {
        'formatter = new TextLineFormatter(encoding, "${formatter.separator}");'
    }

    def generateInitFormatter(JsonFormatter formatter, String className) {
        'formatter = new JsonOutputFormatter();'
    }

    def generateInitFormatter(JavaMachineFormatter formatter, String className) {
        'formatter = (${getFormatterType(formatter)}) FormatterUtils.createInstance(
            ${className}.class.getClassLoader(), "${getFormatterType(formatter)}", encoding);'
    }
    
    // ---------------------------- attributes ---------------------------------
    
    def generateParserAttribute() {
        if (parser <> null) {
            'private ${getParserType(parser)} parser;'
        } else {
            ''
        }
    }
    
    def generateParserFrom(String imTypeName, String pltfTypeName) {
        if (parser <> null) {
            genFrom = false;
            clearTemporaryVariables();
            '${getParserResultType(parser)} pr = parser.parse(data);
            ${getParserConverterType(parser)} inConverter = parser.getConverter(); 
            ${pltfTypeName} result = new ${pltfTypeName}${add}();
            ${genFrom(imType, imTypeName, pltfType, pltfTypeName)}
            return result;'
        } else {
            'return null;'
        }
    }

    def generateFormatterAttribute() {
        if (formatter <> null) {
            'private ${getFormatterType(formatter)} formatter;'
        } else {
            ''
        }
    }

    def generateFormatterTo(String imTypeName, String pltfTypeName) {
        if (formatter <> null) {
            genFrom = true;
            clearTemporaryVariables();
            '${getFormatterConverterType(formatter)} outConverter = formatter.getConverter();
            ${genTo(imType, imTypeName, pltfType, pltfTypeName)}
            return formatter.chunkCompleted();'
        } else {
            'return null;'
        }
    }
    
    // ---------------------------------- clone -------------------------------------
    
    def generateClone(DataType type, String typeName, String add) {
        'return new ${typeName}(origin);' // no ${add}, arrays?
    }

    def generateClone(RecordType type, String typeName, String add) {
        'return new ${typeName}${add}(origin);'
    }
    
    // ---------------------------------- main ---------------------------------------

    def main(Configuration config, FileArtifact target, DataType imType, DataType pltfType, String pkg, String typePkg, 
        Boolean sharedInterfaces, Boolean impl, MachineFormatter formatter, MachineParser parser, String className, 
        setOf(AssignmentOperation) assng) {
        String imTypeName = asTypeName(imType.name);
        String pltfTypeName = asTypeName(pltfType.name);
        if (sharedInterfaces) {
            add = "Impl";
        }

        'package ${pkg};
        
        import java.io.IOException;
        import java.util.*;
        import static de.iip_ecosphere.platform.support.function.IOVoidFunction.optional;
        import de.iip_ecosphere.platform.support.function.*;
        import de.iip_ecosphere.platform.transport.serialization.*;
        import de.iip_ecosphere.platform.connectors.parser.InputParser.InputConverter;
        import de.iip_ecosphere.platform.connectors.parser.InputParser.ParseResult;
        import de.iip_ecosphere.platform.connectors.parser.*;
        import de.iip_ecosphere.platform.connectors.formatter.OutputFormatter.OutputConverter;
        import de.iip_ecosphere.platform.connectors.formatter.*;
        ${importTypePackage(pkg, typePkg)}
        import com.fasterxml.jackson.databind.ObjectMapper;
        import com.fasterxml.jackson.core.JsonProcessingException;
        
        /**
         * Parser/formatter connector serializer for ${pltfTypeName}.
         * Generated by: EASy-Producer.
         */
        public class ${className} implements Serializer<${pltfTypeName}> {
        
            ${generateParserAttribute()|e}
            ${generateFormatterAttribute()|e}
            private Map<String, Integer> mapping;
            
            public ${className}(String encoding, Map<String, Integer> mapping) {
                this.mapping = mapping;
                ${generateInitParser(className)|e}
                ${generateInitFormatter(className)|e}
            }
        
            @Override             
            public ${pltfTypeName} from(byte[] data) throws IOException {
                ${generateParserFrom("${imTypeName}${add}", "${pltfTypeName}")}
            }

            @Override    
            public byte[] to(${pltfTypeName} source) throws IOException {
                ${generateFormatterTo("${imTypeName}${add}", "${pltfTypeName}")}
            }

            @Override
            public ${pltfTypeName} clone(${pltfTypeName} origin) throws IOException {
                ${generateClone(pltfType, pltfTypeName, add)}
            }

            @Override
            public Class<${pltfTypeName}> getType() {
                return ${pltfTypeName}.class;
            }
        
        }
        '
    }
    
}
