import Basics;
import JavaBasics;
import ServiceBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaServiceInterface(Configuration config, FileArtifact target, ServiceBase service, String pkg) extends ServiceBasics {

    // something in the auto-formatting goes crazy here. Resorting to individual VIL context expressions :/
    
    // called via produceForInputTypes/produceForOutputTypes
    def produceAsyncProcessorBody(IOType type) {
        String t = toTypeName(type);
        '/**'
        ' * Processes a data item of type "${t}" asynchronously. Use the respective ingestor for the return'
        ' * type to pass back the result of processing.'
        ' *'
        ' * @param data the data item to be processed'
        ' */'
        'public void process${t.firstToUpperCase()}(${t} data);'
    }
    
    // called via produceForInputTypes/produceForOutputTypes
    def produceSyncProcessorBody(IOType returnType, IOType dataType) {
        String r = toTypeName(returnType);
        String t = toTypeName(dataType);
        '/**'
        ' * Processes/transforms a data item of type "${t}" synchronously.'
        ' *'
        ' * @param data the data item to be processed'
        ' * @return the result of processing'
        ' */'
        'public ${r} transform${t.firstToUpperCase()}(${t} data);'
    }
    
    // called via produceForInputTypes/produceForOutputTypes
    def produceIngestorBody(IOType type) {
        String t = toTypeName(type);
        '/**'
        ' * Attaches a return value ingestor for asynchronous processing.'
        ' *'
        ' * @param ingestor the ingestor instance'
        ' */'
        'public void attach${t.firstToUpperCase()}Ingestor(DataIngestor<${t}> ingestor);'
    }
    
    // called via produceForInputTypes/produceForOutputTypes
    def produceProducerBody(IOType type) {
        String t = toTypeName(type);
        '/**'
        ' * Synchronous source method, called to produce data items of type "${t}".'
        ' *'
        ' * @return the data value to be ingested'
        ' */'
        'public ${t} produce${t.firstToUpperCase()}();'
    }
    
    def memberIdConsts(ServiceBase service) {
        ''
    }

    def memberIdConsts(ServiceFamily family) {
        for (Service s: family.members) {
            'public static final String MEMBER_${asIdentifier(s.id).toUpperCase()} = "${s.id}";'
        }
    }
    
    def main(Configuration config, FileArtifact target, ServiceBase service, String pkg) {
        String clsName = asTypeName(service.name);
        'package ${pkg};
        
        import de.iip_ecosphere.platform.services.environment.*;
        import iip.datatypes.*;

        /**
         * IIP-Ecosphere service interface for \'${service.name}\'.
         * Generated by: EASy-Producer.
         */
        public interface ${clsName}Interface extends Service {

            public static final String SERVICE_ID = "${service.id}";
            ${memberIdConsts(service)|e}
        
            ${produceForInputTypes(service)}
            ${produceForOutputTypes(service)}
            
        }'
    }
    
}
