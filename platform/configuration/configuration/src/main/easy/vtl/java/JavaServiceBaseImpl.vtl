import Basics;
import JavaBasics;
import ServiceBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaServiceBaseImpl(Configuration config, FileArtifact target, ServiceBase service, String pkg) extends ServiceBasics {

    setOf(String) regs = {};
    setOf(String) ingestorTypes = {};

    def String attributeName(Parameter p) {
        p.name.firstToLower();
    }
    
    def String attributeMethodSuffix(Parameter p) {
        p.name.firstToUpper();
    }
    
    // ---------------------------------- configurers -------------------------
    
    def registerParameter(Parameter p, String cls, String typeTranslator) {
        String suffix = attributeMethodSuffix(p);
        String sysProp = getStringValueSafe(p.systemProperty, "");
        if (sysProp <> "") {
            sysProp = ', "${sysProp}"';
        }
        regs.add('AbstractService.addConfigurer(paramConfigurers, "${p.name}", ${cls}, ${typeTranslator}, v -> setParameter${suffix}(v), () -> getParameter${suffix}()${sysProp});');
    }

    def produceRegisterParameterConfigurers() {
        for(String s : regs) {
            '${s}'
        }
    }
    
    // ---------------------------------- attributes ----------------------------

    // called via produceForParameterAttributes(service)
    def produceParameterAttribute(StringParameter p) {
        registerParameter(p, "String.class", "TypeTranslators.JSON_STRING");
        'private String ${attributeName(p)} = "${p.defaultValue}";'
    }

    // called via produceForParameterAttributes(service)
    def produceParameterAttribute(IntegerParameter p) {
        registerParameter(p, "Integer.class", "TypeTranslators.INTEGER");
        'private int ${attributeName(p)} = ${p.defaultValue};'
    }

    // called via produceForParameterAttributes(service)
    def produceParameterAttribute(LongParameter p) {
        registerParameter(p, "Long.class", "TypeTranslators.LONG");
        'private long ${attributeName(p)} = ${p.defaultValue};'
    }

    // called via produceForParameterAttributes(service)
    def produceParameterAttribute(BooleanParameter p) {
        registerParameter(p, "Boolean.class", "TypeTranslators.BOOLEAN");
        'private boolean ${attributeName(p)} = ${p.defaultValue};'
    }

    // called via produceForParameterAttributes(service)
    def produceParameterAttribute(RealParameter p) {
        registerParameter(p, "Double.class", "TypeTranslators.DOUBLE");
        'private double ${attributeName(p)} = ${p.defaultValue};'
    }
    
    def produceIngestorBody(IOType type) {
        ingestorTypes.add(toTypeName(type));
        ''
    }

    def produceIngestorAttributes() {
         for (String t : ingestorTypes->sortedBy(n|n)) {
             'private List<DataIngestor<$t>> ${t.firstToLowerCase()}Ingestors = new ArrayList<>();'
         }
    }

    def producerIngestors() {
        for (String t : ingestorTypes->sortedBy(n|n)) {
            '@Override
            public void attach${t.firstToUpperCase()}Ingestor(DataIngestor<${t}> ingestor) {
                if (ingestor != null) {
                    ${t.firstToLowerCase()}Ingestors.add(ingestor);
                }
            }

            /**
            * Returns whether there are registered ${t} ingestors.
            *
            * @return {@code true} if there are ${t} ingestors, {@code false} else
            */
            protected boolean has${t.firstToUpperCase()}Ingestor() {
                return ${t.firstToLowerCase()}Ingestors.size() > 0;
            }

            /**
            * Returns the number of registered ${t} ingestors.
            *
            * @return the number of ${t} ingestors
            */
            protected int has${t.firstToUpperCase()}IngestorCount() {
                return ${t.firstToLowerCase()}Ingestors.size();
            }
            
            /**
            * Sends {@code data} to all registered ${t} ingestors.
            *
            * @param data the data to be sent
            */
            protected void ingest${t.firstToUpperCase()}(${t} data) {
                for (int i = 0; i < ${t.firstToLowerCase()}Ingestors.size(); i++) {
                    ${t.firstToLowerCase()}Ingestors.get(i).ingest(data);
                }
            }\n'
        }
    }
    
    // ---------------------------------- accessors ----------------------------
    
    def produceAccessors(Parameter p, String type) {
        '/**
        * Changes the service parameter "${p.name}".
        *
        * @param ${attributeName(p)} the parameter value
        * @throws ExecutionException if setting the value fails, e.g., as the service is in the wrong state such as 
        *    startup vs. runtime
        */
        public void setParameter${attributeMethodSuffix(p)}(${type} ${attributeName(p)}) throws ExecutionException {
            this.${attributeName(p)} = ${attributeName(p)};
        }'
        '/**
        * Returns the service parameter "${p.name}".
        *
        * @return the value of the parameter
        */
        public ${type} getParameter${attributeMethodSuffix(p)}() {
            return this.${attributeName(p)};
        }'
    }
    
    // called via produceForParameter(service)
    def produceParameterBody(StringParameter p) {
        '${produceAccessors(p, "String")}'
    }

    // called via produceForParameter(service)
    def produceParameterBody(IntegerParameter p) {
        '${produceAccessors(p, "int")}'
    }

    // called via produceForParameter(service)
    def produceParameterBody(LongParameter p) {
        '${produceAccessors(p, "long")}'
    }

    // called via produceForParameter(service)
    def produceParameterBody(BooleanParameter p) {
        '${produceAccessors(p, "boolean")}'
    }

    // called via produceForParameter(service)
    def produceParameterBody(RealParameter p) {
        '${produceAccessors(p, "double")}'
    }
    
    def main(Configuration config, FileArtifact target, ServiceBase service, String pkg) {
        String clsName = asTypeName(service.name);
        // produceForInputTypes/produceForOutputTypes shall not produce something rather than collect the ingestors
        
        '${produceForInputTypes(service)|e}
        ${produceForOutputTypes(service)|e}
        package ${pkg};
        
        import java.util.*;
        import java.util.concurrent.ExecutionException;
        import java.io.InputStream;
        import de.iip_ecosphere.platform.transport.serialization.TypeTranslators;
        import de.iip_ecosphere.platform.services.environment.*;
        import iip.datatypes.*;
        import iip.interfaces.*;

        /**
         * IIP-Ecosphere supporting service implementation for \'${service.name}\'.
         * Generated by: EASy-Producer.
         */
        public abstract class ${clsName}Impl extends DefaultServiceImpl implements ${clsName}Interface {\n

            ${produceForParameterAttributes(service)}
            ${produceIngestorAttributes()|e}
            private Map<String, ParameterConfigurer<?>> paramConfigurers = new HashMap<>();

            /**
             * Fallback constructor setting most fields to "empty" default values.
             * 
             * @param kind the service kind
             */
            protected ${clsName}Impl(ServiceKind kind) {
                super(kind);
                registerParameterConfigurers();
            }

            /**
             * Fallback constructor setting most fields to "empty" default values.
             * 
             * @param id the id of the service
             * @param kind the service kind
             */
            protected ${clsName}Impl(String id, ServiceKind kind) {
                super(id, kind);
                registerParameterConfigurers();
            }

            /**
            * Creates a service instance from YAML information.
            * 
            * @param yaml the service information as read from YAML
            */
            protected ${clsName}Impl(YamlService yaml) {
                super(yaml);
                registerParameterConfigurers();
            }
            
            /**
            * Creates a service instance from a service id and a YAML artifact.
            * 
            * @param serviceId the service id
            * @param ymlFile the YML file containing the YAML artifact with the service descriptor
            */
            protected ${clsName}Impl(String serviceId, InputStream ymlFile) {
                super(serviceId, ymlFile);
                registerParameterConfigurers();
            }
            
            @Override
            public ParameterConfigurer<?> getParameterConfigurer(String paramName) {
                return paramConfigurers.get(paramName);
            }
            
            @Override
            public Set<String> getParameterNames() {
                return paramConfigurers.keySet();
            }
            
            /**
            * Registers the configurers.
            */
            protected void registerParameterConfigurers() {
                ${produceRegisterParameterConfigurers()}
            }
        
            ${produceForParameter(service)|e}
            
            ${producerIngestors()|e}
            
        }'
    }
    
}
