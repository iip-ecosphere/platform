import JavaBasics;
import MeshBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaMeshElementTemplate(Configuration config, FileArtifact target, MeshElement elt, String pkg, String name) extends MeshBasics {

    // called via MeshBasics.generateDataMethods for MeshSource
    def generateSourceMethod(MeshSource src, String type, String methodSuffix, String methodSuffixWithServiceId) {
        if (!src.impl.asynchronous) {
        '@Override
        public ${type} ${methodSuffix}() {
            return null;
        }'
        }
    } 

    // called via MeshBasics.generateDataMethods for asynch MeshProcessor
    def generateAsyncProcessorInMethod(MeshProcessor proc, String type, String methodSuffix, String methodSuffixWithServiceId) {
        '@Override
        public void ${methodSuffix}(${type} data) {
        }'
    } 

    // called via MeshBasics.generateDataMethods for synch MeshProcessor
    def generateSyncProcessorMethod(MeshProcessor proc, String inType, String outType, String methodSuffix, String methodSuffixWithServiceId) {
        '@Override
        public ${outType} ${methodSuffix}(${inType} data) {
            return null;
        }'
    } 
    
    // called via MeshBasics.generateDataMethods for MeshSink
    def generateSinkMethod(MeshSink snk, String type, String methodSuffix, String methodSuffixWithServiceId) {
        '@Override
        public void ${methodSuffix}(${type} data) {
        }'
    } 

    def main(Configuration config, FileArtifact target, MeshElement elt, String pkg, String name) {
        String clsName = asTypeName(elt.name);
        'package ${pkg};
        
        import de.iip_ecosphere.platform.services.environment.*;
        import iip.datatypes.*;
        import iip.impl.*;

        /**
         * Service implementation for net node \'${elt.name}\'.
         * Generated by: EASy-Producer.
         */
        public class ${name} extends ${clsName}Impl {
            
            ${generateDataMethods(elt, true)}
        }'
    }
    
}
