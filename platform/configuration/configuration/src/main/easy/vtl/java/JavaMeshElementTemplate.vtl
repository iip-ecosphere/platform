import JavaBasics;
import MeshBasics;
import ServiceBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaMeshElementTemplate(Configuration config, FileArtifact target, MeshElement elt, String pkg, String name) extends ServiceBasics {
    
    String typeAdd = "";
    
    // called via produceForInputTypes/produceForOutputTypes
    def produceAsyncProcessorBody(IOType type) {
        String t = toTypeName(type);
        '@Override
        public void process${t.firstToUpperCase()}(${t} data) {
            // TODO call ingest<Type>(instance)
        }'
    }
    
    // called via produceForInputTypes/produceForOutputTypes
    def produceSyncProcessorBody(IOType returnType, IOType dataType) {
        String r = toTypeName(returnType);
        String t = toTypeName(dataType);
        '@Override
        public ${r} transform${t.firstToUpperCase()}(${t} data) {
            ${r} result = new ${r}${typeAdd}();
            // TODO add your code here
            return result;
        }'
    }
    
    // called via produceForInputTypes/produceForOutputTypes
    def produceProducerBody(IOType type) {
        String t = toTypeName(type);
        '@Override
        public ${t} produce${t.firstToUpperCase()}() {
            ${t} result = new ${t}${typeAdd}();
            // TODO add your code here
            return result;
        }'
    }
    

    def main(Configuration config, FileArtifact target, MeshElement elt, String pkg, String name) {
        String clsName = asTypeName(elt.name);
        IIPEcosphere cfg = config;
        if (cfg.sharedInterfaces) {
            typeAdd = "Impl";
        } else {
            typeAdd = "";
        }
        'package ${pkg};

        import java.io.*;        
        import de.iip_ecosphere.platform.services.environment.*;
        import iip.datatypes.*;
        import iip.impl.*;

        /**
         * Service implementation for net node \'${elt.name}\'.
         * Generated by: EASy-Producer.
         */
        public class ${name} extends ${clsName}Impl {

            /**
            * Fallback constructor, also used for testing main program.
            */
            public ${name}() {
                super(${getJavaServiceKind(elt.impl.kind)});
            }

            /**
            * Creates a service instance from a service id and a YAML artifact.
            * 
            * @param serviceId the service id
            * @param ymlFile the YML file containing the YAML artifact with the service descriptor
            */
            public ${name}(String serviceId, InputStream ymlFile) {
                super(serviceId, ymlFile);
            }

            ${produceForInputTypes(elt.impl)}
            
            ${produceForOutputTypes(elt.impl)}
            
            
        }'
    }
    
}
