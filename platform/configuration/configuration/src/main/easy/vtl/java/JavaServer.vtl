import JavaBasics;
import ServiceBasics;
import MeshBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaServer(Configuration config, JavaCodeArtifact target, Server server, String pkg) {
    
    @DispatchBasis
    def generateConstructor(Server server, JavaCodeMethod meth) {
    }

    @DispatchCase
    def generateConstructor(PythonServer server, JavaCodeMethod meth) {
        String clsName = asTypeName(server.id);
        meth.addImport("de.iip_ecosphere.platform.support.resources.ResourceLoader");
        meth.addVariable("java.io.InputStream", "desc", 
            'ResourceLoader.getResourceAsStream(${clsName}Server.class, "${getDeploymentDescriptorPath()}")');
        meth.addVariable("de.iip_ecosphere.platform.services.environment.YamlArtifact", "artifact", 
            'YamlArtifact.readFromYamlSafe(desc)');
        meth.addVariable("de.iip_ecosphere.platform.services.environment.YamlServer", "yServer", 
            'artifact.getServer("${server.id}")');
        meth.addIf("null == yServer")
            .addThrow('new ExecutionException("No such server known: ${server.id}", null)');
        meth.addAssignment("service", 'new PythonAsyncProcessService(yServer.toService())');
        produceParameterConfigurerCall(server.parameter, meth);
        codeAddShutdownHook(meth, "{ stop(true); }");
    }    
    
    @DispatchBasis
    def generateAttributes(Server server, JavaCodeClass cls) {
        ''
    }

    @DispatchCase
    def generateAttributes(PythonServer server, JavaCodeClass cls) {
        cls.addAttribute("de.iip_ecosphere.platform.services.environment.PythonAsyncProcessService", "service")
            .setPrivate();
    }
    
    def codeSetState(JavaCodeBlock meth, String state) {
        meth.addCall("service.setState", JavaCodeImportScope.NONE)
            .addConstantArgument("de.iip_ecosphere.platform.services.environment.ServiceState.${state}");
    }
     
    def main(Configuration config, JavaCodeArtifact target, Server server, String pkg) {
        String clsName = asTypeName(server.id);
        JavaCodeClass mainCls = codeCreateClass(target, pkg, "${clsName}Server", "Service-based server '${server.id}'");
        mainCls.addInterface("de.iip_ecosphere.platform.support.Server");
        generateAttributes(server, mainCls);
        
        JavaCodeMethod meth = mainCls.addConstructor("Creates a server instance.");
        meth.addException("java.util.concurrent.ExecutionException", "if the server cannot be created");
        generateConstructor(server, meth);
            
        meth = mainCls.addMethod("de.iip_ecosphere.platform.support.Server", "start");
        meth.addCall("de.iip_ecosphere.platform.services.environment.Starter.mapService", JavaCodeImportScope.CLASS)
            .addArgument("service");
        meth.addOverrideAnnotation();
        JavaCodeTryBlock try = meth.addTry();
        codeSetState(try, "STARTING");
        codeCatchExecutionExceptionLogError(try, "Starting server service ${server.id}: {}");
        meth.addReturn("this");

        meth = mainCls.addMethod("stop");
        meth.addOverrideAnnotation();
        meth.addParameter("boolean", "dispose");
        try = meth.addTry();
        codeSetState(try, "STOPPING");
        codeCatchExecutionExceptionLogError(try, "Stopping server service ${server.id}: {}");
    }
    
}
