import JavaBasics;
import ServiceBasics;
import MeshBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaServer(Configuration config, FileArtifact target, Server server, String pkg) {

    def generateConstructor(Server server) {
    }

    def generateConstructor(PythonServer server) {
        String clsName = asTypeName(server.id);
        'InputStream desc = ResourceLoader.getResourceAsStream(${clsName}Server.class, "${getDeploymentDescriptorPath()}");
        YamlArtifact artifact = YamlArtifact.readFromYamlSafe(desc);
        YamlServer yServer = artifact.getServer("${server.id}");
        if (null == yServer) {
            throw new ExecutionException("No such server known: ${server.id}", null);
        }
        
        service = new PythonAsyncProcessService(yServer.toService());
        service.addParameterConfigurer(c -> {
            ${produceParametersReg(server.parameter)}
        });
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            stop(true);
        }));
        '
    }
    
    def generateAttributes(Server server) {
        ''
    }

    def generateAttributes(PythonServer server) {
        'private PythonAsyncProcessService service;'
    }

    def generateImports(Server server) {
        ''
    }

    def generateImports(PythonServer server) {
        ''
    }
    
    def main(Configuration config, FileArtifact target, Server server, String pkg) {
        String clsName = asTypeName(server.id);
        'package ${pkg};
        
        import java.io.*;
        import java.util.concurrent.ExecutionException;

        import org.slf4j.LoggerFactory;

        import de.iip_ecosphere.platform.support.Server;
        import de.iip_ecosphere.platform.support.resources.ResourceLoader;
        import de.iip_ecosphere.platform.services.environment.*;
        import de.iip_ecosphere.platform.transport.serialization.TypeTranslators;
        ${generateImports(server)}

        /**
         * IIP-Ecosphere server \'${server.id}\'.
         * Generated by: EASy-Producer.
         */
        public class ${clsName}Server implements Server {

            ${generateAttributes(server)}
            
            /**
             * Creates a server instance.
             * 
             * @throws ExecutionException if the server cannot be created
             */
            public ${clsName}Server() throws ExecutionException {
                ${generateConstructor(server)}
            }
            
            @Override
            public Server start() {
                Starter.mapService(service);
                try {
                    service.setState(ServiceState.STARTING);
                } catch (ExecutionException e) {
                    LoggerFactory.getLogger(getClass()).error("Starting server service ${server.id}: {}", 
                        e.getMessage());
                }
                return this;
            }
            
            @Override
            public void stop(boolean dispose) {
                try {
                    service.setState(ServiceState.STOPPING);
                } catch (ExecutionException e) {
                    LoggerFactory.getLogger(getClass()).error("Stopping server service ${server.id}: {}", 
                        e.getMessage());
                }
            }
            
        }'
    }
    
}
