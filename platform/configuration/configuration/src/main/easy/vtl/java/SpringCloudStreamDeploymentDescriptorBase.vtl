import Basics;
import JavaBasics;
import MavenBasics;
import JavaMapping;
import MeshBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template SpringCloudStreamDeploymentDescriptorBase(Configuration config, FileArtifact target, Application app, sequenceOf(MeshElement) elements) extends MeshBasics {

    Boolean returnType = false;
    Boolean inputType = false;

    def generateServices(sequenceOf(MeshElement) elements) {
        for (MeshElement elt: elements) {
            '${generateService(elt, elt.impl, true, "")}'
        }
    }
    
    def generateService(MeshElement elt, ServiceBase service, Boolean topLevel, String familyId) {
    }
    
    /*
    * Maps the configured protocol into the spring protocol binder configuration key.
    */
    def getProtocolKey() {
        IIPEcosphere cfg = config;
        switch (cfg.serviceProtocol.type) {
            ProtocolType::Mqttv3 : "mqtt",
            ProtocolType::Mqttv5 : "mqtt",
            default: "amqp"
        }
    }

    /*
    * Maps the given service protocol into the spring protocol binder configuration key.
    */
    def getProtocolKey(ServiceProtocol prot) {
    }

    def generateService(MeshElement elt, ServiceFamily family, Boolean topLevel, String familyId) {
        String famId = family.id;
        '- id: ${family.id}
          applicationId: ${app.id}
          name: ${family.name}
          description: ${family.description}
          version: 0.0.1
          kind: ${family.kind}
          topLevel: ${topLevel}
          cmdArg: 
            - --iip.port=\\${port}
            - --iip.protocol=\\${protocol}
            ${generateAppOpt()|e}
          relations:
            - endpoint:
                portArg: --transport.port=\\${port} --binders.properties.external.environment.${getProtocolKey()}.port=\\${port} --spring.cloud.stream.binders.properties.external.environment.${getProtocolKey()}.port=\\${port}
                hostArg: --transport.host=\\${host} --binders.properties.external.environment.${getProtocolKey()}.host=\\${host} --spring.cloud.stream.binders.properties.external.environment.${getProtocolKey()}.host=\\${host}
            ${generateRelations(elt)|e}
          ${generateEnsemble(elt, family, familyId)|e}'
        for (Service m : family.members) {
            '${generateService(elt, m, false, famId)}'
        }
    }

    def generateService(MeshElement elt, Service service, Boolean topLevel, String familyId) {
        '- id: ${service.id}
          applicationId: ${app.id}
          name: ${service.name}
          version: ${service.ver}
          description: ${service.description}
          deployable: ${service.deployable}
          ${generateService(service)|e}
          kind: ${service.kind}
          topLevel: ${topLevel}
          cmdArg: 
            - --iip.port=\\${port}
            - --iip.protocol=\\${protocol}
            ${generateAppOpt()|e}
          relations:
            - endpoint:
                portArg: --transport.port=\\${port} --binders.properties.external.environment.${getProtocolKey()}.port=\\${port} --spring.cloud.stream.binders.properties.external.environment.${getProtocolKey()}.port=\\${port}
                hostArg: --transport.host=\\${host} --binders.properties.external.environment.${getProtocolKey()}.host=\\${host} --spring.cloud.stream.binders.properties.external.environment.${getProtocolKey()}.host=\\${host}
            ${generateRelations(elt)|e}
          ${generateMemLimitEntry(service)|e}
          ${generateProcess(elt, service)|e}
          ${generateEnsemble(elt, service, familyId)|e}'
    }
    
    // dispatch basis
    def generateService(ServiceBase service) {
        if (isDefined(service.server)) {
            'netMgtKey: ${service.server.id}'
        } else {
            ''
        }
    }
        
    def generateEnsemble(MeshElement elt, ServiceBase service, String familyId) {
       if (familyId <> "") {
           'ensembleWith: ${familyId}'
       } else if (elt.ensemble <> null) {
           'ensembleWith: ${elt.ensemble.impl.id}'
       } else {
           ''
       }
    }
    
    def generateProcess(MeshElement elt, Service service) {
        ''
    }

    def generateProcess(MeshElement elt, PythonService service) {
        String id = toFolderName(service.id);
        'process: 
            homePath: \\${tmp}/${id}/python
            ${pythonExecutable(service)|e}
            executablePath: \\${tmp}/${id}/python
            artifacts:
              - /python_${id}.zip
              ${genAdditionalArtifacts(service.artifacts)|e}
            ${locationKey(service)|e}
            ${pythonExecArgs(service)|e}
            cmdArg:
              - --mode
              - console
              - --modulesPath
              - \\${tmp}/${id}/python
              - --servicesPackage
              - ${pythonServicesPackageName(service)}
              - --sid
              - ${service.id}
              ${pythonDataArg(service)|e}
            started: true'
    }
    
    def genAdditionalArtifacts(setOf(String) artifacts) {
        if (artifacts.size() > 0) {
            for (String a : artifacts) {
                if (!a.startsWith("/")) {
                    a = "/" + a;
                }
                '- ${a}'
            }
        }
    }


    def locationKey(PythonService service) {
        String condaEnv = getStringValueSafe(service.condaEnv, "");
        if (condaEnv.trim().length() > 0) {
            'locationKey: CONDA'
        } else {
            ''
        }
    }
    
    def pythonExecArgs(PythonService service) {
        String condaEnv = getStringValueSafe(service.condaEnv, "");
        if (condaEnv.trim().length() > 0) {
            'execArg:
              - run
              - -n
              - ${condaEnv}'
        } else {
            ''
        }
    }
    
    def pythonServicesPackageName(PythonService service) {
        if (service.servicesPackageName <> null) {
            '${service.servicesPackageName}'
        } else {
            'services'
        }
    }
    
    def pythonDataArg(PythonService service) {
        if (service.integrationMode == PythonIntegrationMode::console_oneShot) {
            "--data"
        } else {
            ""
        }
    }
    
    def pythonExecutable(PythonService service) {
        if (isDefined(service.entrypointModule) and service.entrypointModule.length() > 0) {
            "executable: ${service.entrypointModule}"
        } else {
            ""
        }
    }
    
    def generateAppOpt() {
        '${generateCmdArg(getStringValueSafe(app.cmdArg, ""), "")}'
    }

    def generateCmdArg(String cmdArg, String key) {
        if (cmdArg.length() > 0) { // EASY-bug
            String indent = "";
            if (key.length() > 0) {
                indent = "  ";
                '${key}:'
            }
            sequenceOf(String) tmp = cmdArg.split(",");
            for (String a: tmp) {
                "${indent}- ${a}"
            }
        }
    }
    
    def generateMemLimitEntry(Service service) {
        if (service.memLimit > 0) {
            "memory: ${service.memLimit}"
        } else {
            "";
        }
    }
    
    def generateMemLimitOpt(Service service) {
        String opt = toJvmMemLimitOpt(service.memLimit);
        if (opt.length() > 0) {
            "- ${opt}"
        } else {
            "";
        }
    }
    
    def generateRelations(MeshElement elt) {
    }

    def generateRelations(MeshSource elt) {
        generateRelations(elt, elt.next);
    }

    def generateRelations(MeshInnerElement elt) {
        generateRelations(elt, elt.next);
    }
    
    def String substNewlines(String str, String subst) {
        str.replace("\r", "").replace("\n", subst);
    }
    
    def String trimTrailingComma(String str) {
        if (str.length() > 1 and str.endsWith(",")) {
            str = str.substring(0, str.length() - 1);
        } 
        if (str.length() > 1 and str.startsWith(",")) {
            str = str.substring(1);
        } 
        str;
    }

    def generateRelations(MeshElement elt, setOf(MeshConnector) conns) {
        String res = "";
        for (MeshConnector c: nextConnectors(elt)) {
            MeshElement target = c.next;
            res = appendNL(res, generateConnections(elt, target, "OUT", "-out-0", target.impl.id));
        }
        for (MeshElement e: elements) {
            if (e <> elt) {
                res = appendNL(res, generateConnections(e, elt, "IN", "-in-0", e.impl.id));
            }
        }
        '${res}'
    }
    
    // -> basics after impact check
    def String appendNL(String text1, String text2) {
        if (text1.length() > 0) {
            if (text2.length() > 0) {
                text1 + "\n" + text2;
            } else {
                text1;
            }
        } else {
            text2;
        }
    }
    
    def generateConnections(MeshElement start, MeshElement end, String dir, String connSuffix, String service) {
        String res = "";
        for (IOType out : start.impl.output) {
            for (IOType in: end.impl.input) {
                if (in.type == out.type and (
                    nextConnectors(start)->collect(c|c.next).includes(end) or // configured forward conn 
                    (not(in.forward) and not(out.forward)))) { // configured backward conn
                    res = appendNL(res, generateConnection(start, end, out, dir, connSuffix, service));
                 }
             }
         }
         if (dir == "IN") { // backwards
             for (IOType in : start.impl.input) {
                for (IOType out: end.impl.output) {
                    if (in.type == out.type and (not(in.forward) and not(out.forward))) {
                        res = appendNL(res, generateConnection(end, start, out, "OUT", "-out-0", service));
                    }
                }
             }
         }
         res;
    }
    
    def Boolean isAsyncSource(MeshElement elt) {
        false;
    }
    
    def Boolean isAsyncSource(MeshSource elt) {
        elt.impl.asynchronous == true and elt.impl.isKindOf(Connector);
    }
    
    def generateConnection(MeshElement start, MeshElement end, IOType type, String dir, String connSuffix, String service) {
        String res = "";
        String typeName = toTypeName(type.type);
        String conn = getMethodSuffixId(getMethodSuffix(end, typeName, getOutName(end, typeName)), end);
        String func = conn;
        if (dir == "OUT") {
            if (isAsyncSource(start)) {
                func = "";
            } else {
                func = getMethodSuffixId(getMethodSuffix(start, typeName, getOutName(start, typeName)), start);
            }
        } else {
            func = conn;
        }
        if (not(type.forward)) {
            if (conn.startsWith("create")) {
                conn = "process" + conn.substring(6);
            }
        }
        res = appendNL(res, 
          "- channel: ${conn}${connSuffix}\n" +
          "  direction: ${dir}\n" +
          "  id: ${start.impl.id} -> ${end.impl.id}\n" +
          "  type: ${typeName}\n" + 
          "  function: ${func}");
        if (service <> "") {
            res = res + 
            "\n  service: ${service}";
        }
        res;
    }

    // -------------------------- mesh basics refinement, extract stream names ---------------------------------

    // TODO check removal
    def generateSelect(String inType, String outType, String methodSuffixWithServiceId) {
        if (returnType) {
            if (inputType) {
                inType + ",";
            } else {
                outType + ",";
            }
        } else {
            methodSuffixWithServiceId + ",";
        }
    }

    // TODO check removal
    def generateSourceMethod(MeshSource src, String type, String methodSuffix, String methodSuffixWithServiceId) {
        generateSelect(type, type, methodSuffixWithServiceId);
    } 

    // TODO check removal
    def generateAsyncProcessorInMethod(MeshProcessor proc, String type, String methodSuffix, String methodSuffixWithServiceId) {
        generateSelect(type, type, methodSuffixWithServiceId);
    } 

    // TODO check removal
    def generateSyncProcessorMethod(MeshProcessor proc, String inType, String outType, String methodSuffix, String methodSuffixWithServiceId) {
        generateSelect(inType, outType, methodSuffixWithServiceId);
    } 
    
    // TODO check removal
    def generateSinkMethod(MeshSink sink, String type, String methodSuffix, String methodSuffixWithServiceId) {
        generateSelect(type, type, methodSuffixWithServiceId);
    } 
    
    // ----------------------------------- types -----------------------------------
    
    def generateTypes(sequenceOf(MeshElement) elements) {
        setOf(DataType) types = {};
        for (MeshElement elt: elements) {
            collectTypes(elt, types);
        }
        if (types.size() > 0) {
            'types:
                ${generateTypes(types)}'
        }
    }
    
    @DispatchBasis
    def collectRecordTypes(DataType type, setOf(RecordType) types) {
    }
    
    @DispatchCase
    def collectRecordTypes(RecordType type, setOf(RecordType) types) {
        if (not(types.includes(type))) {
            types.add(type);
            for (Field f: type.fields) {
                collectRecordTypes(f.type, types);                
            }
        }
    }

    @DispatchCase
    def collectRecordTypes(ArrayType type, setOf(RecordType) types) {
        collectRecordTypes(type.type, types);
    }
    
    def generateTypes(setOf(DataType) types) {
        setOf(RecordType) recTypes = {};
        for (DataType t : types) {
            collectRecordTypes(t, recTypes);
        }
        for (RecordType type: recTypes->sortedBy(t|t.name)) {
            '${generateType(type)}'
        }
    }
    
    def generateType(DataType type) {
        ''
    }

    def generateType(RecordType type) {
        '- name: ${toTypeName(type)}'
        if (type.fields.size() > 0) {
            '  fields:
                ${generateFields(type.fields)}'
        }
    }
    
    def generateFields(Fields fields) {
        for (Field f: fields) {
            '- name: ${f.name}
              type: ${toTypeName(f.type)}'
        }
    }
    
    def collectTypes(MeshElement elt, setOf(DataType) types) {
        collectServiceTypes(elt.impl, types);
    }

    // just take everything, input/output may be backward/async also for sources, sinks
    def collectServiceTypes(ServiceBase base, setOf(DataType) types) {
        collectIOTypes(base.input, types);
        collectIOTypes(base.output, types);
    }
    
    def collectIOTypes(sequenceOf(IOType) declTypes, setOf(DataType) types) {
        for (IOType t: declTypes) {
            collectType(t.type, types);
        }        
    }
    
    def collectType(DataType type, setOf(DataType) types) {
    } 

    def collectType(RecordType type, setOf(DataType) types) {
        types.add(type);
        for (Field f: type.fields) {
            types.add(f.type);
        }
    }
    
    def generateAppSetup(ServiceBase service) {
        '\n'
    }

    def generateAppSetup(Service service) {
        if (isDefined(service.nameplateInfo) and service.nameplateInfo <> null) {
            generateAppSetup(service.id, service.name, service.ver, service.nameplateInfo, indent=2);
        } else {
            ''
        }
    } 
    
    def generateAppSetup(Application app) {
        if (isDefined(app.nameplateInfo) and app.nameplateInfo <> null) {
            generateAppSetup(app.id, app.name, app.ver, app.nameplateInfo);
        } else {
            ''
        }
    } 
    
    def generateAppSetup(String id, String name, String ver, NameplateInfo p, String prefix = "", Integer indent = 0) {
        'application:
          id: ${id}
          name: ${name}
          version: ${ver}
          ${generateNameplateInfoSetup(p, prefix, indent)|e}'
    }
    
    def generateNameplateInfoSetup(NameplateInfo p, String prefix, Integer indent) {
        if (p <> null) {
            Manufacturer m = p.manufacturer;
            ManufacturerAddress ad = m.address;
            '${prefix}manufacturerName: ${m.manufacturerName}
            manufacturerProductDesignation: ${p.manufacturerProductDesignation}
            manufacturerLogo: ${m.manufacturerLogo}
            productImage: ${p.productImage}
            address:
              department: ${ad.department}
              street: ${ad.street}
              zipCode: ${ad.zipCode}
              cityTown: ${ad.cityTown}' | indent;
        } else {
            ''
        }
    }

    def generateServers(Application app) {
        if (isDefined(app.servers) and app.servers.size() > 0) {
            'servers:
              ${generateServersImpl(app.servers)}'
        }
    }
    
    def generateServersImpl(setOf(Server) servers) {
        // sorted by for deterministic testing
        for (Server s : servers->sortedBy(t|t.id)) {
            '- id: ${s.id}
              version: ${s.ver}
              description: ${s.description}
              transportChannel: ${getStringValueSafe(s.transportChannel, "")}
              host: ${s.host}
              port: ${s.port}
              cls: ${getServerCls(s)}
              started: ${s.running}
              asProcess: ${asProcess(s)}
              ${generateServer(s)|e}'
        }    
    }

    @DispatchBasis
    def asProcess(Server server) {
        'true'
    }

    @DispatchCase
    def asProcess(PythonServer server) {
        'false' // we wrap this anyway into a Python process, so a Java process shall not be needed
    }

    // dispatch basis
    def generateServer(Server server) {
        ''
    }

    def generateServer(JavaServer server) {
        if (server.memLimit > 0) {
            "memory: ${server.memLimit}"
        }
        '${generateCmdArg(getStringValueSafe(server.cmdArg, ""), "cmdArg")}'
    }
    
    def generateServer(PythonServer server) {
        String clsName = asTypeName(server.id);
        String id = toFolderName(server.id);
        'artifacts:
          - /python_${id}.zip
          ${genAdditionalArtifacts(server.artifacts)|e}
        netMgtKey: ${server.id}
        cmdArg:
          - --mode
          - console
          - --modulesPath
          - \\${tmp}/python_${id}
          - --servicesPackage
          - ${pythonServicesPackageName(server)}
          - --sid
          - ${server.id}
        homePath: \\${tmp}/python_${id}
        executablePath: \\${tmp}/python_${id}'
    }
    
    def pythonServicesPackageName(PythonServer server) {
        if (server.servicesPackageName <> null) {
            '${server.servicesPackageName}'
        } else {
            'server'
        }
    }    
    
    def getServerCls(Server server) {
        "iip.server.${asTypeName(server.id)}Server"; // assumed: generation
    }

    // dispatch basis
    def getServerCls(JavaServer server) {
        server.class; // specified
    }

}
