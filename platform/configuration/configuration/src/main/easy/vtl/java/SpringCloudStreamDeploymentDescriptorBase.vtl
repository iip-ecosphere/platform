import Basics;
import JavaBasics;
import MavenBasics;
import JavaMapping;
import MeshBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template SpringCloudStreamDeploymentDescriptorBase(Configuration config, FileArtifact target, Application app, sequenceOf(MeshElement) elements) extends MeshBasics {

    Boolean returnType = false;
    Boolean inputType = false;

    def generateServices(sequenceOf(MeshElement) elements, YamlList list) {
        elements->forEach(MeshElement elt|generateService(elt, elt.impl, true, "", list));
    }
    
    def generateService(MeshElement elt, ServiceBase service, Boolean topLevel, String familyId, YamlList list) {
    }
    
    /*
    * Maps the configured protocol into the spring protocol binder configuration key.
    */
    def getProtocolKey() {
        IIPEcosphere cfg = config;
        switch (cfg.serviceProtocol.type) {
            ProtocolType::Mqttv3 : "mqtt",
            ProtocolType::Mqttv5 : "mqtt",
            default: "amqp"
        }
    }

    /*
    * Maps the given service protocol into the spring protocol binder configuration key.
    */
    def getProtocolKey(ServiceProtocol prot) {
    }
    
    def getEndpointCmdArgs(String kind, String varName) {
        String protocolKey = getProtocolKey();
        "--transport.${kind}=\\${${varName}} --binders.properties.external.environment.${protocolKey}.${kind}=\\${${varName}} --spring.cloud.stream.binders.properties.external.environment.${protocolKey}.${kind}=\\${${varName}}";
    }
    
    def generateCmdArgsEndpoint(YamlList rels) {
        YamlNode relsEndpoint = rels.addObject().addObject("endpoint");
        relsEndpoint.addValue("portArg", getEndpointCmdArgs("port", "port"));
        relsEndpoint.addValue("hostArg", getEndpointCmdArgs("host", "host"));
    }
    
    def generateService(MeshElement elt, ServiceFamily family, Boolean topLevel, String familyId, YamlList list) {
        YamlNode n = list.addObject();
        String famId = family.id;
        n.addValue("id", famId);
        n.addValue("applicationId", app.id);
        n.addValue("name", family.name);
        n.addValueNotEmpty("description", family.description); // default is ""
        n.addValue("version", "0.0.1"); // no version available?
        n.addValue("kind", family.kind);
        n.addValue("topLevel", topLevel);
        YamlList cmdArg = n.addList("cmdArg");
        cmdArg.addValue("--iip.port=\\${port}");
        cmdArg.addValue("--iip.protocol=\\${protocol}");
        generateAppOpt(cmdArg);
        YamlList rels = n.addList("relations");
        generateCmdArgsEndpoint(rels);
        generateRelations(elt, rels);
        generateEnsemble(elt, family, familyId, n);
        family.members->forEach(Service m|generateService(elt, m, false, famId, list));
    }

    def generateService(MeshElement elt, Service service, Boolean topLevel, String familyId, YamlList list) {
        YamlNode n = list.addObject();
        n.addValue("id", service.id);
        n.addValue("applicationId", app.id);
        n.addValue("name", service.name);
        n.addValue("version", service.ver);
        n.addValueNotEmpty("description", service.description); // default is ""
        n.addValue("deployable", service.deployable);
        generateService(service, n);
        n.addValue("kind", service.kind);
        n.addValue("topLevel", topLevel);
        YamlList cmdArg = n.addList("cmdArg");
        cmdArg.addValue("--iip.port=\\${port}");
        cmdArg.addValue("--iip.protocol=\\${protocol}");
        generateAppOpt(cmdArg);
        YamlList rels = n.addList("relations");
        generateCmdArgsEndpoint(rels);
        generateRelations(elt, rels);
        if (service.memLimit > 0) {
            n.addValue("memory", service.memLimit);
        }
        generateProcess(elt, service, n);
        generateEnsemble(elt, service, familyId, n);
    }
    
    @DispatchBasis
    def generateService(ServiceBase service, YamlNode node) {
        if (isDefined(service.server)) {
            node.addValue("netMgtKey", service.server.id);
        }
    }
        
    def generateEnsemble(MeshElement elt, ServiceBase service, String familyId, YamlNode node) {
       if (familyId <> "") {
           node.addValue("ensembleWith", familyId);
       } else if (elt.ensemble <> null) {
           node.addValue("ensembleWith", elt.ensemble.impl.id);
       }
    }
    
    def YamlNode addProcess(YamlNode node, String executablePath, String started, String homePath = "", sequenceOf(String) artifacts = {}, sequenceOf(String) cmdArg = {}, Boolean addTopNode = true) {
        YamlNode p = node;
        if (addTopNode) {
            p = node.addObject("process");
        }
        p.addListNotEmpty("artifacts", artifacts);
        if (homePath.length() == 0) {
            homePath = executablePath;
        } 
        p.addValue("homePath", homePath);        
        p.addValue("executablePath", executablePath);
        p.addListNotEmpty("cmdArg", cmdArg);
        if (started <> "") {
            p.addValueNotEmpty("started", started == "true");
        }
        p;
    }
    
    def generateProcess(MeshElement elt, Service service, YamlNode node) {
    }

    def generateProcess(MeshElement elt, PythonService service, YamlNode node) {
        String id = toFolderName(service.id);
        sequenceOf(String) artifacts = createArtifacts("/python_${id}.zip");
        genAdditionalArtifacts(service.artifacts, artifacts);
        sequenceOf(String) cmdArg = createPythonCmdArg(service.id, pythonServicesPackageName(service), "\\${tmp}/${id}/python");
        if (service.integrationMode == PythonIntegrationMode::console_oneShot) {
            cmdArg.add("--data");
        }
        YamlNode p = addProcess(node, "\\${tmp}/${id}/python", "true", artifacts=artifacts, cmdArg=cmdArg);
        if (isDefined(service.entrypointModule) and service.entrypointModule.length() > 0) {
            p.addValue("executable", service.entrypointModule);
        }
        String condaEnv = getStringValueSafe(service.condaEnv, "");
        if (condaEnv.trim().length() > 0) {
            p.addValue("locationKey", "CONDA");
            sequenceOf(String) execArg = {};
            execArg.add("run");
            addCmdArg("-n", condaEnv, execArg);
            p.addList("execArg", execArg);
        }
    }
    
    def sequenceOf(String) createArtifacts(String artifact) {
        sequenceOf(String) artifacts = {};
        artifacts.add(artifact);
        artifacts;
    }
    
    def sequenceOf(String) createPythonCmdArg(String sid, String servicesPackage, String modulesPath, String mode="console") {
        sequenceOf(String) cmdArg = {};
        addCmdArg("--mode", mode, cmdArg);
        addCmdArg("--modulesPath", modulesPath, cmdArg);
        addCmdArg("--servicesPackage", servicesPackage, cmdArg);
        addCmdArg("--sid", sid, cmdArg);
        cmdArg;
    }
    
    def addCmdArg(String name, String value, sequenceOf(String) result) {
        result.add(name);
        result.add(value);
    }
    
    def genAdditionalArtifacts(setOf(String) artifacts, sequenceOf(String) result) {
        for (String a : artifacts) {
            if (!a.startsWith("/")) {
                a = "/" + a;
            }
            result.add(a);
        }
    }
    
    def pythonServicesPackageName(PythonService service) {
        if (service.servicesPackageName <> null) {
            '${service.servicesPackageName}';
        } else {
            'services';
        }
    }
    
    def generateAppOpt(YamlList list) {
        generateCmdArg(getStringValueSafe(app.cmdArg, ""), list);
    }

    def generateCmdArg(String cmdArg, YamlList list) {
        if (cmdArg.length() > 0) {
            list.addValues(cmdArg.split(","));
        }
    }
    
    def generateRelations(MeshElement elt, YamlList list) {
    }

    def generateRelations(MeshSource elt, YamlList list) {
        generateRelations(elt, elt.next, list);
    }

    def generateRelations(MeshInnerElement elt, YamlList list) {
        generateRelations(elt, elt.next, list);
    }

    def generateRelations(MeshElement elt, setOf(MeshConnector) conns, YamlList list) {
        for (MeshConnector c: nextConnectors(elt)) {
            MeshElement target = c.next;
            generateConnections(elt, target, "OUT", "-out-0", target.impl.id, list);
        }
        for (MeshElement e: elements) {
            if (e <> elt) {
                generateConnections(e, elt, "IN", "-in-0", e.impl.id, list);
            }
        }
    }
    
    def generateConnections(MeshElement start, MeshElement end, String dir, String connSuffix, String service, YamlList list) {
        for (IOType out : start.impl.output) {
            for (IOType in: end.impl.input) {
                if (in.type == out.type and (
                    nextConnectors(start)->collect(c|c.next).includes(end) or // configured forward conn 
                    (not(in.forward) and not(out.forward)))) { // configured backward conn
                    generateConnection(start, end, out, dir, connSuffix, service, list);
                 }
             }
         }
         if (dir == "IN") { // backwards
             for (IOType in : start.impl.input) {
                for (IOType out: end.impl.output) {
                    if (in.type == out.type and (not(in.forward) and not(out.forward))) {
                        generateConnection(end, start, out, "OUT", "-out-0", service, list);
                    }
                }
             }
         }
    }
    
    def Boolean isAsyncSource(MeshElement elt) {
        false;
    }
    
    def Boolean isAsyncSource(MeshSource elt) {
        elt.impl.asynchronous == true and elt.impl.isKindOf(Connector);
    }
    
    def generateConnection(MeshElement start, MeshElement end, IOType type, String dir, String connSuffix, String service, YamlList list) {
        String res = "";
        String typeName = toTypeName(type.type);
        String conn = getMethodSuffixId(getMethodSuffix(end, typeName, getOutName(end, typeName)), end);
        String func = conn;
        if (dir == "OUT") {
            if (isAsyncSource(start)) {
                func = "";
            } else {
                func = getMethodSuffixId(getMethodSuffix(start, typeName, getOutName(start, typeName)), start);
            }
        } else {
            func = conn;
        }
        if (not(type.forward)) {
            if (conn.startsWith("create")) {
                conn = "process" + conn.substring(6);
            }
        }
        YamlNode c = list.addObject();
        c.addValue("channel", conn + connSuffix);
        c.addValue("direction", dir);
        c.addValue("id", start.impl.id + " -> " + end.impl.id);
        c.addValue("type", typeName);
        c.addValueNotEmpty("function", func); // default is ""
        c.addValueNotEmpty("service", service);
    }

    // -------------------------- mesh basics refinement, extract stream names ---------------------------------

    // TODO check removal
    def generateSelect(String inType, String outType, String methodSuffixWithServiceId) {
        if (returnType) {
            if (inputType) {
                inType + ",";
            } else {
                outType + ",";
            }
        } else {
            methodSuffixWithServiceId + ",";
        }
    }

    // TODO check removal
    def generateSourceMethod(MeshSource src, String type, String methodSuffix, String methodSuffixWithServiceId) {
        generateSelect(type, type, methodSuffixWithServiceId);
    } 

    // TODO check removal
    def generateAsyncProcessorInMethod(MeshProcessor proc, String type, String methodSuffix, String methodSuffixWithServiceId) {
        generateSelect(type, type, methodSuffixWithServiceId);
    } 

    // TODO check removal
    def generateSyncProcessorMethod(MeshProcessor proc, String inType, String outType, String methodSuffix, String methodSuffixWithServiceId) {
        generateSelect(inType, outType, methodSuffixWithServiceId);
    } 
    
    // TODO check removal
    def generateSinkMethod(MeshSink sink, String type, String methodSuffix, String methodSuffixWithServiceId) {
        generateSelect(type, type, methodSuffixWithServiceId);
    } 
    
    // ----------------------------------- types -----------------------------------
    
    def generateTypes(sequenceOf(MeshElement) elements, YamlNode node) {
        setOf(DataType) types = {};
        elements->forEach(MeshElement elt|collectTypes(elt, types));
        if (types.size() > 0) {
            generateTypes(types, node.addList("types"));
        }
    }
    
    @DispatchBasis
    def collectRecordTypes(DataType type, setOf(RecordType) types) {
    }
    
    @DispatchCase
    def collectRecordTypes(RecordType type, setOf(RecordType) types) {
        if (not(types.includes(type))) {
            types.add(type);
            for (Field f: type.fields) {
                collectRecordTypes(f.type, types);                
            }
        }
    }

    @DispatchCase
    def collectRecordTypes(ArrayType type, setOf(RecordType) types) {
        collectRecordTypes(type.type, types);
    }
    
    def generateTypes(setOf(DataType) types, YamlList list) {
        setOf(RecordType) recTypes = {};
        types->forEach(DataType t|collectRecordTypes(t, recTypes));
        for (RecordType type: recTypes->sortedBy(t|t.name)) {
            generateType(type, list);
        }
    }
    
    def generateType(DataType type, YamlList list) {
    }

    def generateType(RecordType type, YamlList list) {
        YamlNode node = list.addObject();
        node.addValue("name", toTypeName(type));
        if (type.fields.size() > 0) {
            YamlList list = node.addList("fields"); 
            for (Field f: type.fields) {
                YamlNode n = list.addObject();
                n.addValue("name", f.name);
                n.addValue("type", toTypeName(f.type));
            }
        }
    }
    
    def collectTypes(MeshElement elt, setOf(DataType) types) {
        collectServiceTypes(elt.impl, types);
    }

    // just take everything, input/output may be backward/async also for sources, sinks
    def collectServiceTypes(ServiceBase base, setOf(DataType) types) {
        collectIOTypes(base.input, types);
        collectIOTypes(base.output, types);
    }
    
    def collectIOTypes(sequenceOf(IOType) declTypes, setOf(DataType) types) {
        for (IOType t: declTypes) {
            collectType(t.type, types);
        }        
    }
    
    def collectType(DataType type, setOf(DataType) types) {
    } 

    def collectType(RecordType type, setOf(DataType) types) {
        types.add(type);
        for (Field f: type.fields) {
            types.add(f.type);
        }
    }
    
    def generateAppSetup(ServiceBase service, YamlNode node) {
    }

    def generateAppSetup(Service service, YamlNode node) {
        if (isDefined(service.nameplateInfo) and service.nameplateInfo <> null) {
            generateAppSetup(service.id, service.name, service.ver, service.nameplateInfo, node);
        }
    } 
    
    def generateAppSetup(Application app, YamlNode node) {
        if (isDefined(app.nameplateInfo) and app.nameplateInfo <> null) {
            generateAppSetup(app.id, app.name, app.ver, app.nameplateInfo, node);
        }
    } 
    
    def generateAppSetup(String id, String name, String ver, NameplateInfo p, YamlNode node, String prefix = "") {
        YamlNode aNode = node.addObject("application");
        aNode.addValue("id", id);
        aNode.addValue("name", name);
        aNode.addValue("version", ver);
        generateNameplateInfoSetup(p, prefix, aNode);        
    }
    
    def generateNameplateInfoSetup(NameplateInfo p, String prefix, YamlNode node) {
        if (p <> null) {
            Manufacturer m = p.manufacturer;
            node.addValue(prefix + "manufacturerName", m.manufacturerName);
            node.addValueNotEmpty("manufacturerProductDesignation", p.manufacturerProductDesignation); // default null, considered
            node.addValue("manufacturerLogo", m.manufacturerLogo);
            node.addValueNotEmpty("productImage", p.productImage); // default is ""
            if (isDefined(m.address) and m.address <> null) { // default is an empty address object
                ManufacturerAddress ad = m.address;
                YamlNode adNode = node.addObject("address");
                adNode.addValue("department", ad.department);
                adNode.addValue("street", ad.street);
                adNode.addValue("zipCode", ad.zipCode);
                adNode.addValue("cityTown", ad.cityTown);
            }
        }
    }

    def generateServers(Application app, YamlNode node) {
        if (isDefined(app.servers) and app.servers.size() > 0) {
            YamlList list = node.addList("servers");
            // sorted by for deterministic testing
            for (Server s : app.servers->sortedBy(t|t.id)) {
                YamlNode n = list.addObject();
                n.addValue("id", s.id);
                n.addValue("version", s.ver);
                n.addValueNotEmpty("description", s.description); // default is ""
                n.addValue("transportChannel", getStringValueSafe(s.transportChannel, ""));
                n.addValue("host", s.host);
                n.addValue("port", s.port);
                n.addValue("cls", getServerCls(s));
                n.addValue("started", s.running);
                n.addValue("asProcess", asProcess(s));
                generateServer(s, n);
            }    
        }
    }
    
    @DispatchBasis
    def asProcess(Server server) {
        true;
    }

    @DispatchCase
    def asProcess(PythonServer server) {
        false; // we wrap this anyway into a Python process, so a Java process shall not be needed
    }

    @DispatchBasis
    def generateServer(Server server, YamlNode node) {
    }

    def generateServer(JavaServer server, YamlNode node) {
        if (server.memLimit > 0) {
            node.addValue("memory", server.memLimit);
        }
        String cmdArg = getStringValueSafe(server.cmdArg, "");
        if (cmdArg.length() > 0) {
            generateCmdArg(cmdArg, node.addList("cmdArg"));
        }
    }
    
    def generateServer(PythonServer server, YamlNode node) {
        String clsName = asTypeName(server.id);
        String id = toFolderName(server.id);
        sequenceOf(String) artifacts = createArtifacts("/python_${id}.zip");
        sequenceOf(String) cmdArg = createPythonCmdArg(server.id, pythonServicesPackageName(server), "\\${tmp}/python_${id}");
        YamlNode p = addProcess(node, "\\${tmp}/python_${id}", "", artifacts=artifacts, addTopNode=false, cmdArg=cmdArg);
        p.addValue("netMgtKey", server.id);
    }
    
    def pythonServicesPackageName(PythonServer server) {
        if (server.servicesPackageName <> null) {
            '${server.servicesPackageName}';
        } else {
            'server';
        }
    }    
    
    def getServerCls(Server server) {
        "iip.server.${asTypeName(server.id)}Server"; // assumed: generation
    }

    // dispatch basis
    def getServerCls(JavaServer server) {
        server.class; // specified
    }

}
