import Basics;
import JavaBasics;
import JavaType;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="java", profileArg_javadocIndent=" * ", lineLength = 120, profileArg_eltSorting="CONS")
template JavaConnectorRestType(Configuration config, JavaCodeArtifact target, RecordType type, String pkg) {
    
    def main(Configuration config, JavaCodeArtifact target, RecordType type, String pkg) {
        IIPEcosphere cfg = config;
    
        String add = "";
        if (cfg.sharedInterfaces) {
            add = "Impl";
        }
    
        String typeName = asTypeName(type.name);
        String qTypeName = toQualifiedTypeName(type);
        String clsName = typeName + "RestType";

        JavaCodeClass mainCls = codeCreateClass(target, pkg, clsName, 'Rest type for the application data type ${typeName}');
        mainCls.addAnnotation("com.fasterxml.jackson.annotation.JsonIgnoreProperties").addArgument("ignoreUnknown", true);
        mainCls.implements("de.iip_ecosphere.platform.connectors.rest.Convertable");

        String getValueToWrite = "null";
        for (Field f: type.fields) {
            mainCls.addAttribute(mapTypeName(f), asMethodFieldIdentifier(f.name)).(attr|{
            if (getValueToWrite == "null") {
                getValueToWrite = attr.getName(); 
            }
            if (not(f.type.isKindOf(RecordType))) {
                attr.addAnnotation("com.fasterxml.jackson.annotation.JsonProperty").addStringArgument(f.name);
            }
            mainCls.addGetter(attr);
            mainCls.addSetter(attr, "value");
            });
        }

        mainCls.addConstructor("Default constructor. Fields are pre-allocated with default Java values.");
        
        mainCls.method("Object", "fromREST").(m|{
            m.override();
            m.param("Object", "data");
            m.var("Object", "result", "data");
            m.if("data instanceof " + clsName).(i|{
                i.assign("result", "fromRESTImpl((${clsName}) data)");
            }).elseIf("data instanceof " + clsName + "[]").(e|{
                e.assign("result", "fromRESTImpl((${clsName}[]) data)");
            });
            m.return("result");
        });

        mainCls.method(qTypeName, "fromRESTImpl", "Implements the conversion from the corresponding REST type.").setStatic().(m|{
            m.param(clsName, "orig", "the original value");
            m.var(qTypeName, "result").addNew(qTypeName + add);
            type.fields->forEach(Field f | genAssign(f, f.type, "fromRESTImpl", "orig", m));
            m.return("result", "the converted instance");
        });

        mainCls.method(qTypeName+ "[]", "fromRESTImpl", "Implements the conversion from the corresponding REST type array.").setStatic().(m|{
            m.param(clsName + "[]", "orig", "the original value");
            m.var(qTypeName + "[]", "result", "null");
            m.if("orig != null").(i|{
                i.assign("result", "new " + typeName + "[orig.length]");//.newArrayArg(typeName).dimension("orig.length");
                i.addForLoop("int", "i", "0", "i < orig.length", "i++").(l|{
                    l.addAssign("result[i]", "").addCall("fromRESTImpl").arg("orig[i]");
                });
            });
            m.return("result", "the converted instance");
        });

        mainCls.method("Object", "toREST").(m|{
            m.override();
            m.param("Object", "data");
            m.var("Object", "result", "data");
            m.if("data instanceof " + typeName).(i|{
                i.assign("result", "toRESTImpl((${typeName}) data)");
            }).elseIf("data instanceof " + typeName + "[]").(e|{
                e.assign("result", "toRESTImpl((${typeName}[]) data)");
            });
            m.return("result");
        });

        mainCls.method(clsName + "[]", "toRESTImpl", "Implements the conversion from the transport type to REST").setStatic().(m|{
            m.param(typeName + "[]", "orig", "the original value");
            m.var(clsName + "[]", "result", "null");
            m.if("orig != null").(i|{
                i.assign("result", "new " + clsName + "[orig.length]");//.newArrayArg(clsName).dimension("orig.length");
                i.addForLoop("int", "i", "0", "i < orig.length", "i++").(l|{
                    l.addAssign("result[i]", "").addCall("toRESTImpl").arg("orig[i]");
                });
            });
            m.return("result", "the converted instance");
        });
        
        mainCls.method(clsName, "toRESTImpl", "Implements the conversion from the transport type to REST").setStatic().(m|{
            m.param(typeName, "orig", "the original value");
            m.var(clsName, "result").addNew(clsName);
            type.fields->forEach(Field f | genAssign(f, f.type, "toRESTImpl", "result", m));
            m.return("result", "the converted instance");
        });

    }
    
    @DispatchBasis
    def genAssign(Field f, DataType type, String method, String host, JavaCodeBlockInterface b) {
        b.call("result.set" + asMethodNameSuffix(f.name)).addCallArgument("orig.get" + asMethodNameSuffix(f.name));
    }
    
    @DispatchCase
    def genAssign(Field f, RecordType type, String method, String host, JavaCodeBlockInterface b) {
        String origRead = ".get" + asMethodNameSuffix(f.name) + "()";
        b.call("result.set" + asMethodNameSuffix(f.name)).addCallArgument(method).qualifiedByType(toTypeName(type)+"RestType").arg("orig" + origRead);
    } 

    @DispatchCase
    def genAssign(Field f, ArrayType type, String method, String host, JavaCodeBlockInterface b) {
        String origRead = ".get" + asMethodNameSuffix(f.name) + "()";
        b.call("result.set" + asMethodNameSuffix(f.name)).addCallArgument(method).qualifiedByType(toTypeName(type.type)+"RestType").arg("orig" + origRead);
    } 
    
    def String mapTypeName(Field f) {
        mapTypeName(f.type);
    }
    
    def String mapTypeName(AasField f) {
        getTypeName(f);
    }
    
    def String mapTypeName(DataType type) {
        toTypeName(type);
    }

    def String mapTypeName(ArrayType type) {
        mapTypeName(type.type) + "[]";
    }
    
    def String mapTypeName(RecordType type) {
        toTypeName(type) + "RestType";
    }
    
}
