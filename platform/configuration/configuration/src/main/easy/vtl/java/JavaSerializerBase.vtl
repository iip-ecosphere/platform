import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="java", profileArg_javadocIndent=" * ", lineLength = 120, profileArg_eltSorting="CONS")
template JavaSerializerBase(IIPEcosphere config, JavaCodeArtifact target, RecordType type, String pkg, String typePkg, Boolean sharedInterfaces, Boolean impl) {

    def genClsInit(IIPEcosphere config, JavaCodeClass mainCls, String typeName) {
    }

    def genFrom(IIPEcosphere config, RecordType type, JavaCodeMethod from, String paramName, String dataType) {
    }

    def genTo(IIPEcosphere config, RecordType type, JavaCodeMethod to, String paramName, String dataType) {
    }
    
    def String getProtocolName() {
        "X";
    }

    // added v2->v3
    def sequenceOf(Field) collectFields(RecordType type) {
        sequenceOf(Field) result = type.fields;
        if (isDefined(type.refining) and type.refining <> null) {
            result = result.append(collectFields(type.refining)).flatten();
        }
        result;
    }

    def genCls(IIPEcosphere config, JavaCodeArtifact target, RecordType type, String pkg, String typePkg, Boolean sharedInterfaces, Boolean impl) {
        String clsName = asTypeName(type.name);
        String typeName = clsName;
        String add = "";
        if (sharedInterfaces) {
            add = "Impl";
            if (impl) {
                typeName = typeName + add;
            }
        }

        JavaCodeClass mainCls = codeCreateClass(target, pkg, "${typeName}Serializer", '${getProtocolName()} transport serializer for ${clsName}');
        if (pkg != typePkg) {
            mainCls.addImport("${typePkg}.*");
        }
        mainCls.implements("de.iip_ecosphere.platform.transport.serialization.Serializer<${typeName}>");
        genClsInit(config, mainCls, typeName);
        
        JavaCodeMethod from = mainCls.addMethod(typeName, "from", "").(from|{
            from.addParameter("byte[]", "data");
                from.override();
                from.throws("java.io.IOException");
            genFrom(config, type, from, "data", "${clsName}${add}");
        });
        mainCls.addMethod("byte[]", "to", "").(to|{
            to.addParameter(typeName, "source");
                to.override();
                to.throws("java.io.IOException");
            genTo(config, type, to, "source", "${clsName}${add}");
        });
        mainCls.addMethod(typeName, "clone", "").(clone|{
            clone.addParameter(typeName, "origin");
                clone.override();
                clone.throws("java.io.IOException");
            clone.addReturn("new ${clsName}${add}(origin)");
        });
        mainCls.addMethod("Class<${typeName}>", "getType", "").(getType|{
            getType.override();
            getType.addReturn("${typeName}.class");
        });
    }
    
}
