import JavaBasics;
import SpringCloudStreamBasics;
import MeshBasics;
import JavaConnector;
import ServiceBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaSpringCloudStreamMeshElementTest(Configuration config, FileArtifact target, MeshElement elt, String pkg, 
    Application app, Boolean sharedInterfaces, String familyInterface, ServiceBase familyMember, setOf(MeshElement) nodes) extends MeshBasics {

    // --------------------- main ---------------------------
    
    def genImports(MeshElement elt, ServiceBase service) {
        ''
    }
    
    def genMain(MeshElement elt, ServiceBase service, String clsName) {
        ''
    }

    def genImports(MeshElement elt, Connector connector) {
        'import de.iip_ecosphere.platform.connectors.ConnectorParameter;
        import de.iip_ecosphere.platform.connectors.opcuav1.OpcUaConnector;
        import de.iip_ecosphere.platform.transport.connectors.ReceptionCallback;'
    }

    def genMain(MeshElement elt, Connector connector, String clsName) {
        String connGen = getConnectorGenerics(connector, false);
        Boolean useNotifications = connector.samplingPeriod <= 0; // else polling
        String outType = asTypeName(getFirstTypeName(connector.output));
        'ActiveAasBase.setNotificationMode(NotificationMode.NONE); // disable AAS connector registration
        ReceptionCallback<${outType}> callback = new ReceptionCallback<${outType}>() {

            @Override
            public void received(${outType} data) {
                System.out.println(data);
            }
            
            @Override
            public Class<${outType}> getType() {
                return ${outType}.class;
            }
            
        };
        ${connector.class}${connGen} conn = 
            new ${connector.class}<>(${clsName}.createConnectorAdapter());
        ConnectorParameter cp = ${clsName}.createConnectorParameter();
        conn.connect(cp);
        conn.setReceptionCallback(callback);
        conn.request(true);'
        if (not(useNotifications)) {
            'conn.notificationsChanged(false); // force sampling independent of model
            System.out.println("Waiting for sampling... 10s until auto-stop");
            TimeUtils.sleep(10000);'
        }
        'System.out.println("Disconnecting...");
        conn.disconnect();
        System.exit(0);'
    }

    def main(Configuration config, FileArtifact target, MeshElement elt, String pkg, Application app, 
        Boolean sharedInterfaces, String familyInterface, ServiceBase familyMember, setOf(MeshElement) nodes) {

        String clsName = getClsName(elt);
        if (familyInterface <> "") {
            clsName = familyMemberName(asTypeName(familyMember.name), familyInterface);
        }

        'package ${pkg};
        
        import java.io.IOException;
        import de.iip_ecosphere.platform.support.TimeUtils;
        import de.iip_ecosphere.platform.support.iip_aas.ActiveAasBase;
        import de.iip_ecosphere.platform.support.iip_aas.ActiveAasBase.NotificationMode;
        ${genImports(elt, elt.impl)|e}
        
        import org.junit.*;
        import org.junit.runner.RunWith;
        
        import org.springframework.boot.test.context.SpringBootTest;
        import org.springframework.test.context.junit4.SpringRunner;
        
        import iip.datatypes.*;
        import iip.interfaces.*;
        import iip.serializers.*;
        import iip.nodes.*;
        
        @SpringBootTest
        @RunWith(SpringRunner.class)
        public class ${clsName}Test {
        
            /**
            * Starts the configured version of this service/connector as main program.
            *
            * @param args the command line arguments
            * @throws IOException shall not occur
            */
            public static void main(String[] args) throws IOException {
                ${genMain(elt, elt.impl, clsName)}
            }
            
        }'
    }
    
}