import JavaBasics;
import SpringCloudStreamBasics;
import MeshBasics;
import JavaConnector;
import ServiceBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaSpringCloudStreamMeshElementTest(Configuration config, FileArtifact target, MeshElement elt, String pkg, 
    Application app, Boolean sharedInterfaces, String familyInterface, ServiceBase familyMember, setOf(MeshElement) nodes) extends MeshBasics {

    // --------------------- imports ---------------------------

    def genImports(MeshElement elt, ServiceBase service) {
        ''
    }

    def genImports(MeshElement elt, Connector connector) {
        'import java.util.concurrent.atomic.*;
        import de.iip_ecosphere.platform.connectors.ConnectorParameter;
        import de.iip_ecosphere.platform.connectors.opcuav1.OpcUaConnector;
        import de.iip_ecosphere.platform.transport.connectors.ReceptionCallback;'
    }
    
    // ------------------- reusable methods -----------------

    def genMethods(MeshElement elt, ServiceBase service, String clsName) {
        ''
    }

    def genMethods(MeshElement elt, Connector connector, String clsName) {
        String connGen = getConnectorGenerics(connector, false);
        String outType = asTypeName(getFirstTypeName(connector.output));

        '/**
        * Tests the connector.
        *
        * @param params the connector parameter to use
        * @param callback the callback to attach to the connector
        *
        * @throws IOException shall not occur
        */
        protected void testConnector(ConnectorParameter params, ReceptionCallback<${outType}> callback) throws IOException {
            ActiveAasBase.setNotificationMode(NotificationMode.NONE); // disable AAS connector registration
            ${connector.class}${connGen} conn = 
                new ${connector.class}<>(${clsName}.createConnectorAdapter());
            conn.connect(params);
            conn.setReceptionCallback(callback);
            conn.request(true);
            ${genSampling(connector)|e}
            System.out.println("Disconnecting...");
            conn.disconnect();
        }
        
        /**
        * Returns the connector parameter to be used.
        *
        * @return the connector parameter, by default as configured in the model
        */
        protected ConnectorParameter createConnectorParameter() {
            return ${clsName}.createConnectorParameter();
        }'
    }
    
    def genSampling(Connector connector) {
        Boolean useNotifications = connector.samplingPeriod <= 0; // else polling
        if (useNotifications) {
            ''
        } else {
            'conn.notificationsChanged(false); // force sampling independent of model
            System.out.println("Waiting for sampling... 10s until auto-stop");
            TimeUtils.sleep(10000);'
        }
    }

    // --------------------- tests --------------------------

    def genTests(MeshElement elt, ServiceBase service, String clsName) {
        ''
    }

    def genTests(MeshElement elt, Connector connector, String clsName) {
        String outType = asTypeName(getFirstTypeName(connector.output));
        
        '/**
        * Tests the connector, here whether the connector (parameterized by 
        * {@link #createConnectorParameter()} delivered any data.
        *
        * @throws IOException shall not occur
        */
        @Test
        public void testConnector() throws IOException {
            ${clsName}Test test = new ${clsName}Test();
            AtomicInteger counter = new AtomicInteger(0);
            ReceptionCallback<${outType}> callback = new ReceptionCallback<${outType}>() {
    
                @Override
                public void received(${outType} data) {
                    counter.incrementAndGet();
                }
                
                @Override
                public Class<${outType}> getType() {
                    return ${outType}.class;
                }
                
            };
            test.testConnector(test.createConnectorParameter(), callback);
            Assert.assertTrue("Connector does not deliver data", counter.get() > 0);
        }
        '
    }

    // ------------------- main method ----------------------
    
    def genMain(MeshElement elt, ServiceBase service, String clsName) {
        ''
    }

    def genMain(MeshElement elt, Connector connector, String clsName) {
        String outType = asTypeName(getFirstTypeName(connector.output));
        '${clsName}Test test = new ${clsName}Test();
        ReceptionCallback<${outType}> callback = new ReceptionCallback<${outType}>() {

            @Override
            public void received(${outType} data) {
                System.out.println(data);
            }
            
            @Override
            public Class<${outType}> getType() {
                return ${outType}.class;
            }
            
        };
        test.testConnector(test.createConnectorParameter(), callback);
        System.exit(0);'
    }

    // ------------------- main ----------------------

    def main(Configuration config, FileArtifact target, MeshElement elt, String pkg, Application app, 
        Boolean sharedInterfaces, String familyInterface, ServiceBase familyMember, setOf(MeshElement) nodes) {

        String clsName = getClsName(elt);
        if (familyInterface <> "") {
            clsName = familyMemberName(asTypeName(familyMember.name), familyInterface);
        }

        'package ${pkg};
        
        import java.io.IOException;
        import de.iip_ecosphere.platform.support.TimeUtils;
        import de.iip_ecosphere.platform.support.iip_aas.ActiveAasBase;
        import de.iip_ecosphere.platform.support.iip_aas.ActiveAasBase.NotificationMode;
        ${genImports(elt, elt.impl)|e}
        
        import org.junit.*;
        import org.junit.runner.RunWith;
        
        import org.springframework.boot.test.context.SpringBootTest;
        import org.springframework.test.context.junit4.SpringRunner;
        
        import iip.datatypes.*;
        import iip.interfaces.*;
        import iip.serializers.*;
        import iip.nodes.*;

        /**
        * Implements tests for "${clsName}".
        *
        * @author EASy-Producer
        */        
        @SpringBootTest
        @RunWith(SpringRunner.class)
        public class ${clsName}Test {
        
            ${genMethods(elt, elt.impl, clsName)|e}

            ${genTests(elt, elt.impl, clsName)|e}
        
            /**
            * Starts the configured version of this service/connector as main program.
            *
            * @param args the command line arguments
            * @throws IOException shall not occur
            */
            public static void main(String[] args) throws IOException {
                ${genMain(elt, elt.impl, clsName)}
            }
            
        }'
    }
    
}