import Basics;
import JavaBasics;
import ServiceBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaServiceTestTemplate(Configuration config, JavaCodeArtifact target, JavaService service, String pkg) extends ServiceBasics {

    // something in the auto-formatting goes crazy here. Resorting to individual VIL context expressions :/
    setOf(String) reqIngestors = {};
    JavaCodeClass mainCls;
    
    @Override
    def produceAsyncProcessorBody2(IOType type) {
        String t = toTypeName(type);
        JavaCodeMethod m = mainCls.addMethod("void", "testProcess${t.firstToUpperCase()}", 'Tests processing a data item of type "${t}" asynchronously.');
        m.addJunitTestAnnotation();
        m.addVariable(qualifyIipType(type.type, t), "data", getTestValue(type.type));
        m.addSLComment("TODO fill data via setters");
        m.addCall("service.process${t.firstToUpperCase()}").addArgument("data");
        if (service.kind <> ServiceKind::SINK_SERVICE) {
            m.addSLComment("asynchronous results occur through ingestors, see startup()");
        } else {
            m.addSLComment("no direct output for a sink. may be it's generating a log, a file, etc. to assert");
        }
    }
    
    @Override
    def produceSyncProcessorBody2(IOType returnType, IOType dataType) {
        String r = toTypeName(returnType);
        String t = toTypeName(dataType);
        JavaCodeMethod m = mainCls.addMethod("void", "testTransform${t.firstToUpperCase()}", 'Tests processing a data item of type "${t}" synchronously.');
        m.addJunitTestAnnotation();
        m.addVariable(qualifyIipType(dataType.type, t), "data", getTestValue(dataType.type));
        m.addSLComment("TODO fill data via setters");
        m.addVariable(qualifyIipType(returnType.type, r), "res", "service.transform${t.firstToUpperCase()}(data)");
        m.addJunitAssertCall("assertNotNull").addArgument("res"); // contract, see platform handbook
        m.addSLComment("TODO assert fields of res");
    }
    
    @Override
    def produceIngestorBody2(IOType type) {
        reqIngestors.add(toTypeName(type));
    }
    
    @Override
    def produceProducerBody2(IOType type) {
        String t = toTypeName(type);
        JavaCodeMethod m = mainCls.addMethod("void", "testProduce${t.firstToUpperCase()}", 'Synchronous source method, called to produce data items of type "${t}".');
        m.addJunitTestAnnotation();
        m.addVariable(qualifyIipType(type.type, t), "res", "service.produce${t.firstToUpperCase()}()");
        m.addJunitAssertCall("assertNotNull").addArgument("res"); // contract, see platform handbook
        m.addSLComment("TODO assert fields of res");
    }

    @DispatchBasis
    def String getTestValue(DataType type) {
        getJavaDefaultValue(toTypeName(type));
    }
    
    @DispatchCase
    def String getTestValue(RecordType type) {
        String result = toTypeName(type);
        IIPEcosphere cfg = config;
        if (cfg.sharedInterfaces) {
            result = result + "Impl";
            mainCls.addImport(qualifyIipType(type, result));
        }
        "new ${result}()";
    }
    
    def genIngestorAttachments(JavaCodeMethod m) {
        for (String t: reqIngestors->sortedBy(n|n).toSequence()) {
            JavaCodeBlock b = m.addCall('service.attach${t.firstToUpperCase()}Ingestor').addLambdaArgument().addVariable("d").addBlock();
            b.addSLComment("called when results from asynchronous service processing occurs");
            b.addJunitAssertCall("assertNotNull").addArgument("d"); // contract, see platform handbook
            b.addSLComment("TODO add assert here or collect results and assert in test");
        }
    }

    @DispatchBasis
    def String qualifyIipType(DataType type, String name) {
        name;
    }

    @DispatchCase
    def String qualifyIipType(RecordType type, String name) {
        "iip.datatypes." + name;
    }    
    
    def setServiceState(String state, String errorCls, String errorMsg, JavaCodeMethod m) {
        JavaCodeTryBlock t = m.addTry();
        t.addCall("service.setState").addVariableArgument("de.iip_ecosphere.platform.services.environment.ServiceState." + state, JavaCodeImportScope.CLASS);
        t.addCatch("java.util.concurrent.ExecutionException", "e").addCall("org.slf4j.LoggerFactory.getLogger", JavaCodeImportScope.CLASS).addArgument(errorCls)
            .addCall("error").addStringArgument("${errorMsg}: {}").addArgument("e");
    }
    
    def main(Configuration config, JavaCodeArtifact target, JavaService service, String pkg) {
        JavaPath jp = service.class;
        String clsName = jp.getName();
        mainCls = codeCreateClass(target, pkg, clsName + "Test", 'IIP-Ecosphere service jUnit test for \'${service.name}\'');
        mainCls.addAttribute(service.class, "service");
        produceForInputTypes2(service);
        produceForOutputTypes2(service);
        JavaCodeMethod m = mainCls.addMethod("void", "startup", "Initializes the test.");
        m.addJunitBeforeAnnotation();
        m.addSLComment("constructor for testing, does not set up service management values!");
        m.addAssignment("service", new JavaCodeConstructorCall(clsName));
        genIngestorAttachments(m);
        setServiceState("STARTING", "getClass()", "Cannot start service", m);

        m = mainCls.addMethod("void", "shutdown", "Shuts down the test.");
        m.addJunitAfterAnnotation();
        setServiceState("STOPPING", "getClass()", "Cannot stop service", m);
    }
        
}
