import JavaBasics;
import SpringBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaSpringCloudStreamStarter(Configuration config, FileArtifact target, String pkg, setOf(String) serializers) {

    def main(Configuration config, FileArtifact target, String pkg, setOf(String) serializers) {
        'package ${pkg};
        
        import java.util.*;
        import de.iip_ecosphere.platform.services.environment.Service;
        import de.iip_ecosphere.platform.services.environment.YamlArtifact;
        import de.iip_ecosphere.platform.transport.serialization.*;
        import de.iip_ecosphere.platform.transport.spring.SerializerMessageConverter;
        import org.springframework.core.env.Environment;
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.messaging.converter.MessageConverter;
        import org.springframework.boot.autoconfigure.SpringBootApplication;
        import org.springframework.context.annotation.ComponentScan;
        import org.springframework.context.annotation.Bean;
        
        /**
         * Service artifact starter.
         * Generated by: EASy-Producer.
         */
        @SpringBootApplication
        @ComponentScan({"iip.nodes", "de.iip_ecosphere.platform.services.environment.spring", "de.iip_ecosphere.platform.transport.spring"})
        public class Starter extends de.iip_ecosphere.platform.services.environment.spring.Starter {

            /**
            * Creates an instance.
            * 
            * @param environment the Spring environment
            */
            @Autowired
            public Starter(Environment environment) {
                super(environment);
            }
            
            @Override
            protected List<Service> createServices(YamlArtifact artifact) {
                return null; // services do register themselves
            }
            
            /**
            * Creates a custom message converter and binds it against "application/iip".
            * 
            * @return the custom message converter
            */
            @Bean
            public MessageConverter customMessageConverter() {
                return new SerializerMessageConverter();
            }

            /**
            * Registers required, generated serializers.
            */
            public static void registerSerializers() {
                ${generateSerializerRegistration(serializers)}
            }

            /**
             * Starts the service chain.
             *
             * @param args command line arguments
             */        
            public static void main(String[] args) {
                registerSerializers();
                main(iip.Starter.class, args);
            }
        
        }
        '
    }
    
}
