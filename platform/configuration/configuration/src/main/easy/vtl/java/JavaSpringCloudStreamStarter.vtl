import JavaBasics;
import SpringBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="java", profileArg_javadocIndent=" * ", lineLength = 120)
template JavaSpringCloudStreamStarter(Configuration config, JavaCodeArtifact target, String pkg, setOf(String) serializers) {

    def main(Configuration config, JavaCodeArtifact target, String pkg, setOf(String) serializers) {
        JavaCodeClass mainCls = codeCreateClass(target, pkg, "Starter", "Service artifact starter");
        mainCls.addAnnotation("org.springframework.boot.autoconfigure.SpringBootApplication");
        mainCls.addAnnotation("org.springframework.context.annotation.ComponentScan")
            .addArgument('{"iip.nodes", "de.iip_ecosphere.platform.services.environment.spring", "de.iip_ecosphere.platform.transport.spring"}');
        mainCls.addExtends("de.iip_ecosphere.platform.services.environment.spring.Starter");
        JavaCodeMethod m = mainCls.addConstructor("Creates an instance.");
        m.addParameter("org.springframework.core.env.Environment", "environment", "the Spring environment");
        m.addAnnotation("org.springframework.beans.factory.annotation.Autowired");
        m.addSuperCall().addArgument("environment");
        
        m = mainCls.addMethod("java.util.List<de.iip_ecosphere.platform.services.environment.Service>", "createServices").setProtected();
        m.addOverrideAnnotation();
        m.addParameter("de.iip_ecosphere.platform.services.environment.YamlArtifact", "artifact");
        m.addReturn("null");
        
        m = mainCls.addMethod("org.springframework.messaging.converter.MessageConverter", "customMessageConverter", 
            'Creates a custom message converter and binds it against "application/iip".');
        m.addAnnotation("org.springframework.context.annotation.Bean");
        m.addReturn(new JavaCodeConstructorCall("de.iip_ecosphere.platform.transport.spring.SerializerMessageConverter"), "the custom message converter");

        m = mainCls.addMethod("", "registerSerializers", "Registers required, generated serializers.").setStatic();        
        generateSerializerRegistration(serializers, m);
            
        m = mainCls.addMainMethod();
        m.getJavadocComment().setComment("Starts the service chain.");
        m.addCall("registerSerializers");
        m.addCall("main").addArgument("iip.Starter.class").addArgument("args");
    }
    
}
