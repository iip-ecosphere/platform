import JavaBasics;
import SpringCloudStreamBasics;
import MeshBasics;
import JavaConnector;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="java", profileArg_javadocIndent=" * ", lineLength = 120)
template JavaSpringCloudFamilyInterface(Configuration config, JavaCodeArtifact target, MeshElement elt, String pkg, 
    Application app) extends MeshBasics {

    JavaCodeClass mainCls;

    // ----------------------------- MeshBasics refinement/use ----------------------------
    
    // called via MeshBasics.generateDataMethods for MeshSource
    def generateSourceMethod(MeshSource src, String type, String methodSuffix, String methodSuffixWithServiceId) {
        mainCls.addMethod("java.util.function.Consumer<${asTypeName(type)}>", methodSuffixWithServiceId, "Called when data arrived that shall be passed on to the connector.", "the data consumer functor");
    }
    
    def Boolean recordSourceIngestor(MeshSource elt, IOType type) {
        not(isKindOf(type(elt.impl), Connector));
    }
   
    // called via MeshBasics.generateDataMethods for MeshSource
    def generateAsyncProcessorInMethod(MeshProcessor proc, String type, String methodSuffix, String methodSuffixWithServiceId) {
        mainCls.addMethod("java.util.function.Consumer<${type}>", methodSuffixWithServiceId, "Called when data arrived that shall be processed (asynchronously).", "the data consumer functor");
    }

    // called via MeshBasics.generateDataMethods for synch MeshProcessor
    def generateSyncProcessorMethod(MeshProcessor proc, String inType, String outType, String methodSuffix, String methodSuffixWithServiceId) {
        mainCls.addMethod("java.util.function.Function<${inType}, ${outType}>", methodSuffixWithServiceId, "Called when data arrived that shall be processed (synchronously).", "the data transformation functor");
    } 

    // called via MeshBasics.generateDataMethods for MeshSink
    def generateSinkMethod(MeshSink snk, String type, String methodSuffix, String methodSuffixWithServiceId) {
        mainCls.addMethod("java.util.function.Consumer<${type}>", methodSuffixWithServiceId, "Called when data arrived that shall be received (data sink).");
    } 
    
    // --------------------- main ---------------------------

    def main(Configuration config, JavaCodeArtifact target, MeshElement elt, String pkg, Application app) {
        String clsName = getClsName(elt);
        mainCls = codeCreateClass(target, pkg, "${clsName}FamilyInterface", "Family Interface for a Spring Cloud Stream service for \'${elt.name}\'");
        mainCls.asInterface();
        mainCls.addExtends("de.iip_ecosphere.platform.services.environment.switching.ServiceBase");
        generateDataMethods(elt, true);
        mainCls.addMethod("", "initService", "Initializes the service instance. Please execute resource-intensive or time-intensive calls here.");
        mainCls.addMethod("", "setState", "Changes the state. [R133c]").(m|{
            m.addParameter("de.iip_ecosphere.platform.services.environment.ServiceState", "state", "the new state");
            m.addException("java.util.concurrent.ExecutionException", "if changing the state fails for some reason");
        });
        mainCls.addMethod("", "detach", "Detaches the service. Opposite of {@link #initService()}.");
    }
    
}
