import JavaBasics;
import JavaMapping;
import Basics;
import MeshBasics;

@advice(IIPEcosphere)
vilScript IIPEcosphereBase (Project source, Configuration config, Project target) {

    // preliminary!!! make it language-generic
    
    Boolean inTesting = getProperty("iip.tests", "false").toLowerCase() == "true";

    // java packages, turned to paths below
    String javaDatatypesPackage = "iip.datatypes";
    String javaSerializersPackage = "iip.serializers";
    String javaInterfacesPackage = "iip.interfaces";
    String javaImplPackage = "iip.impl";
    String javaStubsPackage = "iip.stubs";
    String javaNodesPackage = "iip.nodes";
    String javaServerPackage = "iip.server";
    String javaConnectivityPackage = "iip.connectivity";
    String dfltMain="de.iip_ecosphere.platform.support.LifecycleHandler$"+"WaitingStarter";
    String mvnProjectBuildDir = "$" + "{project.build.directory}"; // escaping fails in some cases, safe choice
    String mvnProjectBaseDir = "$" + "{project.basedir}";
    String mvnProjectPySrcDir = "${mvnProjectBaseDir}/src/main/python";

    Path ecsRuntimeRoot = "${target}/ecsRuntime";
    Path serviceMgrRoot = "${target}/serviceMgr";
    Path ecsServiceMgrRoot = "${target}/ecsServiceMgr";
    Path platformRoot = "${target}/platform";
    Path monitoringRoot = "${target}/monitoring";
    Path mgtUiRoot = "${target}/mgtUi";
    Path commonRoot = "${target}/common";
    Path artifactsRoot = "${target}/artifacts";
    Path brokerRoot = "${target}/broker";
    String assemblyRel = "src/main/assembly";
    String serviceArtifactsRel = "src/main/serviceArtifacts";


    generateOsScripts(Configuration config, String pathName, String dir, String main, String desc, String pidName, String requires, String addJavaOpts="", String sysd="") = {
        vilTemplateProcessor("WinBatch", config, "${pathName}.bat", dir=dir, main=main, addJavaOpts=addJavaOpts);
        vilTemplateProcessor("LinuxBash", config, "${pathName}.sh", dir=dir, main=main, addJavaOpts=addJavaOpts);
        FileArtifact f = "${pathName}.sh";
        f.setExecutable(false);
        if (pidName.length() > 0) {
           String sName = pathName;
           if (sysd <> "") {
               sName = sysd;
           }
           vilTemplateProcessor("LinuxSysd", config, "${sName}.service", dir=dir, main=main, description=desc, pidFile="${pidName}.pid", requires=requires, after=requires, addJavaOpts=addJavaOpts);
           if (requires.length() > 0) {
               vilTemplateProcessor("LinuxSysd", config, "${sName}-noDeps.service", dir=dir, main=main, description=desc, pidFile="${pidName}.pid", addJavaOpts=addJavaOpts);
           }
        }
    }
    
    // ------------------- optional, alternative services ----------------------------

    deviceIdProviderJsl(Path p, IIPEcosphere cfg) = {
        String cls = "de.iip_ecosphere.platform.support.iip_aas.MacIdProvider$" + "MacIdProviderDescriptor";
        if (isDefined(cfg.deviceIdProvider) and cfg.deviceIdProvider <> null) {
            cls = cfg.deviceIdProvider.class;
        }
        vilTemplateProcessor("JavaServices", cfg, "${p}/META-INF/services/de.iip_ecosphere.platform.support.iip_aas.IdProviderDescriptor", descriptor=cls);
    }

    identityStoreJsl(Path p, IIPEcosphere cfg) = {
        String cls = "de.iip_ecosphere.platform.support.identities.YamlIdentityStore$" + "YamlIdentityStoreDescriptor";
        if (isDefined(cfg.identityStore) and cfg.identityStore <> null) {
            cls = cfg.identityStore.class;
        }
        vilTemplateProcessor("JavaServices", cfg, "${p}/META-INF/services/de.iip_ecosphere.platform.support.identities.IdentityStoreDescriptor", descriptor=cls);
    }
    
    aasSemanticIdResolverJsl(Path p, IIPEcosphere cfg) = {
        sequenceOf(String) desc = {
            "de.iip_ecosphere.platform.support.iip_aas.EclassYamlSemanticIdResolverDescriptor", 
            "de.iip_ecosphere.platform.support.iip_aas.AdminShellYamlSemanticIdResolverDescriptor"};
        if (isDefined(cfg.aasSemanticIdResolver) and cfg.aasSemanticIdResolver <> null) {
            desc = cfg.aasSemanticIdResolver->collect(r|r.class).asSequence();
        }
        vilTemplateProcessor("JavaServices", cfg, "${p}/META-INF/services/de.iip_ecosphere.platform.support.semanticId.SemanticIdResolverDescriptor", descriptors=desc);
    }
    
    // ---------------------------- containers ------------------------------
    
    // dispatch basis, creates container build script and returns file name
    String createContainerBuildBaseScript(ContainerManager mgr, Application a, sequenceOf(MeshElement) elements, 
        Path appRoot, Integer isPythonService, Boolean justCommenDep) = {
        "";
    }
   
    String createContainerBuildBaseScriptAllApps(ContainerManager mgr, setOf(Application) applications, sequenceOf(MeshElement) elements, 
        Project target, Integer isPythonService, Boolean justCommenDep) = {
        "";
    }

    // dispatch basis, creates container build script and returns file name
    String createContainerBuildScript(ContainerManager mgr, Application a, sequenceOf(MeshElement) elements, 
        Path appRoot, ContainerType contType, Integer isPythonService, EcsDevice device, Integer baseImageExist) = {
        "";
    }

    // dispatch basis, creates container build script for all applications and returns file name
    String createContainerBuildScriptAllApps(ContainerManager mgr, setOf(Application) applications, sequenceOf(MeshElement) elements, 
        Project target, ContainerType contType, Integer isPythonService, EcsDevice device, Integer baseImageExist) = {
        "";
    }

    // dispatch basis, creates container platform script and returns file name
    String createContainerBuildScriptPlatform(ContainerManager mgr, Project target) = {
        "";
    }
    
    // dispatch basis, build container image    
    String createContainerImage(ContainerManager mgr, Path base, Path buildFile, String registry, String repository, String tag) = {
        "";
    }
    
    // dispatch basis, build container image without push to registry
    String createContainerImageWithoutPush(ContainerManager mgr, Path base, Path buildFile, String registry, String repository, String tag) = {
        "";
    }

    loginContainerRegistry(ContainerManager mgr, String user, String password) = {
    }

    logoutContainerRegistry(ContainerManager mgr) = {
    }

    
    // ---------------------------- maven -----------------------------------

    mvn(Path path) = {
        mvn(path, "");
    }
    
    mvn(Path path, String addArgs) = {
        String a = getProperty("iip.easy.mvnArgs", "");
        if (addArgs.length() > 0) {
            a = appendWithSeparator(a, ",", addArgs);
        }
        sequenceOf(String) args = a.split(",")->reject(s|s.trim().length()==0);
        String prop = getProperty("easy.docker.skip", "");
        if (prop.length() > 0) {
            args.add("-Deasy.docker.skip=${prop}");
        }
        prop = getProperty("easy.docker.failOnError", "");
        if (prop.length() > 0) {
            args.add("-Deasy.docker.failOnError=${prop}");
        }
        println("Calling maven with ${path} ${args}");        
        maven("${path}", args, false);
    }
    
    setOf(Application) getApplications() = {
        setOf(String) selectedApplications = getProperty("iip.easy.apps", "")
            .split(",")->reject(s|s.trim().length()==0) // for "" the result will be "", prune this
            .toSet();
        setOf(Application) applications = Application.allInstances();
        if (selectedApplications.size() > 0) {
            applications = applications->select(a|selectedApplications.includes(a.id));
        }
        applications;        
    }
    
    setOf(RecordType) getRecordTypes() = {
        setOf(RecordType) recordTypes = RecordType.allInstances();
        recordTypes.remove(AasGenericSubmodelElementCollection);
        recordTypes.remove(AasGenericEntityType);
        recordTypes;
    }

}
