project OpcWoodworking {

	import IIPEcosphere;
	import DataTypes;
	import OpcUaDataTypes;

	annotate BindingTime bindingTime = BindingTime::compile to .;

	UAVariableTypeType opcBaseDataVariableTypeType = {
		name = "opcBaseDataVariableTypeType",
		nodeId = {nameSpaceIndex = 0, identifier = 63},
		nodeClass = NodeClass::UAVariableType,
		browseName = "BaseDataVariableType",
		displayName = "BaseDataVariableType",
		documentation = "https://reference.opcfoundation.org/v105/Core/docs/Part5/7.4",
		type = refBy(opcUnknownDataType)
	};

	UAObjectTypeType opcBaseObjectType = {
		name = "opcBaseObjectType",
		nodeId = {nameSpaceIndex = 0, identifier = 58},
		nodeClass = NodeClass::UAObjectType,
		browseName = "BaseObjectType",
		displayName = "BaseObjectType",
		description = "",
		documentation = "https://reference.opcfoundation.org/v105/Core/docs/Part5/6.2"
	};

	UARootObjectType opcIWwBaseStateTypeFlags = {
		name = "opcIWwBaseStateTypeFlags",
		nodeId = {nameSpaceIndex = 1, identifier = 5003},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Flags",
		displayName = "Flags",
		description = "The Flags Object provides the flags of the unit.@en",
		optional = true,
		typeDefinition = refBy(opcBaseObjectType),
		rootParent = refBy(opcIWwBaseStateType),
		fields = {
			UAFieldVariableType {
				name = "opcFlagsAirPresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6070},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AirPresent",
				displayName = "AirPresent",
				description = "The AirPresent Variable is true if the air pressure present in the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsAlarm",
				nodeId = {nameSpaceIndex = 1, identifier = 6071},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Alarm",
				displayName = "Alarm",
				description = "The Alarm Variable is true if at least one alarm exists.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsCalibrated",
				nodeId = {nameSpaceIndex = 1, identifier = 6078},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Calibrated",
				displayName = "Calibrated",
				description = "The Calibrated Variable is true if all devices are calibrated.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsDustChipSuction",
				nodeId = {nameSpaceIndex = 1, identifier = 6075},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:DustChipSuction",
				displayName = "DustChipSuction",
				description = "The DustChipSuction Variable is true if the dust and chip suction is ready.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsEmergency",
				nodeId = {nameSpaceIndex = 1, identifier = 6076},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Emergency",
				displayName = "Emergency",
				description = "The Emergency Variable is true if at least one emergency button is pressed.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsEnergySaving",
				nodeId = {nameSpaceIndex = 1, identifier = 6092},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:EnergySaving",
				displayName = "EnergySaving",
				description = "The EnergySaving Variable is true if energy saving is activated on the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsError",
				nodeId = {nameSpaceIndex = 1, identifier = 6082},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Error",
				displayName = "Error",
				description = "The Error Variable is true if at least one reason exists which prevents the machine from working.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsExternalEmergency",
				nodeId = {nameSpaceIndex = 1, identifier = 6093},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ExternalEmergency",
				displayName = "ExternalEmergency",
				description = "The ExternalEmergency Variable is true if there is an emergency from the line controller.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsFeedRuns",
				nodeId = {nameSpaceIndex = 1, identifier = 6095},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:FeedRuns",
				displayName = "FeedRuns",
				description = "The FeedRuns Variable is true if the feed is running on a throughfeed machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsHold",
				nodeId = {nameSpaceIndex = 1, identifier = 6084},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Hold",
				displayName = "Hold",
				description = "The Hold Variable is true if the movements are paused by the operator.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsLoadingEnabled",
				nodeId = {nameSpaceIndex = 1, identifier = 6089},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:LoadingEnabled",
				displayName = "LoadingEnabled",
				description = "The LoadingEnabled Variable is true if the unit is ready to get the next new part. If this is false no part can get into the unit.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsMachineInitialized",
				nodeId = {nameSpaceIndex = 1, identifier = 6073},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MachineInitialized",
				displayName = "MachineInitialized",
				description = "The MachineInitialized Variable is true if the MachineOn is true, the PLC and the control processes are running. The machine is ready for usage for the operator.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsMachineOn",
				nodeId = {nameSpaceIndex = 1, identifier = 6072},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MachineOn",
				displayName = "MachineOn",
				description = "The MachineOn Variable is true if the machine is switched on. If the OPC UA Server runs on the machine this value is always true.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsMaintenanceRequired",
				nodeId = {nameSpaceIndex = 1, identifier = 6094},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MaintenanceRequired",
				displayName = "MaintenanceRequired",
				description = "The MaintenanceRequired Variable is true if maintenance is required.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsManualActivityRequired",
				nodeId = {nameSpaceIndex = 1, identifier = 6088},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ManualActivityRequired",
				displayName = "ManualActivityRequired",
				description = "The ManualActivityRequired Variable is true if a manual activity by the operator is required. The RecipeInRun is not affected.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsMoving",
				nodeId = {nameSpaceIndex = 1, identifier = 6081},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Moving",
				displayName = "Moving",
				description = "The Moving Variable is true if at least one axis is moving.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsPowerPresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6074},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:PowerPresent",
				displayName = "PowerPresent",
				description = "The PowerPresent Variable is true if the power supply is present (the drives are ready to move).@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInHold",
				nodeId = {nameSpaceIndex = 1, identifier = 6087},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInHold",
				displayName = "RecipeInHold",
				description = "The RecipeInHold Variable is true if the machine is paused by the program. This is only possible if the RecipeInRun Variable is also true.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInRun",
				nodeId = {nameSpaceIndex = 1, identifier = 6085},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInRun",
				displayName = "RecipeInRun",
				description = "The RecipeInRun Variable is true if the machine runs its program. However, if the machine is paused by the program, the machine is considered to still be running its program, i.e. while the RecipeInHold Variable is true, the RecipeInRun cannot be false.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInSetup",
				nodeId = {nameSpaceIndex = 1, identifier = 6086},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInSetup",
				displayName = "RecipeInSetup",
				description = "The RecipeInSetup Variable is true if the RecipeInRun is true and the machine is in the setup phase (example: automatic tool change).@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsRemote",
				nodeId = {nameSpaceIndex = 1, identifier = 6079},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Remote",
				displayName = "Remote",
				description = "The Remote Variable is true if the machine is working with programs sent by the supervisor or other external application.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsSafety",
				nodeId = {nameSpaceIndex = 1, identifier = 6077},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Safety",
				displayName = "Safety",
				description = "The Safety Variable is true if at least one safety device (light curtain, safety mat, -) has intervened.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWaitLoad",
				nodeId = {nameSpaceIndex = 1, identifier = 6091},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WaitLoad",
				displayName = "WaitLoad",
				description = "The WaitLoad Variable is true if the machine is waiting for pieces.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWaitUnload",
				nodeId = {nameSpaceIndex = 1, identifier = 6090},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WaitUnload",
				displayName = "WaitUnload",
				description = "The WaitUnload Variable is true if the machine is waiting to unload pieces.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWarning",
				nodeId = {nameSpaceIndex = 1, identifier = 6083},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Warning",
				displayName = "Warning",
				description = "The Warning Variable is true if at least one warning exists.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsWorkpiecePresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6080},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WorkpiecePresent",
				displayName = "WorkpiecePresent",
				description = "The WorkpiecePresent Variable is true if at least one piece is inside the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}
		}
	};

	UARootObjectType opcIWwBaseStateTypeOverview = {
		name = "opcIWwBaseStateTypeOverview",
		nodeId = {nameSpaceIndex = 1, identifier = 5004},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Overview",
		displayName = "Overview",
		description = "The Overview Object provides a general state of the unit.@en",
		optional = false,
		typeDefinition = refBy(opcBaseObjectType),
		rootParent = refBy(opcIWwBaseStateType),
		fields = {
			UAFieldVariableType {
				name = "opcOverviewCurrentMode",
				nodeId = {nameSpaceIndex = 1, identifier = 6097},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:CurrentMode",
				displayName = "CurrentMode",
				description = "The CurrentMode Variable provides the generalized mode of the unit.@en",
				type = refBy(opcWwUnitModeEnumerationType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcOverviewCurrentState",
				nodeId = {nameSpaceIndex = 1, identifier = 6096},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:CurrentState",
				displayName = "CurrentState",
				description = "The CurrentState Variable provides the generalized state of the unit.@en",
				type = refBy(opcWwUnitStateEnumerationType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}
		}
	};

	UAVariableTypeType opcBaseAnalogTypeType = {
		name = "opcBaseAnalogTypeType",
		nodeId = {nameSpaceIndex = 0, identifier = 15318},
		nodeClass = NodeClass::UAVariableType,
		browseName = "BaseAnalogType",
		displayName = "BaseAnalogType",
		documentation = "https://reference.opcfoundation.org/v105/Core/docs/Part8/5.3.2/#5.3.2.2",
		type = refBy(opcNumberType)
	};

	UARootObjectType opcIWwBaseStateTypeValues = {
		name = "opcIWwBaseStateTypeValues",
		nodeId = {nameSpaceIndex = 1, identifier = 5006},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Values",
		displayName = "Values",
		description = "The Values Object provides the counters of the unit.@en",
		optional = true,
		typeDefinition = refBy(opcBaseObjectType),
		rootParent = refBy(opcIWwBaseStateType),
		fields = {
			UAFieldVariableType {
				name = "opcValuesAbsoluteErrorTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6110},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteErrorTime",
				displayName = "AbsoluteErrorTime",
				description = "The AbsoluteErrorTime Variable provides the absolute time of the ERROR_4 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteLength",
				nodeId = {nameSpaceIndex = 1, identifier = 6128},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteLength",
				displayName = "AbsoluteLength",
				description = "The AbsoluteLength Variable provides the absolute produced length in mm.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteMachineOffTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6102},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteMachineOffTime",
				displayName = "AbsoluteMachineOffTime",
				description = "The AbsoluteOfflineTime can be calculated by the machine. The shutdown time and the starting time have to be stored on the machine.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteMachineOnTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6112},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteMachineOnTime",
				displayName = "AbsoluteMachineOnTime",
				description = "The AbsoluteMachineOnTime Variable provides the absolute time in msec the machine is turned on based on the MachineOn state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePiecesIn",
				nodeId = {nameSpaceIndex = 1, identifier = 6130},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePiecesIn",
				displayName = "AbsolutePiecesIn",
				description = "The AbsolutePiecesIn Variable provides the absolute count of pieces which came into the machine.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePiecesOut",
				nodeId = {nameSpaceIndex = 1, identifier = 6132},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePiecesOut",
				displayName = "AbsolutePiecesOut",
				description = "The AbsolutePiecesOut Variable provides the absolute count of pieces which came out of the machine.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePowerPresentTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6114},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePowerPresentTime",
				displayName = "AbsolutePowerPresentTime",
				description = "The AbsolutePowerPresentTime Variable provides the absolute time in msec the machine has power on based on the PowerPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6116},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionTime",
				displayName = "AbsoluteProductionTime",
				description = "The AbsoluteProductionTime Variable provides the absolute time in msec of the machine is working at least with one workpiece based on the RecipeInRun and PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionWaitWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6120},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionWaitWorkpieceTime",
				displayName = "AbsoluteProductionWaitWorkpieceTime",
				description = "The AbsoluteProductionWaitWorkpieceTime Variable provides the absolute time in msec of the machine is in working mode, bring the consent out to insert workpiece but no workpiece incoming from the previous machine based on the ReceipeInRun and WaitLoad state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionWithoutWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6118},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionWithoutWorkpieceTime",
				displayName = "AbsoluteProductionWithoutWorkpieceTime",
				description = "The AbsoluteProductionWithoutWorkpieceTime Variable provides the absolute time in msec of the machine is working but without workpieces inside based on the RecipeInRun and !PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteReadyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6106},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteReadyTime",
				displayName = "AbsoluteReadyTime",
				description = "The AbsoluteReadyTime Variable provides the absolute time of the READY_2 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsAborted",
				nodeId = {nameSpaceIndex = 1, identifier = 6126},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsAborted",
				displayName = "AbsoluteRunsAborted",
				description = "The AbsoluteRunsAborted Variable provides the absolute count of aborted runs.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsGood",
				nodeId = {nameSpaceIndex = 1, identifier = 6122},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsGood",
				displayName = "AbsoluteRunsGood",
				description = "The AbsoluteRunsGood Variable provides the absolute count of finished runs.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsTotal",
				nodeId = {nameSpaceIndex = 1, identifier = 6124},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsTotal",
				displayName = "AbsoluteRunsTotal",
				description = "The AbsoluteRunsTotal Variable provides the absolute count of total runs.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteStandbyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6104},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteStandbyTime",
				displayName = "AbsoluteStandbyTime",
				description = "The AbsoluteStandbyTime Variable provides the absolute time of the STANDBY_1 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteWorkingTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6108},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteWorkingTime",
				displayName = "AbsoluteWorkingTime",
				description = "The AbsoluteWorkingTime Variable provides the absolute time of the WORKING_3 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesActualCycle",
				nodeId = {nameSpaceIndex = 1, identifier = 6101},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ActualCycle",
				displayName = "ActualCycle",
				description = "The ActualCycle Variable provides the parts per minutes.@en",
				type = refBy(DoubleType),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAxisOverride",
				nodeId = {nameSpaceIndex = 1, identifier = 6098},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AxisOverride",
				displayName = "AxisOverride",
				description = "The AxisOverride Variable provides the override for the axis in percent.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesFeedSpeed",
				nodeId = {nameSpaceIndex = 1, identifier = 6100},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:FeedSpeed",
				displayName = "FeedSpeed",
				description = "The FeedSpeed Variable provides the feed speed in m/min for throughfeed machines.@en",
				type = refBy(DoubleType),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeErrorTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6111},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeErrorTime",
				displayName = "RelativeErrorTime",
				description = "The RelativeErrorTime Variable provides the relative time since startup of the ERROR_4 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeLength",
				nodeId = {nameSpaceIndex = 1, identifier = 6129},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeLength",
				displayName = "RelativeLength",
				description = "The RelativeLength Variable provides the relative produced length in mm since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeMachineOnTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6113},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeMachineOnTime",
				displayName = "RelativeMachineOnTime",
				description = "The RelativeMachineOnTime Variable provides the relative time in msec since startup the machine is turned on based on the MachineOn state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePiecesIn",
				nodeId = {nameSpaceIndex = 1, identifier = 6131},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePiecesIn",
				displayName = "RelativePiecesIn",
				description = "The RelativePiecesIn Variable provides the relative count of pieces which came into the machine since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePiecesOut",
				nodeId = {nameSpaceIndex = 1, identifier = 6133},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePiecesOut",
				displayName = "RelativePiecesOut",
				description = "The RelativePiecesOut Variable provides the relative count of pieces which came out of the machine since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePowerPresentTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6115},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePowerPresentTime",
				displayName = "RelativePowerPresentTime",
				description = "The RelativePowerPresentTime Variable provides the relative time in msec since startup the machine has power on based on the PowerPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6117},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionTime",
				displayName = "RelativeProductionTime",
				description = "The RelativeProductionTime Variable provides the relative time in msec since startup of the machine is working at least with one workpiece based on the RecipeInRun and PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionWaitWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6121},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionWaitWorkpieceTime",
				displayName = "RelativeProductionWaitWorkpieceTime",
				description = "The RelativeProductionWaitWorkpieceTime Variable provides the relative time in msec waiting for workpieces since startup of the machine is in working mode, bring the consent out to insert workpiece but no workpiece incoming from the previous machine based on the ReceipeInRun and WaitLoad state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionWithoutWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6119},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionWithoutWorkpieceTime",
				displayName = "RelativeProductionWithoutWorkpieceTime",
				description = "The RelativeProductionWithoutWorkpieceTime Variable provides the relative time in msec since startup of the machine is working but without workpieces inside based on the RecipeInRun and !PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeReadyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6107},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeReadyTime",
				displayName = "RelativeReadyTime",
				description = "The RelativeReadyTime Variable provides the relative time since startup of the READY_2 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsAborted",
				nodeId = {nameSpaceIndex = 1, identifier = 6127},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsAborted",
				displayName = "RelativeRunsAborted",
				description = "The RelativeRunsAborted Variable provides the relative count of aborted runs since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsGood",
				nodeId = {nameSpaceIndex = 1, identifier = 6123},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsGood",
				displayName = "RelativeRunsGood",
				description = "The RelativeRunsGood Variable provides the relative count of finished runs since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsTotal",
				nodeId = {nameSpaceIndex = 1, identifier = 6125},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsTotal",
				displayName = "RelativeRunsTotal",
				description = "The RelativeRunsTotal Variable provides the relative count of total runs since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeStandbyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6105},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeStandbyTime",
				displayName = "RelativeStandbyTime",
				description = "The RelativeStandbyTime Variable provides the relative time since startup of the STANDBY_1 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeWorkingTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6109},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeWorkingTime",
				displayName = "RelativeWorkingTime",
				description = "The RelativeWorkingTime Variable provides the relative time since startup of the WORKING_3 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesSpindleOverride",
				nodeId = {nameSpaceIndex = 1, identifier = 6099},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:SpindleOverride",
				displayName = "SpindleOverride",
				description = "The SpindleOverride Variable provides the override for the spindle in percent.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}
		}
	};

	UARootObjectType opcIWwStateTypeMachine = {
		name = "opcIWwStateTypeMachine",
		nodeId = {nameSpaceIndex = 1, identifier = 5009},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Machine",
		displayName = "Machine",
		description = "State of the whole machine.@en",
		optional = false,
		typeDefinition = refBy(opcBaseObjectType),
		rootParent = refBy(opcIWwStateType),
		fields = {
			UAFieldObjectType {
				name = "Flags",
				nodeId = {nameSpaceIndex = 1, identifier = 5017},
				nodeClass = NodeClass::UAObject,
				browseName = "1:Flags",
				displayName = "Flags",
				description = "The Flags Object provides the flags of the unit.@en",
				optional = true,
				type = refBy(opcIWwStateTypeMachineFlags)
			}, UAFieldObjectType {
				name = "Overview",
				nodeId = {nameSpaceIndex = 1, identifier = 5020},
				nodeClass = NodeClass::UAObject,
				browseName = "1:Overview",
				displayName = "Overview",
				description = "The Overview Object provides a general state of the unit.@en",
				optional = false,
				type = refBy(opcIWwStateTypeMachineOverview)
			}, UAFieldObjectType {
				name = "Values",
				nodeId = {nameSpaceIndex = 1, identifier = 5018},
				nodeClass = NodeClass::UAObject,
				browseName = "1:Values",
				displayName = "Values",
				description = "The Overview Object provides a general state of the unit.@en",
				optional = true,
				type = refBy(opcIWwStateTypeMachineValues)
			}
		}
	};

	UAObjectType opcIWwStateTypeMachineFlags = {
		name = "opcIWwStateTypeMachineFlags",
		nodeId = {nameSpaceIndex = 1, identifier = 5017},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Flags",
		displayName = "Flags",
		description = "The Flags Object provides the flags of the unit.@en",
		optional = true,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldVariableType {
				name = "opcFlagsAirPresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6141},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AirPresent",
				displayName = "AirPresent",
				description = "The AirPresent Variable is true if the air pressure is present in the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsAlarm",
				nodeId = {nameSpaceIndex = 1, identifier = 6150},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Alarm",
				displayName = "Alarm",
				description = "The Alarm Variable is true if at least one alarm exists.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsCalibrated",
				nodeId = {nameSpaceIndex = 1, identifier = 6145},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Calibrated",
				displayName = "Calibrated",
				description = "The Calibrated Variable is true if all devices are calibrated.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsDustChipSuction",
				nodeId = {nameSpaceIndex = 1, identifier = 6142},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:DustChipSuction",
				displayName = "DustChipSuction",
				description = "The DustChipSuction Variable is true if the dust and chip suction is ready.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsEmergency",
				nodeId = {nameSpaceIndex = 1, identifier = 6143},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Emergency",
				displayName = "Emergency",
				description = "The Emergency Variable is true if at least one emergency button is pressed.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsEnergySaving",
				nodeId = {nameSpaceIndex = 1, identifier = 6160},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:EnergySaving",
				displayName = "EnergySaving",
				description = "The EnergySaving Variable is true if energy saving is activated on the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsError",
				nodeId = {nameSpaceIndex = 1, identifier = 6149},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Error",
				displayName = "Error",
				description = "The Error Variable is true if at least one reason exists which prevents the machine from working.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsExternalEmergency",
				nodeId = {nameSpaceIndex = 1, identifier = 6161},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ExternalEmergency",
				displayName = "ExternalEmergency",
				description = "The ExternalEmergency Variable is true if there is an emergency from the line controller.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsFeedRuns",
				nodeId = {nameSpaceIndex = 1, identifier = 6163},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:FeedRuns",
				displayName = "FeedRuns",
				description = "The FeedRuns Variable is true if the feed is running on a throughfeed machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsHold",
				nodeId = {nameSpaceIndex = 1, identifier = 6152},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Hold",
				displayName = "Hold",
				description = "The Hold Variable is true if the movements are paused by the operator.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsLoadingEnabled",
				nodeId = {nameSpaceIndex = 1, identifier = 6157},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:LoadingEnabled",
				displayName = "LoadingEnabled",
				description = "The LoadingEnabled Variable is true if the unit is ready to get the next new part. If this is false no part can get into the unit.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsMachineInitialized",
				nodeId = {nameSpaceIndex = 1, identifier = 6139},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MachineInitialized",
				displayName = "MachineInitialized",
				description = "The MachineInitialized Variable is true if the MachineOn is true, the PLC and the control processes are running. The machine is ready for usage for the operator.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsMachineOn",
				nodeId = {nameSpaceIndex = 1, identifier = 6138},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MachineOn",
				displayName = "MachineOn",
				description = "The MachineOn Variable is true if the machine is switched on. If the OPC UA Server runs on the machine this value is always true.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsMaintenanceRequired",
				nodeId = {nameSpaceIndex = 1, identifier = 6162},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MaintenanceRequired",
				displayName = "MaintenanceRequired",
				description = "The MaintenanceRequired Variable is true if maintenance is required.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsManualActivityRequired",
				nodeId = {nameSpaceIndex = 1, identifier = 6156},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ManualActivityRequired",
				displayName = "ManualActivityRequired",
				description = "The ManualActivityRequired Variable is true if a manual activity by the operator is required. The RecipeInRun is not affected.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsMoving",
				nodeId = {nameSpaceIndex = 1, identifier = 6148},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Moving",
				displayName = "Moving",
				description = "The Moving Variable is true if at least one axis is moving.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsPowerPresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6140},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:PowerPresent",
				displayName = "PowerPresent",
				description = "The PowerPresent Variable is true if the power supply is present (the drives are ready to move).@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInHold",
				nodeId = {nameSpaceIndex = 1, identifier = 6155},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInHold",
				displayName = "RecipeInHold",
				description = "The RecipeInHold Variable is true if the machine is paused by the program. This is only possible if the RecipeInRun Variable is also true.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInRun",
				nodeId = {nameSpaceIndex = 1, identifier = 6153},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInRun",
				displayName = "RecipeInRun",
				description = "The RecipeInRun Variable is true if the machine runs its program. However, if the machine is paused by the program, the machine is considered to still be running its program, i.e. while the RecipeInHold Variable is true, the RecipeInRun cannot be false.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInSetup",
				nodeId = {nameSpaceIndex = 1, identifier = 6154},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInSetup",
				displayName = "RecipeInSetup",
				description = "The RecipeInSetup Variable is true if the RecipeInRun is true and the machine is in the setup phase (example: automatic tool change).@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsRemote",
				nodeId = {nameSpaceIndex = 1, identifier = 6146},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Remote",
				displayName = "Remote",
				description = "The Remote Variable is true if the machine is working with programs sent by the supervisor or other external application.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsSafety",
				nodeId = {nameSpaceIndex = 1, identifier = 6144},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Safety",
				displayName = "Safety",
				description = "The Safety Variable is true if at least one safety device (light curtain, safety mat, -) has intervened.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWaitLoad",
				nodeId = {nameSpaceIndex = 1, identifier = 6159},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WaitLoad",
				displayName = "WaitLoad",
				description = "The WaitLoad Variable is true if the machine is waiting for pieces.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWaitUnload",
				nodeId = {nameSpaceIndex = 1, identifier = 6158},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WaitUnload",
				displayName = "WaitUnload",
				description = "The WaitUnload Variable is true if the machine is waiting to unload pieces.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWarning",
				nodeId = {nameSpaceIndex = 1, identifier = 6151},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Warning",
				displayName = "Warning",
				description = "The Warning Variable is true if at least one warning exists.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsWorkpiecePresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6147},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WorkpiecePresent",
				displayName = "WorkpiecePresent",
				description = "The WorkpiecePresent Variable is true if at least one piece is inside the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}
		}
	};

	UAObjectType opcIWwStateTypeMachineOverview = {
		name = "opcIWwStateTypeMachineOverview",
		nodeId = {nameSpaceIndex = 1, identifier = 5020},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Overview",
		displayName = "Overview",
		description = "The Overview Object provides a general state of the unit.@en",
		optional = false,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldVariableType {
				name = "opcOverviewCurrentMode",
				nodeId = {nameSpaceIndex = 1, identifier = 6208},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:CurrentMode",
				displayName = "CurrentMode",
				description = "The CurrentMode Variable provides the generalized mode of the unit.@en",
				type = refBy(opcWwUnitModeEnumerationType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcOverviewCurrentState",
				nodeId = {nameSpaceIndex = 1, identifier = 6207},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:CurrentState",
				displayName = "CurrentState",
				description = "The CurrentState Variable provides the generalized state of the unit.@en",
				type = refBy(opcWwUnitStateEnumerationType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}
		}
	};

	UAObjectType opcIWwStateTypeMachineValues = {
		name = "opcIWwStateTypeMachineValues",
		nodeId = {nameSpaceIndex = 1, identifier = 5018},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Values",
		displayName = "Values",
		description = "The Overview Object provides a general state of the unit.@en",
		optional = true,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldVariableType {
				name = "opcValuesAbsoluteErrorTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6176},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteErrorTime",
				displayName = "AbsoluteErrorTime",
				description = "The AbsoluteErrorTime Variable provides the absolute time of the ERROR_4 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteLength",
				nodeId = {nameSpaceIndex = 1, identifier = 6197},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteLength",
				displayName = "AbsoluteLength",
				description = "The AbsoluteLength Variable provides the absolute produced length in mm.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteMachineOffTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6168},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteMachineOffTime",
				displayName = "AbsoluteMachineOffTime",
				description = "The AbsoluteOfflineTime can be calculated by the machine. The shutdown time and the starting time have to be stored on the machine.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteMachineOnTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6178},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteMachineOnTime",
				displayName = "AbsoluteMachineOnTime",
				description = "The AbsoluteMachineOnTime Variable provides the absolute time in msec the machine is turned on based on the MachineOn state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePiecesIn",
				nodeId = {nameSpaceIndex = 1, identifier = 6199},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePiecesIn",
				displayName = "AbsolutePiecesIn",
				description = "The AbsolutePiecesIn Variable provides the absolute count of pieces which came into the machine.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePiecesOut",
				nodeId = {nameSpaceIndex = 1, identifier = 6201},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePiecesOut",
				displayName = "AbsolutePiecesOut",
				description = "The AbsolutePiecesOut Variable provides the absolute count of pieces which came out of the machine.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePowerPresentTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6180},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePowerPresentTime",
				displayName = "AbsolutePowerPresentTime",
				description = "The AbsolutePowerPresentTime Variable provides the absolute time in msec the machine has power on based on the PowerPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6185},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionTime",
				displayName = "AbsoluteProductionTime",
				description = "The AbsoluteProductionTime Variable provides the absolute time in msec of the machine is working at least with one workpiece based on the RecipeInRun and PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionWaitWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6189},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionWaitWorkpieceTime",
				displayName = "AbsoluteProductionWaitWorkpieceTime",
				description = "The AbsoluteProductionWaitWorkpieceTime Variable provides the absolute time in msec of the machine is in working mode, bring the consent out to insert workpiece but no workpiece incoming from the previous machine based on the ReceipeInRun and WaitLoad state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionWithoutWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6187},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionWithoutWorkpieceTime",
				displayName = "AbsoluteProductionWithoutWorkpieceTime",
				description = "The AbsoluteProductionWithoutWorkpieceTime Variable provides the absolute time in msec of the machine is working but without workpieces inside based on the RecipeInRun and !PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteReadyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6172},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteReadyTime",
				displayName = "AbsoluteReadyTime",
				description = "The AbsoluteReadyTime Variable provides the absolute time of the READY_2 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsAborted",
				nodeId = {nameSpaceIndex = 1, identifier = 6195},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsAborted",
				displayName = "AbsoluteRunsAborted",
				description = "The AbsoluteRunsAborted Variable provides the absolute count of aborted runs.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsGood",
				nodeId = {nameSpaceIndex = 1, identifier = 6191},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsGood",
				displayName = "AbsoluteRunsGood",
				description = "The AbsoluteRunsGood Variable provides the absolute count of finished runs.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsTotal",
				nodeId = {nameSpaceIndex = 1, identifier = 6193},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsTotal",
				displayName = "AbsoluteRunsTotal",
				description = "The AbsoluteRunsTotal Variable provides the absolute count of total runs.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteStandbyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6170},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteStandbyTime",
				displayName = "AbsoluteStandbyTime",
				description = "The AbsoluteStandbyTime Variable provides the absolute time of the STANDBY_1 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteWorkingTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6174},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteWorkingTime",
				displayName = "AbsoluteWorkingTime",
				description = "The AbsoluteWorkingTime Variable provides the absolute time of the WORKING_3 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesActualCycle",
				nodeId = {nameSpaceIndex = 1, identifier = 6167},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ActualCycle",
				displayName = "ActualCycle",
				description = "The ActualCycle Variable provides the parts per minutes.@en",
				type = refBy(DoubleType),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAxisOverride",
				nodeId = {nameSpaceIndex = 1, identifier = 6164},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AxisOverride",
				displayName = "AxisOverride",
				description = "The AxisOverride Variable provides the override for the axis in percent.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesFeedSpeed",
				nodeId = {nameSpaceIndex = 1, identifier = 6166},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:FeedSpeed",
				displayName = "FeedSpeed",
				description = "The FeedSpeed Variable provides the feed speed in m/min for throughfeed machines.@en",
				type = refBy(DoubleType),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeErrorTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6177},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeErrorTime",
				displayName = "RelativeErrorTime",
				description = "The RelativeErrorTime Variable provides the relative time since startup of the ERROR_4 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeLength",
				nodeId = {nameSpaceIndex = 1, identifier = 6198},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeLength",
				displayName = "RelativeLength",
				description = "The RelativeLength Variable provides the relative produced length in mm since the machine has started.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeMachineOnTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6179},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeMachineOnTime",
				displayName = "RelativeMachineOnTime",
				description = "The RelativeMachineOnTime Variable provides the relative time in msec since startup the machine is turned on based on the MachineOn state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePiecesIn",
				nodeId = {nameSpaceIndex = 1, identifier = 6200},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePiecesIn",
				displayName = "RelativePiecesIn",
				description = "The RelativePiecesIn Variable provides the relative count of pieces which came into the machine since the machine has started.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePiecesOut",
				nodeId = {nameSpaceIndex = 1, identifier = 6202},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePiecesOut",
				displayName = "RelativePiecesOut",
				description = "The RelativePiecesOut Variable provides the relative count of pieces which came out of the machine since the machine has started.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePowerPresentTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6184},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePowerPresentTime",
				displayName = "RelativePowerPresentTime",
				description = "The RelativePowerPresentTime Variable provides the relative time in msec since startup the machine has power on based on the PowerPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6186},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionTime",
				displayName = "RelativeProductionTime",
				description = "The RelativeProductionTime Variable provides the relative time in msec since startup of the machine is working at least with one workpiece based on the RecipeInRun and PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionWaitWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6190},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionWaitWorkpieceTime",
				displayName = "RelativeProductionWaitWorkpieceTime",
				description = "The RelativeProductionWaitWorkpieceTime Variable provides the relative time in msec waiting for workpieces since startup of the machine is in working mode, bring the consent out to insert workpiece but no workpiece incoming from the previous machine based on the ReceipeInRun and WaitLoad state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionWithoutWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6188},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionWithoutWorkpieceTime",
				displayName = "RelativeProductionWithoutWorkpieceTime",
				description = "The RelativeProductionWithoutWorkpieceTime Variable provides the relative time in msec since startup of the machine is working but without workpieces inside based on the RecipeInRun and !PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeReadyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6173},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeReadyTime",
				displayName = "RelativeReadyTime",
				description = "The RelativeReadyTime Variable provides the relative time since startup of the READY_2 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsAborted",
				nodeId = {nameSpaceIndex = 1, identifier = 6196},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsAborted",
				displayName = "RelativeRunsAborted",
				description = "The RelativeRunsAborted Variable provides the relative count of aborted runs since the machine has started.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsGood",
				nodeId = {nameSpaceIndex = 1, identifier = 6192},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsGood",
				displayName = "RelativeRunsGood",
				description = "The RelativeRunsGood Variable provides the relative count of finished runs since the machine has started.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsTotal",
				nodeId = {nameSpaceIndex = 1, identifier = 6194},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsTotal",
				displayName = "RelativeRunsTotal",
				description = "The RelativeRunsTotal Variable provides the relative count of total runs since the machine has started.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeStandbyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6171},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeStandbyTime",
				displayName = "RelativeStandbyTime",
				description = "The RelativeStandbyTime Variable provides the relative time since startup of the STANDBY_1 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeWorkingTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6175},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeWorkingTime",
				displayName = "RelativeWorkingTime",
				description = "The RelativeWorkingTime Variable provides the relative time since startup of the WORKING_3 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesSpindleOverride",
				nodeId = {nameSpaceIndex = 1, identifier = 6165},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:SpindleOverride",
				displayName = "SpindleOverride",
				description = "The SpindleOverride Variable provides the override for the spindle in percent.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}
		}
	};

	UARootObjectType opcIWwStateTypeSubUnits = {
		name = "opcIWwStateTypeSubUnits",
		nodeId = {nameSpaceIndex = 1, identifier = 5016},
		nodeClass = NodeClass::UAObject,
		browseName = "1:SubUnits",
		displayName = "SubUnits",
		description = "The SubUnits Object is used when a machine has multiple states. For example, a CNC machine can have several places where independent jobs are produced.@en",
		optional = true,
		typeDefinition = refBy(opcBaseObjectType),
		rootParent = refBy(opcIWwStateType),
		fields = {
			UAFieldObjectType {
				name = "SubUnit",
				nodeId = {nameSpaceIndex = 1, identifier = 5021},
				nodeClass = NodeClass::UAObject,
				browseName = "1:<SubUnit>",
				displayName = "<SubUnit>",
				description = "Each <SubUnit> Object represents an instance of a state. For example, a CNC machine can have two places where independent jobs are produced. Then there are two <SubUnit> Objects. They may be named Place 1 and Place 2.@en",
				optional = false,
				type = refBy(opcIWwStateTypeSubUnitsSubUnit)
			}
		}
	};

	UAObjectType opcIWwStateTypeSubUnitsSubUnit = {
		name = "opcIWwStateTypeSubUnitsSubUnit",
		nodeId = {nameSpaceIndex = 1, identifier = 5021},
		nodeClass = NodeClass::UAObject,
		browseName = "1:<SubUnit>",
		displayName = "<SubUnit>",
		description = "Each <SubUnit> Object represents an instance of a state. For example, a CNC machine can have two places where independent jobs are produced. Then there are two <SubUnit> Objects. They may be named Place 1 and Place 2.@en",
		optional = false,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldObjectType {
				name = "Flags",
				nodeId = {nameSpaceIndex = 1, identifier = 5022},
				nodeClass = NodeClass::UAObject,
				browseName = "1:Flags",
				displayName = "Flags",
				description = "The Flags Object provides the flags of the unit.@en",
				optional = true,
				type = refBy(opcIWwStateTypeSubUnitsSubUnitFlags)
			}, UAFieldObjectType {
				name = "Overview",
				nodeId = {nameSpaceIndex = 1, identifier = 5023},
				nodeClass = NodeClass::UAObject,
				browseName = "1:Overview",
				displayName = "Overview",
				description = "The Overview Object provides a general overview of the unit.@en",
				optional = false,
				type = refBy(opcIWwStateTypeSubUnitsSubUnitOverview)
			}, UAFieldObjectType {
				name = "Values",
				nodeId = {nameSpaceIndex = 1, identifier = 5024},
				nodeClass = NodeClass::UAObject,
				browseName = "1:Values",
				displayName = "Values",
				description = "The Values Object provides the counters of the unit.@en",
				optional = true,
				type = refBy(opcIWwStateTypeSubUnitsSubUnitValues)
			}
		}
	};

	UAObjectType opcIWwStateTypeSubUnitsSubUnitFlags = {
		name = "opcIWwStateTypeSubUnitsSubUnitFlags",
		nodeId = {nameSpaceIndex = 1, identifier = 5022},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Flags",
		displayName = "Flags",
		description = "The Flags Object provides the flags of the unit.@en",
		optional = true,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldVariableType {
				name = "opcFlagsAirPresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6212},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AirPresent",
				displayName = "AirPresent",
				description = "The AirPresent Variable is true if the air pressure is present in the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsAlarm",
				nodeId = {nameSpaceIndex = 1, identifier = 6227},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Alarm",
				displayName = "Alarm",
				description = "The Alarm Variable is true if at least one alarm exists.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsCalibrated",
				nodeId = {nameSpaceIndex = 1, identifier = 6216},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Calibrated",
				displayName = "Calibrated",
				description = "The Calibrated Variable is true if all devices are calibrated.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsDustChipSuction",
				nodeId = {nameSpaceIndex = 1, identifier = 6213},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:DustChipSuction",
				displayName = "DustChipSuction",
				description = "The DustChipSuction Variable is true if the dust and chip suction is ready.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsEmergency",
				nodeId = {nameSpaceIndex = 1, identifier = 6214},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Emergency",
				displayName = "Emergency",
				description = "The Emergency Variable is true if at least one emergency button is pressed.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsEnergySaving",
				nodeId = {nameSpaceIndex = 1, identifier = 6238},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:EnergySaving",
				displayName = "EnergySaving",
				description = "The EnergySaving Variable is true if energy saving is activated on the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsError",
				nodeId = {nameSpaceIndex = 1, identifier = 6226},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Error",
				displayName = "Error",
				description = "The Error Variable is true if at least one reason exists which prevents the machine from working.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsExternalEmergency",
				nodeId = {nameSpaceIndex = 1, identifier = 6239},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ExternalEmergency",
				displayName = "ExternalEmergency",
				description = "The ExternalEmergency Variable is true if there is an emergency from the line controller.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsFeedRuns",
				nodeId = {nameSpaceIndex = 1, identifier = 6241},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:FeedRuns",
				displayName = "FeedRuns",
				description = "The FeedRuns Variable is true if the feed is running on a throughfeed machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsHold",
				nodeId = {nameSpaceIndex = 1, identifier = 6229},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Hold",
				displayName = "Hold",
				description = "The Hold Variable is true if the movements are paused by the operator.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsLoadingEnabled",
				nodeId = {nameSpaceIndex = 1, identifier = 6235},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:LoadingEnabled",
				displayName = "LoadingEnabled",
				description = "The LoadingEnabled Variable is true if the unit is ready to get the next new part. If this is false no part can get into the unit.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsMachineInitialized",
				nodeId = {nameSpaceIndex = 1, identifier = 6210},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MachineInitialized",
				displayName = "MachineInitialized",
				description = "The MachineInitialized Variable is true if the MachineOn is true, the PLC and the control processes are running. The machine is ready for usage for the operator.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsMachineOn",
				nodeId = {nameSpaceIndex = 1, identifier = 6209},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MachineOn",
				displayName = "MachineOn",
				description = "The MachineOn Variable is true if the machine is switched on. If the OPC UA Server runs on the machine this value is always true.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsMaintenanceRequired",
				nodeId = {nameSpaceIndex = 1, identifier = 6240},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MaintenanceRequired",
				displayName = "MaintenanceRequired",
				description = "The MaintenanceRequired Variable is true if maintenance is required.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsManualActivityRequired",
				nodeId = {nameSpaceIndex = 1, identifier = 6234},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ManualActivityRequired",
				displayName = "ManualActivityRequired",
				description = "The ManualActivityRequired Variable is true if a manual activity by the operator is required. The RecipeInRun is not affected.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsMoving",
				nodeId = {nameSpaceIndex = 1, identifier = 6225},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Moving",
				displayName = "Moving",
				description = "The Moving Variable is true if at least one axis is moving.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsPowerPresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6211},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:PowerPresent",
				displayName = "PowerPresent",
				description = "The PowerPresent Variable is true if the power supply is present (the drives are ready to move).@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInHold",
				nodeId = {nameSpaceIndex = 1, identifier = 6233},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInHold",
				displayName = "RecipeInHold",
				description = "The RecipeInHold Variable is true if the machine is paused by the program. This is only possible if the RecipeInRun Variable is also true.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInRun",
				nodeId = {nameSpaceIndex = 1, identifier = 6230},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInRun",
				displayName = "RecipeInRun",
				description = "The RecipeInRun Variable is true if the machine runs its program. However, if the machine is paused by the program, the machine is considered to still be running its program, i.e. while the RecipeInHold Variable is true, the RecipeInRun cannot be false.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInSetup",
				nodeId = {nameSpaceIndex = 1, identifier = 6231},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInSetup",
				displayName = "RecipeInSetup",
				description = "The RecipeInSetup Variable is true if the RecipeInRun is true and the machine is in the setup phase (example: automatic tool change).@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsRemote",
				nodeId = {nameSpaceIndex = 1, identifier = 6223},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Remote",
				displayName = "Remote",
				description = "The Remote Variable is true if the machine is working with programs sent by the supervisor or other external application.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsSafety",
				nodeId = {nameSpaceIndex = 1, identifier = 6215},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Safety",
				displayName = "Safety",
				description = "The Safety Variable is true if at least one safety device (light curtain, safety mat, -) has intervened.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWaitLoad",
				nodeId = {nameSpaceIndex = 1, identifier = 6237},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WaitLoad",
				displayName = "WaitLoad",
				description = "The WaitLoad Variable is true if the machine is waiting for pieces.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWaitUnload",
				nodeId = {nameSpaceIndex = 1, identifier = 6236},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WaitUnload",
				displayName = "WaitUnload",
				description = "The WaitUnload Variable is true if the machine is waiting to unload pieces.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWarning",
				nodeId = {nameSpaceIndex = 1, identifier = 6228},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Warning",
				displayName = "Warning",
				description = "The Warning Variable is true if at least one warning exists.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsWorkpiecePresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6224},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WorkpiecePresent",
				displayName = "WorkpiecePresent",
				description = "The WorkpiecePresent Variable is true if at least one piece is inside the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}
		}
	};

	UAObjectType opcIWwStateTypeSubUnitsSubUnitOverview = {
		name = "opcIWwStateTypeSubUnitsSubUnitOverview",
		nodeId = {nameSpaceIndex = 1, identifier = 5023},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Overview",
		displayName = "Overview",
		description = "The Overview Object provides a general overview of the unit.@en",
		optional = false,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldVariableType {
				name = "opcOverviewCurrentMode",
				nodeId = {nameSpaceIndex = 1, identifier = 6248},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:CurrentMode",
				displayName = "CurrentMode",
				description = "The CurrentMode Variable provides the generalized mode of the unit.@en",
				type = refBy(opcWwUnitModeEnumerationType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcOverviewCurrentState",
				nodeId = {nameSpaceIndex = 1, identifier = 6249},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:CurrentState",
				displayName = "CurrentState",
				description = "The CurrentState Variable provides the generalized state of the unit.@en",
				type = refBy(opcWwUnitStateEnumerationType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}
		}
	};

	UAObjectType opcIWwStateTypeSubUnitsSubUnitValues = {
		name = "opcIWwStateTypeSubUnitsSubUnitValues",
		nodeId = {nameSpaceIndex = 1, identifier = 5024},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Values",
		displayName = "Values",
		description = "The Values Object provides the counters of the unit.@en",
		optional = true,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldVariableType {
				name = "opcValuesAbsoluteErrorTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6266},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteErrorTime",
				displayName = "AbsoluteErrorTime",
				description = "The AbsoluteErrorTime Variable provides the absolute time of the ERROR_4 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteLength",
				nodeId = {nameSpaceIndex = 1, identifier = 6292},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteLength",
				displayName = "AbsoluteLength",
				description = "The AbsoluteLength Variable provides the absolute produced length in mm.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteMachineOffTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6258},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteMachineOffTime",
				displayName = "AbsoluteMachineOffTime",
				description = "The AbsoluteOfflineTime can be calculated by the machine. The shutdown time and the starting time have to be stored on the machine.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteMachineOnTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6268},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteMachineOnTime",
				displayName = "AbsoluteMachineOnTime",
				description = "The AbsoluteMachineOnTime Variable provides the absolute time in msec the machine is turned on based on the MachineOn state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePiecesIn",
				nodeId = {nameSpaceIndex = 1, identifier = 6294},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePiecesIn",
				displayName = "AbsolutePiecesIn",
				description = "The AbsolutePiecesIn Variable provides the absolute count of pieces which came into the machine.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePiecesOut",
				nodeId = {nameSpaceIndex = 1, identifier = 6296},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePiecesOut",
				displayName = "AbsolutePiecesOut",
				description = "The AbsolutePiecesOut Variable provides the absolute count of pieces which came out of the machine.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePowerPresentTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6270},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePowerPresentTime",
				displayName = "AbsolutePowerPresentTime",
				description = "The AbsolutePowerPresentTime Variable provides the absolute time in msec the machine has power on based on the PowerPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6272},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionTime",
				displayName = "AbsoluteProductionTime",
				description = "The AbsoluteProductionTime Variable provides the absolute time in msec of the machine is working at least with one workpiece based on the RecipeInRun and PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionWaitWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6276},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionWaitWorkpieceTime",
				displayName = "AbsoluteProductionWaitWorkpieceTime",
				description = "The AbsoluteProductionWaitWorkpieceTime Variable provides the absolute time in msec of the machine is in working mode, bring the consent out to insert workpiece but no workpiece incoming from the previous machine based on the ReceipeInRun and WaitLoad state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionWithoutWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6274},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionWithoutWorkpieceTime",
				displayName = "AbsoluteProductionWithoutWorkpieceTime",
				description = "The AbsoluteProductionWithoutWorkpieceTime Variable provides the absolute time in msec of the machine is working but without workpieces inside based on the RecipeInRun and !PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteReadyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6262},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteReadyTime",
				displayName = "AbsoluteReadyTime",
				description = "The AbsoluteReadyTime Variable provides the absolute time of the READY_2 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsAborted",
				nodeId = {nameSpaceIndex = 1, identifier = 6290},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsAborted",
				displayName = "AbsoluteRunsAborted",
				description = "The AbsoluteRunsAborted Variable provides the absolute count of aborted runs.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsGood",
				nodeId = {nameSpaceIndex = 1, identifier = 6286},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsGood",
				displayName = "AbsoluteRunsGood",
				description = "The AbsoluteRunsGood Variable provides the absolute count of finished runs.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsTotal",
				nodeId = {nameSpaceIndex = 1, identifier = 6288},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsTotal",
				displayName = "AbsoluteRunsTotal",
				description = "The AbsoluteRunsTotal Variable provides the absolute count of total runs.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteStandbyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6260},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteStandbyTime",
				displayName = "AbsoluteStandbyTime",
				description = "The AbsoluteStandbyTime Variable provides the absolute time of the STANDBY_1 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteWorkingTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6264},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteWorkingTime",
				displayName = "AbsoluteWorkingTime",
				description = "The AbsoluteWorkingTime Variable provides the absolute time of the WORKING_3 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesActualCycle",
				nodeId = {nameSpaceIndex = 1, identifier = 6257},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ActualCycle",
				displayName = "ActualCycle",
				description = "The ActualCycle Variable provides the parts per minutes.@en",
				type = refBy(DoubleType),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAxisOverride",
				nodeId = {nameSpaceIndex = 1, identifier = 6254},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AxisOverride",
				displayName = "AxisOverride",
				description = "The AxisOverride Variable provides the override for the axis in percent.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesFeedSpeed",
				nodeId = {nameSpaceIndex = 1, identifier = 6256},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:FeedSpeed",
				displayName = "FeedSpeed",
				description = "The FeedSpeed Variable provides the feed speed in m/min for throughfeed machines.@en",
				type = refBy(DoubleType),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeErrorTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6267},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeErrorTime",
				displayName = "RelativeErrorTime",
				description = "The RelativeErrorTime Variable provides the relative time since startup of the ERROR_4 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeLength",
				nodeId = {nameSpaceIndex = 1, identifier = 6293},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeLength",
				displayName = "RelativeLength",
				description = "The RelativeLength Variable provides the relative produced length in mm since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeMachineOnTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6269},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeMachineOnTime",
				displayName = "RelativeMachineOnTime",
				description = "The RelativeMachineOnTime Variable provides the relative time in msec since startup the machine is turned on based on the MachineOn state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePiecesIn",
				nodeId = {nameSpaceIndex = 1, identifier = 6295},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePiecesIn",
				displayName = "RelativePiecesIn",
				description = "The RelativePiecesIn Variable provides the relative count of pieces which came into the machine since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePiecesOut",
				nodeId = {nameSpaceIndex = 1, identifier = 6297},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePiecesOut",
				displayName = "RelativePiecesOut",
				description = "The RelativePiecesOut Variable provides the relative count of pieces which came out of the machine since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePowerPresentTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6271},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePowerPresentTime",
				displayName = "RelativePowerPresentTime",
				description = "The RelativePowerPresentTime Variable provides the relative time in msec since startup the machine has power on based on the PowerPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6273},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionTime",
				displayName = "RelativeProductionTime",
				description = "The RelativeProductionTime Variable provides the relative time in msec since startup of the machine is working at least with one workpiece based on the RecipeInRun and PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionWaitWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6285},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionWaitWorkpieceTime",
				displayName = "RelativeProductionWaitWorkpieceTime",
				description = "The RelativeProductionWaitWorkpieceTime Variable provides the relative time in msec waiting for workpieces since startup of the machine is in working mode, bring the consent out to insert workpiece but no workpiece incoming from the previous machine based on the ReceipeInRun and WaitLoad state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionWithoutWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6275},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionWithoutWorkpieceTime",
				displayName = "RelativeProductionWithoutWorkpieceTime",
				description = "The RelativeProductionWithoutWorkpieceTime Variable provides the relative time in msec since startup of the machine is working but without workpieces inside based on the RecipeInRun and !PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeReadyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6263},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeReadyTime",
				displayName = "RelativeReadyTime",
				description = "The RelativeReadyTime Variable provides the relative time since startup of the READY_2 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsAborted",
				nodeId = {nameSpaceIndex = 1, identifier = 6291},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsAborted",
				displayName = "RelativeRunsAborted",
				description = "The RelativeRunsAborted Variable provides the relative count of aborted runs since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsGood",
				nodeId = {nameSpaceIndex = 1, identifier = 6287},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsGood",
				displayName = "RelativeRunsGood",
				description = "The RelativeRunsGood Variable provides the relative count of finished runs since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsTotal",
				nodeId = {nameSpaceIndex = 1, identifier = 6289},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsTotal",
				displayName = "RelativeRunsTotal",
				description = "The RelativeRunsTotal Variable provides the relative count of total runs since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeStandbyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6261},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeStandbyTime",
				displayName = "RelativeStandbyTime",
				description = "The RelativeStandbyTime Variable provides the relative time since startup of the STANDBY_1 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeWorkingTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6265},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeWorkingTime",
				displayName = "RelativeWorkingTime",
				description = "The RelativeWorkingTime Variable provides the relative time since startup of the WORKING_3 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesSpindleOverride",
				nodeId = {nameSpaceIndex = 1, identifier = 6255},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:SpindleOverride",
				displayName = "SpindleOverride",
				description = "The SpindleOverride Variable provides the override for the spindle in percent.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}
		}
	};

	UARootObjectType opcIWwSubUnitsTypeSubUnit = {
		name = "opcIWwSubUnitsTypeSubUnit",
		nodeId = {nameSpaceIndex = 1, identifier = 5002},
		nodeClass = NodeClass::UAObject,
		browseName = "1:<SubUnit>",
		displayName = "<SubUnit>",
		description = "Each <SubUnit> Object represents an instance of a state. For example, a CNC machine can have two places where independent jobs are produced. Then there are two <SubUnit> Objects. They may be named Place 1 and Place 2.@en",
		optional = false,
		typeDefinition = refBy(opcBaseObjectType),
		rootParent = refBy(opcIWwSubUnitsType),
		fields = {
			UAFieldObjectType {
				name = "Flags",
				nodeId = {nameSpaceIndex = 1, identifier = 5026},
				nodeClass = NodeClass::UAObject,
				browseName = "1:Flags",
				displayName = "Flags",
				description = "The Flags Object provides the flags of the unit.@en",
				optional = true,
				type = refBy(opcIWwSubUnitsTypeSubUnitFlags)
			}, UAFieldObjectType {
				name = "Overview",
				nodeId = {nameSpaceIndex = 1, identifier = 5027},
				nodeClass = NodeClass::UAObject,
				browseName = "1:Overview",
				displayName = "Overview",
				description = "The Overview Object provides a general overview of the unit.@en",
				optional = false,
				type = refBy(opcIWwSubUnitsTypeSubUnitOverview)
			}, UAFieldObjectType {
				name = "Values",
				nodeId = {nameSpaceIndex = 1, identifier = 5029},
				nodeClass = NodeClass::UAObject,
				browseName = "1:Values",
				displayName = "Values",
				description = "The Values Object provides the counters of the unit.@en",
				optional = true,
				type = refBy(opcIWwSubUnitsTypeSubUnitValues)
			}
		}
	};

	UAObjectType opcIWwSubUnitsTypeSubUnitFlags = {
		name = "opcIWwSubUnitsTypeSubUnitFlags",
		nodeId = {nameSpaceIndex = 1, identifier = 5026},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Flags",
		displayName = "Flags",
		description = "The Flags Object provides the flags of the unit.@en",
		optional = true,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldVariableType {
				name = "opcFlagsAirPresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6301},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AirPresent",
				displayName = "AirPresent",
				description = "The AirPresent Variable is true if the air pressure is present in the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsAlarm",
				nodeId = {nameSpaceIndex = 1, identifier = 6310},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Alarm",
				displayName = "Alarm",
				description = "The Alarm Variable is true if at least one alarm exists.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsCalibrated",
				nodeId = {nameSpaceIndex = 1, identifier = 6305},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Calibrated",
				displayName = "Calibrated",
				description = "The Calibrated Variable is true if all devices are calibrated.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsDustChipSuction",
				nodeId = {nameSpaceIndex = 1, identifier = 6302},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:DustChipSuction",
				displayName = "DustChipSuction",
				description = "The DustChipSuction Variable is true if the dust and chip suction is ready.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsEmergency",
				nodeId = {nameSpaceIndex = 1, identifier = 6303},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Emergency",
				displayName = "Emergency",
				description = "The Emergency Variable is true if at least one emergency button is pressed.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsEnergySaving",
				nodeId = {nameSpaceIndex = 1, identifier = 6320},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:EnergySaving",
				displayName = "EnergySaving",
				description = "The EnergySaving Variable is true if energy saving is activated on the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsError",
				nodeId = {nameSpaceIndex = 1, identifier = 6309},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Error",
				displayName = "Error",
				description = "The Error Variable is true if at least one reason exists which prevents the machine from working.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsExternalEmergency",
				nodeId = {nameSpaceIndex = 1, identifier = 6321},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ExternalEmergency",
				displayName = "ExternalEmergency",
				description = "The ExternalEmergency Variable is true if there is an emergency from the line controller.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsFeedRuns",
				nodeId = {nameSpaceIndex = 1, identifier = 6323},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:FeedRuns",
				displayName = "FeedRuns",
				description = "The FeedRuns Variable is true if the feed is running on a throughfeed machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsHold",
				nodeId = {nameSpaceIndex = 1, identifier = 6312},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Hold",
				displayName = "Hold",
				description = "The Hold Variable is true if the movements are paused by the operator.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsLoadingEnabled",
				nodeId = {nameSpaceIndex = 1, identifier = 6317},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:LoadingEnabled",
				displayName = "LoadingEnabled",
				description = "The LoadingEnabled Variable is true if the unit is ready to get the next new part. If this is false no part can get into the unit.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsMachineInitialized",
				nodeId = {nameSpaceIndex = 1, identifier = 6299},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MachineInitialized",
				displayName = "MachineInitialized",
				description = "The MachineInitialized Variable is true if the MachineOn is true, the PLC and the control processes are running. The machine is ready for usage for the operator.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsMachineOn",
				nodeId = {nameSpaceIndex = 1, identifier = 6298},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MachineOn",
				displayName = "MachineOn",
				description = "The MachineOn Variable is true if the machine is switched on. If the OPC UA Server runs on the machine this value is always true.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsMaintenanceRequired",
				nodeId = {nameSpaceIndex = 1, identifier = 6322},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MaintenanceRequired",
				displayName = "MaintenanceRequired",
				description = "The MaintenanceRequired Variable is true if maintenance is required.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsManualActivityRequired",
				nodeId = {nameSpaceIndex = 1, identifier = 6316},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ManualActivityRequired",
				displayName = "ManualActivityRequired",
				description = "The ManualActivityRequired Variable is true if a manual activity by the operator is required. The RecipeInRun is not affected.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsMoving",
				nodeId = {nameSpaceIndex = 1, identifier = 6308},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Moving",
				displayName = "Moving",
				description = "The Moving Variable is true if at least one axis is moving.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsPowerPresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6300},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:PowerPresent",
				displayName = "PowerPresent",
				description = "The PowerPresent Variable is true if the power supply is present (the drives are ready to move).@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInHold",
				nodeId = {nameSpaceIndex = 1, identifier = 6315},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInHold",
				displayName = "RecipeInHold",
				description = "The RecipeInHold Variable is true if the machine is paused by the program. This is only possible if the RecipeInRun Variable is also true.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInRun",
				nodeId = {nameSpaceIndex = 1, identifier = 6313},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInRun",
				displayName = "RecipeInRun",
				description = "The RecipeInRun Variable is true if the machine runs its program. However, if the machine is paused by the program, the machine is considered to still be running its program, i.e. while the RecipeInHold Variable is true, the RecipeInRun cannot be false.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInSetup",
				nodeId = {nameSpaceIndex = 1, identifier = 6314},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInSetup",
				displayName = "RecipeInSetup",
				description = "The RecipeInSetup Variable is true if the RecipeInRun is true and the machine is in the setup phase (example: automatic tool change).@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsRemote",
				nodeId = {nameSpaceIndex = 1, identifier = 6306},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Remote",
				displayName = "Remote",
				description = "The Remote Variable is true if the machine is working with programs sent by the supervisor or other external application.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsSafety",
				nodeId = {nameSpaceIndex = 1, identifier = 6304},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Safety",
				displayName = "Safety",
				description = "The Emergency Variable is true if at least one emergency button is pressed.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWaitLoad",
				nodeId = {nameSpaceIndex = 1, identifier = 6319},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WaitLoad",
				displayName = "WaitLoad",
				description = "The WaitLoad Variable is true if the machine is waiting for pieces.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWaitUnload",
				nodeId = {nameSpaceIndex = 1, identifier = 6318},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WaitUnload",
				displayName = "WaitUnload",
				description = "The WaitUnload Variable is true if the machine is waiting to unload pieces.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWarning",
				nodeId = {nameSpaceIndex = 1, identifier = 6311},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Warning",
				displayName = "Warning",
				description = "The Warning Variable is true if at least one warning exists.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsWorkpiecePresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6307},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WorkpiecePresent",
				displayName = "WorkpiecePresent",
				description = "The WorkpiecePresent Variable is true if at least one piece is inside the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}
		}
	};

	UAObjectType opcIWwSubUnitsTypeSubUnitOverview = {
		name = "opcIWwSubUnitsTypeSubUnitOverview",
		nodeId = {nameSpaceIndex = 1, identifier = 5027},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Overview",
		displayName = "Overview",
		description = "The Overview Object provides a general overview of the unit.@en",
		optional = false,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldVariableType {
				name = "opcOverviewCurrentMode",
				nodeId = {nameSpaceIndex = 1, identifier = 6324},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:CurrentMode",
				displayName = "CurrentMode",
				description = "The CurrentMode Variable provides the generalized mode of the unit.@en",
				type = refBy(opcWwUnitModeEnumerationType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcOverviewCurrentState",
				nodeId = {nameSpaceIndex = 1, identifier = 6325},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:CurrentState",
				displayName = "CurrentState",
				description = "The CurrentState Variable provides the generalized state of the unit.@en",
				type = refBy(opcWwUnitStateEnumerationType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}
		}
	};

	UAObjectType opcIWwSubUnitsTypeSubUnitValues = {
		name = "opcIWwSubUnitsTypeSubUnitValues",
		nodeId = {nameSpaceIndex = 1, identifier = 5029},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Values",
		displayName = "Values",
		description = "The Values Object provides the counters of the unit.@en",
		optional = true,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldVariableType {
				name = "opcValuesAbsoluteErrorTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6342},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteErrorTime",
				displayName = "AbsoluteErrorTime",
				description = "The AbsoluteErrorTime Variable provides the absolute time of the ERROR_4 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteLength",
				nodeId = {nameSpaceIndex = 1, identifier = 6360},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteLength",
				displayName = "AbsoluteLength",
				description = "The AbsoluteLength Variable provides the absolute produced length in mm.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteMachineOffTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6334},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteMachineOffTime",
				displayName = "AbsoluteMachineOffTime",
				description = "The AbsoluteOfflineTime can be calculated by the machine. The shutdown time and the starting time have to be stored on the machine.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteMachineOnTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6344},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteMachineOnTime",
				displayName = "AbsoluteMachineOnTime",
				description = "The AbsoluteMachineOnTime Variable provides the absolute time in msec the machine is turned on based on the MachineOn state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePiecesIn",
				nodeId = {nameSpaceIndex = 1, identifier = 6362},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePiecesIn",
				displayName = "AbsolutePiecesIn",
				description = "The AbsolutePiecesIn Variable provides the absolute count of pieces which came into the machine.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePiecesOut",
				nodeId = {nameSpaceIndex = 1, identifier = 6364},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePiecesOut",
				displayName = "AbsolutePiecesOut",
				description = "The AbsolutePiecesOut Variable provides the absolute count of pieces which came out of the machine.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePowerPresentTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6346},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePowerPresentTime",
				displayName = "AbsolutePowerPresentTime",
				description = "The AbsolutePowerPresentTime Variable provides the absolute time in msec the machine has power on based on the PowerPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6348},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionTime",
				displayName = "AbsoluteProductionTime",
				description = "The AbsoluteProductionTime Variable provides the absolute time in msec of the machine is working at least with one workpiece based on the RecipeInRun and PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionWaitWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6352},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionWaitWorkpieceTime",
				displayName = "AbsoluteProductionWaitWorkpieceTime",
				description = "The AbsoluteProductionWaitWorkpieceTime Variable provides the absolute time in msec of the machine is in working mode, bring the consent out to insert workpiece but no workpiece incoming from the previous machine based on the ReceipeInRun and WaitLoad state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionWithoutWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6350},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionWithoutWorkpieceTime",
				displayName = "AbsoluteProductionWithoutWorkpieceTime",
				description = "The AbsoluteProductionWithoutWorkpieceTime Variable provides the absolute time in msec of the machine is working but without workpieces inside based on the RecipeInRun and !PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteReadyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6338},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteReadyTime",
				displayName = "AbsoluteReadyTime",
				description = "The AbsoluteReadyTime Variable provides the absolute time of the READY_2 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsAborted",
				nodeId = {nameSpaceIndex = 1, identifier = 6358},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsAborted",
				displayName = "AbsoluteRunsAborted",
				description = "The AbsoluteRunsAborted Variable provides the absolute count of aborted runs.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsGood",
				nodeId = {nameSpaceIndex = 1, identifier = 6354},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsGood",
				displayName = "AbsoluteRunsGood",
				description = "The AbsoluteRunsGood Variable provides the absolute count of finished runs.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsTotal",
				nodeId = {nameSpaceIndex = 1, identifier = 6356},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsTotal",
				displayName = "AbsoluteRunsTotal",
				description = "The AbsoluteRunsTotal Variable provides the absolute count of total runs.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteStandbyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6336},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteStandbyTime",
				displayName = "AbsoluteStandbyTime",
				description = "The AbsoluteStandbyTime Variable provides the absolute time of the STANDBY_1 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteWorkingTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6340},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteWorkingTime",
				displayName = "AbsoluteWorkingTime",
				description = "The AbsoluteWorkingTime Variable provides the absolute time of the WORKING_3 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesActualCycle",
				nodeId = {nameSpaceIndex = 1, identifier = 6333},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ActualCycle",
				displayName = "ActualCycle",
				description = "The ActualCycle Variable provides the parts per minutes.@en",
				type = refBy(DoubleType),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAxisOverride",
				nodeId = {nameSpaceIndex = 1, identifier = 6330},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AxisOverride",
				displayName = "AxisOverride",
				description = "The AxisOverride Variable provides the override for the axis in percent.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesFeedSpeed",
				nodeId = {nameSpaceIndex = 1, identifier = 6332},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:FeedSpeed",
				displayName = "FeedSpeed",
				description = "The FeedSpeed Variable provides the feed speed in m/min for throughfeed machines.@en",
				type = refBy(DoubleType),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeErrorTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6343},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeErrorTime",
				displayName = "RelativeErrorTime",
				description = "The RelativeErrorTime Variable provides the relative time since startup of the ERROR_4 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeLength",
				nodeId = {nameSpaceIndex = 1, identifier = 6361},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeLength",
				displayName = "RelativeLength",
				description = "The RelativeLength Variable provides the relative produced length in mm since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeMachineOnTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6345},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeMachineOnTime",
				displayName = "RelativeMachineOnTime",
				description = "The RelativeMachineOnTime Variable provides the relative time in msec since startup the machine is turned on based on the MachineOn state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePiecesIn",
				nodeId = {nameSpaceIndex = 1, identifier = 6363},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePiecesIn",
				displayName = "RelativePiecesIn",
				description = "The RelativePiecesIn Variable provides the relative count of pieces which came into the machine since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePiecesOut",
				nodeId = {nameSpaceIndex = 1, identifier = 6365},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePiecesOut",
				displayName = "RelativePiecesOut",
				description = "The RelativePiecesOut Variable provides the relative count of pieces which came out of the machine since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePowerPresentTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6347},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePowerPresentTime",
				displayName = "RelativePowerPresentTime",
				description = "The RelativePowerPresentTime Variable provides the relative time in msec since startup the machine has power on based on the PowerPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6349},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionTime",
				displayName = "RelativeProductionTime",
				description = "The RelativeProductionTime Variable provides the relative time in msec since startup of the machine is working at least with one workpiece based on the RecipeInRun and PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionWaitWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6353},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionWaitWorkpieceTime",
				displayName = "RelativeProductionWaitWorkpieceTime",
				description = "The RelativeProductionWaitWorkpieceTime Variable provides the relative time in msec waiting for workpieces since startup of the machine is in working mode, bring the consent out to insert workpiece but no workpiece incoming from the previous machine based on the ReceipeInRun and WaitLoad state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionWithoutWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6351},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionWithoutWorkpieceTime",
				displayName = "RelativeProductionWithoutWorkpieceTime",
				description = "The RelativeProductionWithoutWorkpieceTime Variable provides the relative time in msec since startup of the machine is working but without workpieces inside based on the RecipeInRun and !PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeReadyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6339},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeReadyTime",
				displayName = "RelativeReadyTime",
				description = "The RelativeReadyTime Variable provides the relative time since startup of the READY_2 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsAborted",
				nodeId = {nameSpaceIndex = 1, identifier = 6359},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsAborted",
				displayName = "RelativeRunsAborted",
				description = "The RelativeRunsAborted Variable provides the relative count of aborted runs since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsGood",
				nodeId = {nameSpaceIndex = 1, identifier = 6355},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsGood",
				displayName = "RelativeRunsGood",
				description = "The RelativeRunsGood Variable provides the relative count of finished runs since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsTotal",
				nodeId = {nameSpaceIndex = 1, identifier = 6357},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsTotal",
				displayName = "RelativeRunsTotal",
				description = "The RelativeRunsTotal Variable provides the relative count of total runs since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeStandbyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6337},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeStandbyTime",
				displayName = "RelativeStandbyTime",
				description = "The RelativeStandbyTime Variable provides the relative time since startup of the STANDBY_1 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeWorkingTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6341},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeWorkingTime",
				displayName = "RelativeWorkingTime",
				description = "The RelativeWorkingTime Variable provides the relative time since startup of the WORKING_3 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesSpindleOverride",
				nodeId = {nameSpaceIndex = 1, identifier = 6331},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:SpindleOverride",
				displayName = "SpindleOverride",
				description = "The SpindleOverride Variable provides the override for the spindle in percent.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}
		}
	};

	UARootObjectType opcWwMachineTypeEvents = {
		name = "opcWwMachineTypeEvents",
		nodeId = {nameSpaceIndex = 1, identifier = 5008},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Events",
		displayName = "Events",
		description = "The Event Object provides events.@en",
		optional = true,
		typeDefinition = refBy(opcWwEventsDispatcherType),
		rootParent = refBy(opcWwMachineType),
		fields = {
		}
	};

	UAVariableTypeType opcPropertyTypeType = {
		name = "opcPropertyTypeType",
		nodeId = {nameSpaceIndex = 0, identifier = 68},
		nodeClass = NodeClass::UAVariableType,
		browseName = "PropertyType",
		displayName = "PropertyType",
		documentation = "https://reference.opcfoundation.org/v105/Core/docs/Part5/7.3",
		type = refBy(opcUnknownDataType)
	};

	UAVariableTypeType opcUIElementTypeType = {
		name = "opcUIElementTypeType",
		nodeId = {nameSpaceIndex = 2, identifier = 6246},
		nodeClass = NodeClass::UAVariableType,
		browseName = "1:UIElementType",
		displayName = "UIElementType",
		documentation = "https://reference.opcfoundation.org/DI/v104/docs/4.4.3",
		type = refBy(opcUnknownDataType)
	};

	UAObjectTypeType opcMachineIdentificationType = {
		name = "opcMachineIdentificationType",
		nodeId = {nameSpaceIndex = 3, identifier = 1012},
		nodeClass = NodeClass::UAObjectType,
		browseName = "1:MachineIdentificationType",
		displayName = "MachineIdentificationType",
		description = "Contains information about the identification and nameplate of a machine",
		documentation = "https://reference.opcfoundation.org/v104/Machinery/v101/docs/8.6"
	};

	UARootObjectType opcWwMachineTypeIdentification = {
		name = "opcWwMachineTypeIdentification",
		nodeId = {nameSpaceIndex = 1, identifier = 5007},
		nodeClass = NodeClass::UAObject,
		browseName = "2:Identification",
		displayName = "Identification",
		description = "The Identification Object provides identification information of the machine.@en",
		optional = false,
		typeDefinition = refBy(opcMachineIdentificationType),
		rootParent = refBy(opcWwMachineType),
		fields = {
			UAFieldVariableType {
				name = "opcIdentificationAssetId",
				nodeId = {nameSpaceIndex = 1, identifier = 6021},
				nodeClass = NodeClass::UAVariable,
				browseName = "2:AssetId",
				displayName = "AssetId",
				description = "To be used by end users to store a unique identification in the context of their overall application. Servers shall support at least 40 Unicode characters for the clients writing this value, this means clients can expect to be able to write strings with a length of 40 Unicode characters into that field.@en",
				type = refBy(StringType),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = true,
				accessLevel = 3
			}, UAFieldVariableType {
				name = "opcIdentificationComponentName",
				nodeId = {nameSpaceIndex = 1, identifier = 6022},
				nodeClass = NodeClass::UAVariable,
				browseName = "2:ComponentName",
				displayName = "ComponentName",
				description = "To be used by end users to store a human-readable localized text for the MachineryItem. The minimum number of locales supported for this property shall be two. Servers shall support at least 40 Unicode characters for the clients writing the text part of each locale, this means clients can expect to be able to write texts with a length of 40 Unicode characters into that field.@en",
				type = refBy(opcLocalizedTextType),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = true,
				accessLevel = 3
			}, UAFieldVariableType {
				name = "opcIdentificationCustomerCompanyName",
				nodeId = {nameSpaceIndex = 1, identifier = 6032},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:CustomerCompanyName",
				displayName = "CustomerCompanyName",
				description = "The CustomerCompanyName provides the customer name of the Woodworking manufacturer.@en",
				type = refBy(opcLocalizedTextType),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcIdentificationDeviceClass",
				nodeId = {nameSpaceIndex = 1, identifier = 6018},
				nodeClass = NodeClass::UAVariable,
				browseName = "2:DeviceClass",
				displayName = "DeviceClass",
				description = "Indicates in which domain or for what purpose the MachineryItem is used.@en",
				type = refBy(StringType),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcIdentificationHardwareRevision",
				nodeId = {nameSpaceIndex = 1, identifier = 6023},
				nodeClass = NodeClass::UAVariable,
				browseName = "2:HardwareRevision",
				displayName = "HardwareRevision",
				description = "A string representation of the revision level of the hardware of a MachineryItem. Hardware is physical equipment, as opposed to programs, procedures, rules and associated documentation. Many machines will not provide such information due to the modular and configurable nature of the machine.@en",
				type = refBy(StringType),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcIdentificationInitialOperationDate",
				nodeId = {nameSpaceIndex = 1, identifier = 6024},
				nodeClass = NodeClass::UAVariable,
				browseName = "3:InitialOperationDate",
				displayName = "InitialOperationDate",
				description = "The date, when the MachineryItem was switched on the first time after it has left the manufacturer plant.@en",
				type = refBy(DateTimeType),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcIdentificationLocation",
				nodeId = {nameSpaceIndex = 1, identifier = 6025},
				nodeClass = NodeClass::UAVariable,
				browseName = "3:Location",
				displayName = "Location",
				description = "To be used by end users to store the location of the machine in a scheme specific to the end user. Servers shall support at least 60 Unicode characters for the clients writing this value, this means clients can expect to be able to write strings with a length of 60 Unicode characters into that field.@en",
				type = refBy(StringType),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = true,
				accessLevel = 3
			}, UAFieldVariableType {
				name = "opcIdentificationLocationGPS",
				nodeId = {nameSpaceIndex = 1, identifier = 6031},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:LocationGPS",
				displayName = "LocationGPS",
				description = "The LocationGPS provides the location of the plant in GPS coordinates. The format is decimal degrees with north and east coordinates. For example, Hannover Messe has 52.3235858255059, 9.804918108600956.
Southern latitudes have a negative value, western longitudes as well. For example, Quito has the coordinates -0.21975073282167099, -78.51255572531042.
@en",
				type = refBy(StringType),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcIdentificationLocationPlant",
				nodeId = {nameSpaceIndex = 1, identifier = 6030},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:LocationPlant",
				displayName = "LocationPlant",
				description = "The LocationPlant provides the location of the plant.@en",
				type = refBy(StringType),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcIdentificationManufacturer",
				nodeId = {nameSpaceIndex = 1, identifier = 6016},
				nodeClass = NodeClass::UAVariable,
				browseName = "2:Manufacturer",
				displayName = "Manufacturer",
				description = "A human-readable, localized name of the manufacturer of the MachineryItem.@en",
				type = refBy(opcLocalizedTextType),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcIdentificationManufacturerUri",
				nodeId = {nameSpaceIndex = 1, identifier = 6026},
				nodeClass = NodeClass::UAVariable,
				browseName = "2:ManufacturerUri",
				displayName = "ManufacturerUri",
				description = "A globally unique identifier of the manufacturer of the MachineryItem.@en",
				type = refBy(StringType),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcIdentificationModel",
				nodeId = {nameSpaceIndex = 1, identifier = 6019},
				nodeClass = NodeClass::UAVariable,
				browseName = "2:Model",
				displayName = "Model",
				description = "A human-readable, localized name of the model of the MachineryItem.@en",
				type = refBy(opcLocalizedTextType),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcIdentificationMonthOfConstruction",
				nodeId = {nameSpaceIndex = 1, identifier = 6027},
				nodeClass = NodeClass::UAVariable,
				browseName = "3:MonthOfConstruction",
				displayName = "MonthOfConstruction",
				description = "The month in which the manufacturing process of the MachineryItem has been completed. It shall be a number between 1 and 12, representing the month from January to December.@en",
				type = refBy(ByteType),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcIdentificationProductCode",
				nodeId = {nameSpaceIndex = 1, identifier = 6028},
				nodeClass = NodeClass::UAVariable,
				browseName = "2:ProductCode",
				displayName = "ProductCode",
				description = "A machine-readable string of the model of the MachineryItem, that might include options like the hardware configuration of the model. This information might be provided by the ERP system of the vendor. For example, it can be used as order information.@en",
				type = refBy(StringType),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcIdentificationProductInstanceUri",
				nodeId = {nameSpaceIndex = 1, identifier = 6015},
				nodeClass = NodeClass::UAVariable,
				browseName = "2:ProductInstanceUri",
				displayName = "ProductInstanceUri",
				description = "A globally unique resource identifier provided by the manufacturer of the machine@en",
				type = refBy(StringType),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcIdentificationSerialNumber",
				nodeId = {nameSpaceIndex = 1, identifier = 6017},
				nodeClass = NodeClass::UAVariable,
				browseName = "2:SerialNumber",
				displayName = "SerialNumber",
				description = "A string containing a unique production number of the manufacturer of the MachineryItem. The global uniqueness of the serial number is only given in the context of the manufacturer, and potentially the model. The value shall not change during the life-cycle of the MachineryItem.@en",
				type = refBy(StringType),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcIdentificationSoftwareRevision",
				nodeId = {nameSpaceIndex = 1, identifier = 6029},
				nodeClass = NodeClass::UAVariable,
				browseName = "2:SoftwareRevision",
				displayName = "SoftwareRevision",
				description = "A string representation of the revision level of a MachineryItem. In most cases, MachineryItems consist of several software components. In that case, information about the software components might be provided as additional information in the address space, including individual revision information. In that case, this property is either not provided or provides an overall software revision level. The value might change during the life-cycle of a MachineryItem.@en",
				type = refBy(StringType),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcIdentificationUIElement",
				nodeId = {nameSpaceIndex = 1, identifier = 7818},
				nodeClass = NodeClass::UAVariable,
				browseName = "2:UIElement",
				displayName = "UIElement",
				description = "A user interface element assigned to this group.@",
				type = refBy(opcUnknownDataType),
				typeDefinition = refBy(opcUIElementTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcIdentificationYearOfConstruction",
				nodeId = {nameSpaceIndex = 1, identifier = 6020},
				nodeClass = NodeClass::UAVariable,
				browseName = "3:YearOfConstruction",
				displayName = "YearOfConstruction",
				description = "The year (Gregorian calendar) in which the manufacturing process of the MachineryItem has been completed. It shall be a four-digit number and never change during the life-cycle of a MachineryItem.@en",
				type = refBy(UnsignedInteger16Type),
				typeDefinition = refBy(opcPropertyTypeType),
				optional = false
			}
		}
	};

	UAObjectTypeType opcFolderType = {
		name = "opcFolderType",
		nodeId = {nameSpaceIndex = 0, identifier = 61},
		nodeClass = NodeClass::UAObjectType,
		browseName = "FolderType",
		displayName = "FolderType",
		description = "",
		documentation = "https://reference.opcfoundation.org/v105/Core/docs/Part5/6.6"
	};

	UARootObjectType opcWwMachineTypeManufacturerSpecific = {
		name = "opcWwMachineTypeManufacturerSpecific",
		nodeId = {nameSpaceIndex = 1, identifier = 35},
		nodeClass = NodeClass::UAObject,
		browseName = "1:ManufacturerSpecific",
		displayName = "ManufacturerSpecific",
		description = "The ManufacturerSpecific Object provides manufacturer specific functionality.@en",
		optional = true,
		typeDefinition = refBy(opcFolderType),
		rootParent = refBy(opcWwMachineType),
		fields = {
		}
	};

	UARootObjectType opcWwMachineTypeState = {
		name = "opcWwMachineTypeState",
		nodeId = {nameSpaceIndex = 1, identifier = 5001},
		nodeClass = NodeClass::UAObject,
		browseName = "1:State",
		displayName = "State",
		description = "The State Object provides information about the states of the machine.@en",
		optional = false,
		typeDefinition = refBy(opcBaseObjectType),
		rootParent = refBy(opcWwMachineType),
		fields = {
			UAFieldObjectType {
				name = "Machine",
				nodeId = {nameSpaceIndex = 1, identifier = 5030},
				nodeClass = NodeClass::UAObject,
				browseName = "1:Machine",
				displayName = "Machine",
				description = "State of the whole machine.@en",
				optional = false,
				type = refBy(opcWwMachineTypeStateMachine)
			}, UAFieldObjectType {
				name = "SubUnits",
				nodeId = {nameSpaceIndex = 1, identifier = 5031},
				nodeClass = NodeClass::UAObject,
				browseName = "1:SubUnits",
				displayName = "SubUnits",
				description = "The SubUnits Object is used when a machine has multiple states. For example, a CNC machine can have several places where independent jobs are produced.@en",
				optional = true,
				type = refBy(opcWwMachineTypeStateSubUnits)
			}
		}
	};

	UAObjectType opcWwMachineTypeStateMachine = {
		name = "opcWwMachineTypeStateMachine",
		nodeId = {nameSpaceIndex = 1, identifier = 5030},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Machine",
		displayName = "Machine",
		description = "State of the whole machine.@en",
		optional = false,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldObjectType {
				name = "Flags",
				nodeId = {nameSpaceIndex = 1, identifier = 5032},
				nodeClass = NodeClass::UAObject,
				browseName = "1:Flags",
				displayName = "Flags",
				description = "The Flags Object provides the flags of the unit.@en",
				optional = true,
				type = refBy(opcWwMachineTypeStateMachineFlags)
			}, UAFieldObjectType {
				name = "Overview",
				nodeId = {nameSpaceIndex = 1, identifier = 5033},
				nodeClass = NodeClass::UAObject,
				browseName = "1:Overview",
				displayName = "Overview",
				description = "The Overview Object provides a general overview of the unit.@en",
				optional = false,
				type = refBy(opcWwMachineTypeStateMachineOverview)
			}, UAFieldObjectType {
				name = "Values",
				nodeId = {nameSpaceIndex = 1, identifier = 5035},
				nodeClass = NodeClass::UAObject,
				browseName = "1:Values",
				displayName = "Values",
				description = "The Values Object provides the counters of the unit.@en",
				optional = true,
				type = refBy(opcWwMachineTypeStateMachineValues)
			}
		}
	};

	UAObjectType opcWwMachineTypeStateMachineFlags = {
		name = "opcWwMachineTypeStateMachineFlags",
		nodeId = {nameSpaceIndex = 1, identifier = 5032},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Flags",
		displayName = "Flags",
		description = "The Flags Object provides the flags of the unit.@en",
		optional = true,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldVariableType {
				name = "opcFlagsAirPresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6369},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AirPresent",
				displayName = "AirPresent",
				description = "The AirPresent Variable is true if the air pressure is present in the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsAlarm",
				nodeId = {nameSpaceIndex = 1, identifier = 6378},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Alarm",
				displayName = "Alarm",
				description = "The Alarm Variable is true if at least one alarm exists.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsCalibrated",
				nodeId = {nameSpaceIndex = 1, identifier = 6373},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Calibrated",
				displayName = "Calibrated",
				description = "The Calibrated Variable is true if all devices are calibrated.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsDustChipSuction",
				nodeId = {nameSpaceIndex = 1, identifier = 6370},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:DustChipSuction",
				displayName = "DustChipSuction",
				description = "The DustChipSuction Variable is true if the dust and chip suction is ready.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsEmergency",
				nodeId = {nameSpaceIndex = 1, identifier = 6371},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Emergency",
				displayName = "Emergency",
				description = "The Emergency Variable is true if at least one emergency button is pressed.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsEnergySaving",
				nodeId = {nameSpaceIndex = 1, identifier = 6388},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:EnergySaving",
				displayName = "EnergySaving",
				description = "The EnergySaving Variable is true if energy saving is activated on the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsError",
				nodeId = {nameSpaceIndex = 1, identifier = 6377},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Error",
				displayName = "Error",
				description = "The Error Variable is true if at least one reason exists which prevents the machine from working.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsExternalEmergency",
				nodeId = {nameSpaceIndex = 1, identifier = 6389},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ExternalEmergency",
				displayName = "ExternalEmergency",
				description = "The ExternalEmergency Variable is true if there is an emergency from the line controller.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsFeedRuns",
				nodeId = {nameSpaceIndex = 1, identifier = 6391},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:FeedRuns",
				displayName = "FeedRuns",
				description = "The FeedRuns Variable is true if the feed is running on a throughfeed machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsHold",
				nodeId = {nameSpaceIndex = 1, identifier = 6380},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Hold",
				displayName = "Hold",
				description = "The Hold Variable is true if the movements are paused by the operator.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsLoadingEnabled",
				nodeId = {nameSpaceIndex = 1, identifier = 6385},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:LoadingEnabled",
				displayName = "LoadingEnabled",
				description = "The LoadingEnabled Variable is true if the unit is ready to get the next new part. If this is false no part can get into the unit.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsMachineInitialized",
				nodeId = {nameSpaceIndex = 1, identifier = 6367},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MachineInitialized",
				displayName = "MachineInitialized",
				description = "The MachineInitialized Variable is true if the MachineOn is true, the PLC and the control processes are running. The machine is ready for usage for the operator.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsMachineOn",
				nodeId = {nameSpaceIndex = 1, identifier = 6366},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MachineOn",
				displayName = "MachineOn",
				description = "The MachineOn Variable is true if the machine is switched on. If the OPC UA Server runs on the machine this value is always true.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsMaintenanceRequired",
				nodeId = {nameSpaceIndex = 1, identifier = 6390},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MaintenanceRequired",
				displayName = "MaintenanceRequired",
				description = "The MaintenanceRequired Variable is true if maintenance is required.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsManualActivityRequired",
				nodeId = {nameSpaceIndex = 1, identifier = 6384},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ManualActivityRequired",
				displayName = "ManualActivityRequired",
				description = "The ManualActivityRequired Variable is true if a manual activity by the operator is required. The RecipeInRun is not affected.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsMoving",
				nodeId = {nameSpaceIndex = 1, identifier = 6376},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Moving",
				displayName = "Moving",
				description = "The Moving Variable is true if at least one axis is moving.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsPowerPresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6368},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:PowerPresent",
				displayName = "PowerPresent",
				description = "The PowerPresent Variable is true if the power supply is present (the drives are ready to move).@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInHold",
				nodeId = {nameSpaceIndex = 1, identifier = 6383},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInHold",
				displayName = "RecipeInHold",
				description = "The RecipeInHold Variable is true if the machine is paused by the program. This is only possible if the RecipeInRun Variable is also true.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInRun",
				nodeId = {nameSpaceIndex = 1, identifier = 6381},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInRun",
				displayName = "RecipeInRun",
				description = "The RecipeInRun Variable is true if the machine runs its program. However, if the machine is paused by the program, the machine is considered to still be running its program, i.e. while the RecipeInHold Variable is true, the RecipeInRun cannot be false.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInSetup",
				nodeId = {nameSpaceIndex = 1, identifier = 6382},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInSetup",
				displayName = "RecipeInSetup",
				description = "The RecipeInSetup Variable is true if the RecipeInRun is true and the machine is in the setup phase (example: automatic tool change).@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsRemote",
				nodeId = {nameSpaceIndex = 1, identifier = 6374},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Remote",
				displayName = "Remote",
				description = "The Remote Variable is true if the machine is working with programs sent by the supervisor or other external application.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsSafety",
				nodeId = {nameSpaceIndex = 1, identifier = 6372},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Safety",
				displayName = "Safety",
				description = "The Safety Variable is true if at least one safety device (light curtain, safety mat, -) has intervened.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWaitLoad",
				nodeId = {nameSpaceIndex = 1, identifier = 6387},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WaitLoad",
				displayName = "WaitLoad",
				description = "The WaitLoad Variable is true if the machine is waiting for pieces.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWaitUnload",
				nodeId = {nameSpaceIndex = 1, identifier = 6386},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WaitUnload",
				displayName = "WaitUnload",
				description = "The WaitUnload Variable is true if the machine is waiting to unload pieces.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWarning",
				nodeId = {nameSpaceIndex = 1, identifier = 6379},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Warning",
				displayName = "Warning",
				description = "The Warning Variable is true if at least one warning exists.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsWorkpiecePresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6375},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WorkpiecePresent",
				displayName = "WorkpiecePresent",
				description = "The WorkpiecePresent Variable is true if at least one piece is inside the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}
		}
	};

	UAObjectType opcWwMachineTypeStateMachineOverview = {
		name = "opcWwMachineTypeStateMachineOverview",
		nodeId = {nameSpaceIndex = 1, identifier = 5033},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Overview",
		displayName = "Overview",
		description = "The Overview Object provides a general overview of the unit.@en",
		optional = false,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldVariableType {
				name = "opcOverviewCurrentMode",
				nodeId = {nameSpaceIndex = 1, identifier = 6393},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:CurrentMode",
				displayName = "CurrentMode",
				description = "The CurrentMode Variable provides the generalized mode of the unit.@en",
				type = refBy(opcWwUnitModeEnumerationType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcOverviewCurrentState",
				nodeId = {nameSpaceIndex = 1, identifier = 6392},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:CurrentState",
				displayName = "CurrentState",
				description = "The CurrentState Variable provides the generalized state of the unit.@en",
				type = refBy(opcWwUnitStateEnumerationType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}
		}
	};

	UAObjectType opcWwMachineTypeStateMachineValues = {
		name = "opcWwMachineTypeStateMachineValues",
		nodeId = {nameSpaceIndex = 1, identifier = 5035},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Values",
		displayName = "Values",
		description = "The Values Object provides the counters of the unit.@en",
		optional = true,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldVariableType {
				name = "opcValuesAbsoluteErrorTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6410},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteErrorTime",
				displayName = "AbsoluteErrorTime",
				description = "The AbsoluteErrorTime Variable provides the absolute time of the ERROR_4 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteLength",
				nodeId = {nameSpaceIndex = 1, identifier = 6428},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteLength",
				displayName = "AbsoluteLength",
				description = "The AbsoluteLength Variable provides the absolute produced length in mm.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteMachineOffTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6402},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteMachineOffTime",
				displayName = "AbsoluteMachineOffTime",
				description = "The AbsoluteOfflineTime can be calculated by the machine. The shutdown time and the starting time have to be stored on the machine.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteMachineOnTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6412},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteMachineOnTime",
				displayName = "AbsoluteMachineOnTime",
				description = "The AbsoluteMachineOnTime Variable provides the absolute time in msec the machine is turned on based on the MachineOn state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePiecesIn",
				nodeId = {nameSpaceIndex = 1, identifier = 6430},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePiecesIn",
				displayName = "AbsolutePiecesIn",
				description = "The AbsolutePiecesIn Variable provides the absolute count of pieces which came into the machine.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePiecesOut",
				nodeId = {nameSpaceIndex = 1, identifier = 6432},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePiecesOut",
				displayName = "AbsolutePiecesOut",
				description = "The AbsolutePiecesOut Variable provides the absolute count of pieces which came out of the machine.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePowerPresentTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6414},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePowerPresentTime",
				displayName = "AbsolutePowerPresentTime",
				description = "The AbsolutePowerPresentTime Variable provides the absolute time in msec the machine has power on based on the PowerPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6416},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionTime",
				displayName = "AbsoluteProductionTime",
				description = "The AbsoluteProductionTime Variable provides the absolute time in msec of the machine is working at least with one workpiece based on the RecipeInRun and PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionWaitWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6420},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionWaitWorkpieceTime",
				displayName = "AbsoluteProductionWaitWorkpieceTime",
				description = "The AbsoluteProductionWaitWorkpieceTime Variable provides the absolute time in msec of the machine is in working mode, bring the consent out to insert workpiece but no workpiece incoming from the previous machine based on the ReceipeInRun and WaitLoad state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionWithoutWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6418},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionWithoutWorkpieceTime",
				displayName = "AbsoluteProductionWithoutWorkpieceTime",
				description = "The AbsoluteProductionWithoutWorkpieceTime Variable provides the absolute time in msec of the machine is working but without workpieces inside based on the RecipeInRun and !PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteReadyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6406},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteReadyTime",
				displayName = "AbsoluteReadyTime",
				description = "The AbsoluteReadyTime Variable provides the absolute time of the READY_2 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsAborted",
				nodeId = {nameSpaceIndex = 1, identifier = 6426},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsAborted",
				displayName = "AbsoluteRunsAborted",
				description = "The AbsoluteRunsAborted Variable provides the absolute count of aborted runs.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsGood",
				nodeId = {nameSpaceIndex = 1, identifier = 6422},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsGood",
				displayName = "AbsoluteRunsGood",
				description = "The AbsoluteRunsGood Variable provides the absolute count of finished runs.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsTotal",
				nodeId = {nameSpaceIndex = 1, identifier = 6424},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsTotal",
				displayName = "AbsoluteRunsTotal",
				description = "The AbsoluteRunsTotal Variable provides the absolute count of total runs.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteStandbyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6404},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteStandbyTime",
				displayName = "AbsoluteStandbyTime",
				description = "The AbsoluteStandbyTime Variable provides the absolute time of the STANDBY_1 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteWorkingTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6408},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteWorkingTime",
				displayName = "AbsoluteWorkingTime",
				description = "The AbsoluteWorkingTime Variable provides the absolute time of the WORKING_3 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesActualCycle",
				nodeId = {nameSpaceIndex = 1, identifier = 6401},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ActualCycle",
				displayName = "ActualCycle",
				description = "The ActualCycle Variable provides the parts per minutes.@en",
				type = refBy(DoubleType),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAxisOverride",
				nodeId = {nameSpaceIndex = 1, identifier = 6398},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AxisOverride",
				displayName = "AxisOverride",
				description = "The AxisOverride Variable provides the override for the axis in percent.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesFeedSpeed",
				nodeId = {nameSpaceIndex = 1, identifier = 6400},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:FeedSpeed",
				displayName = "FeedSpeed",
				description = "The FeedSpeed Variable provides the feed speed in m/min for throughfeed machines.@en",
				type = refBy(DoubleType),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeErrorTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6411},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeErrorTime",
				displayName = "RelativeErrorTime",
				description = "The RelativeErrorTime Variable provides the relative time since startup of the ERROR_4 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeLength",
				nodeId = {nameSpaceIndex = 1, identifier = 6429},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeLength",
				displayName = "RelativeLength",
				description = "The RelativeLength Variable provides the relative produced length in mm since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeMachineOnTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6413},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeMachineOnTime",
				displayName = "RelativeMachineOnTime",
				description = "The RelativeMachineOnTime Variable provides the relative time in msec since startup the machine is turned on based on the MachineOn state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePiecesIn",
				nodeId = {nameSpaceIndex = 1, identifier = 6431},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePiecesIn",
				displayName = "RelativePiecesIn",
				description = "The RelativePiecesIn Variable provides the relative count of pieces which came into the machine since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePiecesOut",
				nodeId = {nameSpaceIndex = 1, identifier = 6433},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePiecesOut",
				displayName = "RelativePiecesOut",
				description = "The RelativePiecesOut Variable provides the relative count of pieces which came out of the machine since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePowerPresentTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6415},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePowerPresentTime",
				displayName = "RelativePowerPresentTime",
				description = "The RelativePowerPresentTime Variable provides the relative time in msec since startup the machine has power on based on the PowerPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6417},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionTime",
				displayName = "RelativeProductionTime",
				description = "The RelativeProductionTime Variable provides the relative time in msec since startup of the machine is working at least with one workpiece based on the RecipeInRun and PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionWaitWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6421},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionWaitWorkpieceTime",
				displayName = "RelativeProductionWaitWorkpieceTime",
				description = "The RelativeProductionWaitWorkpieceTime Variable provides the relative time in msec waiting for workpieces since startup of the machine is in working mode, bring the consent out to insert workpiece but no workpiece incoming from the previous machine based on the ReceipeInRun and WaitLoad state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionWithoutWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6419},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionWithoutWorkpieceTime",
				displayName = "RelativeProductionWithoutWorkpieceTime",
				description = "The RelativeProductionWithoutWorkpieceTime Variable provides the relative time in msec since startup of the machine is working but without workpieces inside based on the RecipeInRun and !PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeReadyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6407},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeReadyTime",
				displayName = "RelativeReadyTime",
				description = "The RelativeReadyTime Variable provides the relative time since startup of the READY_2 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsAborted",
				nodeId = {nameSpaceIndex = 1, identifier = 6427},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsAborted",
				displayName = "RelativeRunsAborted",
				description = "The RelativeRunsAborted Variable provides the relative count of aborted runs since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsGood",
				nodeId = {nameSpaceIndex = 1, identifier = 6423},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsGood",
				displayName = "RelativeRunsGood",
				description = "The RelativeRunsGood Variable provides the relative count of finished runs since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsTotal",
				nodeId = {nameSpaceIndex = 1, identifier = 6425},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsTotal",
				displayName = "RelativeRunsTotal",
				description = "The RelativeRunsTotal Variable provides the relative count of total runs since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeStandbyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6405},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeStandbyTime",
				displayName = "RelativeStandbyTime",
				description = "The RelativeStandbyTime Variable provides the relative time since startup of the STANDBY_1 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeWorkingTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6409},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeWorkingTime",
				displayName = "RelativeWorkingTime",
				description = "The RelativeWorkingTime Variable provides the relative time since startup of the WORKING_3 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesSpindleOverride",
				nodeId = {nameSpaceIndex = 1, identifier = 6399},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:SpindleOverride",
				displayName = "SpindleOverride",
				description = "The SpindleOverride Variable provides the override for the spindle in percent.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}
		}
	};

	UAObjectType opcWwMachineTypeStateSubUnits = {
		name = "opcWwMachineTypeStateSubUnits",
		nodeId = {nameSpaceIndex = 1, identifier = 5031},
		nodeClass = NodeClass::UAObject,
		browseName = "1:SubUnits",
		displayName = "SubUnits",
		description = "The SubUnits Object is used when a machine has multiple states. For example, a CNC machine can have several places where independent jobs are produced.@en",
		optional = true,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldObjectType {
				name = "SubUnit",
				nodeId = {nameSpaceIndex = 1, identifier = 5036},
				nodeClass = NodeClass::UAObject,
				browseName = "1:<SubUnit>",
				displayName = "<SubUnit>",
				description = "Each <SubUnit> Object represents an instance of a state. For example, a CNC machine can have two places where independent jobs are produced. Then there are two <SubUnit> Objects. They may be named Place 1 and Place 2.@en",
				optional = false,
				type = refBy(opcWwMachineTypeStateSubUnitsSubUnit)
			}
		}
	};

	UAObjectType opcWwMachineTypeStateSubUnitsSubUnit = {
		name = "opcWwMachineTypeStateSubUnitsSubUnit",
		nodeId = {nameSpaceIndex = 1, identifier = 5036},
		nodeClass = NodeClass::UAObject,
		browseName = "1:<SubUnit>",
		displayName = "<SubUnit>",
		description = "Each <SubUnit> Object represents an instance of a state. For example, a CNC machine can have two places where independent jobs are produced. Then there are two <SubUnit> Objects. They may be named Place 1 and Place 2.@en",
		optional = false,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldObjectType {
				name = "Flags",
				nodeId = {nameSpaceIndex = 1, identifier = 5037},
				nodeClass = NodeClass::UAObject,
				browseName = "1:Flags",
				displayName = "Flags",
				description = "The Flags Object provides the flags of the unit.@en",
				optional = true,
				type = refBy(opcWwMachineTypeStateSubUnitsSubUnitFlags)
			}, UAFieldObjectType {
				name = "Overview",
				nodeId = {nameSpaceIndex = 1, identifier = 5038},
				nodeClass = NodeClass::UAObject,
				browseName = "1:Overview",
				displayName = "Overview",
				description = "The Overview Object provides a general overview of the unit.@en",
				optional = false,
				type = refBy(opcWwMachineTypeStateSubUnitsSubUnitOverview)
			}, UAFieldObjectType {
				name = "Values",
				nodeId = {nameSpaceIndex = 1, identifier = 5040},
				nodeClass = NodeClass::UAObject,
				browseName = "1:Values",
				displayName = "Values",
				description = "The Values Object provides the counters of the unit.@en",
				optional = true,
				type = refBy(opcWwMachineTypeStateSubUnitsSubUnitValues)
			}
		}
	};

	UAObjectType opcWwMachineTypeStateSubUnitsSubUnitFlags = {
		name = "opcWwMachineTypeStateSubUnitsSubUnitFlags",
		nodeId = {nameSpaceIndex = 1, identifier = 5037},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Flags",
		displayName = "Flags",
		description = "The Flags Object provides the flags of the unit.@en",
		optional = true,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldVariableType {
				name = "opcFlagsAirPresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6437},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AirPresent",
				displayName = "AirPresent",
				description = "The AirPresent Variable is true if the air pressure is present in the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsAlarm",
				nodeId = {nameSpaceIndex = 1, identifier = 6446},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Alarm",
				displayName = "Alarm",
				description = "The Alarm Variable is true if at least one alarm exists.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsCalibrated",
				nodeId = {nameSpaceIndex = 1, identifier = 6441},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Calibrated",
				displayName = "Calibrated",
				description = "The Calibrated Variable is true if all devices are calibrated.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsDustChipSuction",
				nodeId = {nameSpaceIndex = 1, identifier = 6438},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:DustChipSuction",
				displayName = "DustChipSuction",
				description = "The DustChipSuction Variable is true if the dust and chip suction is ready.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsEmergency",
				nodeId = {nameSpaceIndex = 1, identifier = 6439},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Emergency",
				displayName = "Emergency",
				description = "The Emergency Variable is true if at least one emergency button is pressed.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsEnergySaving",
				nodeId = {nameSpaceIndex = 1, identifier = 6456},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:EnergySaving",
				displayName = "EnergySaving",
				description = "The EnergySaving Variable is true if energy saving is activated on the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsError",
				nodeId = {nameSpaceIndex = 1, identifier = 6445},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Error",
				displayName = "Error",
				description = "The Error Variable is true if at least one reason exists which prevents the machine from working.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsExternalEmergency",
				nodeId = {nameSpaceIndex = 1, identifier = 6457},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ExternalEmergency",
				displayName = "ExternalEmergency",
				description = "The ExternalEmergency Variable is true if there is an emergency from the line controller.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsFeedRuns",
				nodeId = {nameSpaceIndex = 1, identifier = 6459},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:FeedRuns",
				displayName = "FeedRuns",
				description = "The FeedRuns Variable is true if the feed is running on a throughfeed machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsHold",
				nodeId = {nameSpaceIndex = 1, identifier = 6448},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Hold",
				displayName = "Hold",
				description = "The Hold Variable is true if the movements are paused by the operator.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsLoadingEnabled",
				nodeId = {nameSpaceIndex = 1, identifier = 6453},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:LoadingEnabled",
				displayName = "LoadingEnabled",
				description = "The LoadingEnabled Variable is true if the unit is ready to get the next new part. If this is false no part can get into the unit.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsMachineInitialized",
				nodeId = {nameSpaceIndex = 1, identifier = 6435},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MachineInitialized",
				displayName = "MachineInitialized",
				description = "The MachineInitialized Variable is true if the MachineOn is true, the PLC and the control processes are running. The machine is ready for usage for the operator.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsMachineOn",
				nodeId = {nameSpaceIndex = 1, identifier = 6434},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MachineOn",
				displayName = "MachineOn",
				description = "The MachineOn Variable is true if the machine is switched on. If the OPC UA Server runs on the machine this value is always true.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsMaintenanceRequired",
				nodeId = {nameSpaceIndex = 1, identifier = 6458},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:MaintenanceRequired",
				displayName = "MaintenanceRequired",
				description = "The MaintenanceRequired Variable is true if maintenance is required.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsManualActivityRequired",
				nodeId = {nameSpaceIndex = 1, identifier = 6452},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ManualActivityRequired",
				displayName = "ManualActivityRequired",
				description = "The ManualActivityRequired Variable is true if a manual activity by the operator is required. The RecipeInRun is not affected.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsMoving",
				nodeId = {nameSpaceIndex = 1, identifier = 6444},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Moving",
				displayName = "Moving",
				description = "The Moving Variable is true if at least one axis is moving.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsPowerPresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6436},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:PowerPresent",
				displayName = "PowerPresent",
				description = "The PowerPresent Variable is true if the power supply is present (the drives are ready to move).@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInHold",
				nodeId = {nameSpaceIndex = 1, identifier = 6451},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInHold",
				displayName = "RecipeInHold",
				description = "The RecipeInHold Variable is true if the machine is paused by the program. This is only possible if the RecipeInRun Variable is also true.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInRun",
				nodeId = {nameSpaceIndex = 1, identifier = 6449},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInRun",
				displayName = "RecipeInRun",
				description = "The RecipeInRun Variable is true if the machine runs its program. However, if the machine is paused by the program, the machine is considered to still be running its program, i.e. while the RecipeInHold Variable is true, the RecipeInRun cannot be false.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsRecipeInSetup",
				nodeId = {nameSpaceIndex = 1, identifier = 6450},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RecipeInSetup",
				displayName = "RecipeInSetup",
				description = "The RecipeInSetup Variable is true if the RecipeInRun is true and the machine is in the setup phase (example: automatic tool change).@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsRemote",
				nodeId = {nameSpaceIndex = 1, identifier = 6442},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Remote",
				displayName = "Remote",
				description = "The Remote Variable is true if the machine is working with programs sent by the supervisor or other external application.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsSafety",
				nodeId = {nameSpaceIndex = 1, identifier = 6440},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Safety",
				displayName = "Safety",
				description = "The Safety Variable is true if at least one safety device (light curtain, safety mat, -) has intervened.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWaitLoad",
				nodeId = {nameSpaceIndex = 1, identifier = 6455},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WaitLoad",
				displayName = "WaitLoad",
				description = "The WaitLoad Variable is true if the machine is waiting for pieces.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWaitUnload",
				nodeId = {nameSpaceIndex = 1, identifier = 6454},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WaitUnload",
				displayName = "WaitUnload",
				description = "The WaitUnload Variable is true if the machine is waiting to unload pieces.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcFlagsWarning",
				nodeId = {nameSpaceIndex = 1, identifier = 6447},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:Warning",
				displayName = "Warning",
				description = "The Warning Variable is true if at least one warning exists.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcFlagsWorkpiecePresent",
				nodeId = {nameSpaceIndex = 1, identifier = 6443},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:WorkpiecePresent",
				displayName = "WorkpiecePresent",
				description = "The WorkpiecePresent Variable is true if at least one piece is inside the machine.@en",
				type = refBy(BooleanType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = true
			}
		}
	};

	UAObjectType opcWwMachineTypeStateSubUnitsSubUnitOverview = {
		name = "opcWwMachineTypeStateSubUnitsSubUnitOverview",
		nodeId = {nameSpaceIndex = 1, identifier = 5038},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Overview",
		displayName = "Overview",
		description = "The Overview Object provides a general overview of the unit.@en",
		optional = false,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldVariableType {
				name = "opcOverviewCurrentMode",
				nodeId = {nameSpaceIndex = 1, identifier = 6461},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:CurrentMode",
				displayName = "CurrentMode",
				description = "The CurrentMode Variable provides the generalized mode of the unit.@en",
				type = refBy(opcWwUnitModeEnumerationType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}, UAFieldVariableType {
				name = "opcOverviewCurrentState",
				nodeId = {nameSpaceIndex = 1, identifier = 6460},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:CurrentState",
				displayName = "CurrentState",
				description = "The CurrentState Variable provides the generalized state of the unit.@en",
				type = refBy(opcWwUnitStateEnumerationType),
				typeDefinition = refBy(opcBaseDataVariableTypeType),
				optional = false
			}
		}
	};

	UAObjectType opcWwMachineTypeStateSubUnitsSubUnitValues = {
		name = "opcWwMachineTypeStateSubUnitsSubUnitValues",
		nodeId = {nameSpaceIndex = 1, identifier = 5040},
		nodeClass = NodeClass::UAObject,
		browseName = "1:Values",
		displayName = "Values",
		description = "The Values Object provides the counters of the unit.@en",
		optional = true,
		typeDefinition = refBy(opcBaseObjectType),
		fields = {
			UAFieldVariableType {
				name = "opcValuesAbsoluteErrorTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6478},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteErrorTime",
				displayName = "AbsoluteErrorTime",
				description = "The AbsoluteErrorTime Variable provides the absolute time of the ERROR_4 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteLength",
				nodeId = {nameSpaceIndex = 1, identifier = 6496},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteLength",
				displayName = "AbsoluteLength",
				description = "The AbsoluteLength Variable provides the absolute produced length in mm.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteMachineOffTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6470},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteMachineOffTime",
				displayName = "AbsoluteMachineOffTime",
				description = "The AbsoluteOfflineTime can be calculated by the machine. The shutdown time and the starting time have to be stored on the machine.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteMachineOnTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6480},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteMachineOnTime",
				displayName = "AbsoluteMachineOnTime",
				description = "The AbsoluteMachineOnTime Variable provides the absolute time in msec the machine is turned on based on the MachineOn state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePiecesIn",
				nodeId = {nameSpaceIndex = 1, identifier = 6498},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePiecesIn",
				displayName = "AbsolutePiecesIn",
				description = "The AbsolutePiecesIn Variable provides the absolute count of pieces which came into the machine.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePiecesOut",
				nodeId = {nameSpaceIndex = 1, identifier = 6500},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePiecesOut",
				displayName = "AbsolutePiecesOut",
				description = "The AbsolutePiecesOut Variable provides the absolute count of pieces which came out of the machine.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsolutePowerPresentTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6482},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsolutePowerPresentTime",
				displayName = "AbsolutePowerPresentTime",
				description = "The AbsolutePowerPresentTime Variable provides the absolute time in msec the machine has power on based on the PowerPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6484},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionTime",
				displayName = "AbsoluteProductionTime",
				description = "The AbsoluteProductionTime Variable provides the absolute time in msec of the machine is working at least with one workpiece based on the RecipeInRun and PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionWaitWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6488},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionWaitWorkpieceTime",
				displayName = "AbsoluteProductionWaitWorkpieceTime",
				description = "The AbsoluteProductionWaitWorkpieceTime Variable provides the absolute time in msec of the machine is in working mode, bring the consent out to insert workpiece but no workpiece incoming from the previous machine based on the ReceipeInRun and WaitLoad state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteProductionWithoutWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6486},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteProductionWithoutWorkpieceTime",
				displayName = "AbsoluteProductionWithoutWorkpieceTime",
				description = "The AbsoluteProductionWithoutWorkpieceTime Variable provides the absolute time in msec of the machine is working but without workpieces inside based on the RecipeInRun and !PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteReadyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6474},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteReadyTime",
				displayName = "AbsoluteReadyTime",
				description = "The AbsoluteReadyTime Variable provides the absolute time of the READY_2 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsAborted",
				nodeId = {nameSpaceIndex = 1, identifier = 6494},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsAborted",
				displayName = "AbsoluteRunsAborted",
				description = "The AbsoluteRunsAborted Variable provides the absolute count of aborted runs.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsGood",
				nodeId = {nameSpaceIndex = 1, identifier = 6490},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsGood",
				displayName = "AbsoluteRunsGood",
				description = "The AbsoluteRunsGood Variable provides the absolute count of finished runs.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteRunsTotal",
				nodeId = {nameSpaceIndex = 1, identifier = 6492},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteRunsTotal",
				displayName = "AbsoluteRunsTotal",
				description = "The AbsoluteRunsTotal Variable provides the absolute count of total runs.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteStandbyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6472},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteStandbyTime",
				displayName = "AbsoluteStandbyTime",
				description = "The AbsoluteStandbyTime Variable provides the absolute time of the STANDBY_1 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAbsoluteWorkingTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6476},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AbsoluteWorkingTime",
				displayName = "AbsoluteWorkingTime",
				description = "The AbsoluteWorkingTime Variable provides the absolute time of the WORKING_3 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesActualCycle",
				nodeId = {nameSpaceIndex = 1, identifier = 6469},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:ActualCycle",
				displayName = "ActualCycle",
				description = "The ActualCycle Variable provides the parts per minutes.@en",
				type = refBy(DoubleType),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesAxisOverride",
				nodeId = {nameSpaceIndex = 1, identifier = 6466},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:AxisOverride",
				displayName = "AxisOverride",
				description = "The AxisOverride Variable provides the override for the axis in percent.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesFeedSpeed",
				nodeId = {nameSpaceIndex = 1, identifier = 6468},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:FeedSpeed",
				displayName = "FeedSpeed",
				description = "The FeedSpeed Variable provides the feed speed in m/min for throughfeed machines.@en",
				type = refBy(DoubleType),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeErrorTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6479},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeErrorTime",
				displayName = "RelativeErrorTime",
				description = "The RelativeErrorTime Variable provides the relative time since startup of the ERROR_4 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeLength",
				nodeId = {nameSpaceIndex = 1, identifier = 6497},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeLength",
				displayName = "RelativeLength",
				description = "The RelativeLength Variable provides the relative produced length in mm since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeMachineOnTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6481},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeMachineOnTime",
				displayName = "RelativeMachineOnTime",
				description = "The RelativeMachineOnTime Variable provides the relative time in msec since startup the machine is turned on based on the MachineOn state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePiecesIn",
				nodeId = {nameSpaceIndex = 1, identifier = 6499},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePiecesIn",
				displayName = "RelativePiecesIn",
				description = "The RelativePiecesIn Variable provides the relative count of pieces which came into the machine since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePiecesOut",
				nodeId = {nameSpaceIndex = 1, identifier = 6501},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePiecesOut",
				displayName = "RelativePiecesOut",
				description = "The RelativePiecesOut Variable provides the relative count of pieces which came out of the machine since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativePowerPresentTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6483},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativePowerPresentTime",
				displayName = "RelativePowerPresentTime",
				description = "The RelativePowerPresentTime Variable provides the relative time in msec since startup the machine has power on based on the PowerPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6485},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionTime",
				displayName = "RelativeProductionTime",
				description = "The RelativeProductionTime Variable provides the relative time in msec since startup of the machine is working at least with one workpiece based on the RecipeInRun and PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionWaitWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6489},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionWaitWorkpieceTime",
				displayName = "RelativeProductionWaitWorkpieceTime",
				description = "The RelativeProductionWaitWorkpieceTime Variable provides the relative time in msec waiting for workpieces since startup of the machine is in working mode, bring the consent out to insert workpiece but no workpiece incoming from the previous machine based on the ReceipeInRun and WaitLoad state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeProductionWithoutWorkpieceTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6487},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeProductionWithoutWorkpieceTime",
				displayName = "RelativeProductionWithoutWorkpieceTime",
				description = "The RelativeProductionWithoutWorkpieceTime Variable provides the relative time in msec since startup of the machine is working but without workpieces inside based on the RecipeInRun and !PiecesPresent state.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeReadyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6475},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeReadyTime",
				displayName = "RelativeReadyTime",
				description = "The RelativeReadyTime Variable provides the relative time since startup of the READY_2 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsAborted",
				nodeId = {nameSpaceIndex = 1, identifier = 6495},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsAborted",
				displayName = "RelativeRunsAborted",
				description = "The RelativeRunsAborted Variable provides the relative count of aborted runs since the machine has started.@3",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsGood",
				nodeId = {nameSpaceIndex = 1, identifier = 6491},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsGood",
				displayName = "RelativeRunsGood",
				description = "The RelativeRunsGood Variable provides the relative count of finished runs since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeRunsTotal",
				nodeId = {nameSpaceIndex = 1, identifier = 6493},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeRunsTotal",
				displayName = "RelativeRunsTotal",
				description = "The RelativeRunsTotal Variable provides the relative count of total runs since the machine has started.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeStandbyTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6473},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeStandbyTime",
				displayName = "RelativeStandbyTime",
				description = "The RelativeStandbyTime Variable provides the relative time since startup of the STANDBY_1 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesRelativeWorkingTime",
				nodeId = {nameSpaceIndex = 1, identifier = 6477},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:RelativeWorkingTime",
				displayName = "RelativeWorkingTime",
				description = "The RelativeWorkingTime Variable provides the relative time since startup of the WORKING_3 state in msec.@en",
				type = refBy(UnsignedInteger64Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}, UAFieldVariableType {
				name = "opcValuesSpindleOverride",
				nodeId = {nameSpaceIndex = 1, identifier = 6467},
				nodeClass = NodeClass::UAVariable,
				browseName = "1:SpindleOverride",
				displayName = "SpindleOverride",
				description = "The SpindleOverride Variable provides the override for the spindle in percent.@en",
				type = refBy(UnsignedInteger32Type),
				typeDefinition = refBy(opcBaseAnalogTypeType),
				optional = true
			}
		}
	};

	UARootVariableType opcWwBaseEventTypeArguments = {
		name = "opcWwBaseEventTypeArguments",
		nodeId = {nameSpaceIndex = 1, identifier = 6232},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:Arguments",
		displayName = "Arguments",
		description = "The Arguments Variable is an argument value array of one dimension that can be used to parameterize the message. The number of the indexing in the array corresponds to the placeholder number in the message text. This ensures that the formatting functions of the implementations enable the localized message texts to be created.@en",
		optional = true,
		type = refBy(opcWwMessageArgumentDataTypeType),
		typeDefinition = refBy(opcPropertyTypeType),
		rootParent = refBy(opcWwBaseEventType),
		valueRank = 1,
		arrayDimensions = 0
	};

	UARootVariableType opcWwBaseEventTypeEventCategory = {
		name = "opcWwBaseEventTypeEventCategory",
		nodeId = {nameSpaceIndex = 1, identifier = 6056},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:EventCategory",
		displayName = "EventCategory",
		description = "The EventCategory Variable provides the category of the event.@en",
		optional = false,
		type = refBy(opcWwEventCategoryEnumerationType),
		typeDefinition = refBy(opcPropertyTypeType),
		rootParent = refBy(opcWwBaseEventType)
	};

	UARootVariableType opcWwBaseEventTypeGroup = {
		name = "opcWwBaseEventTypeGroup",
		nodeId = {nameSpaceIndex = 1, identifier = 259},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:Group",
		displayName = "Group",
		description = "The Group Variable specifies the class or group of the Message like safety, emergency, consumable.  See chapter Categorizing and grouping the messages, events, alarms and conditions.@en",
		optional = true,
		type = refBy(StringType),
		typeDefinition = refBy(opcPropertyTypeType),
		rootParent = refBy(opcWwBaseEventType)
	};

	UARootVariableType opcWwBaseEventTypeLocalizedMessages = {
		name = "opcWwBaseEventTypeLocalizedMessages",
		nodeId = {nameSpaceIndex = 1, identifier = 260},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:LocalizedMessages",
		displayName = "LocalizedMessages",
		description = "The LocalizedMessages Variable contains an array of localized messages corresponding to the installed server languages.@en",
		optional = true,
		type = refBy(opcLocalizedTextType),
		typeDefinition = refBy(opcPropertyTypeType),
		rootParent = refBy(opcWwBaseEventType),
		valueRank = 1,
		arrayDimensions = 0
	};

	UARootVariableType opcWwBaseEventTypeMessageId = {
		name = "opcWwBaseEventTypeMessageId",
		nodeId = {nameSpaceIndex = 1, identifier = 256},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:MessageId",
		displayName = "MessageId",
		description = "The MessageId Variable is a unique Identifier like a number or name of the message in the cause path (PathParts) determined Module. Example: A4711 or 1@en",
		optional = false,
		type = refBy(StringType),
		typeDefinition = refBy(opcPropertyTypeType),
		rootParent = refBy(opcWwBaseEventType)
	};

	UARootVariableType opcWwBaseEventTypeMessageName = {
		name = "opcWwBaseEventTypeMessageName",
		nodeId = {nameSpaceIndex = 1, identifier = 257},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:MessageName",
		displayName = "MessageName",
		description = "The MessageName Variable is a short name like a number or title to reference a translation of the general message text. Example: ID_MSG_EmergencyAlarm.@en",
		optional = true,
		type = refBy(StringType),
		typeDefinition = refBy(opcPropertyTypeType),
		rootParent = refBy(opcWwBaseEventType)
	};

	UARootVariableType opcWwBaseEventTypePathParts = {
		name = "opcWwBaseEventTypePathParts",
		nodeId = {nameSpaceIndex = 1, identifier = 258},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:PathParts",
		displayName = "PathParts",
		description = "The PathParts Variable is an array of Path information strings based on a server independent hierarchical structure of modules or an application specific expansion of that. It is an additional location infor-mation beside the SourceName.@en",
		optional = false,
		type = refBy(StringType),
		typeDefinition = refBy(opcPropertyTypeType),
		rootParent = refBy(opcWwBaseEventType),
		valueRank = 1,
		arrayDimensions = 0
	};

	UARootVariableType opcIWwEventMessageTypeArguments = {
		name = "opcIWwEventMessageTypeArguments",
		nodeId = {nameSpaceIndex = 1, identifier = 6222},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:Arguments",
		displayName = "Arguments",
		description = "The Arguments Variable is an argument value array of one dimension that can be used to parameterize the message. The number of the indexing in the array corresponds to the placeholder number in the message text. This ensures that the formatting functions of the implementations enable the localized message texts to be created.@en",
		optional = true,
		type = refBy(opcWwMessageArgumentDataTypeType),
		typeDefinition = refBy(opcPropertyTypeType),
		rootParent = refBy(opcIWwEventMessageType),
		valueRank = 1,
		arrayDimensions = 0
	};

	UARootVariableType opcIWwEventMessageTypeEventCategory = {
		name = "opcIWwEventMessageTypeEventCategory",
		nodeId = {nameSpaceIndex = 1, identifier = 6169},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:EventCategory",
		displayName = "EventCategory",
		description = "The EventCategory Variable provides the category of the event.@en",
		optional = false,
		type = refBy(opcWwEventCategoryEnumerationType),
		typeDefinition = refBy(opcPropertyTypeType),
		rootParent = refBy(opcIWwEventMessageType)
	};

	UARootVariableType opcIWwEventMessageTypeGroup = {
		name = "opcIWwEventMessageTypeGroup",
		nodeId = {nameSpaceIndex = 1, identifier = 6220},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:Group",
		displayName = "Group",
		description = "The Group Variable specifies the class or group of the Message like safety, emergency, consumable.  See chapter Categorizing and grouping the messages, events, alarms and conditions.@en",
		optional = true,
		type = refBy(StringType),
		typeDefinition = refBy(opcPropertyTypeType),
		rootParent = refBy(opcIWwEventMessageType)
	};

	UARootVariableType opcIWwEventMessageTypeLocalizedMessages = {
		name = "opcIWwEventMessageTypeLocalizedMessages",
		nodeId = {nameSpaceIndex = 1, identifier = 6221},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:LocalizedMessages",
		displayName = "LocalizedMessages",
		description = "The LocalizedMessages Variable contains an array of localized messages corresponding to the installed server languages.@en",
		optional = true,
		type = refBy(opcLocalizedTextType),
		typeDefinition = refBy(opcPropertyTypeType),
		rootParent = refBy(opcIWwEventMessageType),
		valueRank = 1,
		arrayDimensions = 0
	};

	UARootVariableType opcIWwEventMessageTypeMessageId = {
		name = "opcIWwEventMessageTypeMessageId",
		nodeId = {nameSpaceIndex = 1, identifier = 6217},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:MessageId",
		displayName = "MessageId",
		description = "The MessageId Variable is a unique Identifier like a number or name of the message in the cause path (PathParts) determined Module. Example: A4711 or 1@en",
		optional = false,
		type = refBy(StringType),
		typeDefinition = refBy(opcPropertyTypeType),
		rootParent = refBy(opcIWwEventMessageType)
	};

	UARootVariableType opcIWwEventMessageTypeMessageName = {
		name = "opcIWwEventMessageTypeMessageName",
		nodeId = {nameSpaceIndex = 1, identifier = 6218},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:MessageName",
		displayName = "MessageName",
		description = "The MessageName Variable is a short name like a number or title to reference a translation of the general message text. Example: ID_MSG_EmergencyAlarm.@en",
		optional = true,
		type = refBy(StringType),
		typeDefinition = refBy(opcPropertyTypeType),
		rootParent = refBy(opcIWwEventMessageType)
	};

	UARootVariableType opcIWwEventMessageTypePathParts = {
		name = "opcIWwEventMessageTypePathParts",
		nodeId = {nameSpaceIndex = 1, identifier = 6219},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:PathParts",
		displayName = "PathParts",
		description = "The PathParts Variable is an array of Path information strings based on a server independent hierarchical structure of modules or an application specific expansion of that. It is an additional location infor-mation beside the SourceName. Example:  Machine, FixedSide, Sizing, Milling1@en",
		optional = false,
		type = refBy(StringType),
		typeDefinition = refBy(opcPropertyTypeType),
		rootParent = refBy(opcIWwEventMessageType),
		valueRank = 1,
		arrayDimensions = 0
	};

	UARootVariableType opcIWwUnitFlagsTypeAirPresent = {
		name = "opcIWwUnitFlagsTypeAirPresent",
		nodeId = {nameSpaceIndex = 1, identifier = 88},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AirPresent",
		displayName = "AirPresent",
		description = "The AirPresent Variable is true if the air pressure present in the machine.@en",
		optional = true,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeAlarm = {
		name = "opcIWwUnitFlagsTypeAlarm",
		nodeId = {nameSpaceIndex = 1, identifier = 97},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:Alarm",
		displayName = "Alarm",
		description = "The Alarm Variable is true if at least one alarm exists.@en",
		optional = false,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeCalibrated = {
		name = "opcIWwUnitFlagsTypeCalibrated",
		nodeId = {nameSpaceIndex = 1, identifier = 92},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:Calibrated",
		displayName = "Calibrated",
		description = "The Calibrated Variable is true if all devices are calibrated.@en",
		optional = false,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeDustChipSuction = {
		name = "opcIWwUnitFlagsTypeDustChipSuction",
		nodeId = {nameSpaceIndex = 1, identifier = 89},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:DustChipSuction",
		displayName = "DustChipSuction",
		description = "The DustChipSuction Variable is true if the dust and chip suction is ready.@en",
		optional = true,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeEmergency = {
		name = "opcIWwUnitFlagsTypeEmergency",
		nodeId = {nameSpaceIndex = 1, identifier = 90},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:Emergency",
		displayName = "Emergency",
		description = "The Emergency Variable is true if at least one emergency button is pressed.@en",
		optional = false,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeEnergySaving = {
		name = "opcIWwUnitFlagsTypeEnergySaving",
		nodeId = {nameSpaceIndex = 1, identifier = 108},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:EnergySaving",
		displayName = "EnergySaving",
		description = "The EnergySaving Variable is true if energy saving is activated on the machine.@en",
		optional = true,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeError = {
		name = "opcIWwUnitFlagsTypeError",
		nodeId = {nameSpaceIndex = 1, identifier = 96},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:Error",
		displayName = "Error",
		description = "The Error Variable is true if at least one reason exists which prevents the machine from working.@en",
		optional = false,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeExternalEmergency = {
		name = "opcIWwUnitFlagsTypeExternalEmergency",
		nodeId = {nameSpaceIndex = 1, identifier = 109},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:ExternalEmergency",
		displayName = "ExternalEmergency",
		description = "The ExternalEmergency Variable is true if there is an emergency from the line controller.@en",
		optional = true,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeFeedRuns = {
		name = "opcIWwUnitFlagsTypeFeedRuns",
		nodeId = {nameSpaceIndex = 1, identifier = 111},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:FeedRuns",
		displayName = "FeedRuns",
		description = "The FeedRuns Variable is true if the feed is running on a throughfeed machine.@en",
		optional = true,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeHold = {
		name = "opcIWwUnitFlagsTypeHold",
		nodeId = {nameSpaceIndex = 1, identifier = 99},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:Hold",
		displayName = "Hold",
		description = "The Hold Variable is true if the movements are paused by the operator.@en",
		optional = true,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeLoadingEnabled = {
		name = "opcIWwUnitFlagsTypeLoadingEnabled",
		nodeId = {nameSpaceIndex = 1, identifier = 6033},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:LoadingEnabled",
		displayName = "LoadingEnabled",
		description = "",
		optional = true,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeMachineInitialized = {
		name = "opcIWwUnitFlagsTypeMachineInitialized",
		nodeId = {nameSpaceIndex = 1, identifier = 86},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:MachineInitialized",
		displayName = "MachineInitialized",
		description = "The MachineInitialized Variable is true if the MachineOn is true, the plc and the control processes are running. The machine is ready for usage for the operator.@en",
		optional = false,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeMachineOn = {
		name = "opcIWwUnitFlagsTypeMachineOn",
		nodeId = {nameSpaceIndex = 1, identifier = 85},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:MachineOn",
		displayName = "MachineOn",
		description = "The MachineOn Variable is true if the machine is switched on. If the OPC UA Server runs on the machine this value is always true.@en",
		optional = false,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeMaintenanceRequired = {
		name = "opcIWwUnitFlagsTypeMaintenanceRequired",
		nodeId = {nameSpaceIndex = 1, identifier = 110},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:MaintenanceRequired",
		displayName = "MaintenanceRequired",
		description = "The MaintenanceRequired Variable is true if maintenance is required.@en",
		optional = true,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeManualActivityRequired = {
		name = "opcIWwUnitFlagsTypeManualActivityRequired",
		nodeId = {nameSpaceIndex = 1, identifier = 103},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:ManualActivityRequired",
		displayName = "ManualActivityRequired",
		description = "The ManualActivityRequired Variable is true if a manual activity by the operator is required. The RecipeInRun is not affected.@en",
		optional = true,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeMoving = {
		name = "opcIWwUnitFlagsTypeMoving",
		nodeId = {nameSpaceIndex = 1, identifier = 95},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:Moving",
		displayName = "Moving",
		description = "The Moving Variable is true if at least one axis is moving.@en",
		optional = true,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypePowerPresent = {
		name = "opcIWwUnitFlagsTypePowerPresent",
		nodeId = {nameSpaceIndex = 1, identifier = 87},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:PowerPresent",
		displayName = "PowerPresent",
		description = "The PowerPresent Variable is true if 400V are present (the drives are ready to move).@en",
		optional = false,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeRecipeInHold = {
		name = "opcIWwUnitFlagsTypeRecipeInHold",
		nodeId = {nameSpaceIndex = 1, identifier = 102},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RecipeInHold",
		displayName = "RecipeInHold",
		description = "The RecipeInHold Variable is true if the machine is paused by the program. This is only possible if the RecipeInRun Variable is also true.@en",
		optional = true,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeRecipeInRun = {
		name = "opcIWwUnitFlagsTypeRecipeInRun",
		nodeId = {nameSpaceIndex = 1, identifier = 100},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RecipeInRun",
		displayName = "RecipeInRun",
		description = "The RecipeInRun Variable is true if the machine runs its program. This is only possible if the Error Variable is false. However, if the machine is paused by the program, the machine is considered to still be running its program, i.e. while the RecipeInHold Variable is true, the RecipeInRun cannot be false.@en",
		optional = false,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeRecipeInSetup = {
		name = "opcIWwUnitFlagsTypeRecipeInSetup",
		nodeId = {nameSpaceIndex = 1, identifier = 101},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RecipeInSetup",
		displayName = "RecipeInSetup",
		description = "The RecipeInSetup Variable is true if the RecipeInRun is true and the machine is in the setup phase (example: automatic tool change).@en",
		optional = true,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeRemote = {
		name = "opcIWwUnitFlagsTypeRemote",
		nodeId = {nameSpaceIndex = 1, identifier = 93},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:Remote",
		displayName = "Remote",
		description = "The Remote Variable is true if the machine is working with programs sent by the supervisor or other external application.@en",
		optional = true,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType),
		accessLevel = 3
	};

	UARootVariableType opcIWwUnitFlagsTypeSafety = {
		name = "opcIWwUnitFlagsTypeSafety",
		nodeId = {nameSpaceIndex = 1, identifier = 91},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:Safety",
		displayName = "Safety",
		description = "The Safety Variable is true if at least one safety device (light curtain, safety mat, -) has intervened.@en",
		optional = true,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeWaitLoad = {
		name = "opcIWwUnitFlagsTypeWaitLoad",
		nodeId = {nameSpaceIndex = 1, identifier = 107},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:WaitLoad",
		displayName = "WaitLoad",
		description = "The WaitLoad Variable is true if the machine is waiting for pieces.@en",
		optional = true,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeWaitUnload = {
		name = "opcIWwUnitFlagsTypeWaitUnload",
		nodeId = {nameSpaceIndex = 1, identifier = 106},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:WaitUnload",
		displayName = "WaitUnload",
		description = "The WaitUnload Variable is true if the machine is waiting to unload pieces.@en",
		optional = true,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeWarning = {
		name = "opcIWwUnitFlagsTypeWarning",
		nodeId = {nameSpaceIndex = 1, identifier = 98},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:Warning",
		displayName = "Warning",
		description = "The Warning Variable is true if at least one warning exists.@en",
		optional = false,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitFlagsTypeWorkpiecePresent = {
		name = "opcIWwUnitFlagsTypeWorkpiecePresent",
		nodeId = {nameSpaceIndex = 1, identifier = 94},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:WorkpiecePresent",
		displayName = "WorkpiecePresent",
		description = "The WorkpiecePresent Variable is true if at least one piece is inside the machine.@en",
		optional = true,
		type = refBy(BooleanType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitFlagsType)
	};

	UARootVariableType opcIWwUnitOverviewTypeCurrentMode = {
		name = "opcIWwUnitOverviewTypeCurrentMode",
		nodeId = {nameSpaceIndex = 1, identifier = 130},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:CurrentMode",
		displayName = "CurrentMode",
		description = "The CurrentMode Variable provides the generalized mode of the component.@en",
		optional = false,
		type = refBy(opcWwUnitModeEnumerationType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitOverviewType)
	};

	UARootVariableType opcIWwUnitOverviewTypeCurrentState = {
		name = "opcIWwUnitOverviewTypeCurrentState",
		nodeId = {nameSpaceIndex = 1, identifier = 129},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:CurrentState",
		displayName = "CurrentState",
		description = "The CurrentState Variable provides the generalized state of the component.@en",
		optional = false,
		type = refBy(opcWwUnitStateEnumerationType),
		typeDefinition = refBy(opcBaseDataVariableTypeType),
		rootParent = refBy(opcIWwUnitOverviewType)
	};

	UARootVariableType opcIWwUnitValuesTypeAbsoluteErrorTime = {
		name = "opcIWwUnitValuesTypeAbsoluteErrorTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6034},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AbsoluteErrorTime",
		displayName = "AbsoluteErrorTime",
		description = "The AbsoluteErrorTime Variable provides the absolute time in msec of the ERROR_4 state in msec.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeAbsoluteLength = {
		name = "opcIWwUnitValuesTypeAbsoluteLength",
		nodeId = {nameSpaceIndex = 1, identifier = 6035},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AbsoluteLength",
		displayName = "AbsoluteLength",
		description = "The AbsoluteLength Variable provides the absolute produced length in mm.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeAbsoluteMachineOffTime = {
		name = "opcIWwUnitValuesTypeAbsoluteMachineOffTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6037},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AbsoluteMachineOffTime",
		displayName = "AbsoluteMachineOffTime",
		description = "The AbsoluteOfflineTime can be calculated by the machine. The shutdown time and the starting time have to be stored on the machine.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeAbsoluteMachineOnTime = {
		name = "opcIWwUnitValuesTypeAbsoluteMachineOnTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6036},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AbsoluteMachineOnTime",
		displayName = "AbsoluteMachineOnTime",
		description = "The AbsoluteMachineOnTime Variable provides the absolute time in msec the machine is turned on based on the MachineOn state.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType),
		accessLevel = 3
	};

	UARootVariableType opcIWwUnitValuesTypeAbsolutePiecesIn = {
		name = "opcIWwUnitValuesTypeAbsolutePiecesIn",
		nodeId = {nameSpaceIndex = 1, identifier = 6038},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AbsolutePiecesIn",
		displayName = "AbsolutePiecesIn",
		description = "The AbsolutePiecesIn Variable provides the absolute count of pieces which came into the machine.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeAbsolutePiecesOut = {
		name = "opcIWwUnitValuesTypeAbsolutePiecesOut",
		nodeId = {nameSpaceIndex = 1, identifier = 6039},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AbsolutePiecesOut",
		displayName = "AbsolutePiecesOut",
		description = "The AbsolutePiecesOut Variable provides the absolute count of pieces which came out of the machine.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeAbsolutePowerPresentTime = {
		name = "opcIWwUnitValuesTypeAbsolutePowerPresentTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6040},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AbsolutePowerPresentTime",
		displayName = "AbsolutePowerPresentTime",
		description = "The AbsolutePowerPresentTime Variable provides the absolute time in msec the machine has power on based on the PowerPresent state.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeAbsoluteProductionTime = {
		name = "opcIWwUnitValuesTypeAbsoluteProductionTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6041},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AbsoluteProductionTime",
		displayName = "AbsoluteProductionTime",
		description = "The AbsoluteProductionTime Variable provides the absolute time in msec of the machine is working at least with one workpiece based on the RecipeInRun and PiecesPresent state.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeAbsoluteProductionWaitWorkpieceTime = {
		name = "opcIWwUnitValuesTypeAbsoluteProductionWaitWorkpieceTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6042},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AbsoluteProductionWaitWorkpieceTime",
		displayName = "AbsoluteProductionWaitWorkpieceTime",
		description = "The AbsoluteProductionWaitWorkpieceTime Variable provides the absolute time in msec of the machine is in working mode, bring the consent out to insert workpiece but no workpiece incoming from the previous machine based on the ReceipeInRun and WaitLoad state.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeAbsoluteProductionWithoutWorkpieceTime = {
		name = "opcIWwUnitValuesTypeAbsoluteProductionWithoutWorkpieceTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6043},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AbsoluteProductionWithoutWorkpieceTime",
		displayName = "AbsoluteProductionWithoutWorkpieceTime",
		description = "The AbsoluteProductionWithoutWorkpieceTime Variable provides the absolute time in msec of the machine is working but without workpieces inside based on the RecipeInRun and !PiecesPresent state.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeAbsoluteReadyTime = {
		name = "opcIWwUnitValuesTypeAbsoluteReadyTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6044},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AbsoluteReadyTime",
		displayName = "AbsoluteReadyTime",
		description = "The AbsoluteReadyTime Variable provides the absolute time in msec of the READY_2 state in msec.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeAbsoluteRunsAborted = {
		name = "opcIWwUnitValuesTypeAbsoluteRunsAborted",
		nodeId = {nameSpaceIndex = 1, identifier = 6045},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AbsoluteRunsAborted",
		displayName = "AbsoluteRunsAborted",
		description = "The AbsoluteRunsAborted Variable provides the absolute count of aborted runs.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeAbsoluteRunsGood = {
		name = "opcIWwUnitValuesTypeAbsoluteRunsGood",
		nodeId = {nameSpaceIndex = 1, identifier = 6046},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AbsoluteRunsGood",
		displayName = "AbsoluteRunsGood",
		description = "The AbsoluteRunsGood Variable provides the absolute count of finished runs.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeAbsoluteRunsTotal = {
		name = "opcIWwUnitValuesTypeAbsoluteRunsTotal",
		nodeId = {nameSpaceIndex = 1, identifier = 6047},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AbsoluteRunsTotal",
		displayName = "AbsoluteRunsTotal",
		description = "The AbsoluteRunsTotal Variable provides the absolute count of total runs.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeAbsoluteStandbyTime = {
		name = "opcIWwUnitValuesTypeAbsoluteStandbyTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6048},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AbsoluteStandbyTime",
		displayName = "AbsoluteStandbyTime",
		description = "The AbsoluteStandbyTime Variable provides the absolute time in msec of the STANDBY_1 state in msec.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeAbsoluteWorkingTime = {
		name = "opcIWwUnitValuesTypeAbsoluteWorkingTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6049},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AbsoluteWorkingTime",
		displayName = "AbsoluteWorkingTime",
		description = "The AbsoluteWorkingTime Variable provides the absolute time in msec of the WORKING_3 state in msec.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeActualCycle = {
		name = "opcIWwUnitValuesTypeActualCycle",
		nodeId = {nameSpaceIndex = 1, identifier = 6050},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:ActualCycle",
		displayName = "ActualCycle",
		description = "The ActualCycle Variable provides the parts per minutes.@en",
		optional = true,
		type = refBy(DoubleType),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeAxisOverride = {
		name = "opcIWwUnitValuesTypeAxisOverride",
		nodeId = {nameSpaceIndex = 1, identifier = 6051},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:AxisOverride",
		displayName = "AxisOverride",
		description = "The AxisOverride Variable provides the override for the axis in percent.@en",
		optional = true,
		type = refBy(UnsignedInteger32Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeFeedSpeed = {
		name = "opcIWwUnitValuesTypeFeedSpeed",
		nodeId = {nameSpaceIndex = 1, identifier = 6052},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:FeedSpeed",
		displayName = "FeedSpeed",
		description = "The FeedSpeed Variable provides the feed speed in m/min for throughfeed machines.@en",
		optional = true,
		type = refBy(DoubleType),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeRelativeErrorTime = {
		name = "opcIWwUnitValuesTypeRelativeErrorTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6053},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RelativeErrorTime",
		displayName = "RelativeErrorTime",
		description = "The RelativeErrorTime Variable provides the relative time since startup of the ERROR_4 state in msec.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeRelativeLength = {
		name = "opcIWwUnitValuesTypeRelativeLength",
		nodeId = {nameSpaceIndex = 1, identifier = 6054},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RelativeLength",
		displayName = "RelativeLength",
		description = "The RelativeLength Variable provides the relative produced length in mm since the machine has started.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeRelativeMachineOnTime = {
		name = "opcIWwUnitValuesTypeRelativeMachineOnTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6055},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RelativeMachineOnTime",
		displayName = "RelativeMachineOnTime",
		description = "The RelativeMachineOnTime Variable provides the relative time in msec since startup the machine is turned on based on the MachineOn state.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeRelativePiecesIn = {
		name = "opcIWwUnitValuesTypeRelativePiecesIn",
		nodeId = {nameSpaceIndex = 1, identifier = 6057},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RelativePiecesIn",
		displayName = "RelativePiecesIn",
		description = "The RelativePiecesIn Variable provides the relative count of pieces which came into the machine since the machine has started.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeRelativePiecesOut = {
		name = "opcIWwUnitValuesTypeRelativePiecesOut",
		nodeId = {nameSpaceIndex = 1, identifier = 6058},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RelativePiecesOut",
		displayName = "RelativePiecesOut",
		description = "The RelativePiecesOut Variable provides the relative count of pieces which came out of the machine since the machine has started.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeRelativePowerPresentTime = {
		name = "opcIWwUnitValuesTypeRelativePowerPresentTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6059},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RelativePowerPresentTime",
		displayName = "RelativePowerPresentTime",
		description = "The RelativePowerPresentTime Variable provides the relative time in msec since startup the machine has power on based on the PowerPresent state.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeRelativeProductionTime = {
		name = "opcIWwUnitValuesTypeRelativeProductionTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6060},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RelativeProductionTime",
		displayName = "RelativeProductionTime",
		description = "The RelativeProductionTime Variable provides the relative time in msec since startup of the machine is working at least with one workpiece based on the RecipeInRun and PiecesPresent state.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeRelativeProductionWaitWorkpieceTime = {
		name = "opcIWwUnitValuesTypeRelativeProductionWaitWorkpieceTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6061},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RelativeProductionWaitWorkpieceTime",
		displayName = "RelativeProductionWaitWorkpieceTime",
		description = "The RelativeProductionWaitWorkpieceTime Variable provides the relative time in msec waiting for workpieces since startup of the machine is in working mode, bring the consent out to insert workpiece but no workpiece incoming from the previous machine based on the ReceipeInRun and WaitLoad state.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeRelativeProductionWithoutWorkpieceTime = {
		name = "opcIWwUnitValuesTypeRelativeProductionWithoutWorkpieceTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6062},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RelativeProductionWithoutWorkpieceTime",
		displayName = "RelativeProductionWithoutWorkpieceTime",
		description = "The RelativeProductionWithoutWorkpieceTime Variable provides the relative time in msec since startup of the machine is working but without workpieces inside based on the RecipeInRun and !PiecesPresent state.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeRelativeReadyTime = {
		name = "opcIWwUnitValuesTypeRelativeReadyTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6063},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RelativeReadyTime",
		displayName = "RelativeReadyTime",
		description = "The RelativeReadyTime Variable provides the relative time since startup of the READY_2 state in msec.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeRelativeRunsAborted = {
		name = "opcIWwUnitValuesTypeRelativeRunsAborted",
		nodeId = {nameSpaceIndex = 1, identifier = 6064},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RelativeRunsAborted",
		displayName = "RelativeRunsAborted",
		description = "The RelativeRunsAborted Variable provides the relative count of aborted runs since the machine has started.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeRelativeRunsGood = {
		name = "opcIWwUnitValuesTypeRelativeRunsGood",
		nodeId = {nameSpaceIndex = 1, identifier = 6065},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RelativeRunsGood",
		displayName = "RelativeRunsGood",
		description = "The RelativeRunsGood Variable provides the relative count of finished runs since the machine has started.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeRelativeRunsTotal = {
		name = "opcIWwUnitValuesTypeRelativeRunsTotal",
		nodeId = {nameSpaceIndex = 1, identifier = 6066},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RelativeRunsTotal",
		displayName = "RelativeRunsTotal",
		description = "The RelativeRunsTotal Variable provides the relative count of total runs since the machine has started.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeRelativeStandbyTime = {
		name = "opcIWwUnitValuesTypeRelativeStandbyTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6067},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RelativeStandbyTime",
		displayName = "RelativeStandbyTime",
		description = "The RelativeStandbyTime Variable provides the relative time since startup of the STANDBY_1 state in msec.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeRelativeWorkingTime = {
		name = "opcIWwUnitValuesTypeRelativeWorkingTime",
		nodeId = {nameSpaceIndex = 1, identifier = 6068},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:RelativeWorkingTime",
		displayName = "RelativeWorkingTime",
		description = "The RelativeWorkingTime Variable provides the relative time since startup of the WORKING_3 state in msec.@en",
		optional = true,
		type = refBy(UnsignedInteger64Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UARootVariableType opcIWwUnitValuesTypeSpindleOverride = {
		name = "opcIWwUnitValuesTypeSpindleOverride",
		nodeId = {nameSpaceIndex = 1, identifier = 6069},
		nodeClass = NodeClass::UAVariable,
		browseName = "1:SpindleOverride",
		displayName = "SpindleOverride",
		description = "The SpindleOverride Variable provides the override for the spindle in percent.@en",
		optional = true,
		type = refBy(UnsignedInteger32Type),
		typeDefinition = refBy(opcBaseAnalogTypeType),
		rootParent = refBy(opcIWwUnitValuesType)
	};

	UAObjectTypeType opcWwBaseEventType = {
		name = "opcWwBaseEventType",
		nodeId = {nameSpaceIndex = 1, identifier = 13},
		nodeClass = NodeClass::UAObjectType,
		browseName = "1:WwBaseEventType",
		displayName = "WwBaseEventType",
		description = "The WwBaseEventType represents a message event from a module@en",
		documentation = "https://reference.opcfoundation.org/v104/Woodworking/v100/docs/7.16"
	};

	UAObjectTypeType opcIWwBaseStateType = {
		name = "opcIWwBaseStateType",
		nodeId = {nameSpaceIndex = 1, identifier = 6},
		nodeClass = NodeClass::UAObjectType,
		browseName = "1:IWwBaseStateType",
		displayName = "IWwBaseStateType",
		description = "The IWwBaseStateType represents the state of an unit. An unit can be a machine of part of a machine.@en",
		documentation = "https://reference.opcfoundation.org/v104/Woodworking/v100/docs/7.5"
	};

	UAObjectTypeType opcIWwEventMessageType = {
		name = "opcIWwEventMessageType",
		nodeId = {nameSpaceIndex = 1, identifier = 1002},
		nodeClass = NodeClass::UAObjectType,
		browseName = "1:IWwEventMessageType",
		displayName = "IWwEventMessageType",
		description = "The interface definition IWwEventMessageType describes the common extensions for all events and conditions. Each instance definition that includes this interface with a HasInterface reference defines the predefined extensions@en",
		documentation = "https://reference.opcfoundation.org/v104/Woodworking/v100/docs/7.12"
	};

	UAObjectTypeType opcIWwStateType = {
		name = "opcIWwStateType",
		nodeId = {nameSpaceIndex = 1, identifier = 8},
		nodeClass = NodeClass::UAObjectType,
		browseName = "1:IWwStateType",
		displayName = "IWwStateType",
		description = "The IWwStateType provides a list of machine states@en",
		documentation = "https://reference.opcfoundation.org/v104/Woodworking/v100/docs/7.3"
	};

	UAObjectTypeType opcIWwSubUnitsType = {
		name = "opcIWwSubUnitsType",
		nodeId = {nameSpaceIndex = 1, identifier = 7},
		nodeClass = NodeClass::UAObjectType,
		browseName = "1:IWwSubUnitsType",
		displayName = "IWwSubUnitsType",
		description = "The IWwSubUnitsType provides a list of subUnits.@en",
		documentation = "https://reference.opcfoundation.org/v104/Woodworking/v100/docs/7.4"
	};

	UAObjectTypeType opcIWwUnitFlagsType = {
		name = "opcIWwUnitFlagsType",
		nodeId = {nameSpaceIndex = 1, identifier = 4},
		nodeClass = NodeClass::UAObjectType,
		browseName = "1:IWwUnitFlagsType",
		displayName = "IWwUnitFlagsType",
		description = "The IWwUnitFlagsType represents the flags of a unit@en",
		documentation = "https://reference.opcfoundation.org/v104/Woodworking/v100/docs/7.9"
	};

	UAObjectTypeType opcIWwUnitOverviewType = {
		name = "opcIWwUnitOverviewType",
		nodeId = {nameSpaceIndex = 1, identifier = 5},
		nodeClass = NodeClass::UAObjectType,
		browseName = "1:IWwUnitOverviewType",
		displayName = "IWwUnitOverviewType",
		description = "The IWwUnitOverviewType represents the generalized state of a unit@en",
		documentation = "https://reference.opcfoundation.org/v104/Woodworking/v100/docs/7.6"
	};

	UAObjectTypeType opcIWwUnitValuesType = {
		name = "opcIWwUnitValuesType",
		nodeId = {nameSpaceIndex = 1, identifier = 1006},
		nodeClass = NodeClass::UAObjectType,
		browseName = "1:IWwUnitValuesType",
		displayName = "IWwUnitValuesType",
		description = "The IWwUnitValuesType represents the values of a unit@en",
		documentation = "https://reference.opcfoundation.org/v104/Woodworking/v100/docs/7.10"
	};

	UAObjectTypeType opcWwEventsDispatcherType = {
		name = "opcWwEventsDispatcherType",
		nodeId = {nameSpaceIndex = 1, identifier = 15},
		nodeClass = NodeClass::UAObjectType,
		browseName = "1:WwEventsDispatcherType",
		displayName = "WwEventsDispatcherType",
		description = "The WwEventsDispatcherType represents a container that is an event dispatcher for machine diagnostic and information events@en",
		documentation = "https://reference.opcfoundation.org/v104/Woodworking/v100/docs/7.11"
	};

	UAObjectTypeType opcWwMachineType = {
		name = "opcWwMachineType",
		nodeId = {nameSpaceIndex = 1, identifier = 2},
		nodeClass = NodeClass::UAObjectType,
		browseName = "1:WwMachineType",
		displayName = "WwMachineType",
		description = "The WwMachineType represents a woodworking machine@en",
		documentation = "https://reference.opcfoundation.org/v104/Woodworking/v100/docs/7.2"
	};

	UAEnumType opcWwEventCategoryEnumerationType = {
		name = "opcWwEventCategoryEnumerationType",
		nodeId = {nameSpaceIndex = 1, identifier = 3004},
		nodeClass = NodeClass::UADataType,
		browseName = "1:WwEventCategoryEnumeration",
		displayName = "WwEventCategoryEnumeration",
		description = "",
		documentation = "https://reference.opcfoundation.org/v104/Woodworking/v100/docs/7.13",
		literals = {
			EnumLiteral {
				name = "_OTHER",
				ordinal = 0,
				description = "No other event category applies or it is unknown.@en"
			}, EnumLiteral {
				name = "_DIAGNOSTIC",
				ordinal = 1,
				description = "The event is a diagnostic event.@en"
			}, EnumLiteral {
				name = "_INFORMATION",
				ordinal = 2,
				description = "The event is an information event.@en"
			}, EnumLiteral {
				name = "_WARNING",
				ordinal = 3,
				description = "The event is a warning event.@en"
			}, EnumLiteral {
				name = "_ALARM",
				ordinal = 4,
				description = "The event is an alarm event.@en"
			}, EnumLiteral {
				name = "_ERROR",
				ordinal = 5,
				description = "The event is an error event.@en"
			}
		}
	};

	UAEnumType opcWwUnitModeEnumerationType = {
		name = "opcWwUnitModeEnumerationType",
		nodeId = {nameSpaceIndex = 1, identifier = 20},
		nodeClass = NodeClass::UADataType,
		browseName = "1:WwUnitModeEnumeration",
		displayName = "WwUnitModeEnumeration",
		description = "This enumeration represents the generalized mode of a unit.@en",
		documentation = "https://reference.opcfoundation.org/v104/Woodworking/v100/docs/7.8",
		literals = {
			EnumLiteral {
				name = "_OTHER",
				ordinal = 0,
				description = "This state is used if none of the other states below applies.@en"
			}, EnumLiteral {
				name = "_AUTOMATIC",
				ordinal = 1,
				description = "The unit is in automatic mode.@en"
			}, EnumLiteral {
				name = "_SEMIAUTOMATIC",
				ordinal = 2,
				description = "The unit is in semi-automatic mode.@en"
			}, EnumLiteral {
				name = "_MANUAL",
				ordinal = 3,
				description = "The unit is in manual mode.@en"
			}, EnumLiteral {
				name = "_SETUP",
				ordinal = 4,
				description = "The unit is in setup mode.@en"
			}, EnumLiteral {
				name = "_SLEEP",
				ordinal = 5,
				description = "The unit is in sleep mode. Component is still switched on, energy consumption reduced by e.g. reducing heating, switching drives off. Production is not possible.@en"
			}
		}
	};

	UAEnumType opcWwUnitStateEnumerationType = {
		name = "opcWwUnitStateEnumerationType",
		nodeId = {nameSpaceIndex = 1, identifier = 21},
		nodeClass = NodeClass::UADataType,
		browseName = "1:WwUnitStateEnumeration",
		displayName = "WwUnitStateEnumeration",
		description = "This enumeration represents the generalized state of a unit.@en",
		documentation = "https://reference.opcfoundation.org/v104/Woodworking/v100/docs/7.7",
		literals = {
			EnumLiteral {
				name = "_OFFLINE",
				ordinal = 0,
				description = "The component is offline.@en"
			}, EnumLiteral {
				name = "_STANDBY",
				ordinal = 1,
				description = "The unit is in standby.@en"
			}, EnumLiteral {
				name = "_READY",
				ordinal = 2,
				description = "The unit is ready to start working.@en"
			}, EnumLiteral {
				name = "_WORKING",
				ordinal = 3,
				description = "The unit is working.@en"
			}, EnumLiteral {
				name = "_ERROR",
				ordinal = 4,
				description = "The unit is not able to start working because there is an error. The cause can be an alarm or error or user intervention.@en"
			}
		}
	};

	UADataType opcWwMessageArgumentDataTypeType = {
		name = "opcWwMessageArgumentDataTypeType",
		nodeId = {nameSpaceIndex = 1, identifier = 3003},
		nodeClass = NodeClass::UADataType,
		browseName = "1:WwMessageArgumentDataType",
		displayName = "WwMessageArgumentDataType",
		description = "The WwArgumentDataType definition extends the argument structure with an argument value.@en",
		documentation = "https://reference.opcfoundation.org/v104/Woodworking/v100/docs/7.14",
		literals = {
			DataLiteral {
				name = "_Value",
				type = refBy(opcWwMessageArgumentValueDataTypeType),
				description = "The variable contains the value of the argument"
			}
		}
	};

	UADataType opcWwMessageArgumentValueDataTypeType = {
		name = "opcWwMessageArgumentValueDataTypeType",
		nodeId = {nameSpaceIndex = 1, identifier = 3002},
		nodeClass = NodeClass::UADataType,
		browseName = "1:WwMessageArgumentValueDataType",
		displayName = "WwMessageArgumentValueDataType",
		description = "The WwArgumentValueDataType definition defines the possible types of an argument value.@en",
		documentation = "https://reference.opcfoundation.org/v104/Woodworking/v100/docs/7.15",
		literals = {
			DataLiteral {
				name = "_Array",
				type = refBy(opcWwMessageArgumentValueDataTypeType),
				description = "The content of the value as an array of the own type"
			}, DataLiteral {
				name = "_Boolean",
				type = refBy(BooleanType),
				description = "The content of the value as a boolean"
			}, DataLiteral {
				name = "_Int16",
				type = refBy(Integer16Type),
				description = "The content of the value as a 16 bit integer"
			}, DataLiteral {
				name = "_Int32",
				type = refBy(Integer32Type),
				description = "The content of the value as a 32 bit integer"
			}, DataLiteral {
				name = "_Int64",
				type = refBy(Integer64Type),
				description = "The content of the value as a 64 bit integer"
			}, DataLiteral {
				name = "_SByte",
				type = refBy(SByteType),
				description = "The content of the value as a 8 bit integer"
			}, DataLiteral {
				name = "_UInt16",
				type = refBy(UnsignedInteger16Type),
				description = "The content of the value as a 16 bit unsigned integer"
			}, DataLiteral {
				name = "_UInt32",
				type = refBy(UnsignedInteger32Type),
				description = "The content of the value as a 32 bit unsigned integer"
			}, DataLiteral {
				name = "_UInt64",
				type = refBy(UnsignedInteger64Type),
				description = "The content of the value as a 64 bit unsigned integer"
			}, DataLiteral {
				name = "_Byte",
				type = refBy(ByteType),
				description = "The content of the value as a 8 bit unsigned integer"
			}, DataLiteral {
				name = "_DateTime",
				type = refBy(DateTimeType),
				description = "The content of the value as a datetime"
			}, DataLiteral {
				name = "_Guid",
				type = refBy(opcGuidType),
				description = "The content of the value as a GUID"
			}, DataLiteral {
				name = "_LocalizedText",
				type = refBy(opcLocalizedTextType),
				description = "The content of the value as a localized text"
			}, DataLiteral {
				name = "_Double",
				type = refBy(DoubleType),
				description = "The content of the value as a double"
			}, DataLiteral {
				name = "_Float",
				type = refBy(FloatType),
				description = "The content of the value as a float"
			}, DataLiteral {
				name = "_String",
				type = refBy(StringType),
				description = "The content of the value as a string"
			}, DataLiteral {
				name = "_Other",
				type = refBy(StringType),
				description = "The content of the value has no standard format and is instantiated as a string"
			}
		}
	};

	freeze {
		.; // every variable declared in this project
	} but (f|f.bindingTime >= BindingTime.compile);

}