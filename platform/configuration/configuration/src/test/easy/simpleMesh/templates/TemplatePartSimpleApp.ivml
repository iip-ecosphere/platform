project TemplatePartSimpleApp {

    import Applications;

    annotate BindingTime bindingTime = BindingTime::compile to .;
    
    Application tplApp = {
        id = "SimpleApp",
        name = "", // template, for now, may be ifConfigured would help in the underlying constraint; we have to figure out
        ver = "0.1.0",
        description = "",
        services = {refBy(tplMesh)}        
    };
    
    // --------------------- mesh ------------------
    
    ServiceMesh tplMesh = {
        description = "template service net",
        sources = {refBy(tplSource)}
    };
    
    MeshSource tplSource = {
        pollInterval = 800, // only if source is synchronous
        impl = refBy(tplSourceService),
        next = {refBy(tplConnMySourceMyReceiver)},
        pos_x = 10,
        pos_y = 10
    };
    
    MeshConnector tplConnMySourceMyReceiver = {
        name = "Source->Receiver",
        next = refBy(tplReceiver)
    };

    MeshSink tplReceiver = {
        impl = refBy(tplReceiverService),
        pos_x = 300,
        pos_y = 10
    };
    
    // ---------------------- services -----------------------
    
    Service tplSourceService = JavaService {
        id = "TplSimpleSource",
        name = "Template Simple Data Source",
        description = "",
        ver = "0.1.0",
        deployable = true,
        asynchronous = true,
        class = "de.iip_ecosphere.platform.test.apps.serviceImpl.SimpleSourceImpl",
        artifact = "de.iip-ecosphere.platform:apps.ServiceImpl:" + iipVer,
        kind = ServiceKind::SOURCE_SERVICE,
        output = {{type=refBy(tplRec1)}},
        input = {{type=refBy(tplFeedback), forward=false}}, 
        parameter = { // for UI testing only
          StringParameter {
            name="camIP", 
            defaultValue="127.0.0.1",
            systemProperty="iip.app.simpleMesh.camIP"
          },IntegerParameter {
            name="camPort", 
            defaultValue=-1,
            systemProperty="iip.app.simpleMesh.camPort"
          }
        },
        plugins = {refBy(BaSyx10Plugin)} // just for testing, would be specified individually at (AAS) connector
    };
    
    Service tplReceiverService = JavaService {
        id = "TplSimpleReceiver",
        name = "Template Simple Data Receiver",
        description = "",
        ver = "0.1.0",
        deployable = true,
        class = "de.iip_ecosphere.platform.test.apps.serviceImpl.SimpleReceiverImpl",
        artifact = "de.iip-ecosphere.platform:apps.ServiceImpl:" + iipVer,
        kind = ServiceKind::SINK_SERVICE,
        input = {{type=refBy(tplRec1)}},
        output = {{type=refBy(tplFeedback), forward=false}}
    };

    // just the type for mgtUI testing    
    Server tplServer = JavaServer {
      id = "tplMyServer",
      description = "Unneeded template server",
      ver = "0.0.1",
      host = "localhost",
      port = 9989,
      class = "java.lang.Object", // placeholder, will not work -> Server interface
      cmdArg = "--port=${port}"
    };
    
    // unused in app, shall only be in the Configuration AAS
    OpcUaV1Connector tplOpcUaConn = {
        id = "tplOpcConn",
        name = "Template OpcConn example",
        description = "",
        ver = "0.1.0",
        port = 1234, // default localhost
        
        input = {{type=refBy(tplRec1)}},
        output = {{type=refBy(tplRec1)}},
        inInterface = {type=refBy(tplRec1), path="/opc/machIn/"}, 
        outInterface = {type=refBy(tplRec1), path="/opc/machOut/"},
        traceRcv = TraceKind::TRACE,
        traceSent = TraceKind::TRACE,
        security = {
            keyAlias = "device",
            keystoreKey = "myOpc:keystore",
            authenticationKey = "myOpc:auth",
            hostNameVerification = false   
        },
        operations = {
          FieldAssignmentOperation{field=refBy(tplRec1.fields[0]), 
            operation=AddDataTranslationOperation{
                arguments={
                    DataFieldAccess{field=refBy(tplRec1.fields[0])},
                    IntegerConstantDataOperation{value=100}
                }
            }
          }, ModelCallOperation {
               name="myOp",
               arguments={
                   DataFieldAccess{field=refBy(tplRec1.fields[1])},
                   IntegerConstantDataOperation{value=110}
               }
          }
        }
    };    
     
    // ------------------------- types --------------------------

    RecordType tplRec1 = {
        name = "TplRec1",
        fields = {
            Field {
                name = "intField",
                type = refBy(IntegerType)
            }, Field {
                name = "stringField",
                type = refBy(StringType)
            }
        }
    };
    
    RecordType tplFeedback = {
        name = "TplFeedback",
        fields = {
            Field {
                name = "data",
                type = refBy(StringType)
            }
        }
    };
    
    // -------------------------- constants ------------------
    
    const Integer TplIntConstant = 1;

    freeze {
        .;
    }

}
