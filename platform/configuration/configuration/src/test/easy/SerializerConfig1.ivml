project SerializerConfig1 {

    import IIPEcosphere;
    import DataTypes;

    annotate BindingTime bindingTime = BindingTime::compile to .;

    // ------------ component setup ------------------

    serializer = Serializer::Json;
    // serviceManager, containerManager are already defined    
        
    aasServer = {
        schema = AasSchema::HTTP,
        port = 9001,
        host = "127.0.0.1"
    };
    aasRegistryServer = {
        schema = AasSchema::HTTP,
        port = 9002,
        host = "127.0.0.1",
        path = "registry"
    };
    aasImplServer = {
        port = 9003
    };
    aasProtocol = AasProtocolVabTcp{};

    // ------------------ transport --------------------------
    
    transportProtocol = TransportProtocolAMQP {
        port = 8883,
        user = "user",
        password = "pwd"
    };
    
    serviceProtocol = ServiceProtocolAMQP {};
    
    // ------------------ resources/devicemgt ----------------
    
    deviceRegistry = BasicDeviceRegistry {
    };
    
    deviceMgtStorage = S3MockDeviceMgtStorage {
        host = "localhost",
        port = 9005,
        region = "local"
    };
    
    // go for installed S3 server or cloud
    deviceMgtStorageServer = S3MockDeviceMgtStorageServer {
        port = 9005
    };

    // ------------ data types ------------------
    
    EnumType myTestEnum = EnumType {
        name = "myTestEnum",
        literals = {
            EnumLiteral {
                name = "Lit1",
                ordinal = 25
            }, EnumLiteral {
                name = "Lit2",
                ordinal = 100
            }
        }
    };
    
    RecordType rec1 = {
        name = "Rec1",
        fields = {
            Field {
                name = "intField",
                type = refBy(IntegerType)
            }, Field {
                name = "stringField",
                type = refBy(StringType)
            }
        }
    };
    
    // ------------ individual, reusable services ------------------
        
    Service mySourceService = JavaService {
        id = "mySource",
        name = "mySource example",
        description = "",
        ver = "0.1.0",
        deployable = true,
        class = "MySourceImpl",
        artifact = "",
        kind = ServiceKind::SOURCE_SERVICE,
        output = {{type=refBy(StringType)}}
    };
    
    RecordType myConnMachineIn = {
        name = "myConnMachineIn",
        fields = {
            Field {
                name = "dataField",
                type = refBy(StringType)
            }, Field {
                name = "axis",
                type = refBy(IntegerType)
            }, Field {
                name = "cmdField",
                type = refBy(StringType)
            }
        }        
    };

    RecordType myConnMachineOut = {
        name = "myConnMachineOut",
        fields = {
            Field {
                name = "cmdField",
                type = refBy(StringType)
            }
        }        
    };
    
    RecordType myConnPltfIn = {
        name = "myConnPltfIn",
        fields = {
            Field {
                name = "axis",
                type = refBy(IntegerType)
            }, Field {
                name = "dataField",
                type = refBy(StringType)
            }
        }        
    };
    
    RecordType myConnPltfOut = {
        name = "myConnPltfOut",
        fields = {
            Field {
                name = "cmdField",
                type = refBy(StringType)
            }
        }        
    };
    
    
    OpcUaV1Connector myOpcUaConn = {
        id = "myOpcConn",
        name = "myOpcConn example",
        description = "",
        ver = "0.1.0",
        port = 1234, // default localhost
        
        input = {{type=refBy(myConnPltfOut)}}, // PRELIMINARY
        output = {{type=refBy(myConnPltfIn)}},
        inInterface = refBy(myConnMachineIn),
        outInterface = refBy(myConnMachineOut)
    };
    
    MqttV3Connector myMqttConn = {
        id = "myMqttConn",
        name = "myMqttConnExample",
        description = "",
        ver = "0.1.0",
        port = 4321, // default localhost
        
        input = {{type=refBy(StringType)}}, // PRELIMINARY
        output = {{type=refBy(myConnPltfIn)}},
        inChannel = "IN",
        outChannel = "OUT",
        inInterface = refBy(myConnMachineIn), 
        outInterface = refBy(myConnMachineOut),
        machineFormatter = JavaMachineFormatter{class="TextLineFormatter", converterClass="TextLineFormatter.TextLineFormatterConverter", artifact=""},
        machineParser = JavaMachineParser{class="JsonInputParser", converterClass="JsonInputParser.JsonInputConverter", resultClass="JsonInputParser.JsonParseResult", artifact=""}
    };

    Service myAnonymizerService = JavaService {
        id = "myAnonymizer",
        name = "myAnonymizer example",
        description = "",
        ver = "0.1.0",
        deployable = true,
        class = "MyAnonymizerImpl",
        artifact = "",
        kind = ServiceKind::TRANSFORMATION_SERVICE,
        input = {{type=refBy(StringType)}},
        output = {{type=refBy(rec1)}},
        parameter = {
          BooleanParameter {
            name="passThrough", 
            defaultValue=false
          }
        }
    };

    Service myKiService = JavaService {
        id = "myKi",
        name = "myKi example",
        description = "",
        ver = "0.1.0",
        asynchronous = false,
        deployable = true,
        class = "MyKiImpl",
        artifact = "",
        kind = ServiceKind::TRANSFORMATION_SERVICE,
        input = {{type=refBy(rec1)}},
        output = {{type=refBy(StringType)}},
        parameter = {
          IntegerParameter {
            name="threshold", 
            defaultValue=15
          }
        }
    };
    
    // fixed for now, becomes generic with advanced integration    
    RecordType RtsaTestInput = {
        name = "RtsaTestInput",
        fields = {
            Field {
                name = "id",
                type = refBy(IntegerType)
            }, Field {
                name = "value1",
                type = refBy(DoubleType)
            }, Field {
                name = "value2",
                type = refBy(DoubleType)
            }
        }
    };

    // fixed for now, becomes generic with advanced integration    
    RecordType RtsaTestOutput = {
        name = "RtsaTestOutput",
        fields = {
            Field {
                name = "id",
                type = refBy(IntegerType)
            }, Field {
                name = "value1",
                type = refBy(DoubleType)
            }, Field {
                name = "value2",
                type = refBy(DoubleType)
            }, Field {
                name = "confidence",
                type = refBy(DoubleType)
            }, Field {
                name = "prediction",
                type = refBy(BooleanType)
            }
        }
    };    
    
    Service myRtsaService = RtsaService {
        // file name of RTSA is derived from rtsaVer, file name for instance in RTSA is derived from ver and service name
        id = "myRtsa",
        name = "myRtsa example",
        description = "Test RapidMiner RTSA integration",
        ver = "0.1.0",
        deployable = true,
        input = {{type=refBy(RtsaTestInput)}},
        output = {{type=refBy(RtsaTestOutput)}},
        path = "iip_basic/score_v1"
        // preliminary, no specific data here so far
    };
    
    Service myAasSinkService = TraceToAasService {
        id = "aasSink",
        name = "aasSink",
        description = "Test AAS sink",
        deployable = true,
        application = refBy(myApp),
        input = {{type=refBy(RtsaTestOutput)}}
    };

    // ------------ application and service nets ------------------
    
    Application myApp = {
        id = "myApp",
        name = "myApp example",
        ver = "0.1.0",
        description = "",
        services = {refBy(myMesh)},
        nameplateInfo = {
            manufacturerProductDesignation = "IIP-Ecosphere plattform test application@de",
            manufacturer = refBy(manufacturer_sse)}
    };
    
    ServiceMesh myMesh = {
        description = "initial service net",
        sources = {refBy(mySource), refBy(myOpcConn), refBy(myMqttC)}
    };
    
    MeshSource myOpcConn = {
       impl = refBy(myOpcUaConn)
    };

    MeshSource myMqttC = {
       impl = refBy(myMqttConn)
    };
    
    MeshSource mySource = {
        impl = refBy(mySourceService),
        next = {refBy(myConnMySourceMyAnonymizer)}
    };
    
    MeshConnector myConnMySourceMyAnonymizer = {
        name = "MySource->MyAnonymizer",
        next = refBy(myAnonymizer)
    };

    MeshProcessor myAnonymizer = {
        impl = refBy(myAnonymizerService),
        next = {refBy(myConnMyAnonymizerMyKi)}
    };

    MeshConnector myConnMyAnonymizerMyKi = {
        name = "MyAnonymizer->MyKi",
        next = refBy(myKi)
    };

    MeshProcessor myKi = {
        impl = refBy(myKiService),
        next = {refBy(myConnMyKiMyRtsa)}
    };

    MeshConnector myConnMyKiMyRtsa = {
        name = "MyKi->MyRtsa",
        next = refBy(myRtsa)
    };

    MeshProcessor myRtsa = {
        impl = refBy(myRtsaService),
        next = {refBy(myConnMyRtsaMyAasSink)}
    };

    MeshConnector myConnMyRtsaMyAasSink = {
        name = "MyRtsa->AasSink",
        next = refBy(myAasSink)
    };

    MeshSink myAasSink = {
        impl = refBy(myAasSinkService)
    };

    // ---------- generation setup ------------
    
    sharedInterfaces = true;
    // default sharedArtifact, not used in testing

    // ------------ freezing ------------------
    
    freeze {
        aas;
        aasServer;
        aasRegistryServer;
        aasImplServer;
        aasPersistency;
        aasProtocol;
        serializer;
        transportProtocol;
        serviceManager;
        serviceProtocol;
        containerManager;
        deviceMgtStorageServer;
        deviceMgtStorage;
        deviceRegistry;
        javaModuleOpts;
        javaOpts;
        pidDir;
        sharedInterfaces;
        sharedArtifact;
        .; // every variable declared in this project
    } but (f|f.bindingTime >= BindingTime.runtimeMon);

}