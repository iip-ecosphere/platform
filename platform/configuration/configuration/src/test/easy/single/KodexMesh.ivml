project KodexMesh {

    import CommonSetupNoMonUi;

    annotate BindingTime bindingTime = BindingTime::compile to .;
   
    // ------------ data types ------------------
    
    RecordType rec1 = {
        name = "KRec13",
        fields = {
            Field {
                name = "intField",
                type = refBy(IntegerType)
            }, Field {
                name = "stringField",
                type = refBy(StringType)
            }
        }
    };
    
    RecordType rec2 = {
        name = "KRec13Anon",
        fields = {
            Field {
                name = "kip", // shall be _kip!
                type = refBy(StringType)
            }, Field {
                name = "intField",
                type = refBy(IntegerType)
            }, Field {
                name = "stringField",
                type = refBy(StringType)
            }
        }
    };
    
    // ------------ individual, reusable services ------------------
        
    Service mySourceService = JavaService {
        id = "SimpleKodexSource",
        name = "Simple Kodex Data Source",
        description = "",
        ver = "0.1.0",
        deployable = true,
        asynchronous = false,
        class = "de.iip_ecosphere.platform.test.apps.serviceImpl.SimpleSourceKodexImpl",
        artifact = "de.iip-ecosphere.platform:apps.ServiceImpl:" + iipVer,
        kind = ServiceKind::SOURCE_SERVICE,
        output = {{type=refBy(rec1)}}
    };

    Service myKodexService = KodexService {
        id = "Pseudonymizer",
        name = "Kodex Pseudonymizer",
        description = "",
        deployable = true,
        input = {{type=refBy(rec1)}},
        output = {{type=refBy(rec2)}},
        actions = {{field=refBy(rec1.fields[1]), action=KodexAction::PseudonymizeMerengue}}
    };
    
    PythonService myPythonService = PythonService {
        id = "KodexPythonService",
        name = "Kodex Python Service",
        description = "",
        ver = "0.1.0",
        deployable = true,
        condaEnv = "myGPU",
        asynchronous = false, // usually true, test false here
        input = {{type=refBy(rec2)}},
        output = {{type=refBy(rec2)}},
        artifact = "de.iip-ecosphere.platform:apps.ServiceImpl:" + iipVer,
        parameter = {
          BooleanParameter {
            name="passThrough", 
            defaultValue=false,
            systemProperty="iip.app.sc1.passThrough"
          }, StringParameter {
            name="sParam",
            defaultValue="abc"
          }
        }, 
        artifacts = {"myArtifact.zip"}
    };
    
    Service myReceiverService = JavaService {
        id = "KodexReceiver",
        name = "Kodex Data Receiver",
        description = "",
        ver = "0.1.0",
        deployable = true,
        class = "de.iip_ecosphere.platform.test.apps.serviceImpl.KodexReceiverImpl",
        artifact = "de.iip-ecosphere.platform:apps.ServiceImpl:" + iipVer,
        kind = ServiceKind::SINK_SERVICE,
        input = {{type=refBy(rec2)}}
    };

    // ------------ application and service nets ------------------
    
    Application myApp = {
        id = "KodexMeshApp",
        name = "Simple Kodex Testing App",
        ver = "0.1.0",
        description = "",
        services = {refBy(myMesh)}        
    };
    
    ServiceMesh myMesh = {
        description = "initial service net",
        sources = {refBy(mySource)}
    };
    
    MeshSource mySource = {
        pollInterval = 800, // only if source is synchronous
        impl = refBy(mySourceService),
        next = {refBy(myConnMySourceMyTransformer)}
    };
    
    MeshConnector myConnMySourceMyTransformer = {
        name = "Source->Kodex",
        next = refBy(myTransformer)
    };

    MeshProcessor myTransformer = {
        impl = refBy(myKodexService),
        next = {refBy(myConnMyTransformerMyPython)},
        ensemble = refBy(mySource)
    };

    MeshConnector myConnMyTransformerMyPython = {
        name = "Kodex->Python",
        next = refBy(myPython)
    };

    MeshProcessor myPython = {
        impl = refBy(myPythonService),
        next = {refBy(myConnMyPythonMyReceiver)}
    };

    MeshConnector myConnMyPythonMyReceiver = {
        name = "Python->Receiver",
        next = refBy(myReceiver)
    };

    MeshSink myReceiver = {
        impl = refBy(myReceiverService)
    };
    
    // ---------- generation setup ------------
    
    containerGeneration = false;
    sharedInterfaces = true;
    sharedArtifact = "de.iip-ecosphere.platform:apps.AppInterfacesKodex:" + iipVer; // for testing all-in-one

    // ------------ freezing ------------------
    
    freeze {
        sharedInterfaces;
        sharedArtifact;
        containerGeneration;
        .; // every variable declared in this project
    } but (f|f.bindingTime >= BindingTime.runtimeMon);

}