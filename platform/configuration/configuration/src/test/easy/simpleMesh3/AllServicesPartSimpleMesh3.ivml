project AllServicesPartSimpleMesh3 {

    import AllTypes; 
    
    annotate BindingTime bindingTime = BindingTime::compile to .;

    // --------- state machine ---------------------------------

    RecordType TurnstilePlcOutput = {
        name = "TurnstilePlcOutput",
        fields = {
            Field {
                name = "insertCoin",
                type = refBy(BooleanType),
                cachingTime = CACHE_NONE
            }, Field {
                name = "push",
                type = refBy(BooleanType),
                cachingTime = CACHE_NONE
            }, Field {
                name = "money",
                type = refBy(DoubleType),
                cachingTime = CACHE_NONE
            }, Field {
                name = "ready",
                type = refBy(BooleanType),
                cachingTime = CACHE_NONE
            }
        }
    };
    
    Event insertCoin = {
        field = DataFieldAccess{field=refBy(TurnstilePlcOutput.fields[0])}
    };
    
    Event push = {
        field = DataFieldAccess{field=refBy(TurnstilePlcOutput.fields[1])},
    };
    
    State unlocked = {
        id = "unlocked",
        transitions = {refBy(unlockedInsertCoin), refBy(unlockedPush)},
        onEntry = {"unlockedAction"}
    };
    
    State locked = {
        id = "locked",
        onEntry ={"lockedAction"},
        transitions = {refBy(lockedInsertCoin), refBy(lockedPush)}
    };
    
    Transition lockedInsertCoin = {
        id = "lockedInsertCoin",
        event = refBy(insertCoin),
        log = "inserting a coin in locked state -> unlocking the tile",
        target = refBy(unlocked),
        condition = BooleanCondition {
            field = DataFieldAccess{field=refBy(TurnstilePlcOutput.fields[0])}
        } 
    };
    
    Transition lockedPush = {
        id = "lockedPush",
        event = refBy(push),
        log = "Pushing in locked state  -> no change",
        target = locked,
        condition = BooleanCondition {
            field = DataFieldAccess{field=refBy(TurnstilePlcOutput.fields[1])}
        } 
    };
    
    Transition unlockedInsertCoin = {
        id = "unlockedInsertCoin",
        event = refBy(insertCoin),
        target = refBy(unlocked),
        log = "Inserting a coin in unlocked state -> no change",
        /*condition = BooleanCondition {
            field = DataFieldAccess{field=refBy(TurnstilePlcOutput.fields[2])}
        }*/
        condition = EqualsCondition { // 3 = 3
            leftOperand = DataFieldAccess{field=refBy(TurnstilePlcOutput.fields[2])},
            rightOperand = IntegerConstantDataOperation{value=3} 
        }
    };
    
    Transition unlockedPush = {
        id = "unlockedPush",
        event = refBy(push),
        target= refBy(locked),
        log = "Pushing in unlocked state -> push successful",
        condition = BooleanCondition {
            field = DataFieldAccess{field=refBy(TurnstilePlcOutput.fields[3])}
        } 
    };
    
    StateMachine Turnstile = {
        id = "Turnstile",
        states = {refBy(locked), refBy(unlocked)},
        input = refBy(TurnstilePlcOutput)
    };

    // --- services ---

    Service mySourceService = JavaService {
        id = "SimpleSource3",
        name = "Simple Data Source3",
        description = "",
        ver = "0.1.0",
        deployable = true,
        asynchronous = false,
        class = "de.iip_ecosphere.platform.test.apps.serviceImpl.SimpleSource3Impl",
        artifact = "de.iip-ecosphere.platform:apps.ServiceImpl:" + iipVer,
        kind = ServiceKind::SOURCE_SERVICE,
        output = {{type=refBy(rec1)}}
    };

    Service myTransformerService = JavaService {
        id = "SimpleTransformer3",
        name = "Simple Data Transformer3",
        description = "",
        ver = "0.1.0",
        deployable = true,
        asynchronous = false,
        class = "de.iip_ecosphere.platform.test.apps.serviceImpl.SimpleTransformer3Impl",
        artifact = "de.iip-ecosphere.platform:apps.ServiceImpl:" + iipVer,
        kind = ServiceKind::TRANSFORMATION_SERVICE,
        input = {{type=refBy(rec1)}},
        output = {{type=refBy(rec1)}}
    };
    
    Service myReceiverService = JavaService {
        id = "SimpleReceiver3",
        name = "Simple Data Receiver3",
        description = "",
        ver = "0.1.0",
        deployable = true,
        class = "de.iip_ecosphere.platform.test.apps.serviceImpl.SimpleReceiver3Impl",
        artifact = "de.iip-ecosphere.platform:apps.ServiceImpl:" + iipVer,
        kind = ServiceKind::SINK_SERVICE,
        input = {{type=refBy(TurnstilePlcOutput)}, {type=refBy(rec1)}},
        stateMachine = refBy(Turnstile)
    };

    // just the type for mgtUI testing    
    Server myServer = JavaServer {
      id = "myServer",
      description = "Unneeded server",
      ver = "0.0.1",
      host = "localhost",
      port = 9989,
      class = "java.lang.Object", // placeholder, will not work -> Server interface
      cmdArg = "--port=${port}"
    };
   
    freeze {
        .;
    }
}