project TechnicalSetup {

    import IIPEcosphere;
    import DataTypes; 
    import AllConstants;

    annotate BindingTime bindingTime = BindingTime::compile to .;

    String platformServer = "147.172.178.145";
    Integer mgtUiPort = 4200;

    // ------------ component setup ------------------

    serializer = Serializer::Json;
    // serviceManager, containerManager are already defined    
        
    aasServer = {
        schema = AasSchema::HTTP,
        port = 9001,
        host = platformServer
    };
    aasRegistryServer = {
        schema = AasSchema::HTTP,
        port = 9002,
        host = platformServer,
        path = "registry"
    };
    aasImplServer = {
        port = 9003 // of central server, ephemeral on devices
        // default host is 127.0.0.1 to be replaced by host IP if available
        // default netmask is empty, not selecting any network in case of multiple IP addresses
    };
    aasProtocol = AasProtocolVabTcp{};
    aasAccessControlAllowOrigin = "*";
    
    // ------------------ transport --------------------------
    
    transportProtocol = TransportProtocolAMQP {
        globalHost = platformServer,
        port = 8883,
        security = { // replaces user/password, requires identityStore.yml in src/test/ or src/main depeding on use
            authenticationKey = "amqp"
        }
    };
    
    serviceProtocol = ServiceProtocolAMQP {};
    
    // ------------------ resources/devicemgt ----------------
    
    deviceRegistry = BasicDeviceRegistry {
    };
    
    deviceMgtStorage = S3MockDeviceMgtStorage {
        host = "localhost",
        port = 9005,
        region = "local"
    };
    
    // go for installed S3 server or cloud, also NoDeviceMgtStorageServer for installed on
    deviceMgtStorageServer = S3MockDeviceMgtStorageServer {
        port = 9005
    };

    // --------------------- monitoring ---------------------------
    
    platformMonitoring = PrometheusPlatformMonitoring {
        schema = PrometheusSchema::HTTP,
        host = "127.0.0.1",
        port = 9090,
        running = false,
        exporterPort = -1, // ephemeral
        exporterHost = "127.0.0.1",
        exporterRunning = false,
        alertMgrPort = 9091,
        alertMgrHost = "127.0.0.1",
        alertMgrRunning = false,
        scrapeInterval = 1001,
        scrapeTimeout = 1000
    };
    
    // ------------------------- UI -------------------------------
    
    managementUi = AngularManagementUI {
        port = mgtUiPort
    };
    
    // ---------- generation setup ------------

    zipBinaries = true;
        
    containerGeneration = false;
    platformContainerGeneration = true;
    sharedInterfaces = true;
    //sharedArtifact = "de.iip-ecosphere.platform:apps.AppInterfacesSimpleMeshInstall:" + iipVer; // for testing all-in-one

    //setup instDir, javaExe if you plan to use the Linux service descriptors - list variables in freeze block
    modelBaseFolder = ".."; // base folder for metaModel folder and configFolder
    metaModelFolder = "target/easy";
    configFolder = "src/main/easy";
    genTarget = "../target/gen";
    artifactsUriPrefix = "http://" + platformServer + ":" + toString(mgtUiPort) + "/download";    

    // ------------ freezing ------------------
    
    freeze {
        aas;
        aasServer;
        aasRegistryServer;
        aasImplServer;
        aasPersistency;
        aasProtocol;
        aasAccessControlAllowOrigin;
        serializer;
        transportProtocol;
        serviceManager;
        serviceProtocol;
        containerManager;
        deviceMgtStorageServer;
        deviceMgtStorage;
        deviceRegistry;
        javaModuleOpts;
        javaOpts;
        pidDir;
        sharedInterfaces;
        sharedArtifact;
        platformMonitoring;
        managementUi;
        artifactsFolder;
        artifactsUriPrefix;
        zipBinaries;
        containerGeneration;
        platformContainerGeneration;
        modelBaseFolder;
        metaModelFolder;
        configFolder;
        genTarget;
        artifactsUriPrefix;
        platformPython;
        .; // every variable declared in this project
    } but (f|f.bindingTime >= BindingTime.runtimeMon);

}